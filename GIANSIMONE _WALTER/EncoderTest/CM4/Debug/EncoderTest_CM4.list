
EncoderTest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008078  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08108318  08108318  00018318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108734  08108734  00018734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810873c  0810873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08108740  08108740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  10000000  08108744  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000018c  100001f8  0810893c  000201f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10000384  0810893c  00020384  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016e65  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025d2  00000000  00000000  0003708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001168  00000000  00000000  00039660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001080  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b427  00000000  00000000  0003b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001587a  00000000  00000000  00076c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018a57c  00000000  00000000  0008c4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00216a65  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ab0  00000000  00000000  00216ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f8 	.word	0x100001f8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08108300 	.word	0x08108300

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001fc 	.word	0x100001fc
 81002dc:	08108300 	.word	0x08108300

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <__aeabi_uldivmod>:
 8100d58:	b953      	cbnz	r3, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5a:	b94a      	cbnz	r2, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5c:	2900      	cmp	r1, #0
 8100d5e:	bf08      	it	eq
 8100d60:	2800      	cmpeq	r0, #0
 8100d62:	bf1c      	itt	ne
 8100d64:	f04f 31ff 	movne.w	r1, #4294967295
 8100d68:	f04f 30ff 	movne.w	r0, #4294967295
 8100d6c:	f000 b974 	b.w	8101058 <__aeabi_idiv0>
 8100d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d78:	f000 f806 	bl	8100d88 <__udivmoddi4>
 8100d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d84:	b004      	add	sp, #16
 8100d86:	4770      	bx	lr

08100d88 <__udivmoddi4>:
 8100d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d8c:	9d08      	ldr	r5, [sp, #32]
 8100d8e:	4604      	mov	r4, r0
 8100d90:	468e      	mov	lr, r1
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	d14d      	bne.n	8100e32 <__udivmoddi4+0xaa>
 8100d96:	428a      	cmp	r2, r1
 8100d98:	4694      	mov	ip, r2
 8100d9a:	d969      	bls.n	8100e70 <__udivmoddi4+0xe8>
 8100d9c:	fab2 f282 	clz	r2, r2
 8100da0:	b152      	cbz	r2, 8100db8 <__udivmoddi4+0x30>
 8100da2:	fa01 f302 	lsl.w	r3, r1, r2
 8100da6:	f1c2 0120 	rsb	r1, r2, #32
 8100daa:	fa20 f101 	lsr.w	r1, r0, r1
 8100dae:	fa0c fc02 	lsl.w	ip, ip, r2
 8100db2:	ea41 0e03 	orr.w	lr, r1, r3
 8100db6:	4094      	lsls	r4, r2
 8100db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100dbc:	0c21      	lsrs	r1, r4, #16
 8100dbe:	fbbe f6f8 	udiv	r6, lr, r8
 8100dc2:	fa1f f78c 	uxth.w	r7, ip
 8100dc6:	fb08 e316 	mls	r3, r8, r6, lr
 8100dca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100dce:	fb06 f107 	mul.w	r1, r6, r7
 8100dd2:	4299      	cmp	r1, r3
 8100dd4:	d90a      	bls.n	8100dec <__udivmoddi4+0x64>
 8100dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8100dda:	f106 30ff 	add.w	r0, r6, #4294967295
 8100dde:	f080 811f 	bcs.w	8101020 <__udivmoddi4+0x298>
 8100de2:	4299      	cmp	r1, r3
 8100de4:	f240 811c 	bls.w	8101020 <__udivmoddi4+0x298>
 8100de8:	3e02      	subs	r6, #2
 8100dea:	4463      	add	r3, ip
 8100dec:	1a5b      	subs	r3, r3, r1
 8100dee:	b2a4      	uxth	r4, r4
 8100df0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100df4:	fb08 3310 	mls	r3, r8, r0, r3
 8100df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100dfc:	fb00 f707 	mul.w	r7, r0, r7
 8100e00:	42a7      	cmp	r7, r4
 8100e02:	d90a      	bls.n	8100e1a <__udivmoddi4+0x92>
 8100e04:	eb1c 0404 	adds.w	r4, ip, r4
 8100e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e0c:	f080 810a 	bcs.w	8101024 <__udivmoddi4+0x29c>
 8100e10:	42a7      	cmp	r7, r4
 8100e12:	f240 8107 	bls.w	8101024 <__udivmoddi4+0x29c>
 8100e16:	4464      	add	r4, ip
 8100e18:	3802      	subs	r0, #2
 8100e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100e1e:	1be4      	subs	r4, r4, r7
 8100e20:	2600      	movs	r6, #0
 8100e22:	b11d      	cbz	r5, 8100e2c <__udivmoddi4+0xa4>
 8100e24:	40d4      	lsrs	r4, r2
 8100e26:	2300      	movs	r3, #0
 8100e28:	e9c5 4300 	strd	r4, r3, [r5]
 8100e2c:	4631      	mov	r1, r6
 8100e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e32:	428b      	cmp	r3, r1
 8100e34:	d909      	bls.n	8100e4a <__udivmoddi4+0xc2>
 8100e36:	2d00      	cmp	r5, #0
 8100e38:	f000 80ef 	beq.w	810101a <__udivmoddi4+0x292>
 8100e3c:	2600      	movs	r6, #0
 8100e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8100e42:	4630      	mov	r0, r6
 8100e44:	4631      	mov	r1, r6
 8100e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e4a:	fab3 f683 	clz	r6, r3
 8100e4e:	2e00      	cmp	r6, #0
 8100e50:	d14a      	bne.n	8100ee8 <__udivmoddi4+0x160>
 8100e52:	428b      	cmp	r3, r1
 8100e54:	d302      	bcc.n	8100e5c <__udivmoddi4+0xd4>
 8100e56:	4282      	cmp	r2, r0
 8100e58:	f200 80f9 	bhi.w	810104e <__udivmoddi4+0x2c6>
 8100e5c:	1a84      	subs	r4, r0, r2
 8100e5e:	eb61 0303 	sbc.w	r3, r1, r3
 8100e62:	2001      	movs	r0, #1
 8100e64:	469e      	mov	lr, r3
 8100e66:	2d00      	cmp	r5, #0
 8100e68:	d0e0      	beq.n	8100e2c <__udivmoddi4+0xa4>
 8100e6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8100e6e:	e7dd      	b.n	8100e2c <__udivmoddi4+0xa4>
 8100e70:	b902      	cbnz	r2, 8100e74 <__udivmoddi4+0xec>
 8100e72:	deff      	udf	#255	; 0xff
 8100e74:	fab2 f282 	clz	r2, r2
 8100e78:	2a00      	cmp	r2, #0
 8100e7a:	f040 8092 	bne.w	8100fa2 <__udivmoddi4+0x21a>
 8100e7e:	eba1 010c 	sub.w	r1, r1, ip
 8100e82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e86:	fa1f fe8c 	uxth.w	lr, ip
 8100e8a:	2601      	movs	r6, #1
 8100e8c:	0c20      	lsrs	r0, r4, #16
 8100e8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100e92:	fb07 1113 	mls	r1, r7, r3, r1
 8100e96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100e9a:	fb0e f003 	mul.w	r0, lr, r3
 8100e9e:	4288      	cmp	r0, r1
 8100ea0:	d908      	bls.n	8100eb4 <__udivmoddi4+0x12c>
 8100ea2:	eb1c 0101 	adds.w	r1, ip, r1
 8100ea6:	f103 38ff 	add.w	r8, r3, #4294967295
 8100eaa:	d202      	bcs.n	8100eb2 <__udivmoddi4+0x12a>
 8100eac:	4288      	cmp	r0, r1
 8100eae:	f200 80cb 	bhi.w	8101048 <__udivmoddi4+0x2c0>
 8100eb2:	4643      	mov	r3, r8
 8100eb4:	1a09      	subs	r1, r1, r0
 8100eb6:	b2a4      	uxth	r4, r4
 8100eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ebc:	fb07 1110 	mls	r1, r7, r0, r1
 8100ec0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100ec4:	fb0e fe00 	mul.w	lr, lr, r0
 8100ec8:	45a6      	cmp	lr, r4
 8100eca:	d908      	bls.n	8100ede <__udivmoddi4+0x156>
 8100ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8100ed0:	f100 31ff 	add.w	r1, r0, #4294967295
 8100ed4:	d202      	bcs.n	8100edc <__udivmoddi4+0x154>
 8100ed6:	45a6      	cmp	lr, r4
 8100ed8:	f200 80bb 	bhi.w	8101052 <__udivmoddi4+0x2ca>
 8100edc:	4608      	mov	r0, r1
 8100ede:	eba4 040e 	sub.w	r4, r4, lr
 8100ee2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100ee6:	e79c      	b.n	8100e22 <__udivmoddi4+0x9a>
 8100ee8:	f1c6 0720 	rsb	r7, r6, #32
 8100eec:	40b3      	lsls	r3, r6
 8100eee:	fa22 fc07 	lsr.w	ip, r2, r7
 8100ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 8100ef6:	fa20 f407 	lsr.w	r4, r0, r7
 8100efa:	fa01 f306 	lsl.w	r3, r1, r6
 8100efe:	431c      	orrs	r4, r3
 8100f00:	40f9      	lsrs	r1, r7
 8100f02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100f06:	fa00 f306 	lsl.w	r3, r0, r6
 8100f0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8100f0e:	0c20      	lsrs	r0, r4, #16
 8100f10:	fa1f fe8c 	uxth.w	lr, ip
 8100f14:	fb09 1118 	mls	r1, r9, r8, r1
 8100f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f1c:	fb08 f00e 	mul.w	r0, r8, lr
 8100f20:	4288      	cmp	r0, r1
 8100f22:	fa02 f206 	lsl.w	r2, r2, r6
 8100f26:	d90b      	bls.n	8100f40 <__udivmoddi4+0x1b8>
 8100f28:	eb1c 0101 	adds.w	r1, ip, r1
 8100f2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8100f30:	f080 8088 	bcs.w	8101044 <__udivmoddi4+0x2bc>
 8100f34:	4288      	cmp	r0, r1
 8100f36:	f240 8085 	bls.w	8101044 <__udivmoddi4+0x2bc>
 8100f3a:	f1a8 0802 	sub.w	r8, r8, #2
 8100f3e:	4461      	add	r1, ip
 8100f40:	1a09      	subs	r1, r1, r0
 8100f42:	b2a4      	uxth	r4, r4
 8100f44:	fbb1 f0f9 	udiv	r0, r1, r9
 8100f48:	fb09 1110 	mls	r1, r9, r0, r1
 8100f4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100f50:	fb00 fe0e 	mul.w	lr, r0, lr
 8100f54:	458e      	cmp	lr, r1
 8100f56:	d908      	bls.n	8100f6a <__udivmoddi4+0x1e2>
 8100f58:	eb1c 0101 	adds.w	r1, ip, r1
 8100f5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f60:	d26c      	bcs.n	810103c <__udivmoddi4+0x2b4>
 8100f62:	458e      	cmp	lr, r1
 8100f64:	d96a      	bls.n	810103c <__udivmoddi4+0x2b4>
 8100f66:	3802      	subs	r0, #2
 8100f68:	4461      	add	r1, ip
 8100f6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100f6e:	fba0 9402 	umull	r9, r4, r0, r2
 8100f72:	eba1 010e 	sub.w	r1, r1, lr
 8100f76:	42a1      	cmp	r1, r4
 8100f78:	46c8      	mov	r8, r9
 8100f7a:	46a6      	mov	lr, r4
 8100f7c:	d356      	bcc.n	810102c <__udivmoddi4+0x2a4>
 8100f7e:	d053      	beq.n	8101028 <__udivmoddi4+0x2a0>
 8100f80:	b15d      	cbz	r5, 8100f9a <__udivmoddi4+0x212>
 8100f82:	ebb3 0208 	subs.w	r2, r3, r8
 8100f86:	eb61 010e 	sbc.w	r1, r1, lr
 8100f8a:	fa01 f707 	lsl.w	r7, r1, r7
 8100f8e:	fa22 f306 	lsr.w	r3, r2, r6
 8100f92:	40f1      	lsrs	r1, r6
 8100f94:	431f      	orrs	r7, r3
 8100f96:	e9c5 7100 	strd	r7, r1, [r5]
 8100f9a:	2600      	movs	r6, #0
 8100f9c:	4631      	mov	r1, r6
 8100f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fa2:	f1c2 0320 	rsb	r3, r2, #32
 8100fa6:	40d8      	lsrs	r0, r3
 8100fa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100fac:	fa21 f303 	lsr.w	r3, r1, r3
 8100fb0:	4091      	lsls	r1, r2
 8100fb2:	4301      	orrs	r1, r0
 8100fb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100fb8:	fa1f fe8c 	uxth.w	lr, ip
 8100fbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8100fc0:	fb07 3610 	mls	r6, r7, r0, r3
 8100fc4:	0c0b      	lsrs	r3, r1, #16
 8100fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100fca:	fb00 f60e 	mul.w	r6, r0, lr
 8100fce:	429e      	cmp	r6, r3
 8100fd0:	fa04 f402 	lsl.w	r4, r4, r2
 8100fd4:	d908      	bls.n	8100fe8 <__udivmoddi4+0x260>
 8100fd6:	eb1c 0303 	adds.w	r3, ip, r3
 8100fda:	f100 38ff 	add.w	r8, r0, #4294967295
 8100fde:	d22f      	bcs.n	8101040 <__udivmoddi4+0x2b8>
 8100fe0:	429e      	cmp	r6, r3
 8100fe2:	d92d      	bls.n	8101040 <__udivmoddi4+0x2b8>
 8100fe4:	3802      	subs	r0, #2
 8100fe6:	4463      	add	r3, ip
 8100fe8:	1b9b      	subs	r3, r3, r6
 8100fea:	b289      	uxth	r1, r1
 8100fec:	fbb3 f6f7 	udiv	r6, r3, r7
 8100ff0:	fb07 3316 	mls	r3, r7, r6, r3
 8100ff4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100ff8:	fb06 f30e 	mul.w	r3, r6, lr
 8100ffc:	428b      	cmp	r3, r1
 8100ffe:	d908      	bls.n	8101012 <__udivmoddi4+0x28a>
 8101000:	eb1c 0101 	adds.w	r1, ip, r1
 8101004:	f106 38ff 	add.w	r8, r6, #4294967295
 8101008:	d216      	bcs.n	8101038 <__udivmoddi4+0x2b0>
 810100a:	428b      	cmp	r3, r1
 810100c:	d914      	bls.n	8101038 <__udivmoddi4+0x2b0>
 810100e:	3e02      	subs	r6, #2
 8101010:	4461      	add	r1, ip
 8101012:	1ac9      	subs	r1, r1, r3
 8101014:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8101018:	e738      	b.n	8100e8c <__udivmoddi4+0x104>
 810101a:	462e      	mov	r6, r5
 810101c:	4628      	mov	r0, r5
 810101e:	e705      	b.n	8100e2c <__udivmoddi4+0xa4>
 8101020:	4606      	mov	r6, r0
 8101022:	e6e3      	b.n	8100dec <__udivmoddi4+0x64>
 8101024:	4618      	mov	r0, r3
 8101026:	e6f8      	b.n	8100e1a <__udivmoddi4+0x92>
 8101028:	454b      	cmp	r3, r9
 810102a:	d2a9      	bcs.n	8100f80 <__udivmoddi4+0x1f8>
 810102c:	ebb9 0802 	subs.w	r8, r9, r2
 8101030:	eb64 0e0c 	sbc.w	lr, r4, ip
 8101034:	3801      	subs	r0, #1
 8101036:	e7a3      	b.n	8100f80 <__udivmoddi4+0x1f8>
 8101038:	4646      	mov	r6, r8
 810103a:	e7ea      	b.n	8101012 <__udivmoddi4+0x28a>
 810103c:	4620      	mov	r0, r4
 810103e:	e794      	b.n	8100f6a <__udivmoddi4+0x1e2>
 8101040:	4640      	mov	r0, r8
 8101042:	e7d1      	b.n	8100fe8 <__udivmoddi4+0x260>
 8101044:	46d0      	mov	r8, sl
 8101046:	e77b      	b.n	8100f40 <__udivmoddi4+0x1b8>
 8101048:	3b02      	subs	r3, #2
 810104a:	4461      	add	r1, ip
 810104c:	e732      	b.n	8100eb4 <__udivmoddi4+0x12c>
 810104e:	4630      	mov	r0, r6
 8101050:	e709      	b.n	8100e66 <__udivmoddi4+0xde>
 8101052:	4464      	add	r4, ip
 8101054:	3802      	subs	r0, #2
 8101056:	e742      	b.n	8100ede <__udivmoddi4+0x156>

08101058 <__aeabi_idiv0>:
 8101058:	4770      	bx	lr
 810105a:	bf00      	nop

0810105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810105c:	b480      	push	{r7}
 810105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101060:	4b09      	ldr	r3, [pc, #36]	; (8101088 <SystemInit+0x2c>)
 8101062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101066:	4a08      	ldr	r2, [pc, #32]	; (8101088 <SystemInit+0x2c>)
 8101068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101070:	4b05      	ldr	r3, [pc, #20]	; (8101088 <SystemInit+0x2c>)
 8101072:	691b      	ldr	r3, [r3, #16]
 8101074:	4a04      	ldr	r2, [pc, #16]	; (8101088 <SystemInit+0x2c>)
 8101076:	f043 0310 	orr.w	r3, r3, #16
 810107a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810107c:	bf00      	nop
 810107e:	46bd      	mov	sp, r7
 8101080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101084:	4770      	bx	lr
 8101086:	bf00      	nop
 8101088:	e000ed00 	.word	0xe000ed00

0810108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810108e:	b085      	sub	sp, #20
 8101090:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101092:	4b82      	ldr	r3, [pc, #520]	; (810129c <main+0x210>)
 8101094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101098:	4a80      	ldr	r2, [pc, #512]	; (810129c <main+0x210>)
 810109a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810109e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010a2:	4b7e      	ldr	r3, [pc, #504]	; (810129c <main+0x210>)
 81010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81010ac:	607b      	str	r3, [r7, #4]
 81010ae:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81010b0:	2001      	movs	r0, #1
 81010b2:	f000 ffdd 	bl	8102070 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81010b6:	f001 f867 	bl	8102188 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81010ba:	2201      	movs	r2, #1
 81010bc:	2102      	movs	r1, #2
 81010be:	2000      	movs	r0, #0
 81010c0:	f000 ffe8 	bl	8102094 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81010c4:	4b76      	ldr	r3, [pc, #472]	; (81012a0 <main+0x214>)
 81010c6:	681b      	ldr	r3, [r3, #0]
 81010c8:	091b      	lsrs	r3, r3, #4
 81010ca:	f003 030f 	and.w	r3, r3, #15
 81010ce:	2b07      	cmp	r3, #7
 81010d0:	d108      	bne.n	81010e4 <main+0x58>
 81010d2:	4b74      	ldr	r3, [pc, #464]	; (81012a4 <main+0x218>)
 81010d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81010d8:	4a72      	ldr	r2, [pc, #456]	; (81012a4 <main+0x218>)
 81010da:	f043 0301 	orr.w	r3, r3, #1
 81010de:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81010e2:	e007      	b.n	81010f4 <main+0x68>
 81010e4:	4b6f      	ldr	r3, [pc, #444]	; (81012a4 <main+0x218>)
 81010e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81010ea:	4a6e      	ldr	r2, [pc, #440]	; (81012a4 <main+0x218>)
 81010ec:	f043 0301 	orr.w	r3, r3, #1
 81010f0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81010f4:	f000 fc60 	bl	81019b8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81010f8:	f000 f9ea 	bl	81014d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81010fc:	f000 f99c 	bl	8101438 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8101100:	f000 f8f6 	bl	81012f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8101104:	f000 f948 	bl	8101398 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8101108:	213c      	movs	r1, #60	; 0x3c
 810110a:	4867      	ldr	r0, [pc, #412]	; (81012a8 <main+0x21c>)
 810110c:	f002 ff00 	bl	8103f10 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8101110:	4866      	ldr	r0, [pc, #408]	; (81012ac <main+0x220>)
 8101112:	f002 fddf 	bl	8103cd4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  // Timer di 100 ms

	     if(flag_Tc == 1)
 8101116:	4b66      	ldr	r3, [pc, #408]	; (81012b0 <main+0x224>)
 8101118:	681b      	ldr	r3, [r3, #0]
 810111a:	2b01      	cmp	r3, #1
 810111c:	d1fb      	bne.n	8101116 <main+0x8a>
	     {
	    	 //flag_100ms = 0;
	    	 flag_Tc = 0;
 810111e:	4b64      	ldr	r3, [pc, #400]	; (81012b0 <main+0x224>)
 8101120:	2200      	movs	r2, #0
 8101122:	601a      	str	r2, [r3, #0]
	    	 counts = TIM2->CNT; //Prendo il valore
 8101124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8101128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810112a:	461a      	mov	r2, r3
 810112c:	4b61      	ldr	r3, [pc, #388]	; (81012b4 <main+0x228>)
 810112e:	601a      	str	r2, [r3, #0]
	    	 //printf("%d\r\n", counts);
	    	 //printf("------------\r\n");

	    	 //Angolo
	    	 delta_angle = (double)counts*360 / (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO);
 8101130:	4b60      	ldr	r3, [pc, #384]	; (81012b4 <main+0x228>)
 8101132:	681b      	ldr	r3, [r3, #0]
 8101134:	4618      	mov	r0, r3
 8101136:	f7ff fa7d 	bl	8100634 <__aeabi_i2d>
 810113a:	f04f 0200 	mov.w	r2, #0
 810113e:	4b5e      	ldr	r3, [pc, #376]	; (81012b8 <main+0x22c>)
 8101140:	f7ff fae2 	bl	8100708 <__aeabi_dmul>
 8101144:	4602      	mov	r2, r0
 8101146:	460b      	mov	r3, r1
 8101148:	4614      	mov	r4, r2
 810114a:	461d      	mov	r5, r3
 810114c:	4b5b      	ldr	r3, [pc, #364]	; (81012bc <main+0x230>)
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	4a5b      	ldr	r2, [pc, #364]	; (81012c0 <main+0x234>)
 8101152:	6812      	ldr	r2, [r2, #0]
 8101154:	fb02 f303 	mul.w	r3, r2, r3
 8101158:	4a5a      	ldr	r2, [pc, #360]	; (81012c4 <main+0x238>)
 810115a:	6812      	ldr	r2, [r2, #0]
 810115c:	fb02 f303 	mul.w	r3, r2, r3
 8101160:	4618      	mov	r0, r3
 8101162:	f7ff fa67 	bl	8100634 <__aeabi_i2d>
 8101166:	4602      	mov	r2, r0
 8101168:	460b      	mov	r3, r1
 810116a:	4620      	mov	r0, r4
 810116c:	4629      	mov	r1, r5
 810116e:	f7ff fbf5 	bl	810095c <__aeabi_ddiv>
 8101172:	4602      	mov	r2, r0
 8101174:	460b      	mov	r3, r1
 8101176:	4954      	ldr	r1, [pc, #336]	; (81012c8 <main+0x23c>)
 8101178:	e9c1 2300 	strd	r2, r3, [r1]
	    	 //Velocità
	    	 diff_angle = delta_angle - old_delta_angle;
 810117c:	4b52      	ldr	r3, [pc, #328]	; (81012c8 <main+0x23c>)
 810117e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101182:	4b52      	ldr	r3, [pc, #328]	; (81012cc <main+0x240>)
 8101184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101188:	f7ff f906 	bl	8100398 <__aeabi_dsub>
 810118c:	4602      	mov	r2, r0
 810118e:	460b      	mov	r3, r1
 8101190:	494f      	ldr	r1, [pc, #316]	; (81012d0 <main+0x244>)
 8101192:	e9c1 2300 	strd	r2, r3, [r1]
	    	 dir = (TIM2->CR1 & 0x0010)>>4; //0 = up, 1 = down
 8101196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810119a:	681b      	ldr	r3, [r3, #0]
 810119c:	091b      	lsrs	r3, r3, #4
 810119e:	f003 0301 	and.w	r3, r3, #1
 81011a2:	4a4c      	ldr	r2, [pc, #304]	; (81012d4 <main+0x248>)
 81011a4:	6013      	str	r3, [r2, #0]
	    	 if(dir == old_dir)
 81011a6:	4b4b      	ldr	r3, [pc, #300]	; (81012d4 <main+0x248>)
 81011a8:	681a      	ldr	r2, [r3, #0]
 81011aa:	4b4b      	ldr	r3, [pc, #300]	; (81012d8 <main+0x24c>)
 81011ac:	681b      	ldr	r3, [r3, #0]
 81011ae:	429a      	cmp	r2, r3
 81011b0:	d13a      	bne.n	8101228 <main+0x19c>
	    	 {
	    		 if(dir == 0 && diff_angle<0)
 81011b2:	4b48      	ldr	r3, [pc, #288]	; (81012d4 <main+0x248>)
 81011b4:	681b      	ldr	r3, [r3, #0]
 81011b6:	2b00      	cmp	r3, #0
 81011b8:	d119      	bne.n	81011ee <main+0x162>
 81011ba:	4b45      	ldr	r3, [pc, #276]	; (81012d0 <main+0x244>)
 81011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 81011c0:	f04f 0200 	mov.w	r2, #0
 81011c4:	f04f 0300 	mov.w	r3, #0
 81011c8:	f7ff fd10 	bl	8100bec <__aeabi_dcmplt>
 81011cc:	4603      	mov	r3, r0
 81011ce:	2b00      	cmp	r3, #0
 81011d0:	d00d      	beq.n	81011ee <main+0x162>
	    		 {
	    			 diff_angle = 360 + diff_angle;
 81011d2:	4b3f      	ldr	r3, [pc, #252]	; (81012d0 <main+0x244>)
 81011d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 81011d8:	f04f 0200 	mov.w	r2, #0
 81011dc:	4b36      	ldr	r3, [pc, #216]	; (81012b8 <main+0x22c>)
 81011de:	f7ff f8dd 	bl	810039c <__adddf3>
 81011e2:	4602      	mov	r2, r0
 81011e4:	460b      	mov	r3, r1
 81011e6:	493a      	ldr	r1, [pc, #232]	; (81012d0 <main+0x244>)
 81011e8:	e9c1 2300 	strd	r2, r3, [r1]
 81011ec:	e01c      	b.n	8101228 <main+0x19c>
	    		 } else if (dir == 1 && diff_angle>0)
 81011ee:	4b39      	ldr	r3, [pc, #228]	; (81012d4 <main+0x248>)
 81011f0:	681b      	ldr	r3, [r3, #0]
 81011f2:	2b01      	cmp	r3, #1
 81011f4:	d118      	bne.n	8101228 <main+0x19c>
 81011f6:	4b36      	ldr	r3, [pc, #216]	; (81012d0 <main+0x244>)
 81011f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 81011fc:	f04f 0200 	mov.w	r2, #0
 8101200:	f04f 0300 	mov.w	r3, #0
 8101204:	f7ff fd10 	bl	8100c28 <__aeabi_dcmpgt>
 8101208:	4603      	mov	r3, r0
 810120a:	2b00      	cmp	r3, #0
 810120c:	d00c      	beq.n	8101228 <main+0x19c>
	    		 {
	    			 diff_angle = diff_angle - 360 ;
 810120e:	4b30      	ldr	r3, [pc, #192]	; (81012d0 <main+0x244>)
 8101210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101214:	f04f 0200 	mov.w	r2, #0
 8101218:	4b27      	ldr	r3, [pc, #156]	; (81012b8 <main+0x22c>)
 810121a:	f7ff f8bd 	bl	8100398 <__aeabi_dsub>
 810121e:	4602      	mov	r2, r0
 8101220:	460b      	mov	r3, r1
 8101222:	492b      	ldr	r1, [pc, #172]	; (81012d0 <main+0x244>)
 8101224:	e9c1 2300 	strd	r2, r3, [r1]
	    		 }
	    	 }
	    	 speed = diff_angle/dt ;
 8101228:	4b29      	ldr	r3, [pc, #164]	; (81012d0 <main+0x244>)
 810122a:	e9d3 0100 	ldrd	r0, r1, [r3]
 810122e:	4b2b      	ldr	r3, [pc, #172]	; (81012dc <main+0x250>)
 8101230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101234:	f7ff fb92 	bl	810095c <__aeabi_ddiv>
 8101238:	4602      	mov	r2, r0
 810123a:	460b      	mov	r3, r1
 810123c:	4610      	mov	r0, r2
 810123e:	4619      	mov	r1, r3
 8101240:	f7ff fd3a 	bl	8100cb8 <__aeabi_d2f>
 8101244:	4603      	mov	r3, r0
 8101246:	4a26      	ldr	r2, [pc, #152]	; (81012e0 <main+0x254>)
 8101248:	6013      	str	r3, [r2, #0]

	    	 old_delta_angle = delta_angle;
 810124a:	4b1f      	ldr	r3, [pc, #124]	; (81012c8 <main+0x23c>)
 810124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101250:	491e      	ldr	r1, [pc, #120]	; (81012cc <main+0x240>)
 8101252:	e9c1 2300 	strd	r2, r3, [r1]
	    	 old_dir = dir;
 8101256:	4b1f      	ldr	r3, [pc, #124]	; (81012d4 <main+0x248>)
 8101258:	681b      	ldr	r3, [r3, #0]
 810125a:	4a1f      	ldr	r2, [pc, #124]	; (81012d8 <main+0x24c>)
 810125c:	6013      	str	r3, [r2, #0]


	    	// printf("%f\r\n", speed*60/360);   // printf("%f\r\n", speed*60/360);

	    	 printf("%d;%f;%f\r\n",counts,delta_angle,speed*60/360);
 810125e:	4b15      	ldr	r3, [pc, #84]	; (81012b4 <main+0x228>)
 8101260:	681e      	ldr	r6, [r3, #0]
 8101262:	4b19      	ldr	r3, [pc, #100]	; (81012c8 <main+0x23c>)
 8101264:	e9d3 4500 	ldrd	r4, r5, [r3]
 8101268:	4b1d      	ldr	r3, [pc, #116]	; (81012e0 <main+0x254>)
 810126a:	edd3 7a00 	vldr	s15, [r3]
 810126e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 81012e4 <main+0x258>
 8101272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101276:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 81012e8 <main+0x25c>
 810127a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810127e:	ee16 0a90 	vmov	r0, s13
 8101282:	f7ff f9e9 	bl	8100658 <__aeabi_f2d>
 8101286:	4602      	mov	r2, r0
 8101288:	460b      	mov	r3, r1
 810128a:	e9cd 2300 	strd	r2, r3, [sp]
 810128e:	4622      	mov	r2, r4
 8101290:	462b      	mov	r3, r5
 8101292:	4631      	mov	r1, r6
 8101294:	4815      	ldr	r0, [pc, #84]	; (81012ec <main+0x260>)
 8101296:	f004 ff6d 	bl	8106174 <iprintf>
	     if(flag_Tc == 1)
 810129a:	e73c      	b.n	8101116 <main+0x8a>
 810129c:	58024400 	.word	0x58024400
 81012a0:	e000ed00 	.word	0xe000ed00
 81012a4:	58026400 	.word	0x58026400
 81012a8:	10000214 	.word	0x10000214
 81012ac:	10000260 	.word	0x10000260
 81012b0:	1000033c 	.word	0x1000033c
 81012b4:	10000340 	.word	0x10000340
 81012b8:	40768000 	.word	0x40768000
 81012bc:	10000008 	.word	0x10000008
 81012c0:	10000010 	.word	0x10000010
 81012c4:	1000000c 	.word	0x1000000c
 81012c8:	10000348 	.word	0x10000348
 81012cc:	10000360 	.word	0x10000360
 81012d0:	10000350 	.word	0x10000350
 81012d4:	10000358 	.word	0x10000358
 81012d8:	10000368 	.word	0x10000368
 81012dc:	10000018 	.word	0x10000018
 81012e0:	1000035c 	.word	0x1000035c
 81012e4:	42700000 	.word	0x42700000
 81012e8:	43b40000 	.word	0x43b40000
 81012ec:	08108318 	.word	0x08108318

081012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81012f0:	b580      	push	{r7, lr}
 81012f2:	b08c      	sub	sp, #48	; 0x30
 81012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81012f6:	f107 030c 	add.w	r3, r7, #12
 81012fa:	2224      	movs	r2, #36	; 0x24
 81012fc:	2100      	movs	r1, #0
 81012fe:	4618      	mov	r0, r3
 8101300:	f004 fac6 	bl	8105890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101304:	463b      	mov	r3, r7
 8101306:	2200      	movs	r2, #0
 8101308:	601a      	str	r2, [r3, #0]
 810130a:	605a      	str	r2, [r3, #4]
 810130c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810130e:	4b21      	ldr	r3, [pc, #132]	; (8101394 <MX_TIM2_Init+0xa4>)
 8101310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8101316:	4b1f      	ldr	r3, [pc, #124]	; (8101394 <MX_TIM2_Init+0xa4>)
 8101318:	2200      	movs	r2, #0
 810131a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810131c:	4b1d      	ldr	r3, [pc, #116]	; (8101394 <MX_TIM2_Init+0xa4>)
 810131e:	2200      	movs	r2, #0
 8101320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8101322:	4b1c      	ldr	r3, [pc, #112]	; (8101394 <MX_TIM2_Init+0xa4>)
 8101324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810132a:	4b1a      	ldr	r3, [pc, #104]	; (8101394 <MX_TIM2_Init+0xa4>)
 810132c:	2200      	movs	r2, #0
 810132e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101330:	4b18      	ldr	r3, [pc, #96]	; (8101394 <MX_TIM2_Init+0xa4>)
 8101332:	2200      	movs	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101336:	2303      	movs	r3, #3
 8101338:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810133a:	2300      	movs	r3, #0
 810133c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810133e:	2301      	movs	r3, #1
 8101340:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101342:	2300      	movs	r3, #0
 8101344:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8101346:	2300      	movs	r3, #0
 8101348:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810134a:	2300      	movs	r3, #0
 810134c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810134e:	2301      	movs	r3, #1
 8101350:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101352:	2300      	movs	r3, #0
 8101354:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101356:	2300      	movs	r3, #0
 8101358:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 810135a:	f107 030c 	add.w	r3, r7, #12
 810135e:	4619      	mov	r1, r3
 8101360:	480c      	ldr	r0, [pc, #48]	; (8101394 <MX_TIM2_Init+0xa4>)
 8101362:	f002 fd2f 	bl	8103dc4 <HAL_TIM_Encoder_Init>
 8101366:	4603      	mov	r3, r0
 8101368:	2b00      	cmp	r3, #0
 810136a:	d001      	beq.n	8101370 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 810136c:	f000 f8fa 	bl	8101564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101370:	2300      	movs	r3, #0
 8101372:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101374:	2300      	movs	r3, #0
 8101376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101378:	463b      	mov	r3, r7
 810137a:	4619      	mov	r1, r3
 810137c:	4805      	ldr	r0, [pc, #20]	; (8101394 <MX_TIM2_Init+0xa4>)
 810137e:	f003 f8c9 	bl	8104514 <HAL_TIMEx_MasterConfigSynchronization>
 8101382:	4603      	mov	r3, r0
 8101384:	2b00      	cmp	r3, #0
 8101386:	d001      	beq.n	810138c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8101388:	f000 f8ec 	bl	8101564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 810138c:	bf00      	nop
 810138e:	3730      	adds	r7, #48	; 0x30
 8101390:	46bd      	mov	sp, r7
 8101392:	bd80      	pop	{r7, pc}
 8101394:	10000214 	.word	0x10000214

08101398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8101398:	b580      	push	{r7, lr}
 810139a:	b088      	sub	sp, #32
 810139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810139e:	f107 0310 	add.w	r3, r7, #16
 81013a2:	2200      	movs	r2, #0
 81013a4:	601a      	str	r2, [r3, #0]
 81013a6:	605a      	str	r2, [r3, #4]
 81013a8:	609a      	str	r2, [r3, #8]
 81013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81013ac:	1d3b      	adds	r3, r7, #4
 81013ae:	2200      	movs	r2, #0
 81013b0:	601a      	str	r2, [r3, #0]
 81013b2:	605a      	str	r2, [r3, #4]
 81013b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81013b6:	4b1e      	ldr	r3, [pc, #120]	; (8101430 <MX_TIM3_Init+0x98>)
 81013b8:	4a1e      	ldr	r2, [pc, #120]	; (8101434 <MX_TIM3_Init+0x9c>)
 81013ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12000-1;
 81013bc:	4b1c      	ldr	r3, [pc, #112]	; (8101430 <MX_TIM3_Init+0x98>)
 81013be:	f642 62df 	movw	r2, #11999	; 0x2edf
 81013c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81013c4:	4b1a      	ldr	r3, [pc, #104]	; (8101430 <MX_TIM3_Init+0x98>)
 81013c6:	2200      	movs	r2, #0
 81013c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 81013ca:	4b19      	ldr	r3, [pc, #100]	; (8101430 <MX_TIM3_Init+0x98>)
 81013cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 81013d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81013d2:	4b17      	ldr	r3, [pc, #92]	; (8101430 <MX_TIM3_Init+0x98>)
 81013d4:	2200      	movs	r2, #0
 81013d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81013d8:	4b15      	ldr	r3, [pc, #84]	; (8101430 <MX_TIM3_Init+0x98>)
 81013da:	2200      	movs	r2, #0
 81013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81013de:	4814      	ldr	r0, [pc, #80]	; (8101430 <MX_TIM3_Init+0x98>)
 81013e0:	f002 fc20 	bl	8103c24 <HAL_TIM_Base_Init>
 81013e4:	4603      	mov	r3, r0
 81013e6:	2b00      	cmp	r3, #0
 81013e8:	d001      	beq.n	81013ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 81013ea:	f000 f8bb 	bl	8101564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81013f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81013f4:	f107 0310 	add.w	r3, r7, #16
 81013f8:	4619      	mov	r1, r3
 81013fa:	480d      	ldr	r0, [pc, #52]	; (8101430 <MX_TIM3_Init+0x98>)
 81013fc:	f002 fe36 	bl	810406c <HAL_TIM_ConfigClockSource>
 8101400:	4603      	mov	r3, r0
 8101402:	2b00      	cmp	r3, #0
 8101404:	d001      	beq.n	810140a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8101406:	f000 f8ad 	bl	8101564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810140a:	2300      	movs	r3, #0
 810140c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810140e:	2300      	movs	r3, #0
 8101410:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101412:	1d3b      	adds	r3, r7, #4
 8101414:	4619      	mov	r1, r3
 8101416:	4806      	ldr	r0, [pc, #24]	; (8101430 <MX_TIM3_Init+0x98>)
 8101418:	f003 f87c 	bl	8104514 <HAL_TIMEx_MasterConfigSynchronization>
 810141c:	4603      	mov	r3, r0
 810141e:	2b00      	cmp	r3, #0
 8101420:	d001      	beq.n	8101426 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8101422:	f000 f89f 	bl	8101564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8101426:	bf00      	nop
 8101428:	3720      	adds	r7, #32
 810142a:	46bd      	mov	sp, r7
 810142c:	bd80      	pop	{r7, pc}
 810142e:	bf00      	nop
 8101430:	10000260 	.word	0x10000260
 8101434:	40000400 	.word	0x40000400

08101438 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101438:	b580      	push	{r7, lr}
 810143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810143c:	4b22      	ldr	r3, [pc, #136]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 810143e:	4a23      	ldr	r2, [pc, #140]	; (81014cc <MX_USART3_UART_Init+0x94>)
 8101440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101442:	4b21      	ldr	r3, [pc, #132]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810144a:	4b1f      	ldr	r3, [pc, #124]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 810144c:	2200      	movs	r2, #0
 810144e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101450:	4b1d      	ldr	r3, [pc, #116]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101452:	2200      	movs	r2, #0
 8101454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101456:	4b1c      	ldr	r3, [pc, #112]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101458:	2200      	movs	r2, #0
 810145a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810145c:	4b1a      	ldr	r3, [pc, #104]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 810145e:	220c      	movs	r2, #12
 8101460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101462:	4b19      	ldr	r3, [pc, #100]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101464:	2200      	movs	r2, #0
 8101466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101468:	4b17      	ldr	r3, [pc, #92]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 810146a:	2200      	movs	r2, #0
 810146c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810146e:	4b16      	ldr	r3, [pc, #88]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101470:	2200      	movs	r2, #0
 8101472:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101474:	4b14      	ldr	r3, [pc, #80]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101476:	2200      	movs	r2, #0
 8101478:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810147a:	4b13      	ldr	r3, [pc, #76]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 810147c:	2200      	movs	r2, #0
 810147e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101480:	4811      	ldr	r0, [pc, #68]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101482:	f003 f8d5 	bl	8104630 <HAL_UART_Init>
 8101486:	4603      	mov	r3, r0
 8101488:	2b00      	cmp	r3, #0
 810148a:	d001      	beq.n	8101490 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810148c:	f000 f86a 	bl	8101564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101490:	2100      	movs	r1, #0
 8101492:	480d      	ldr	r0, [pc, #52]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 8101494:	f004 f908 	bl	81056a8 <HAL_UARTEx_SetTxFifoThreshold>
 8101498:	4603      	mov	r3, r0
 810149a:	2b00      	cmp	r3, #0
 810149c:	d001      	beq.n	81014a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810149e:	f000 f861 	bl	8101564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81014a2:	2100      	movs	r1, #0
 81014a4:	4808      	ldr	r0, [pc, #32]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 81014a6:	f004 f93d 	bl	8105724 <HAL_UARTEx_SetRxFifoThreshold>
 81014aa:	4603      	mov	r3, r0
 81014ac:	2b00      	cmp	r3, #0
 81014ae:	d001      	beq.n	81014b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81014b0:	f000 f858 	bl	8101564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81014b4:	4804      	ldr	r0, [pc, #16]	; (81014c8 <MX_USART3_UART_Init+0x90>)
 81014b6:	f004 f8be 	bl	8105636 <HAL_UARTEx_DisableFifoMode>
 81014ba:	4603      	mov	r3, r0
 81014bc:	2b00      	cmp	r3, #0
 81014be:	d001      	beq.n	81014c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81014c0:	f000 f850 	bl	8101564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81014c4:	bf00      	nop
 81014c6:	bd80      	pop	{r7, pc}
 81014c8:	100002ac 	.word	0x100002ac
 81014cc:	40004800 	.word	0x40004800

081014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81014d0:	b480      	push	{r7}
 81014d2:	b085      	sub	sp, #20
 81014d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81014d6:	4b19      	ldr	r3, [pc, #100]	; (810153c <MX_GPIO_Init+0x6c>)
 81014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014dc:	4a17      	ldr	r2, [pc, #92]	; (810153c <MX_GPIO_Init+0x6c>)
 81014de:	f043 0301 	orr.w	r3, r3, #1
 81014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014e6:	4b15      	ldr	r3, [pc, #84]	; (810153c <MX_GPIO_Init+0x6c>)
 81014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014ec:	f003 0301 	and.w	r3, r3, #1
 81014f0:	60fb      	str	r3, [r7, #12]
 81014f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81014f4:	4b11      	ldr	r3, [pc, #68]	; (810153c <MX_GPIO_Init+0x6c>)
 81014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014fa:	4a10      	ldr	r2, [pc, #64]	; (810153c <MX_GPIO_Init+0x6c>)
 81014fc:	f043 0308 	orr.w	r3, r3, #8
 8101500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101504:	4b0d      	ldr	r3, [pc, #52]	; (810153c <MX_GPIO_Init+0x6c>)
 8101506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810150a:	f003 0308 	and.w	r3, r3, #8
 810150e:	60bb      	str	r3, [r7, #8]
 8101510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101512:	4b0a      	ldr	r3, [pc, #40]	; (810153c <MX_GPIO_Init+0x6c>)
 8101514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101518:	4a08      	ldr	r2, [pc, #32]	; (810153c <MX_GPIO_Init+0x6c>)
 810151a:	f043 0302 	orr.w	r3, r3, #2
 810151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101522:	4b06      	ldr	r3, [pc, #24]	; (810153c <MX_GPIO_Init+0x6c>)
 8101524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101528:	f003 0302 	and.w	r3, r3, #2
 810152c:	607b      	str	r3, [r7, #4]
 810152e:	687b      	ldr	r3, [r7, #4]

}
 8101530:	bf00      	nop
 8101532:	3714      	adds	r7, #20
 8101534:	46bd      	mov	sp, r7
 8101536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153a:	4770      	bx	lr
 810153c:	58024400 	.word	0x58024400

08101540 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
  {
 8101540:	b580      	push	{r7, lr}
 8101542:	b082      	sub	sp, #8
 8101544:	af00      	add	r7, sp, #0
 8101546:	6078      	str	r0, [r7, #4]
     HAL_UART_Transmit(&huart3, (uint8_t *)&ch , 1 , 0xFFFF);
 8101548:	1d39      	adds	r1, r7, #4
 810154a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810154e:	2201      	movs	r2, #1
 8101550:	4803      	ldr	r0, [pc, #12]	; (8101560 <__io_putchar+0x20>)
 8101552:	f003 f8bd 	bl	81046d0 <HAL_UART_Transmit>
     return ch;
 8101556:	687b      	ldr	r3, [r7, #4]
  }
 8101558:	4618      	mov	r0, r3
 810155a:	3708      	adds	r7, #8
 810155c:	46bd      	mov	sp, r7
 810155e:	bd80      	pop	{r7, pc}
 8101560:	100002ac 	.word	0x100002ac

08101564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101564:	b480      	push	{r7}
 8101566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101568:	b672      	cpsid	i
}
 810156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810156c:	e7fe      	b.n	810156c <Error_Handler+0x8>
	...

08101570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101570:	b480      	push	{r7}
 8101572:	b083      	sub	sp, #12
 8101574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101576:	4b0a      	ldr	r3, [pc, #40]	; (81015a0 <HAL_MspInit+0x30>)
 8101578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810157c:	4a08      	ldr	r2, [pc, #32]	; (81015a0 <HAL_MspInit+0x30>)
 810157e:	f043 0302 	orr.w	r3, r3, #2
 8101582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101586:	4b06      	ldr	r3, [pc, #24]	; (81015a0 <HAL_MspInit+0x30>)
 8101588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810158c:	f003 0302 	and.w	r3, r3, #2
 8101590:	607b      	str	r3, [r7, #4]
 8101592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101594:	bf00      	nop
 8101596:	370c      	adds	r7, #12
 8101598:	46bd      	mov	sp, r7
 810159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810159e:	4770      	bx	lr
 81015a0:	58024400 	.word	0x58024400

081015a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 81015a4:	b580      	push	{r7, lr}
 81015a6:	b08a      	sub	sp, #40	; 0x28
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015ac:	f107 0314 	add.w	r3, r7, #20
 81015b0:	2200      	movs	r2, #0
 81015b2:	601a      	str	r2, [r3, #0]
 81015b4:	605a      	str	r2, [r3, #4]
 81015b6:	609a      	str	r2, [r3, #8]
 81015b8:	60da      	str	r2, [r3, #12]
 81015ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 81015bc:	687b      	ldr	r3, [r7, #4]
 81015be:	681b      	ldr	r3, [r3, #0]
 81015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81015c4:	d14c      	bne.n	8101660 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 81015c6:	4b28      	ldr	r3, [pc, #160]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 81015c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015cc:	4a26      	ldr	r2, [pc, #152]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 81015ce:	f043 0301 	orr.w	r3, r3, #1
 81015d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015d6:	4b24      	ldr	r3, [pc, #144]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 81015d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015dc:	f003 0301 	and.w	r3, r3, #1
 81015e0:	613b      	str	r3, [r7, #16]
 81015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015e4:	4b20      	ldr	r3, [pc, #128]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 81015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ea:	4a1f      	ldr	r2, [pc, #124]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 81015ec:	f043 0301 	orr.w	r3, r3, #1
 81015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015f4:	4b1c      	ldr	r3, [pc, #112]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 81015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015fa:	f003 0301 	and.w	r3, r3, #1
 81015fe:	60fb      	str	r3, [r7, #12]
 8101600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101602:	4b19      	ldr	r3, [pc, #100]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101608:	4a17      	ldr	r2, [pc, #92]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 810160a:	f043 0302 	orr.w	r3, r3, #2
 810160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101612:	4b15      	ldr	r3, [pc, #84]	; (8101668 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101618:	f003 0302 	and.w	r3, r3, #2
 810161c:	60bb      	str	r3, [r7, #8]
 810161e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101620:	2301      	movs	r3, #1
 8101622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101624:	2302      	movs	r3, #2
 8101626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101628:	2300      	movs	r3, #0
 810162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810162c:	2300      	movs	r3, #0
 810162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101630:	2301      	movs	r3, #1
 8101632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101634:	f107 0314 	add.w	r3, r7, #20
 8101638:	4619      	mov	r1, r3
 810163a:	480c      	ldr	r0, [pc, #48]	; (810166c <HAL_TIM_Encoder_MspInit+0xc8>)
 810163c:	f000 fb68 	bl	8101d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101640:	2308      	movs	r3, #8
 8101642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101644:	2302      	movs	r3, #2
 8101646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101648:	2300      	movs	r3, #0
 810164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810164c:	2300      	movs	r3, #0
 810164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101650:	2301      	movs	r3, #1
 8101652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101654:	f107 0314 	add.w	r3, r7, #20
 8101658:	4619      	mov	r1, r3
 810165a:	4805      	ldr	r0, [pc, #20]	; (8101670 <HAL_TIM_Encoder_MspInit+0xcc>)
 810165c:	f000 fb58 	bl	8101d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8101660:	bf00      	nop
 8101662:	3728      	adds	r7, #40	; 0x28
 8101664:	46bd      	mov	sp, r7
 8101666:	bd80      	pop	{r7, pc}
 8101668:	58024400 	.word	0x58024400
 810166c:	58020000 	.word	0x58020000
 8101670:	58020400 	.word	0x58020400

08101674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101674:	b480      	push	{r7}
 8101676:	b085      	sub	sp, #20
 8101678:	af00      	add	r7, sp, #0
 810167a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	4a0b      	ldr	r2, [pc, #44]	; (81016b0 <HAL_TIM_Base_MspInit+0x3c>)
 8101682:	4293      	cmp	r3, r2
 8101684:	d10e      	bne.n	81016a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101686:	4b0b      	ldr	r3, [pc, #44]	; (81016b4 <HAL_TIM_Base_MspInit+0x40>)
 8101688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810168c:	4a09      	ldr	r2, [pc, #36]	; (81016b4 <HAL_TIM_Base_MspInit+0x40>)
 810168e:	f043 0302 	orr.w	r3, r3, #2
 8101692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101696:	4b07      	ldr	r3, [pc, #28]	; (81016b4 <HAL_TIM_Base_MspInit+0x40>)
 8101698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810169c:	f003 0302 	and.w	r3, r3, #2
 81016a0:	60fb      	str	r3, [r7, #12]
 81016a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 81016a4:	bf00      	nop
 81016a6:	3714      	adds	r7, #20
 81016a8:	46bd      	mov	sp, r7
 81016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ae:	4770      	bx	lr
 81016b0:	40000400 	.word	0x40000400
 81016b4:	58024400 	.word	0x58024400

081016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	b0b8      	sub	sp, #224	; 0xe0
 81016bc:	af00      	add	r7, sp, #0
 81016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81016c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81016c4:	2200      	movs	r2, #0
 81016c6:	601a      	str	r2, [r3, #0]
 81016c8:	605a      	str	r2, [r3, #4]
 81016ca:	609a      	str	r2, [r3, #8]
 81016cc:	60da      	str	r2, [r3, #12]
 81016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016d0:	f107 0310 	add.w	r3, r7, #16
 81016d4:	22bc      	movs	r2, #188	; 0xbc
 81016d6:	2100      	movs	r1, #0
 81016d8:	4618      	mov	r0, r3
 81016da:	f004 f8d9 	bl	8105890 <memset>
  if(huart->Instance==USART3)
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	681b      	ldr	r3, [r3, #0]
 81016e2:	4a25      	ldr	r2, [pc, #148]	; (8101778 <HAL_UART_MspInit+0xc0>)
 81016e4:	4293      	cmp	r3, r2
 81016e6:	d142      	bne.n	810176e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81016e8:	2302      	movs	r3, #2
 81016ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81016ec:	2300      	movs	r3, #0
 81016ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016f2:	f107 0310 	add.w	r3, r7, #16
 81016f6:	4618      	mov	r0, r3
 81016f8:	f000 ff2c 	bl	8102554 <HAL_RCCEx_PeriphCLKConfig>
 81016fc:	4603      	mov	r3, r0
 81016fe:	2b00      	cmp	r3, #0
 8101700:	d001      	beq.n	8101706 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101702:	f7ff ff2f 	bl	8101564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101706:	4b1d      	ldr	r3, [pc, #116]	; (810177c <HAL_UART_MspInit+0xc4>)
 8101708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810170c:	4a1b      	ldr	r2, [pc, #108]	; (810177c <HAL_UART_MspInit+0xc4>)
 810170e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101712:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101716:	4b19      	ldr	r3, [pc, #100]	; (810177c <HAL_UART_MspInit+0xc4>)
 8101718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810171c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101720:	60fb      	str	r3, [r7, #12]
 8101722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101724:	4b15      	ldr	r3, [pc, #84]	; (810177c <HAL_UART_MspInit+0xc4>)
 8101726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810172a:	4a14      	ldr	r2, [pc, #80]	; (810177c <HAL_UART_MspInit+0xc4>)
 810172c:	f043 0308 	orr.w	r3, r3, #8
 8101730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101734:	4b11      	ldr	r3, [pc, #68]	; (810177c <HAL_UART_MspInit+0xc4>)
 8101736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810173a:	f003 0308 	and.w	r3, r3, #8
 810173e:	60bb      	str	r3, [r7, #8]
 8101740:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101742:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101746:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810174a:	2302      	movs	r3, #2
 810174c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101750:	2300      	movs	r3, #0
 8101752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101756:	2300      	movs	r3, #0
 8101758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810175c:	2307      	movs	r3, #7
 810175e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101762:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101766:	4619      	mov	r1, r3
 8101768:	4805      	ldr	r0, [pc, #20]	; (8101780 <HAL_UART_MspInit+0xc8>)
 810176a:	f000 fad1 	bl	8101d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810176e:	bf00      	nop
 8101770:	37e0      	adds	r7, #224	; 0xe0
 8101772:	46bd      	mov	sp, r7
 8101774:	bd80      	pop	{r7, pc}
 8101776:	bf00      	nop
 8101778:	40004800 	.word	0x40004800
 810177c:	58024400 	.word	0x58024400
 8101780:	58020c00 	.word	0x58020c00

08101784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101784:	b480      	push	{r7}
 8101786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101788:	e7fe      	b.n	8101788 <NMI_Handler+0x4>

0810178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810178a:	b480      	push	{r7}
 810178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810178e:	e7fe      	b.n	810178e <HardFault_Handler+0x4>

08101790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101790:	b480      	push	{r7}
 8101792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101794:	e7fe      	b.n	8101794 <MemManage_Handler+0x4>

08101796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101796:	b480      	push	{r7}
 8101798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810179a:	e7fe      	b.n	810179a <BusFault_Handler+0x4>

0810179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810179c:	b480      	push	{r7}
 810179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81017a0:	e7fe      	b.n	81017a0 <UsageFault_Handler+0x4>

081017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81017a2:	b480      	push	{r7}
 81017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81017a6:	bf00      	nop
 81017a8:	46bd      	mov	sp, r7
 81017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ae:	4770      	bx	lr

081017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81017b0:	b480      	push	{r7}
 81017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81017b4:	bf00      	nop
 81017b6:	46bd      	mov	sp, r7
 81017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017bc:	4770      	bx	lr

081017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81017be:	b480      	push	{r7}
 81017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81017c2:	bf00      	nop
 81017c4:	46bd      	mov	sp, r7
 81017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ca:	4770      	bx	lr

081017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81017cc:	b580      	push	{r7, lr}
 81017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81017d0:	f000 f986 	bl	8101ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81017d4:	bf00      	nop
 81017d6:	bd80      	pop	{r7, pc}

081017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81017d8:	b480      	push	{r7}
 81017da:	af00      	add	r7, sp, #0
	return 1;
 81017dc:	2301      	movs	r3, #1
}
 81017de:	4618      	mov	r0, r3
 81017e0:	46bd      	mov	sp, r7
 81017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e6:	4770      	bx	lr

081017e8 <_kill>:

int _kill(int pid, int sig)
{
 81017e8:	b580      	push	{r7, lr}
 81017ea:	b082      	sub	sp, #8
 81017ec:	af00      	add	r7, sp, #0
 81017ee:	6078      	str	r0, [r7, #4]
 81017f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81017f2:	f004 f823 	bl	810583c <__errno>
 81017f6:	4603      	mov	r3, r0
 81017f8:	2216      	movs	r2, #22
 81017fa:	601a      	str	r2, [r3, #0]
	return -1;
 81017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101800:	4618      	mov	r0, r3
 8101802:	3708      	adds	r7, #8
 8101804:	46bd      	mov	sp, r7
 8101806:	bd80      	pop	{r7, pc}

08101808 <_exit>:

void _exit (int status)
{
 8101808:	b580      	push	{r7, lr}
 810180a:	b082      	sub	sp, #8
 810180c:	af00      	add	r7, sp, #0
 810180e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101810:	f04f 31ff 	mov.w	r1, #4294967295
 8101814:	6878      	ldr	r0, [r7, #4]
 8101816:	f7ff ffe7 	bl	81017e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 810181a:	e7fe      	b.n	810181a <_exit+0x12>

0810181c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810181c:	b580      	push	{r7, lr}
 810181e:	b086      	sub	sp, #24
 8101820:	af00      	add	r7, sp, #0
 8101822:	60f8      	str	r0, [r7, #12]
 8101824:	60b9      	str	r1, [r7, #8]
 8101826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101828:	2300      	movs	r3, #0
 810182a:	617b      	str	r3, [r7, #20]
 810182c:	e00a      	b.n	8101844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810182e:	f3af 8000 	nop.w
 8101832:	4601      	mov	r1, r0
 8101834:	68bb      	ldr	r3, [r7, #8]
 8101836:	1c5a      	adds	r2, r3, #1
 8101838:	60ba      	str	r2, [r7, #8]
 810183a:	b2ca      	uxtb	r2, r1
 810183c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810183e:	697b      	ldr	r3, [r7, #20]
 8101840:	3301      	adds	r3, #1
 8101842:	617b      	str	r3, [r7, #20]
 8101844:	697a      	ldr	r2, [r7, #20]
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	429a      	cmp	r2, r3
 810184a:	dbf0      	blt.n	810182e <_read+0x12>
	}

return len;
 810184c:	687b      	ldr	r3, [r7, #4]
}
 810184e:	4618      	mov	r0, r3
 8101850:	3718      	adds	r7, #24
 8101852:	46bd      	mov	sp, r7
 8101854:	bd80      	pop	{r7, pc}

08101856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101856:	b580      	push	{r7, lr}
 8101858:	b086      	sub	sp, #24
 810185a:	af00      	add	r7, sp, #0
 810185c:	60f8      	str	r0, [r7, #12]
 810185e:	60b9      	str	r1, [r7, #8]
 8101860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101862:	2300      	movs	r3, #0
 8101864:	617b      	str	r3, [r7, #20]
 8101866:	e009      	b.n	810187c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101868:	68bb      	ldr	r3, [r7, #8]
 810186a:	1c5a      	adds	r2, r3, #1
 810186c:	60ba      	str	r2, [r7, #8]
 810186e:	781b      	ldrb	r3, [r3, #0]
 8101870:	4618      	mov	r0, r3
 8101872:	f7ff fe65 	bl	8101540 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101876:	697b      	ldr	r3, [r7, #20]
 8101878:	3301      	adds	r3, #1
 810187a:	617b      	str	r3, [r7, #20]
 810187c:	697a      	ldr	r2, [r7, #20]
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	429a      	cmp	r2, r3
 8101882:	dbf1      	blt.n	8101868 <_write+0x12>
	}
	return len;
 8101884:	687b      	ldr	r3, [r7, #4]
}
 8101886:	4618      	mov	r0, r3
 8101888:	3718      	adds	r7, #24
 810188a:	46bd      	mov	sp, r7
 810188c:	bd80      	pop	{r7, pc}

0810188e <_close>:

int _close(int file)
{
 810188e:	b480      	push	{r7}
 8101890:	b083      	sub	sp, #12
 8101892:	af00      	add	r7, sp, #0
 8101894:	6078      	str	r0, [r7, #4]
	return -1;
 8101896:	f04f 33ff 	mov.w	r3, #4294967295
}
 810189a:	4618      	mov	r0, r3
 810189c:	370c      	adds	r7, #12
 810189e:	46bd      	mov	sp, r7
 81018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a4:	4770      	bx	lr

081018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81018a6:	b480      	push	{r7}
 81018a8:	b083      	sub	sp, #12
 81018aa:	af00      	add	r7, sp, #0
 81018ac:	6078      	str	r0, [r7, #4]
 81018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81018b0:	683b      	ldr	r3, [r7, #0]
 81018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81018b6:	605a      	str	r2, [r3, #4]
	return 0;
 81018b8:	2300      	movs	r3, #0
}
 81018ba:	4618      	mov	r0, r3
 81018bc:	370c      	adds	r7, #12
 81018be:	46bd      	mov	sp, r7
 81018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c4:	4770      	bx	lr

081018c6 <_isatty>:

int _isatty(int file)
{
 81018c6:	b480      	push	{r7}
 81018c8:	b083      	sub	sp, #12
 81018ca:	af00      	add	r7, sp, #0
 81018cc:	6078      	str	r0, [r7, #4]
	return 1;
 81018ce:	2301      	movs	r3, #1
}
 81018d0:	4618      	mov	r0, r3
 81018d2:	370c      	adds	r7, #12
 81018d4:	46bd      	mov	sp, r7
 81018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018da:	4770      	bx	lr

081018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81018dc:	b480      	push	{r7}
 81018de:	b085      	sub	sp, #20
 81018e0:	af00      	add	r7, sp, #0
 81018e2:	60f8      	str	r0, [r7, #12]
 81018e4:	60b9      	str	r1, [r7, #8]
 81018e6:	607a      	str	r2, [r7, #4]
	return 0;
 81018e8:	2300      	movs	r3, #0
}
 81018ea:	4618      	mov	r0, r3
 81018ec:	3714      	adds	r7, #20
 81018ee:	46bd      	mov	sp, r7
 81018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f4:	4770      	bx	lr
	...

081018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81018f8:	b580      	push	{r7, lr}
 81018fa:	b086      	sub	sp, #24
 81018fc:	af00      	add	r7, sp, #0
 81018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101900:	4a14      	ldr	r2, [pc, #80]	; (8101954 <_sbrk+0x5c>)
 8101902:	4b15      	ldr	r3, [pc, #84]	; (8101958 <_sbrk+0x60>)
 8101904:	1ad3      	subs	r3, r2, r3
 8101906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101908:	697b      	ldr	r3, [r7, #20]
 810190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810190c:	4b13      	ldr	r3, [pc, #76]	; (810195c <_sbrk+0x64>)
 810190e:	681b      	ldr	r3, [r3, #0]
 8101910:	2b00      	cmp	r3, #0
 8101912:	d102      	bne.n	810191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101914:	4b11      	ldr	r3, [pc, #68]	; (810195c <_sbrk+0x64>)
 8101916:	4a12      	ldr	r2, [pc, #72]	; (8101960 <_sbrk+0x68>)
 8101918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810191a:	4b10      	ldr	r3, [pc, #64]	; (810195c <_sbrk+0x64>)
 810191c:	681a      	ldr	r2, [r3, #0]
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	4413      	add	r3, r2
 8101922:	693a      	ldr	r2, [r7, #16]
 8101924:	429a      	cmp	r2, r3
 8101926:	d207      	bcs.n	8101938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101928:	f003 ff88 	bl	810583c <__errno>
 810192c:	4603      	mov	r3, r0
 810192e:	220c      	movs	r2, #12
 8101930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101932:	f04f 33ff 	mov.w	r3, #4294967295
 8101936:	e009      	b.n	810194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101938:	4b08      	ldr	r3, [pc, #32]	; (810195c <_sbrk+0x64>)
 810193a:	681b      	ldr	r3, [r3, #0]
 810193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810193e:	4b07      	ldr	r3, [pc, #28]	; (810195c <_sbrk+0x64>)
 8101940:	681a      	ldr	r2, [r3, #0]
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	4413      	add	r3, r2
 8101946:	4a05      	ldr	r2, [pc, #20]	; (810195c <_sbrk+0x64>)
 8101948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810194a:	68fb      	ldr	r3, [r7, #12]
}
 810194c:	4618      	mov	r0, r3
 810194e:	3718      	adds	r7, #24
 8101950:	46bd      	mov	sp, r7
 8101952:	bd80      	pop	{r7, pc}
 8101954:	10048000 	.word	0x10048000
 8101958:	00000400 	.word	0x00000400
 810195c:	1000036c 	.word	0x1000036c
 8101960:	10000388 	.word	0x10000388

08101964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101964:	f8df d034 	ldr.w	sp, [pc, #52]	; 810199c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101968:	f7ff fb78 	bl	810105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810196c:	480c      	ldr	r0, [pc, #48]	; (81019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810196e:	490d      	ldr	r1, [pc, #52]	; (81019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101970:	4a0d      	ldr	r2, [pc, #52]	; (81019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101974:	e002      	b.n	810197c <LoopCopyDataInit>

08101976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810197a:	3304      	adds	r3, #4

0810197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101980:	d3f9      	bcc.n	8101976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101982:	4a0a      	ldr	r2, [pc, #40]	; (81019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101984:	4c0a      	ldr	r4, [pc, #40]	; (81019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101988:	e001      	b.n	810198e <LoopFillZerobss>

0810198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810198c:	3204      	adds	r2, #4

0810198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101990:	d3fb      	bcc.n	810198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101992:	f003 ff59 	bl	8105848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101996:	f7ff fb79 	bl	810108c <main>
  bx  lr
 810199a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810199c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81019a0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81019a4:	100001f8 	.word	0x100001f8
  ldr r2, =_sidata
 81019a8:	08108744 	.word	0x08108744
  ldr r2, =_sbss
 81019ac:	100001f8 	.word	0x100001f8
  ldr r4, =_ebss
 81019b0:	10000384 	.word	0x10000384

081019b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81019b4:	e7fe      	b.n	81019b4 <ADC3_IRQHandler>
	...

081019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81019b8:	b580      	push	{r7, lr}
 81019ba:	b082      	sub	sp, #8
 81019bc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81019be:	4b28      	ldr	r3, [pc, #160]	; (8101a60 <HAL_Init+0xa8>)
 81019c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81019c4:	4a26      	ldr	r2, [pc, #152]	; (8101a60 <HAL_Init+0xa8>)
 81019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81019ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81019ce:	4b24      	ldr	r3, [pc, #144]	; (8101a60 <HAL_Init+0xa8>)
 81019d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81019d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81019d8:	603b      	str	r3, [r7, #0]
 81019da:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81019dc:	4b21      	ldr	r3, [pc, #132]	; (8101a64 <HAL_Init+0xac>)
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81019e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81019e8:	4a1e      	ldr	r2, [pc, #120]	; (8101a64 <HAL_Init+0xac>)
 81019ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81019ee:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81019f0:	4b1c      	ldr	r3, [pc, #112]	; (8101a64 <HAL_Init+0xac>)
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	4a1b      	ldr	r2, [pc, #108]	; (8101a64 <HAL_Init+0xac>)
 81019f6:	f043 0301 	orr.w	r3, r3, #1
 81019fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81019fc:	2003      	movs	r0, #3
 81019fe:	f000 f941 	bl	8101c84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101a02:	f000 fbcf 	bl	81021a4 <HAL_RCC_GetSysClockFreq>
 8101a06:	4602      	mov	r2, r0
 8101a08:	4b15      	ldr	r3, [pc, #84]	; (8101a60 <HAL_Init+0xa8>)
 8101a0a:	699b      	ldr	r3, [r3, #24]
 8101a0c:	0a1b      	lsrs	r3, r3, #8
 8101a0e:	f003 030f 	and.w	r3, r3, #15
 8101a12:	4915      	ldr	r1, [pc, #84]	; (8101a68 <HAL_Init+0xb0>)
 8101a14:	5ccb      	ldrb	r3, [r1, r3]
 8101a16:	f003 031f 	and.w	r3, r3, #31
 8101a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8101a1e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a20:	4b0f      	ldr	r3, [pc, #60]	; (8101a60 <HAL_Init+0xa8>)
 8101a22:	699b      	ldr	r3, [r3, #24]
 8101a24:	f003 030f 	and.w	r3, r3, #15
 8101a28:	4a0f      	ldr	r2, [pc, #60]	; (8101a68 <HAL_Init+0xb0>)
 8101a2a:	5cd3      	ldrb	r3, [r2, r3]
 8101a2c:	f003 031f 	and.w	r3, r3, #31
 8101a30:	687a      	ldr	r2, [r7, #4]
 8101a32:	fa22 f303 	lsr.w	r3, r2, r3
 8101a36:	4a0d      	ldr	r2, [pc, #52]	; (8101a6c <HAL_Init+0xb4>)
 8101a38:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a3a:	4b0c      	ldr	r3, [pc, #48]	; (8101a6c <HAL_Init+0xb4>)
 8101a3c:	681b      	ldr	r3, [r3, #0]
 8101a3e:	4a0c      	ldr	r2, [pc, #48]	; (8101a70 <HAL_Init+0xb8>)
 8101a40:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101a42:	2000      	movs	r0, #0
 8101a44:	f000 f816 	bl	8101a74 <HAL_InitTick>
 8101a48:	4603      	mov	r3, r0
 8101a4a:	2b00      	cmp	r3, #0
 8101a4c:	d001      	beq.n	8101a52 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101a4e:	2301      	movs	r3, #1
 8101a50:	e002      	b.n	8101a58 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101a52:	f7ff fd8d 	bl	8101570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101a56:	2300      	movs	r3, #0
}
 8101a58:	4618      	mov	r0, r3
 8101a5a:	3708      	adds	r7, #8
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bd80      	pop	{r7, pc}
 8101a60:	58024400 	.word	0x58024400
 8101a64:	40024400 	.word	0x40024400
 8101a68:	08108324 	.word	0x08108324
 8101a6c:	10000004 	.word	0x10000004
 8101a70:	10000000 	.word	0x10000000

08101a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101a74:	b580      	push	{r7, lr}
 8101a76:	b082      	sub	sp, #8
 8101a78:	af00      	add	r7, sp, #0
 8101a7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101a7c:	4b15      	ldr	r3, [pc, #84]	; (8101ad4 <HAL_InitTick+0x60>)
 8101a7e:	781b      	ldrb	r3, [r3, #0]
 8101a80:	2b00      	cmp	r3, #0
 8101a82:	d101      	bne.n	8101a88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101a84:	2301      	movs	r3, #1
 8101a86:	e021      	b.n	8101acc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101a88:	4b13      	ldr	r3, [pc, #76]	; (8101ad8 <HAL_InitTick+0x64>)
 8101a8a:	681a      	ldr	r2, [r3, #0]
 8101a8c:	4b11      	ldr	r3, [pc, #68]	; (8101ad4 <HAL_InitTick+0x60>)
 8101a8e:	781b      	ldrb	r3, [r3, #0]
 8101a90:	4619      	mov	r1, r3
 8101a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8101a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	f000 f915 	bl	8101cce <HAL_SYSTICK_Config>
 8101aa4:	4603      	mov	r3, r0
 8101aa6:	2b00      	cmp	r3, #0
 8101aa8:	d001      	beq.n	8101aae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101aaa:	2301      	movs	r3, #1
 8101aac:	e00e      	b.n	8101acc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	2b0f      	cmp	r3, #15
 8101ab2:	d80a      	bhi.n	8101aca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101ab4:	2200      	movs	r2, #0
 8101ab6:	6879      	ldr	r1, [r7, #4]
 8101ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8101abc:	f000 f8ed 	bl	8101c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101ac0:	4a06      	ldr	r2, [pc, #24]	; (8101adc <HAL_InitTick+0x68>)
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101ac6:	2300      	movs	r3, #0
 8101ac8:	e000      	b.n	8101acc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101aca:	2301      	movs	r3, #1
}
 8101acc:	4618      	mov	r0, r3
 8101ace:	3708      	adds	r7, #8
 8101ad0:	46bd      	mov	sp, r7
 8101ad2:	bd80      	pop	{r7, pc}
 8101ad4:	10000024 	.word	0x10000024
 8101ad8:	10000000 	.word	0x10000000
 8101adc:	10000020 	.word	0x10000020

08101ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101ae0:	b480      	push	{r7}
 8101ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101ae4:	4b06      	ldr	r3, [pc, #24]	; (8101b00 <HAL_IncTick+0x20>)
 8101ae6:	781b      	ldrb	r3, [r3, #0]
 8101ae8:	461a      	mov	r2, r3
 8101aea:	4b06      	ldr	r3, [pc, #24]	; (8101b04 <HAL_IncTick+0x24>)
 8101aec:	681b      	ldr	r3, [r3, #0]
 8101aee:	4413      	add	r3, r2
 8101af0:	4a04      	ldr	r2, [pc, #16]	; (8101b04 <HAL_IncTick+0x24>)
 8101af2:	6013      	str	r3, [r2, #0]
}
 8101af4:	bf00      	nop
 8101af6:	46bd      	mov	sp, r7
 8101af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101afc:	4770      	bx	lr
 8101afe:	bf00      	nop
 8101b00:	10000024 	.word	0x10000024
 8101b04:	10000370 	.word	0x10000370

08101b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101b08:	b480      	push	{r7}
 8101b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8101b0c:	4b03      	ldr	r3, [pc, #12]	; (8101b1c <HAL_GetTick+0x14>)
 8101b0e:	681b      	ldr	r3, [r3, #0]
}
 8101b10:	4618      	mov	r0, r3
 8101b12:	46bd      	mov	sp, r7
 8101b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b18:	4770      	bx	lr
 8101b1a:	bf00      	nop
 8101b1c:	10000370 	.word	0x10000370

08101b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101b20:	b480      	push	{r7}
 8101b22:	b085      	sub	sp, #20
 8101b24:	af00      	add	r7, sp, #0
 8101b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101b28:	687b      	ldr	r3, [r7, #4]
 8101b2a:	f003 0307 	and.w	r3, r3, #7
 8101b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101b30:	4b0c      	ldr	r3, [pc, #48]	; (8101b64 <__NVIC_SetPriorityGrouping+0x44>)
 8101b32:	68db      	ldr	r3, [r3, #12]
 8101b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101b36:	68ba      	ldr	r2, [r7, #8]
 8101b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101b3c:	4013      	ands	r3, r2
 8101b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101b40:	68fb      	ldr	r3, [r7, #12]
 8101b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101b44:	68bb      	ldr	r3, [r7, #8]
 8101b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101b52:	4a04      	ldr	r2, [pc, #16]	; (8101b64 <__NVIC_SetPriorityGrouping+0x44>)
 8101b54:	68bb      	ldr	r3, [r7, #8]
 8101b56:	60d3      	str	r3, [r2, #12]
}
 8101b58:	bf00      	nop
 8101b5a:	3714      	adds	r7, #20
 8101b5c:	46bd      	mov	sp, r7
 8101b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b62:	4770      	bx	lr
 8101b64:	e000ed00 	.word	0xe000ed00

08101b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101b68:	b480      	push	{r7}
 8101b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101b6c:	4b04      	ldr	r3, [pc, #16]	; (8101b80 <__NVIC_GetPriorityGrouping+0x18>)
 8101b6e:	68db      	ldr	r3, [r3, #12]
 8101b70:	0a1b      	lsrs	r3, r3, #8
 8101b72:	f003 0307 	and.w	r3, r3, #7
}
 8101b76:	4618      	mov	r0, r3
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7e:	4770      	bx	lr
 8101b80:	e000ed00 	.word	0xe000ed00

08101b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101b84:	b480      	push	{r7}
 8101b86:	b083      	sub	sp, #12
 8101b88:	af00      	add	r7, sp, #0
 8101b8a:	4603      	mov	r3, r0
 8101b8c:	6039      	str	r1, [r7, #0]
 8101b8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b94:	2b00      	cmp	r3, #0
 8101b96:	db0a      	blt.n	8101bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101b98:	683b      	ldr	r3, [r7, #0]
 8101b9a:	b2da      	uxtb	r2, r3
 8101b9c:	490c      	ldr	r1, [pc, #48]	; (8101bd0 <__NVIC_SetPriority+0x4c>)
 8101b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ba2:	0112      	lsls	r2, r2, #4
 8101ba4:	b2d2      	uxtb	r2, r2
 8101ba6:	440b      	add	r3, r1
 8101ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101bac:	e00a      	b.n	8101bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101bae:	683b      	ldr	r3, [r7, #0]
 8101bb0:	b2da      	uxtb	r2, r3
 8101bb2:	4908      	ldr	r1, [pc, #32]	; (8101bd4 <__NVIC_SetPriority+0x50>)
 8101bb4:	88fb      	ldrh	r3, [r7, #6]
 8101bb6:	f003 030f 	and.w	r3, r3, #15
 8101bba:	3b04      	subs	r3, #4
 8101bbc:	0112      	lsls	r2, r2, #4
 8101bbe:	b2d2      	uxtb	r2, r2
 8101bc0:	440b      	add	r3, r1
 8101bc2:	761a      	strb	r2, [r3, #24]
}
 8101bc4:	bf00      	nop
 8101bc6:	370c      	adds	r7, #12
 8101bc8:	46bd      	mov	sp, r7
 8101bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bce:	4770      	bx	lr
 8101bd0:	e000e100 	.word	0xe000e100
 8101bd4:	e000ed00 	.word	0xe000ed00

08101bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101bd8:	b480      	push	{r7}
 8101bda:	b089      	sub	sp, #36	; 0x24
 8101bdc:	af00      	add	r7, sp, #0
 8101bde:	60f8      	str	r0, [r7, #12]
 8101be0:	60b9      	str	r1, [r7, #8]
 8101be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101be4:	68fb      	ldr	r3, [r7, #12]
 8101be6:	f003 0307 	and.w	r3, r3, #7
 8101bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101bec:	69fb      	ldr	r3, [r7, #28]
 8101bee:	f1c3 0307 	rsb	r3, r3, #7
 8101bf2:	2b04      	cmp	r3, #4
 8101bf4:	bf28      	it	cs
 8101bf6:	2304      	movcs	r3, #4
 8101bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101bfa:	69fb      	ldr	r3, [r7, #28]
 8101bfc:	3304      	adds	r3, #4
 8101bfe:	2b06      	cmp	r3, #6
 8101c00:	d902      	bls.n	8101c08 <NVIC_EncodePriority+0x30>
 8101c02:	69fb      	ldr	r3, [r7, #28]
 8101c04:	3b03      	subs	r3, #3
 8101c06:	e000      	b.n	8101c0a <NVIC_EncodePriority+0x32>
 8101c08:	2300      	movs	r3, #0
 8101c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8101c10:	69bb      	ldr	r3, [r7, #24]
 8101c12:	fa02 f303 	lsl.w	r3, r2, r3
 8101c16:	43da      	mvns	r2, r3
 8101c18:	68bb      	ldr	r3, [r7, #8]
 8101c1a:	401a      	ands	r2, r3
 8101c1c:	697b      	ldr	r3, [r7, #20]
 8101c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101c20:	f04f 31ff 	mov.w	r1, #4294967295
 8101c24:	697b      	ldr	r3, [r7, #20]
 8101c26:	fa01 f303 	lsl.w	r3, r1, r3
 8101c2a:	43d9      	mvns	r1, r3
 8101c2c:	687b      	ldr	r3, [r7, #4]
 8101c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101c30:	4313      	orrs	r3, r2
         );
}
 8101c32:	4618      	mov	r0, r3
 8101c34:	3724      	adds	r7, #36	; 0x24
 8101c36:	46bd      	mov	sp, r7
 8101c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c3c:	4770      	bx	lr
	...

08101c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101c40:	b580      	push	{r7, lr}
 8101c42:	b082      	sub	sp, #8
 8101c44:	af00      	add	r7, sp, #0
 8101c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	3b01      	subs	r3, #1
 8101c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101c50:	d301      	bcc.n	8101c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101c52:	2301      	movs	r3, #1
 8101c54:	e00f      	b.n	8101c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101c56:	4a0a      	ldr	r2, [pc, #40]	; (8101c80 <SysTick_Config+0x40>)
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	3b01      	subs	r3, #1
 8101c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101c5e:	210f      	movs	r1, #15
 8101c60:	f04f 30ff 	mov.w	r0, #4294967295
 8101c64:	f7ff ff8e 	bl	8101b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101c68:	4b05      	ldr	r3, [pc, #20]	; (8101c80 <SysTick_Config+0x40>)
 8101c6a:	2200      	movs	r2, #0
 8101c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101c6e:	4b04      	ldr	r3, [pc, #16]	; (8101c80 <SysTick_Config+0x40>)
 8101c70:	2207      	movs	r2, #7
 8101c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101c74:	2300      	movs	r3, #0
}
 8101c76:	4618      	mov	r0, r3
 8101c78:	3708      	adds	r7, #8
 8101c7a:	46bd      	mov	sp, r7
 8101c7c:	bd80      	pop	{r7, pc}
 8101c7e:	bf00      	nop
 8101c80:	e000e010 	.word	0xe000e010

08101c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101c84:	b580      	push	{r7, lr}
 8101c86:	b082      	sub	sp, #8
 8101c88:	af00      	add	r7, sp, #0
 8101c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101c8c:	6878      	ldr	r0, [r7, #4]
 8101c8e:	f7ff ff47 	bl	8101b20 <__NVIC_SetPriorityGrouping>
}
 8101c92:	bf00      	nop
 8101c94:	3708      	adds	r7, #8
 8101c96:	46bd      	mov	sp, r7
 8101c98:	bd80      	pop	{r7, pc}

08101c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101c9a:	b580      	push	{r7, lr}
 8101c9c:	b086      	sub	sp, #24
 8101c9e:	af00      	add	r7, sp, #0
 8101ca0:	4603      	mov	r3, r0
 8101ca2:	60b9      	str	r1, [r7, #8]
 8101ca4:	607a      	str	r2, [r7, #4]
 8101ca6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ca8:	f7ff ff5e 	bl	8101b68 <__NVIC_GetPriorityGrouping>
 8101cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101cae:	687a      	ldr	r2, [r7, #4]
 8101cb0:	68b9      	ldr	r1, [r7, #8]
 8101cb2:	6978      	ldr	r0, [r7, #20]
 8101cb4:	f7ff ff90 	bl	8101bd8 <NVIC_EncodePriority>
 8101cb8:	4602      	mov	r2, r0
 8101cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101cbe:	4611      	mov	r1, r2
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f7ff ff5f 	bl	8101b84 <__NVIC_SetPriority>
}
 8101cc6:	bf00      	nop
 8101cc8:	3718      	adds	r7, #24
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	bd80      	pop	{r7, pc}

08101cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101cce:	b580      	push	{r7, lr}
 8101cd0:	b082      	sub	sp, #8
 8101cd2:	af00      	add	r7, sp, #0
 8101cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101cd6:	6878      	ldr	r0, [r7, #4]
 8101cd8:	f7ff ffb2 	bl	8101c40 <SysTick_Config>
 8101cdc:	4603      	mov	r3, r0
}
 8101cde:	4618      	mov	r0, r3
 8101ce0:	3708      	adds	r7, #8
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	bd80      	pop	{r7, pc}
	...

08101ce8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101ce8:	b480      	push	{r7}
 8101cea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101cec:	4b07      	ldr	r3, [pc, #28]	; (8101d0c <HAL_GetCurrentCPUID+0x24>)
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	091b      	lsrs	r3, r3, #4
 8101cf2:	f003 030f 	and.w	r3, r3, #15
 8101cf6:	2b07      	cmp	r3, #7
 8101cf8:	d101      	bne.n	8101cfe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101cfa:	2303      	movs	r3, #3
 8101cfc:	e000      	b.n	8101d00 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101cfe:	2301      	movs	r3, #1
  }
}
 8101d00:	4618      	mov	r0, r3
 8101d02:	46bd      	mov	sp, r7
 8101d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d08:	4770      	bx	lr
 8101d0a:	bf00      	nop
 8101d0c:	e000ed00 	.word	0xe000ed00

08101d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101d10:	b480      	push	{r7}
 8101d12:	b089      	sub	sp, #36	; 0x24
 8101d14:	af00      	add	r7, sp, #0
 8101d16:	6078      	str	r0, [r7, #4]
 8101d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101d1a:	2300      	movs	r3, #0
 8101d1c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101d1e:	4b89      	ldr	r3, [pc, #548]	; (8101f44 <HAL_GPIO_Init+0x234>)
 8101d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101d22:	e194      	b.n	810204e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101d24:	683b      	ldr	r3, [r7, #0]
 8101d26:	681a      	ldr	r2, [r3, #0]
 8101d28:	2101      	movs	r1, #1
 8101d2a:	69fb      	ldr	r3, [r7, #28]
 8101d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8101d30:	4013      	ands	r3, r2
 8101d32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101d34:	693b      	ldr	r3, [r7, #16]
 8101d36:	2b00      	cmp	r3, #0
 8101d38:	f000 8186 	beq.w	8102048 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101d3c:	683b      	ldr	r3, [r7, #0]
 8101d3e:	685b      	ldr	r3, [r3, #4]
 8101d40:	f003 0303 	and.w	r3, r3, #3
 8101d44:	2b01      	cmp	r3, #1
 8101d46:	d005      	beq.n	8101d54 <HAL_GPIO_Init+0x44>
 8101d48:	683b      	ldr	r3, [r7, #0]
 8101d4a:	685b      	ldr	r3, [r3, #4]
 8101d4c:	f003 0303 	and.w	r3, r3, #3
 8101d50:	2b02      	cmp	r3, #2
 8101d52:	d130      	bne.n	8101db6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	689b      	ldr	r3, [r3, #8]
 8101d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101d5a:	69fb      	ldr	r3, [r7, #28]
 8101d5c:	005b      	lsls	r3, r3, #1
 8101d5e:	2203      	movs	r2, #3
 8101d60:	fa02 f303 	lsl.w	r3, r2, r3
 8101d64:	43db      	mvns	r3, r3
 8101d66:	69ba      	ldr	r2, [r7, #24]
 8101d68:	4013      	ands	r3, r2
 8101d6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101d6c:	683b      	ldr	r3, [r7, #0]
 8101d6e:	68da      	ldr	r2, [r3, #12]
 8101d70:	69fb      	ldr	r3, [r7, #28]
 8101d72:	005b      	lsls	r3, r3, #1
 8101d74:	fa02 f303 	lsl.w	r3, r2, r3
 8101d78:	69ba      	ldr	r2, [r7, #24]
 8101d7a:	4313      	orrs	r3, r2
 8101d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	69ba      	ldr	r2, [r7, #24]
 8101d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	685b      	ldr	r3, [r3, #4]
 8101d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101d8a:	2201      	movs	r2, #1
 8101d8c:	69fb      	ldr	r3, [r7, #28]
 8101d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8101d92:	43db      	mvns	r3, r3
 8101d94:	69ba      	ldr	r2, [r7, #24]
 8101d96:	4013      	ands	r3, r2
 8101d98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101d9a:	683b      	ldr	r3, [r7, #0]
 8101d9c:	685b      	ldr	r3, [r3, #4]
 8101d9e:	091b      	lsrs	r3, r3, #4
 8101da0:	f003 0201 	and.w	r2, r3, #1
 8101da4:	69fb      	ldr	r3, [r7, #28]
 8101da6:	fa02 f303 	lsl.w	r3, r2, r3
 8101daa:	69ba      	ldr	r2, [r7, #24]
 8101dac:	4313      	orrs	r3, r2
 8101dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	69ba      	ldr	r2, [r7, #24]
 8101db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101db6:	683b      	ldr	r3, [r7, #0]
 8101db8:	685b      	ldr	r3, [r3, #4]
 8101dba:	f003 0303 	and.w	r3, r3, #3
 8101dbe:	2b03      	cmp	r3, #3
 8101dc0:	d017      	beq.n	8101df2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	68db      	ldr	r3, [r3, #12]
 8101dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101dc8:	69fb      	ldr	r3, [r7, #28]
 8101dca:	005b      	lsls	r3, r3, #1
 8101dcc:	2203      	movs	r2, #3
 8101dce:	fa02 f303 	lsl.w	r3, r2, r3
 8101dd2:	43db      	mvns	r3, r3
 8101dd4:	69ba      	ldr	r2, [r7, #24]
 8101dd6:	4013      	ands	r3, r2
 8101dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101dda:	683b      	ldr	r3, [r7, #0]
 8101ddc:	689a      	ldr	r2, [r3, #8]
 8101dde:	69fb      	ldr	r3, [r7, #28]
 8101de0:	005b      	lsls	r3, r3, #1
 8101de2:	fa02 f303 	lsl.w	r3, r2, r3
 8101de6:	69ba      	ldr	r2, [r7, #24]
 8101de8:	4313      	orrs	r3, r2
 8101dea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	69ba      	ldr	r2, [r7, #24]
 8101df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101df2:	683b      	ldr	r3, [r7, #0]
 8101df4:	685b      	ldr	r3, [r3, #4]
 8101df6:	f003 0303 	and.w	r3, r3, #3
 8101dfa:	2b02      	cmp	r3, #2
 8101dfc:	d123      	bne.n	8101e46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101dfe:	69fb      	ldr	r3, [r7, #28]
 8101e00:	08da      	lsrs	r2, r3, #3
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	3208      	adds	r2, #8
 8101e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101e0c:	69fb      	ldr	r3, [r7, #28]
 8101e0e:	f003 0307 	and.w	r3, r3, #7
 8101e12:	009b      	lsls	r3, r3, #2
 8101e14:	220f      	movs	r2, #15
 8101e16:	fa02 f303 	lsl.w	r3, r2, r3
 8101e1a:	43db      	mvns	r3, r3
 8101e1c:	69ba      	ldr	r2, [r7, #24]
 8101e1e:	4013      	ands	r3, r2
 8101e20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101e22:	683b      	ldr	r3, [r7, #0]
 8101e24:	691a      	ldr	r2, [r3, #16]
 8101e26:	69fb      	ldr	r3, [r7, #28]
 8101e28:	f003 0307 	and.w	r3, r3, #7
 8101e2c:	009b      	lsls	r3, r3, #2
 8101e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8101e32:	69ba      	ldr	r2, [r7, #24]
 8101e34:	4313      	orrs	r3, r2
 8101e36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101e38:	69fb      	ldr	r3, [r7, #28]
 8101e3a:	08da      	lsrs	r2, r3, #3
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	3208      	adds	r2, #8
 8101e40:	69b9      	ldr	r1, [r7, #24]
 8101e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	681b      	ldr	r3, [r3, #0]
 8101e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101e4c:	69fb      	ldr	r3, [r7, #28]
 8101e4e:	005b      	lsls	r3, r3, #1
 8101e50:	2203      	movs	r2, #3
 8101e52:	fa02 f303 	lsl.w	r3, r2, r3
 8101e56:	43db      	mvns	r3, r3
 8101e58:	69ba      	ldr	r2, [r7, #24]
 8101e5a:	4013      	ands	r3, r2
 8101e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101e5e:	683b      	ldr	r3, [r7, #0]
 8101e60:	685b      	ldr	r3, [r3, #4]
 8101e62:	f003 0203 	and.w	r2, r3, #3
 8101e66:	69fb      	ldr	r3, [r7, #28]
 8101e68:	005b      	lsls	r3, r3, #1
 8101e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8101e6e:	69ba      	ldr	r2, [r7, #24]
 8101e70:	4313      	orrs	r3, r2
 8101e72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	69ba      	ldr	r2, [r7, #24]
 8101e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101e7a:	683b      	ldr	r3, [r7, #0]
 8101e7c:	685b      	ldr	r3, [r3, #4]
 8101e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101e82:	2b00      	cmp	r3, #0
 8101e84:	f000 80e0 	beq.w	8102048 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101e88:	4b2f      	ldr	r3, [pc, #188]	; (8101f48 <HAL_GPIO_Init+0x238>)
 8101e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e8e:	4a2e      	ldr	r2, [pc, #184]	; (8101f48 <HAL_GPIO_Init+0x238>)
 8101e90:	f043 0302 	orr.w	r3, r3, #2
 8101e94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101e98:	4b2b      	ldr	r3, [pc, #172]	; (8101f48 <HAL_GPIO_Init+0x238>)
 8101e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e9e:	f003 0302 	and.w	r3, r3, #2
 8101ea2:	60fb      	str	r3, [r7, #12]
 8101ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101ea6:	4a29      	ldr	r2, [pc, #164]	; (8101f4c <HAL_GPIO_Init+0x23c>)
 8101ea8:	69fb      	ldr	r3, [r7, #28]
 8101eaa:	089b      	lsrs	r3, r3, #2
 8101eac:	3302      	adds	r3, #2
 8101eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101eb4:	69fb      	ldr	r3, [r7, #28]
 8101eb6:	f003 0303 	and.w	r3, r3, #3
 8101eba:	009b      	lsls	r3, r3, #2
 8101ebc:	220f      	movs	r2, #15
 8101ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8101ec2:	43db      	mvns	r3, r3
 8101ec4:	69ba      	ldr	r2, [r7, #24]
 8101ec6:	4013      	ands	r3, r2
 8101ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	4a20      	ldr	r2, [pc, #128]	; (8101f50 <HAL_GPIO_Init+0x240>)
 8101ece:	4293      	cmp	r3, r2
 8101ed0:	d052      	beq.n	8101f78 <HAL_GPIO_Init+0x268>
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	4a1f      	ldr	r2, [pc, #124]	; (8101f54 <HAL_GPIO_Init+0x244>)
 8101ed6:	4293      	cmp	r3, r2
 8101ed8:	d031      	beq.n	8101f3e <HAL_GPIO_Init+0x22e>
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	4a1e      	ldr	r2, [pc, #120]	; (8101f58 <HAL_GPIO_Init+0x248>)
 8101ede:	4293      	cmp	r3, r2
 8101ee0:	d02b      	beq.n	8101f3a <HAL_GPIO_Init+0x22a>
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	4a1d      	ldr	r2, [pc, #116]	; (8101f5c <HAL_GPIO_Init+0x24c>)
 8101ee6:	4293      	cmp	r3, r2
 8101ee8:	d025      	beq.n	8101f36 <HAL_GPIO_Init+0x226>
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	4a1c      	ldr	r2, [pc, #112]	; (8101f60 <HAL_GPIO_Init+0x250>)
 8101eee:	4293      	cmp	r3, r2
 8101ef0:	d01f      	beq.n	8101f32 <HAL_GPIO_Init+0x222>
 8101ef2:	687b      	ldr	r3, [r7, #4]
 8101ef4:	4a1b      	ldr	r2, [pc, #108]	; (8101f64 <HAL_GPIO_Init+0x254>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	d019      	beq.n	8101f2e <HAL_GPIO_Init+0x21e>
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	4a1a      	ldr	r2, [pc, #104]	; (8101f68 <HAL_GPIO_Init+0x258>)
 8101efe:	4293      	cmp	r3, r2
 8101f00:	d013      	beq.n	8101f2a <HAL_GPIO_Init+0x21a>
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	4a19      	ldr	r2, [pc, #100]	; (8101f6c <HAL_GPIO_Init+0x25c>)
 8101f06:	4293      	cmp	r3, r2
 8101f08:	d00d      	beq.n	8101f26 <HAL_GPIO_Init+0x216>
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	4a18      	ldr	r2, [pc, #96]	; (8101f70 <HAL_GPIO_Init+0x260>)
 8101f0e:	4293      	cmp	r3, r2
 8101f10:	d007      	beq.n	8101f22 <HAL_GPIO_Init+0x212>
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	4a17      	ldr	r2, [pc, #92]	; (8101f74 <HAL_GPIO_Init+0x264>)
 8101f16:	4293      	cmp	r3, r2
 8101f18:	d101      	bne.n	8101f1e <HAL_GPIO_Init+0x20e>
 8101f1a:	2309      	movs	r3, #9
 8101f1c:	e02d      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f1e:	230a      	movs	r3, #10
 8101f20:	e02b      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f22:	2308      	movs	r3, #8
 8101f24:	e029      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f26:	2307      	movs	r3, #7
 8101f28:	e027      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f2a:	2306      	movs	r3, #6
 8101f2c:	e025      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f2e:	2305      	movs	r3, #5
 8101f30:	e023      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f32:	2304      	movs	r3, #4
 8101f34:	e021      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f36:	2303      	movs	r3, #3
 8101f38:	e01f      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f3a:	2302      	movs	r3, #2
 8101f3c:	e01d      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f3e:	2301      	movs	r3, #1
 8101f40:	e01b      	b.n	8101f7a <HAL_GPIO_Init+0x26a>
 8101f42:	bf00      	nop
 8101f44:	580000c0 	.word	0x580000c0
 8101f48:	58024400 	.word	0x58024400
 8101f4c:	58000400 	.word	0x58000400
 8101f50:	58020000 	.word	0x58020000
 8101f54:	58020400 	.word	0x58020400
 8101f58:	58020800 	.word	0x58020800
 8101f5c:	58020c00 	.word	0x58020c00
 8101f60:	58021000 	.word	0x58021000
 8101f64:	58021400 	.word	0x58021400
 8101f68:	58021800 	.word	0x58021800
 8101f6c:	58021c00 	.word	0x58021c00
 8101f70:	58022000 	.word	0x58022000
 8101f74:	58022400 	.word	0x58022400
 8101f78:	2300      	movs	r3, #0
 8101f7a:	69fa      	ldr	r2, [r7, #28]
 8101f7c:	f002 0203 	and.w	r2, r2, #3
 8101f80:	0092      	lsls	r2, r2, #2
 8101f82:	4093      	lsls	r3, r2
 8101f84:	69ba      	ldr	r2, [r7, #24]
 8101f86:	4313      	orrs	r3, r2
 8101f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101f8a:	4938      	ldr	r1, [pc, #224]	; (810206c <HAL_GPIO_Init+0x35c>)
 8101f8c:	69fb      	ldr	r3, [r7, #28]
 8101f8e:	089b      	lsrs	r3, r3, #2
 8101f90:	3302      	adds	r3, #2
 8101f92:	69ba      	ldr	r2, [r7, #24]
 8101f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101fa0:	693b      	ldr	r3, [r7, #16]
 8101fa2:	43db      	mvns	r3, r3
 8101fa4:	69ba      	ldr	r2, [r7, #24]
 8101fa6:	4013      	ands	r3, r2
 8101fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101faa:	683b      	ldr	r3, [r7, #0]
 8101fac:	685b      	ldr	r3, [r3, #4]
 8101fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101fb2:	2b00      	cmp	r3, #0
 8101fb4:	d003      	beq.n	8101fbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101fb6:	69ba      	ldr	r2, [r7, #24]
 8101fb8:	693b      	ldr	r3, [r7, #16]
 8101fba:	4313      	orrs	r3, r2
 8101fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101fc2:	69bb      	ldr	r3, [r7, #24]
 8101fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101fca:	685b      	ldr	r3, [r3, #4]
 8101fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101fce:	693b      	ldr	r3, [r7, #16]
 8101fd0:	43db      	mvns	r3, r3
 8101fd2:	69ba      	ldr	r2, [r7, #24]
 8101fd4:	4013      	ands	r3, r2
 8101fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101fd8:	683b      	ldr	r3, [r7, #0]
 8101fda:	685b      	ldr	r3, [r3, #4]
 8101fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d003      	beq.n	8101fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101fe4:	69ba      	ldr	r2, [r7, #24]
 8101fe6:	693b      	ldr	r3, [r7, #16]
 8101fe8:	4313      	orrs	r3, r2
 8101fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101ff0:	69bb      	ldr	r3, [r7, #24]
 8101ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101ff4:	697b      	ldr	r3, [r7, #20]
 8101ff6:	685b      	ldr	r3, [r3, #4]
 8101ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ffa:	693b      	ldr	r3, [r7, #16]
 8101ffc:	43db      	mvns	r3, r3
 8101ffe:	69ba      	ldr	r2, [r7, #24]
 8102000:	4013      	ands	r3, r2
 8102002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102004:	683b      	ldr	r3, [r7, #0]
 8102006:	685b      	ldr	r3, [r3, #4]
 8102008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810200c:	2b00      	cmp	r3, #0
 810200e:	d003      	beq.n	8102018 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102010:	69ba      	ldr	r2, [r7, #24]
 8102012:	693b      	ldr	r3, [r7, #16]
 8102014:	4313      	orrs	r3, r2
 8102016:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102018:	697b      	ldr	r3, [r7, #20]
 810201a:	69ba      	ldr	r2, [r7, #24]
 810201c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810201e:	697b      	ldr	r3, [r7, #20]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102024:	693b      	ldr	r3, [r7, #16]
 8102026:	43db      	mvns	r3, r3
 8102028:	69ba      	ldr	r2, [r7, #24]
 810202a:	4013      	ands	r3, r2
 810202c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810202e:	683b      	ldr	r3, [r7, #0]
 8102030:	685b      	ldr	r3, [r3, #4]
 8102032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102036:	2b00      	cmp	r3, #0
 8102038:	d003      	beq.n	8102042 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810203a:	69ba      	ldr	r2, [r7, #24]
 810203c:	693b      	ldr	r3, [r7, #16]
 810203e:	4313      	orrs	r3, r2
 8102040:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102042:	697b      	ldr	r3, [r7, #20]
 8102044:	69ba      	ldr	r2, [r7, #24]
 8102046:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102048:	69fb      	ldr	r3, [r7, #28]
 810204a:	3301      	adds	r3, #1
 810204c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810204e:	683b      	ldr	r3, [r7, #0]
 8102050:	681a      	ldr	r2, [r3, #0]
 8102052:	69fb      	ldr	r3, [r7, #28]
 8102054:	fa22 f303 	lsr.w	r3, r2, r3
 8102058:	2b00      	cmp	r3, #0
 810205a:	f47f ae63 	bne.w	8101d24 <HAL_GPIO_Init+0x14>
  }
}
 810205e:	bf00      	nop
 8102060:	bf00      	nop
 8102062:	3724      	adds	r7, #36	; 0x24
 8102064:	46bd      	mov	sp, r7
 8102066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810206a:	4770      	bx	lr
 810206c:	58000400 	.word	0x58000400

08102070 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102070:	b480      	push	{r7}
 8102072:	b083      	sub	sp, #12
 8102074:	af00      	add	r7, sp, #0
 8102076:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102078:	4b05      	ldr	r3, [pc, #20]	; (8102090 <HAL_HSEM_ActivateNotification+0x20>)
 810207a:	681a      	ldr	r2, [r3, #0]
 810207c:	4904      	ldr	r1, [pc, #16]	; (8102090 <HAL_HSEM_ActivateNotification+0x20>)
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	4313      	orrs	r3, r2
 8102082:	600b      	str	r3, [r1, #0]
#endif
}
 8102084:	bf00      	nop
 8102086:	370c      	adds	r7, #12
 8102088:	46bd      	mov	sp, r7
 810208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208e:	4770      	bx	lr
 8102090:	58026510 	.word	0x58026510

08102094 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102094:	b580      	push	{r7, lr}
 8102096:	b084      	sub	sp, #16
 8102098:	af00      	add	r7, sp, #0
 810209a:	60f8      	str	r0, [r7, #12]
 810209c:	460b      	mov	r3, r1
 810209e:	607a      	str	r2, [r7, #4]
 81020a0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81020a2:	4b37      	ldr	r3, [pc, #220]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	f023 0201 	bic.w	r2, r3, #1
 81020aa:	4935      	ldr	r1, [pc, #212]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020ac:	68fb      	ldr	r3, [r7, #12]
 81020ae:	4313      	orrs	r3, r2
 81020b0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	d123      	bne.n	8102100 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81020b8:	f7ff fe16 	bl	8101ce8 <HAL_GetCurrentCPUID>
 81020bc:	4603      	mov	r3, r0
 81020be:	2b03      	cmp	r3, #3
 81020c0:	d158      	bne.n	8102174 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81020c2:	4b2f      	ldr	r3, [pc, #188]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020c4:	691b      	ldr	r3, [r3, #16]
 81020c6:	4a2e      	ldr	r2, [pc, #184]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 81020c8:	f023 0301 	bic.w	r3, r3, #1
 81020cc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81020ce:	4b2d      	ldr	r3, [pc, #180]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81020d0:	691b      	ldr	r3, [r3, #16]
 81020d2:	4a2c      	ldr	r2, [pc, #176]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81020d4:	f043 0304 	orr.w	r3, r3, #4
 81020d8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81020da:	f3bf 8f4f 	dsb	sy
}
 81020de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81020e0:	f3bf 8f6f 	isb	sy
}
 81020e4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81020e6:	7afb      	ldrb	r3, [r7, #11]
 81020e8:	2b01      	cmp	r3, #1
 81020ea:	d101      	bne.n	81020f0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81020ec:	bf30      	wfi
 81020ee:	e000      	b.n	81020f2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81020f0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81020f2:	4b24      	ldr	r3, [pc, #144]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81020f4:	691b      	ldr	r3, [r3, #16]
 81020f6:	4a23      	ldr	r2, [pc, #140]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81020f8:	f023 0304 	bic.w	r3, r3, #4
 81020fc:	6113      	str	r3, [r2, #16]
 81020fe:	e03c      	b.n	810217a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	2b01      	cmp	r3, #1
 8102104:	d123      	bne.n	810214e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102106:	f7ff fdef 	bl	8101ce8 <HAL_GetCurrentCPUID>
 810210a:	4603      	mov	r3, r0
 810210c:	2b01      	cmp	r3, #1
 810210e:	d133      	bne.n	8102178 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102110:	4b1b      	ldr	r3, [pc, #108]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102112:	695b      	ldr	r3, [r3, #20]
 8102114:	4a1a      	ldr	r2, [pc, #104]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102116:	f023 0302 	bic.w	r3, r3, #2
 810211a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810211c:	4b19      	ldr	r3, [pc, #100]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810211e:	691b      	ldr	r3, [r3, #16]
 8102120:	4a18      	ldr	r2, [pc, #96]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102122:	f043 0304 	orr.w	r3, r3, #4
 8102126:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102128:	f3bf 8f4f 	dsb	sy
}
 810212c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810212e:	f3bf 8f6f 	isb	sy
}
 8102132:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102134:	7afb      	ldrb	r3, [r7, #11]
 8102136:	2b01      	cmp	r3, #1
 8102138:	d101      	bne.n	810213e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810213a:	bf30      	wfi
 810213c:	e000      	b.n	8102140 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810213e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102140:	4b10      	ldr	r3, [pc, #64]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102142:	691b      	ldr	r3, [r3, #16]
 8102144:	4a0f      	ldr	r2, [pc, #60]	; (8102184 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102146:	f023 0304 	bic.w	r3, r3, #4
 810214a:	6113      	str	r3, [r2, #16]
 810214c:	e015      	b.n	810217a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810214e:	f7ff fdcb 	bl	8101ce8 <HAL_GetCurrentCPUID>
 8102152:	4603      	mov	r3, r0
 8102154:	2b03      	cmp	r3, #3
 8102156:	d106      	bne.n	8102166 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102158:	4b09      	ldr	r3, [pc, #36]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 810215a:	691b      	ldr	r3, [r3, #16]
 810215c:	4a08      	ldr	r2, [pc, #32]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 810215e:	f023 0304 	bic.w	r3, r3, #4
 8102162:	6113      	str	r3, [r2, #16]
 8102164:	e009      	b.n	810217a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102166:	4b06      	ldr	r3, [pc, #24]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102168:	695b      	ldr	r3, [r3, #20]
 810216a:	4a05      	ldr	r2, [pc, #20]	; (8102180 <HAL_PWREx_EnterSTOPMode+0xec>)
 810216c:	f023 0304 	bic.w	r3, r3, #4
 8102170:	6153      	str	r3, [r2, #20]
 8102172:	e002      	b.n	810217a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102174:	bf00      	nop
 8102176:	e000      	b.n	810217a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102178:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810217a:	3710      	adds	r7, #16
 810217c:	46bd      	mov	sp, r7
 810217e:	bd80      	pop	{r7, pc}
 8102180:	58024800 	.word	0x58024800
 8102184:	e000ed00 	.word	0xe000ed00

08102188 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102188:	b580      	push	{r7, lr}
 810218a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810218c:	f7ff fdac 	bl	8101ce8 <HAL_GetCurrentCPUID>
 8102190:	4603      	mov	r3, r0
 8102192:	2b03      	cmp	r3, #3
 8102194:	d101      	bne.n	810219a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102196:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102198:	e001      	b.n	810219e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810219a:	bf40      	sev
    __WFE ();
 810219c:	bf20      	wfe
}
 810219e:	bf00      	nop
 81021a0:	bd80      	pop	{r7, pc}
	...

081021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81021a4:	b480      	push	{r7}
 81021a6:	b089      	sub	sp, #36	; 0x24
 81021a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81021aa:	4bb3      	ldr	r3, [pc, #716]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021ac:	691b      	ldr	r3, [r3, #16]
 81021ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81021b2:	2b18      	cmp	r3, #24
 81021b4:	f200 8155 	bhi.w	8102462 <HAL_RCC_GetSysClockFreq+0x2be>
 81021b8:	a201      	add	r2, pc, #4	; (adr r2, 81021c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021be:	bf00      	nop
 81021c0:	08102225 	.word	0x08102225
 81021c4:	08102463 	.word	0x08102463
 81021c8:	08102463 	.word	0x08102463
 81021cc:	08102463 	.word	0x08102463
 81021d0:	08102463 	.word	0x08102463
 81021d4:	08102463 	.word	0x08102463
 81021d8:	08102463 	.word	0x08102463
 81021dc:	08102463 	.word	0x08102463
 81021e0:	0810224b 	.word	0x0810224b
 81021e4:	08102463 	.word	0x08102463
 81021e8:	08102463 	.word	0x08102463
 81021ec:	08102463 	.word	0x08102463
 81021f0:	08102463 	.word	0x08102463
 81021f4:	08102463 	.word	0x08102463
 81021f8:	08102463 	.word	0x08102463
 81021fc:	08102463 	.word	0x08102463
 8102200:	08102251 	.word	0x08102251
 8102204:	08102463 	.word	0x08102463
 8102208:	08102463 	.word	0x08102463
 810220c:	08102463 	.word	0x08102463
 8102210:	08102463 	.word	0x08102463
 8102214:	08102463 	.word	0x08102463
 8102218:	08102463 	.word	0x08102463
 810221c:	08102463 	.word	0x08102463
 8102220:	08102257 	.word	0x08102257
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102224:	4b94      	ldr	r3, [pc, #592]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	f003 0320 	and.w	r3, r3, #32
 810222c:	2b00      	cmp	r3, #0
 810222e:	d009      	beq.n	8102244 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102230:	4b91      	ldr	r3, [pc, #580]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	08db      	lsrs	r3, r3, #3
 8102236:	f003 0303 	and.w	r3, r3, #3
 810223a:	4a90      	ldr	r2, [pc, #576]	; (810247c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810223c:	fa22 f303 	lsr.w	r3, r2, r3
 8102240:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102242:	e111      	b.n	8102468 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102244:	4b8d      	ldr	r3, [pc, #564]	; (810247c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102246:	61bb      	str	r3, [r7, #24]
    break;
 8102248:	e10e      	b.n	8102468 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810224a:	4b8d      	ldr	r3, [pc, #564]	; (8102480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810224c:	61bb      	str	r3, [r7, #24]
    break;
 810224e:	e10b      	b.n	8102468 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102250:	4b8c      	ldr	r3, [pc, #560]	; (8102484 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102252:	61bb      	str	r3, [r7, #24]
    break;
 8102254:	e108      	b.n	8102468 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102256:	4b88      	ldr	r3, [pc, #544]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810225a:	f003 0303 	and.w	r3, r3, #3
 810225e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102260:	4b85      	ldr	r3, [pc, #532]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102264:	091b      	lsrs	r3, r3, #4
 8102266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810226a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810226c:	4b82      	ldr	r3, [pc, #520]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102270:	f003 0301 	and.w	r3, r3, #1
 8102274:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102276:	4b80      	ldr	r3, [pc, #512]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810227a:	08db      	lsrs	r3, r3, #3
 810227c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102280:	68fa      	ldr	r2, [r7, #12]
 8102282:	fb02 f303 	mul.w	r3, r2, r3
 8102286:	ee07 3a90 	vmov	s15, r3
 810228a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810228e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102292:	693b      	ldr	r3, [r7, #16]
 8102294:	2b00      	cmp	r3, #0
 8102296:	f000 80e1 	beq.w	810245c <HAL_RCC_GetSysClockFreq+0x2b8>
 810229a:	697b      	ldr	r3, [r7, #20]
 810229c:	2b02      	cmp	r3, #2
 810229e:	f000 8083 	beq.w	81023a8 <HAL_RCC_GetSysClockFreq+0x204>
 81022a2:	697b      	ldr	r3, [r7, #20]
 81022a4:	2b02      	cmp	r3, #2
 81022a6:	f200 80a1 	bhi.w	81023ec <HAL_RCC_GetSysClockFreq+0x248>
 81022aa:	697b      	ldr	r3, [r7, #20]
 81022ac:	2b00      	cmp	r3, #0
 81022ae:	d003      	beq.n	81022b8 <HAL_RCC_GetSysClockFreq+0x114>
 81022b0:	697b      	ldr	r3, [r7, #20]
 81022b2:	2b01      	cmp	r3, #1
 81022b4:	d056      	beq.n	8102364 <HAL_RCC_GetSysClockFreq+0x1c0>
 81022b6:	e099      	b.n	81023ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81022b8:	4b6f      	ldr	r3, [pc, #444]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	f003 0320 	and.w	r3, r3, #32
 81022c0:	2b00      	cmp	r3, #0
 81022c2:	d02d      	beq.n	8102320 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81022c4:	4b6c      	ldr	r3, [pc, #432]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022c6:	681b      	ldr	r3, [r3, #0]
 81022c8:	08db      	lsrs	r3, r3, #3
 81022ca:	f003 0303 	and.w	r3, r3, #3
 81022ce:	4a6b      	ldr	r2, [pc, #428]	; (810247c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81022d0:	fa22 f303 	lsr.w	r3, r2, r3
 81022d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	ee07 3a90 	vmov	s15, r3
 81022dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022e0:	693b      	ldr	r3, [r7, #16]
 81022e2:	ee07 3a90 	vmov	s15, r3
 81022e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81022ee:	4b62      	ldr	r3, [pc, #392]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81022f6:	ee07 3a90 	vmov	s15, r3
 81022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102302:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102488 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810230a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810230e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102316:	ee67 7a27 	vmul.f32	s15, s14, s15
 810231a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810231e:	e087      	b.n	8102430 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102320:	693b      	ldr	r3, [r7, #16]
 8102322:	ee07 3a90 	vmov	s15, r3
 8102326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810232a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810248c <HAL_RCC_GetSysClockFreq+0x2e8>
 810232e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102332:	4b51      	ldr	r3, [pc, #324]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810233a:	ee07 3a90 	vmov	s15, r3
 810233e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102342:	ed97 6a02 	vldr	s12, [r7, #8]
 8102346:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102488 <HAL_RCC_GetSysClockFreq+0x2e4>
 810234a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810234e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810235e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102362:	e065      	b.n	8102430 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102364:	693b      	ldr	r3, [r7, #16]
 8102366:	ee07 3a90 	vmov	s15, r3
 810236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810236e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102490 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102376:	4b40      	ldr	r3, [pc, #256]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810237e:	ee07 3a90 	vmov	s15, r3
 8102382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102386:	ed97 6a02 	vldr	s12, [r7, #8]
 810238a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102488 <HAL_RCC_GetSysClockFreq+0x2e4>
 810238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810239a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81023a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81023a6:	e043      	b.n	8102430 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81023a8:	693b      	ldr	r3, [r7, #16]
 81023aa:	ee07 3a90 	vmov	s15, r3
 81023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81023b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102494 <HAL_RCC_GetSysClockFreq+0x2f0>
 81023b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81023ba:	4b2f      	ldr	r3, [pc, #188]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81023c2:	ee07 3a90 	vmov	s15, r3
 81023c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81023ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81023ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102488 <HAL_RCC_GetSysClockFreq+0x2e4>
 81023d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81023d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81023da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81023de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81023e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81023ea:	e021      	b.n	8102430 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81023ec:	693b      	ldr	r3, [r7, #16]
 81023ee:	ee07 3a90 	vmov	s15, r3
 81023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81023f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102490 <HAL_RCC_GetSysClockFreq+0x2ec>
 81023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81023fe:	4b1e      	ldr	r3, [pc, #120]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102406:	ee07 3a90 	vmov	s15, r3
 810240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810240e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102412:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102488 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810241e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102426:	ee67 7a27 	vmul.f32	s15, s14, s15
 810242a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810242e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102430:	4b11      	ldr	r3, [pc, #68]	; (8102478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102434:	0a5b      	lsrs	r3, r3, #9
 8102436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810243a:	3301      	adds	r3, #1
 810243c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810243e:	683b      	ldr	r3, [r7, #0]
 8102440:	ee07 3a90 	vmov	s15, r3
 8102444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102448:	edd7 6a07 	vldr	s13, [r7, #28]
 810244c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102454:	ee17 3a90 	vmov	r3, s15
 8102458:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810245a:	e005      	b.n	8102468 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810245c:	2300      	movs	r3, #0
 810245e:	61bb      	str	r3, [r7, #24]
    break;
 8102460:	e002      	b.n	8102468 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102462:	4b07      	ldr	r3, [pc, #28]	; (8102480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102464:	61bb      	str	r3, [r7, #24]
    break;
 8102466:	bf00      	nop
  }

  return sysclockfreq;
 8102468:	69bb      	ldr	r3, [r7, #24]
}
 810246a:	4618      	mov	r0, r3
 810246c:	3724      	adds	r7, #36	; 0x24
 810246e:	46bd      	mov	sp, r7
 8102470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102474:	4770      	bx	lr
 8102476:	bf00      	nop
 8102478:	58024400 	.word	0x58024400
 810247c:	03d09000 	.word	0x03d09000
 8102480:	003d0900 	.word	0x003d0900
 8102484:	007a1200 	.word	0x007a1200
 8102488:	46000000 	.word	0x46000000
 810248c:	4c742400 	.word	0x4c742400
 8102490:	4a742400 	.word	0x4a742400
 8102494:	4af42400 	.word	0x4af42400

08102498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102498:	b580      	push	{r7, lr}
 810249a:	b082      	sub	sp, #8
 810249c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810249e:	f7ff fe81 	bl	81021a4 <HAL_RCC_GetSysClockFreq>
 81024a2:	4602      	mov	r2, r0
 81024a4:	4b11      	ldr	r3, [pc, #68]	; (81024ec <HAL_RCC_GetHCLKFreq+0x54>)
 81024a6:	699b      	ldr	r3, [r3, #24]
 81024a8:	0a1b      	lsrs	r3, r3, #8
 81024aa:	f003 030f 	and.w	r3, r3, #15
 81024ae:	4910      	ldr	r1, [pc, #64]	; (81024f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81024b0:	5ccb      	ldrb	r3, [r1, r3]
 81024b2:	f003 031f 	and.w	r3, r3, #31
 81024b6:	fa22 f303 	lsr.w	r3, r2, r3
 81024ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024bc:	4b0b      	ldr	r3, [pc, #44]	; (81024ec <HAL_RCC_GetHCLKFreq+0x54>)
 81024be:	699b      	ldr	r3, [r3, #24]
 81024c0:	f003 030f 	and.w	r3, r3, #15
 81024c4:	4a0a      	ldr	r2, [pc, #40]	; (81024f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81024c6:	5cd3      	ldrb	r3, [r2, r3]
 81024c8:	f003 031f 	and.w	r3, r3, #31
 81024cc:	687a      	ldr	r2, [r7, #4]
 81024ce:	fa22 f303 	lsr.w	r3, r2, r3
 81024d2:	4a08      	ldr	r2, [pc, #32]	; (81024f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81024d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81024d6:	4b07      	ldr	r3, [pc, #28]	; (81024f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	4a07      	ldr	r2, [pc, #28]	; (81024f8 <HAL_RCC_GetHCLKFreq+0x60>)
 81024dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81024de:	4b05      	ldr	r3, [pc, #20]	; (81024f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81024e0:	681b      	ldr	r3, [r3, #0]
}
 81024e2:	4618      	mov	r0, r3
 81024e4:	3708      	adds	r7, #8
 81024e6:	46bd      	mov	sp, r7
 81024e8:	bd80      	pop	{r7, pc}
 81024ea:	bf00      	nop
 81024ec:	58024400 	.word	0x58024400
 81024f0:	08108324 	.word	0x08108324
 81024f4:	10000004 	.word	0x10000004
 81024f8:	10000000 	.word	0x10000000

081024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81024fc:	b580      	push	{r7, lr}
 81024fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102500:	f7ff ffca 	bl	8102498 <HAL_RCC_GetHCLKFreq>
 8102504:	4602      	mov	r2, r0
 8102506:	4b06      	ldr	r3, [pc, #24]	; (8102520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102508:	69db      	ldr	r3, [r3, #28]
 810250a:	091b      	lsrs	r3, r3, #4
 810250c:	f003 0307 	and.w	r3, r3, #7
 8102510:	4904      	ldr	r1, [pc, #16]	; (8102524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102512:	5ccb      	ldrb	r3, [r1, r3]
 8102514:	f003 031f 	and.w	r3, r3, #31
 8102518:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810251c:	4618      	mov	r0, r3
 810251e:	bd80      	pop	{r7, pc}
 8102520:	58024400 	.word	0x58024400
 8102524:	08108324 	.word	0x08108324

08102528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102528:	b580      	push	{r7, lr}
 810252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810252c:	f7ff ffb4 	bl	8102498 <HAL_RCC_GetHCLKFreq>
 8102530:	4602      	mov	r2, r0
 8102532:	4b06      	ldr	r3, [pc, #24]	; (810254c <HAL_RCC_GetPCLK2Freq+0x24>)
 8102534:	69db      	ldr	r3, [r3, #28]
 8102536:	0a1b      	lsrs	r3, r3, #8
 8102538:	f003 0307 	and.w	r3, r3, #7
 810253c:	4904      	ldr	r1, [pc, #16]	; (8102550 <HAL_RCC_GetPCLK2Freq+0x28>)
 810253e:	5ccb      	ldrb	r3, [r1, r3]
 8102540:	f003 031f 	and.w	r3, r3, #31
 8102544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102548:	4618      	mov	r0, r3
 810254a:	bd80      	pop	{r7, pc}
 810254c:	58024400 	.word	0x58024400
 8102550:	08108324 	.word	0x08108324

08102554 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102554:	b580      	push	{r7, lr}
 8102556:	b086      	sub	sp, #24
 8102558:	af00      	add	r7, sp, #0
 810255a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810255c:	2300      	movs	r3, #0
 810255e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102560:	2300      	movs	r3, #0
 8102562:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810256c:	2b00      	cmp	r3, #0
 810256e:	d03f      	beq.n	81025f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102578:	d02a      	beq.n	81025d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810257a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810257e:	d824      	bhi.n	81025ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102584:	d018      	beq.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810258a:	d81e      	bhi.n	81025ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 810258c:	2b00      	cmp	r3, #0
 810258e:	d003      	beq.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102594:	d007      	beq.n	81025a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102596:	e018      	b.n	81025ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102598:	4ba3      	ldr	r3, [pc, #652]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810259c:	4aa2      	ldr	r2, [pc, #648]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81025a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81025a4:	e015      	b.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	3304      	adds	r3, #4
 81025aa:	2102      	movs	r1, #2
 81025ac:	4618      	mov	r0, r3
 81025ae:	f001 f9d5 	bl	810395c <RCCEx_PLL2_Config>
 81025b2:	4603      	mov	r3, r0
 81025b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81025b6:	e00c      	b.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	3324      	adds	r3, #36	; 0x24
 81025bc:	2102      	movs	r1, #2
 81025be:	4618      	mov	r0, r3
 81025c0:	f001 fa7e 	bl	8103ac0 <RCCEx_PLL3_Config>
 81025c4:	4603      	mov	r3, r0
 81025c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81025c8:	e003      	b.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81025ca:	2301      	movs	r3, #1
 81025cc:	75fb      	strb	r3, [r7, #23]
      break;
 81025ce:	e000      	b.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81025d2:	7dfb      	ldrb	r3, [r7, #23]
 81025d4:	2b00      	cmp	r3, #0
 81025d6:	d109      	bne.n	81025ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81025d8:	4b93      	ldr	r3, [pc, #588]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81025da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81025dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81025e4:	4990      	ldr	r1, [pc, #576]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81025e6:	4313      	orrs	r3, r2
 81025e8:	650b      	str	r3, [r1, #80]	; 0x50
 81025ea:	e001      	b.n	81025f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025ec:	7dfb      	ldrb	r3, [r7, #23]
 81025ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81025f8:	2b00      	cmp	r3, #0
 81025fa:	d03d      	beq.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102600:	2b04      	cmp	r3, #4
 8102602:	d826      	bhi.n	8102652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102604:	a201      	add	r2, pc, #4	; (adr r2, 810260c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810260a:	bf00      	nop
 810260c:	08102621 	.word	0x08102621
 8102610:	0810262f 	.word	0x0810262f
 8102614:	08102641 	.word	0x08102641
 8102618:	08102659 	.word	0x08102659
 810261c:	08102659 	.word	0x08102659
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102620:	4b81      	ldr	r3, [pc, #516]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102624:	4a80      	ldr	r2, [pc, #512]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810262a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810262c:	e015      	b.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	3304      	adds	r3, #4
 8102632:	2100      	movs	r1, #0
 8102634:	4618      	mov	r0, r3
 8102636:	f001 f991 	bl	810395c <RCCEx_PLL2_Config>
 810263a:	4603      	mov	r3, r0
 810263c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810263e:	e00c      	b.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	3324      	adds	r3, #36	; 0x24
 8102644:	2100      	movs	r1, #0
 8102646:	4618      	mov	r0, r3
 8102648:	f001 fa3a 	bl	8103ac0 <RCCEx_PLL3_Config>
 810264c:	4603      	mov	r3, r0
 810264e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102650:	e003      	b.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102652:	2301      	movs	r3, #1
 8102654:	75fb      	strb	r3, [r7, #23]
      break;
 8102656:	e000      	b.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102658:	bf00      	nop
    }

    if(ret == HAL_OK)
 810265a:	7dfb      	ldrb	r3, [r7, #23]
 810265c:	2b00      	cmp	r3, #0
 810265e:	d109      	bne.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102660:	4b71      	ldr	r3, [pc, #452]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102664:	f023 0207 	bic.w	r2, r3, #7
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810266c:	496e      	ldr	r1, [pc, #440]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810266e:	4313      	orrs	r3, r2
 8102670:	650b      	str	r3, [r1, #80]	; 0x50
 8102672:	e001      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102674:	7dfb      	ldrb	r3, [r7, #23]
 8102676:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102680:	2b00      	cmp	r3, #0
 8102682:	d042      	beq.n	810270a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810268c:	d02b      	beq.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102692:	d825      	bhi.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102694:	2bc0      	cmp	r3, #192	; 0xc0
 8102696:	d028      	beq.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102698:	2bc0      	cmp	r3, #192	; 0xc0
 810269a:	d821      	bhi.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810269c:	2b80      	cmp	r3, #128	; 0x80
 810269e:	d016      	beq.n	81026ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81026a0:	2b80      	cmp	r3, #128	; 0x80
 81026a2:	d81d      	bhi.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81026a4:	2b00      	cmp	r3, #0
 81026a6:	d002      	beq.n	81026ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81026a8:	2b40      	cmp	r3, #64	; 0x40
 81026aa:	d007      	beq.n	81026bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 81026ac:	e018      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026ae:	4b5e      	ldr	r3, [pc, #376]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026b2:	4a5d      	ldr	r2, [pc, #372]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81026b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81026ba:	e017      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	3304      	adds	r3, #4
 81026c0:	2100      	movs	r1, #0
 81026c2:	4618      	mov	r0, r3
 81026c4:	f001 f94a 	bl	810395c <RCCEx_PLL2_Config>
 81026c8:	4603      	mov	r3, r0
 81026ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81026cc:	e00e      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	3324      	adds	r3, #36	; 0x24
 81026d2:	2100      	movs	r1, #0
 81026d4:	4618      	mov	r0, r3
 81026d6:	f001 f9f3 	bl	8103ac0 <RCCEx_PLL3_Config>
 81026da:	4603      	mov	r3, r0
 81026dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81026de:	e005      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81026e0:	2301      	movs	r3, #1
 81026e2:	75fb      	strb	r3, [r7, #23]
      break;
 81026e4:	e002      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81026e6:	bf00      	nop
 81026e8:	e000      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81026ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81026ec:	7dfb      	ldrb	r3, [r7, #23]
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d109      	bne.n	8102706 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81026f2:	4b4d      	ldr	r3, [pc, #308]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81026f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81026fe:	494a      	ldr	r1, [pc, #296]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102700:	4313      	orrs	r3, r2
 8102702:	650b      	str	r3, [r1, #80]	; 0x50
 8102704:	e001      	b.n	810270a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102706:	7dfb      	ldrb	r3, [r7, #23]
 8102708:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102712:	2b00      	cmp	r3, #0
 8102714:	d049      	beq.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102716:	687b      	ldr	r3, [r7, #4]
 8102718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810271c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102720:	d030      	beq.n	8102784 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102726:	d82a      	bhi.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102728:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810272c:	d02c      	beq.n	8102788 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810272e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102732:	d824      	bhi.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102738:	d018      	beq.n	810276c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810273a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810273e:	d81e      	bhi.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102740:	2b00      	cmp	r3, #0
 8102742:	d003      	beq.n	810274c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102748:	d007      	beq.n	810275a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810274a:	e018      	b.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810274c:	4b36      	ldr	r3, [pc, #216]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102750:	4a35      	ldr	r2, [pc, #212]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102758:	e017      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	3304      	adds	r3, #4
 810275e:	2100      	movs	r1, #0
 8102760:	4618      	mov	r0, r3
 8102762:	f001 f8fb 	bl	810395c <RCCEx_PLL2_Config>
 8102766:	4603      	mov	r3, r0
 8102768:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810276a:	e00e      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	3324      	adds	r3, #36	; 0x24
 8102770:	2100      	movs	r1, #0
 8102772:	4618      	mov	r0, r3
 8102774:	f001 f9a4 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102778:	4603      	mov	r3, r0
 810277a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810277c:	e005      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810277e:	2301      	movs	r3, #1
 8102780:	75fb      	strb	r3, [r7, #23]
      break;
 8102782:	e002      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102784:	bf00      	nop
 8102786:	e000      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102788:	bf00      	nop
    }

    if(ret == HAL_OK)
 810278a:	7dfb      	ldrb	r3, [r7, #23]
 810278c:	2b00      	cmp	r3, #0
 810278e:	d10a      	bne.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102790:	4b25      	ldr	r3, [pc, #148]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102794:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810279e:	4922      	ldr	r1, [pc, #136]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81027a0:	4313      	orrs	r3, r2
 81027a2:	658b      	str	r3, [r1, #88]	; 0x58
 81027a4:	e001      	b.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027a6:	7dfb      	ldrb	r3, [r7, #23]
 81027a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d04b      	beq.n	810284e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81027bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81027c0:	d030      	beq.n	8102824 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81027c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81027c6:	d82a      	bhi.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81027c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81027cc:	d02e      	beq.n	810282c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81027ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81027d2:	d824      	bhi.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81027d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81027d8:	d018      	beq.n	810280c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81027da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81027de:	d81e      	bhi.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d003      	beq.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 81027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81027e8:	d007      	beq.n	81027fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81027ea:	e018      	b.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027ec:	4b0e      	ldr	r3, [pc, #56]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027f0:	4a0d      	ldr	r2, [pc, #52]	; (8102828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81027f8:	e019      	b.n	810282e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	3304      	adds	r3, #4
 81027fe:	2100      	movs	r1, #0
 8102800:	4618      	mov	r0, r3
 8102802:	f001 f8ab 	bl	810395c <RCCEx_PLL2_Config>
 8102806:	4603      	mov	r3, r0
 8102808:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810280a:	e010      	b.n	810282e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	3324      	adds	r3, #36	; 0x24
 8102810:	2100      	movs	r1, #0
 8102812:	4618      	mov	r0, r3
 8102814:	f001 f954 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102818:	4603      	mov	r3, r0
 810281a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810281c:	e007      	b.n	810282e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810281e:	2301      	movs	r3, #1
 8102820:	75fb      	strb	r3, [r7, #23]
      break;
 8102822:	e004      	b.n	810282e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102824:	bf00      	nop
 8102826:	e002      	b.n	810282e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102828:	58024400 	.word	0x58024400
      break;
 810282c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810282e:	7dfb      	ldrb	r3, [r7, #23]
 8102830:	2b00      	cmp	r3, #0
 8102832:	d10a      	bne.n	810284a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102834:	4b99      	ldr	r3, [pc, #612]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102838:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102842:	4996      	ldr	r1, [pc, #600]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102844:	4313      	orrs	r3, r2
 8102846:	658b      	str	r3, [r1, #88]	; 0x58
 8102848:	e001      	b.n	810284e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810284a:	7dfb      	ldrb	r3, [r7, #23]
 810284c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102856:	2b00      	cmp	r3, #0
 8102858:	d032      	beq.n	81028c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810285e:	2b30      	cmp	r3, #48	; 0x30
 8102860:	d01c      	beq.n	810289c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102862:	2b30      	cmp	r3, #48	; 0x30
 8102864:	d817      	bhi.n	8102896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102866:	2b20      	cmp	r3, #32
 8102868:	d00c      	beq.n	8102884 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810286a:	2b20      	cmp	r3, #32
 810286c:	d813      	bhi.n	8102896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810286e:	2b00      	cmp	r3, #0
 8102870:	d016      	beq.n	81028a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102872:	2b10      	cmp	r3, #16
 8102874:	d10f      	bne.n	8102896 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102876:	4b89      	ldr	r3, [pc, #548]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810287a:	4a88      	ldr	r2, [pc, #544]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102882:	e00e      	b.n	81028a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	3304      	adds	r3, #4
 8102888:	2102      	movs	r1, #2
 810288a:	4618      	mov	r0, r3
 810288c:	f001 f866 	bl	810395c <RCCEx_PLL2_Config>
 8102890:	4603      	mov	r3, r0
 8102892:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102894:	e005      	b.n	81028a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102896:	2301      	movs	r3, #1
 8102898:	75fb      	strb	r3, [r7, #23]
      break;
 810289a:	e002      	b.n	81028a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810289c:	bf00      	nop
 810289e:	e000      	b.n	81028a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81028a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81028a2:	7dfb      	ldrb	r3, [r7, #23]
 81028a4:	2b00      	cmp	r3, #0
 81028a6:	d109      	bne.n	81028bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81028a8:	4b7c      	ldr	r3, [pc, #496]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81028ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81028b4:	4979      	ldr	r1, [pc, #484]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81028b6:	4313      	orrs	r3, r2
 81028b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 81028ba:	e001      	b.n	81028c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028bc:	7dfb      	ldrb	r3, [r7, #23]
 81028be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81028c8:	2b00      	cmp	r3, #0
 81028ca:	d047      	beq.n	810295c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81028d4:	d030      	beq.n	8102938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81028d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81028da:	d82a      	bhi.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81028dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81028e0:	d02c      	beq.n	810293c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81028e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81028e6:	d824      	bhi.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81028e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81028ec:	d018      	beq.n	8102920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81028f2:	d81e      	bhi.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81028f4:	2b00      	cmp	r3, #0
 81028f6:	d003      	beq.n	8102900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81028fc:	d007      	beq.n	810290e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81028fe:	e018      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102900:	4b66      	ldr	r3, [pc, #408]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102904:	4a65      	ldr	r2, [pc, #404]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810290a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810290c:	e017      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	3304      	adds	r3, #4
 8102912:	2100      	movs	r1, #0
 8102914:	4618      	mov	r0, r3
 8102916:	f001 f821 	bl	810395c <RCCEx_PLL2_Config>
 810291a:	4603      	mov	r3, r0
 810291c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810291e:	e00e      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	3324      	adds	r3, #36	; 0x24
 8102924:	2100      	movs	r1, #0
 8102926:	4618      	mov	r0, r3
 8102928:	f001 f8ca 	bl	8103ac0 <RCCEx_PLL3_Config>
 810292c:	4603      	mov	r3, r0
 810292e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102930:	e005      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102932:	2301      	movs	r3, #1
 8102934:	75fb      	strb	r3, [r7, #23]
      break;
 8102936:	e002      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102938:	bf00      	nop
 810293a:	e000      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 810293c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810293e:	7dfb      	ldrb	r3, [r7, #23]
 8102940:	2b00      	cmp	r3, #0
 8102942:	d109      	bne.n	8102958 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102944:	4b55      	ldr	r3, [pc, #340]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102948:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102950:	4952      	ldr	r1, [pc, #328]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102952:	4313      	orrs	r3, r2
 8102954:	650b      	str	r3, [r1, #80]	; 0x50
 8102956:	e001      	b.n	810295c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102958:	7dfb      	ldrb	r3, [r7, #23]
 810295a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102964:	2b00      	cmp	r3, #0
 8102966:	d049      	beq.n	81029fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810296c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102970:	d02e      	beq.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8102972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102976:	d828      	bhi.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810297c:	d02a      	beq.n	81029d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810297e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102982:	d822      	bhi.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102988:	d026      	beq.n	81029d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810298a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810298e:	d81c      	bhi.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102994:	d010      	beq.n	81029b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8102996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810299a:	d816      	bhi.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 810299c:	2b00      	cmp	r3, #0
 810299e:	d01d      	beq.n	81029dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 81029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81029a4:	d111      	bne.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	3304      	adds	r3, #4
 81029aa:	2101      	movs	r1, #1
 81029ac:	4618      	mov	r0, r3
 81029ae:	f000 ffd5 	bl	810395c <RCCEx_PLL2_Config>
 81029b2:	4603      	mov	r3, r0
 81029b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81029b6:	e012      	b.n	81029de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	3324      	adds	r3, #36	; 0x24
 81029bc:	2101      	movs	r1, #1
 81029be:	4618      	mov	r0, r3
 81029c0:	f001 f87e 	bl	8103ac0 <RCCEx_PLL3_Config>
 81029c4:	4603      	mov	r3, r0
 81029c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81029c8:	e009      	b.n	81029de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81029ca:	2301      	movs	r3, #1
 81029cc:	75fb      	strb	r3, [r7, #23]
      break;
 81029ce:	e006      	b.n	81029de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81029d0:	bf00      	nop
 81029d2:	e004      	b.n	81029de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81029d4:	bf00      	nop
 81029d6:	e002      	b.n	81029de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81029d8:	bf00      	nop
 81029da:	e000      	b.n	81029de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81029de:	7dfb      	ldrb	r3, [r7, #23]
 81029e0:	2b00      	cmp	r3, #0
 81029e2:	d109      	bne.n	81029f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81029e4:	4b2d      	ldr	r3, [pc, #180]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81029e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81029f0:	492a      	ldr	r1, [pc, #168]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81029f2:	4313      	orrs	r3, r2
 81029f4:	650b      	str	r3, [r1, #80]	; 0x50
 81029f6:	e001      	b.n	81029fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029f8:	7dfb      	ldrb	r3, [r7, #23]
 81029fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102a04:	2b00      	cmp	r3, #0
 8102a06:	d04d      	beq.n	8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102a12:	d02e      	beq.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8102a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102a18:	d828      	bhi.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a1e:	d02a      	beq.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8102a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a24:	d822      	bhi.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102a26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102a2a:	d026      	beq.n	8102a7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8102a2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102a30:	d81c      	bhi.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102a36:	d010      	beq.n	8102a5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8102a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102a3c:	d816      	bhi.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102a3e:	2b00      	cmp	r3, #0
 8102a40:	d01d      	beq.n	8102a7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8102a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102a46:	d111      	bne.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	3304      	adds	r3, #4
 8102a4c:	2101      	movs	r1, #1
 8102a4e:	4618      	mov	r0, r3
 8102a50:	f000 ff84 	bl	810395c <RCCEx_PLL2_Config>
 8102a54:	4603      	mov	r3, r0
 8102a56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102a58:	e012      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	3324      	adds	r3, #36	; 0x24
 8102a5e:	2101      	movs	r1, #1
 8102a60:	4618      	mov	r0, r3
 8102a62:	f001 f82d 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102a66:	4603      	mov	r3, r0
 8102a68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102a6a:	e009      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8102a6c:	2301      	movs	r3, #1
 8102a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8102a70:	e006      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102a72:	bf00      	nop
 8102a74:	e004      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102a76:	bf00      	nop
 8102a78:	e002      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102a7a:	bf00      	nop
 8102a7c:	e000      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a80:	7dfb      	ldrb	r3, [r7, #23]
 8102a82:	2b00      	cmp	r3, #0
 8102a84:	d10c      	bne.n	8102aa0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102a86:	4b05      	ldr	r3, [pc, #20]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102a94:	4901      	ldr	r1, [pc, #4]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a96:	4313      	orrs	r3, r2
 8102a98:	658b      	str	r3, [r1, #88]	; 0x58
 8102a9a:	e003      	b.n	8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8102a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aa0:	7dfb      	ldrb	r3, [r7, #23]
 8102aa2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102aac:	2b00      	cmp	r3, #0
 8102aae:	d02f      	beq.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ab8:	d00e      	beq.n	8102ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8102aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102abe:	d814      	bhi.n	8102aea <HAL_RCCEx_PeriphCLKConfig+0x596>
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d015      	beq.n	8102af0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8102ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102ac8:	d10f      	bne.n	8102aea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102aca:	4bb0      	ldr	r3, [pc, #704]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ace:	4aaf      	ldr	r2, [pc, #700]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102ad6:	e00c      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	3304      	adds	r3, #4
 8102adc:	2101      	movs	r1, #1
 8102ade:	4618      	mov	r0, r3
 8102ae0:	f000 ff3c 	bl	810395c <RCCEx_PLL2_Config>
 8102ae4:	4603      	mov	r3, r0
 8102ae6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102ae8:	e003      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102aea:	2301      	movs	r3, #1
 8102aec:	75fb      	strb	r3, [r7, #23]
      break;
 8102aee:	e000      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8102af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102af2:	7dfb      	ldrb	r3, [r7, #23]
 8102af4:	2b00      	cmp	r3, #0
 8102af6:	d109      	bne.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102af8:	4ba4      	ldr	r3, [pc, #656]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102afc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b04:	49a1      	ldr	r1, [pc, #644]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102b06:	4313      	orrs	r3, r2
 8102b08:	650b      	str	r3, [r1, #80]	; 0x50
 8102b0a:	e001      	b.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b0c:	7dfb      	ldrb	r3, [r7, #23]
 8102b0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	d032      	beq.n	8102b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b20:	2b03      	cmp	r3, #3
 8102b22:	d81b      	bhi.n	8102b5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102b24:	a201      	add	r2, pc, #4	; (adr r2, 8102b2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8102b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b2a:	bf00      	nop
 8102b2c:	08102b63 	.word	0x08102b63
 8102b30:	08102b3d 	.word	0x08102b3d
 8102b34:	08102b4b 	.word	0x08102b4b
 8102b38:	08102b63 	.word	0x08102b63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b3c:	4b93      	ldr	r3, [pc, #588]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b40:	4a92      	ldr	r2, [pc, #584]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102b48:	e00c      	b.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	3304      	adds	r3, #4
 8102b4e:	2102      	movs	r1, #2
 8102b50:	4618      	mov	r0, r3
 8102b52:	f000 ff03 	bl	810395c <RCCEx_PLL2_Config>
 8102b56:	4603      	mov	r3, r0
 8102b58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102b5a:	e003      	b.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102b5c:	2301      	movs	r3, #1
 8102b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8102b60:	e000      	b.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8102b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b64:	7dfb      	ldrb	r3, [r7, #23]
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d109      	bne.n	8102b7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102b6a:	4b88      	ldr	r3, [pc, #544]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102b6e:	f023 0203 	bic.w	r2, r3, #3
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b76:	4985      	ldr	r1, [pc, #532]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102b78:	4313      	orrs	r3, r2
 8102b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102b7c:	e001      	b.n	8102b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b7e:	7dfb      	ldrb	r3, [r7, #23]
 8102b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	f000 8088 	beq.w	8102ca0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102b90:	4b7f      	ldr	r3, [pc, #508]	; (8102d90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	4a7e      	ldr	r2, [pc, #504]	; (8102d90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102b9c:	f7fe ffb4 	bl	8101b08 <HAL_GetTick>
 8102ba0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102ba2:	e009      	b.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102ba4:	f7fe ffb0 	bl	8101b08 <HAL_GetTick>
 8102ba8:	4602      	mov	r2, r0
 8102baa:	693b      	ldr	r3, [r7, #16]
 8102bac:	1ad3      	subs	r3, r2, r3
 8102bae:	2b64      	cmp	r3, #100	; 0x64
 8102bb0:	d902      	bls.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8102bb2:	2303      	movs	r3, #3
 8102bb4:	75fb      	strb	r3, [r7, #23]
        break;
 8102bb6:	e005      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102bb8:	4b75      	ldr	r3, [pc, #468]	; (8102d90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102bc0:	2b00      	cmp	r3, #0
 8102bc2:	d0ef      	beq.n	8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8102bc4:	7dfb      	ldrb	r3, [r7, #23]
 8102bc6:	2b00      	cmp	r3, #0
 8102bc8:	d168      	bne.n	8102c9c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102bca:	4b70      	ldr	r3, [pc, #448]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102bcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102bd4:	4053      	eors	r3, r2
 8102bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102bda:	2b00      	cmp	r3, #0
 8102bdc:	d013      	beq.n	8102c06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102bde:	4b6b      	ldr	r3, [pc, #428]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102be6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102be8:	4b68      	ldr	r3, [pc, #416]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102bec:	4a67      	ldr	r2, [pc, #412]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102bf2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102bf4:	4b65      	ldr	r3, [pc, #404]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102bf8:	4a64      	ldr	r2, [pc, #400]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102bfe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102c00:	4a62      	ldr	r2, [pc, #392]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102c10:	d115      	bne.n	8102c3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102c12:	f7fe ff79 	bl	8101b08 <HAL_GetTick>
 8102c16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102c18:	e00b      	b.n	8102c32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102c1a:	f7fe ff75 	bl	8101b08 <HAL_GetTick>
 8102c1e:	4602      	mov	r2, r0
 8102c20:	693b      	ldr	r3, [r7, #16]
 8102c22:	1ad3      	subs	r3, r2, r3
 8102c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d902      	bls.n	8102c32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102c2c:	2303      	movs	r3, #3
 8102c2e:	75fb      	strb	r3, [r7, #23]
            break;
 8102c30:	e005      	b.n	8102c3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102c32:	4b56      	ldr	r3, [pc, #344]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102c36:	f003 0302 	and.w	r3, r3, #2
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d0ed      	beq.n	8102c1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8102c3e:	7dfb      	ldrb	r3, [r7, #23]
 8102c40:	2b00      	cmp	r3, #0
 8102c42:	d128      	bne.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102c52:	d10f      	bne.n	8102c74 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102c54:	4b4d      	ldr	r3, [pc, #308]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c56:	691b      	ldr	r3, [r3, #16]
 8102c58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102c62:	091b      	lsrs	r3, r3, #4
 8102c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102c68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102c6c:	4947      	ldr	r1, [pc, #284]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c6e:	4313      	orrs	r3, r2
 8102c70:	610b      	str	r3, [r1, #16]
 8102c72:	e005      	b.n	8102c80 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102c74:	4b45      	ldr	r3, [pc, #276]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c76:	691b      	ldr	r3, [r3, #16]
 8102c78:	4a44      	ldr	r2, [pc, #272]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8102c7e:	6113      	str	r3, [r2, #16]
 8102c80:	4b42      	ldr	r3, [pc, #264]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102c8e:	493f      	ldr	r1, [pc, #252]	; (8102d8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102c90:	4313      	orrs	r3, r2
 8102c92:	670b      	str	r3, [r1, #112]	; 0x70
 8102c94:	e004      	b.n	8102ca0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102c96:	7dfb      	ldrb	r3, [r7, #23]
 8102c98:	75bb      	strb	r3, [r7, #22]
 8102c9a:	e001      	b.n	8102ca0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c9c:	7dfb      	ldrb	r3, [r7, #23]
 8102c9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	f003 0301 	and.w	r3, r3, #1
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	f000 8083 	beq.w	8102db4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8102cae:	687b      	ldr	r3, [r7, #4]
 8102cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102cb2:	2b28      	cmp	r3, #40	; 0x28
 8102cb4:	d866      	bhi.n	8102d84 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8102cb6:	a201      	add	r2, pc, #4	; (adr r2, 8102cbc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8102cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102cbc:	08102d95 	.word	0x08102d95
 8102cc0:	08102d85 	.word	0x08102d85
 8102cc4:	08102d85 	.word	0x08102d85
 8102cc8:	08102d85 	.word	0x08102d85
 8102ccc:	08102d85 	.word	0x08102d85
 8102cd0:	08102d85 	.word	0x08102d85
 8102cd4:	08102d85 	.word	0x08102d85
 8102cd8:	08102d85 	.word	0x08102d85
 8102cdc:	08102d61 	.word	0x08102d61
 8102ce0:	08102d85 	.word	0x08102d85
 8102ce4:	08102d85 	.word	0x08102d85
 8102ce8:	08102d85 	.word	0x08102d85
 8102cec:	08102d85 	.word	0x08102d85
 8102cf0:	08102d85 	.word	0x08102d85
 8102cf4:	08102d85 	.word	0x08102d85
 8102cf8:	08102d85 	.word	0x08102d85
 8102cfc:	08102d73 	.word	0x08102d73
 8102d00:	08102d85 	.word	0x08102d85
 8102d04:	08102d85 	.word	0x08102d85
 8102d08:	08102d85 	.word	0x08102d85
 8102d0c:	08102d85 	.word	0x08102d85
 8102d10:	08102d85 	.word	0x08102d85
 8102d14:	08102d85 	.word	0x08102d85
 8102d18:	08102d85 	.word	0x08102d85
 8102d1c:	08102d95 	.word	0x08102d95
 8102d20:	08102d85 	.word	0x08102d85
 8102d24:	08102d85 	.word	0x08102d85
 8102d28:	08102d85 	.word	0x08102d85
 8102d2c:	08102d85 	.word	0x08102d85
 8102d30:	08102d85 	.word	0x08102d85
 8102d34:	08102d85 	.word	0x08102d85
 8102d38:	08102d85 	.word	0x08102d85
 8102d3c:	08102d95 	.word	0x08102d95
 8102d40:	08102d85 	.word	0x08102d85
 8102d44:	08102d85 	.word	0x08102d85
 8102d48:	08102d85 	.word	0x08102d85
 8102d4c:	08102d85 	.word	0x08102d85
 8102d50:	08102d85 	.word	0x08102d85
 8102d54:	08102d85 	.word	0x08102d85
 8102d58:	08102d85 	.word	0x08102d85
 8102d5c:	08102d95 	.word	0x08102d95
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	3304      	adds	r3, #4
 8102d64:	2101      	movs	r1, #1
 8102d66:	4618      	mov	r0, r3
 8102d68:	f000 fdf8 	bl	810395c <RCCEx_PLL2_Config>
 8102d6c:	4603      	mov	r3, r0
 8102d6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102d70:	e011      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	3324      	adds	r3, #36	; 0x24
 8102d76:	2101      	movs	r1, #1
 8102d78:	4618      	mov	r0, r3
 8102d7a:	f000 fea1 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102d7e:	4603      	mov	r3, r0
 8102d80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102d82:	e008      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d84:	2301      	movs	r3, #1
 8102d86:	75fb      	strb	r3, [r7, #23]
      break;
 8102d88:	e005      	b.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8102d8a:	bf00      	nop
 8102d8c:	58024400 	.word	0x58024400
 8102d90:	58024800 	.word	0x58024800
      break;
 8102d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d96:	7dfb      	ldrb	r3, [r7, #23]
 8102d98:	2b00      	cmp	r3, #0
 8102d9a:	d109      	bne.n	8102db0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102d9c:	4b96      	ldr	r3, [pc, #600]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102da0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102da8:	4993      	ldr	r1, [pc, #588]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102daa:	4313      	orrs	r3, r2
 8102dac:	654b      	str	r3, [r1, #84]	; 0x54
 8102dae:	e001      	b.n	8102db4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102db0:	7dfb      	ldrb	r3, [r7, #23]
 8102db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	f003 0302 	and.w	r3, r3, #2
 8102dbc:	2b00      	cmp	r3, #0
 8102dbe:	d038      	beq.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102dc4:	2b05      	cmp	r3, #5
 8102dc6:	d821      	bhi.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8102dc8:	a201      	add	r2, pc, #4	; (adr r2, 8102dd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8102dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102dce:	bf00      	nop
 8102dd0:	08102e13 	.word	0x08102e13
 8102dd4:	08102de9 	.word	0x08102de9
 8102dd8:	08102dfb 	.word	0x08102dfb
 8102ddc:	08102e13 	.word	0x08102e13
 8102de0:	08102e13 	.word	0x08102e13
 8102de4:	08102e13 	.word	0x08102e13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	3304      	adds	r3, #4
 8102dec:	2101      	movs	r1, #1
 8102dee:	4618      	mov	r0, r3
 8102df0:	f000 fdb4 	bl	810395c <RCCEx_PLL2_Config>
 8102df4:	4603      	mov	r3, r0
 8102df6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102df8:	e00c      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	3324      	adds	r3, #36	; 0x24
 8102dfe:	2101      	movs	r1, #1
 8102e00:	4618      	mov	r0, r3
 8102e02:	f000 fe5d 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102e06:	4603      	mov	r3, r0
 8102e08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102e0a:	e003      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e0c:	2301      	movs	r3, #1
 8102e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8102e10:	e000      	b.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8102e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e14:	7dfb      	ldrb	r3, [r7, #23]
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d109      	bne.n	8102e2e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102e1a:	4b77      	ldr	r3, [pc, #476]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e1e:	f023 0207 	bic.w	r2, r3, #7
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102e26:	4974      	ldr	r1, [pc, #464]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102e28:	4313      	orrs	r3, r2
 8102e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8102e2c:	e001      	b.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e2e:	7dfb      	ldrb	r3, [r7, #23]
 8102e30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	f003 0304 	and.w	r3, r3, #4
 8102e3a:	2b00      	cmp	r3, #0
 8102e3c:	d03a      	beq.n	8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102e44:	2b05      	cmp	r3, #5
 8102e46:	d821      	bhi.n	8102e8c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8102e48:	a201      	add	r2, pc, #4	; (adr r2, 8102e50 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8102e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e4e:	bf00      	nop
 8102e50:	08102e93 	.word	0x08102e93
 8102e54:	08102e69 	.word	0x08102e69
 8102e58:	08102e7b 	.word	0x08102e7b
 8102e5c:	08102e93 	.word	0x08102e93
 8102e60:	08102e93 	.word	0x08102e93
 8102e64:	08102e93 	.word	0x08102e93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	3304      	adds	r3, #4
 8102e6c:	2101      	movs	r1, #1
 8102e6e:	4618      	mov	r0, r3
 8102e70:	f000 fd74 	bl	810395c <RCCEx_PLL2_Config>
 8102e74:	4603      	mov	r3, r0
 8102e76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102e78:	e00c      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	3324      	adds	r3, #36	; 0x24
 8102e7e:	2101      	movs	r1, #1
 8102e80:	4618      	mov	r0, r3
 8102e82:	f000 fe1d 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102e86:	4603      	mov	r3, r0
 8102e88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102e8a:	e003      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e8c:	2301      	movs	r3, #1
 8102e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8102e90:	e000      	b.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8102e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e94:	7dfb      	ldrb	r3, [r7, #23]
 8102e96:	2b00      	cmp	r3, #0
 8102e98:	d10a      	bne.n	8102eb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102e9a:	4b57      	ldr	r3, [pc, #348]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e9e:	f023 0207 	bic.w	r2, r3, #7
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102ea8:	4953      	ldr	r1, [pc, #332]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102eaa:	4313      	orrs	r3, r2
 8102eac:	658b      	str	r3, [r1, #88]	; 0x58
 8102eae:	e001      	b.n	8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eb0:	7dfb      	ldrb	r3, [r7, #23]
 8102eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	f003 0320 	and.w	r3, r3, #32
 8102ebc:	2b00      	cmp	r3, #0
 8102ebe:	d04b      	beq.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102eca:	d02e      	beq.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102ed0:	d828      	bhi.n	8102f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102ed6:	d02a      	beq.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102edc:	d822      	bhi.n	8102f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102ee2:	d026      	beq.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102ee8:	d81c      	bhi.n	8102f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102eee:	d010      	beq.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8102ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ef4:	d816      	bhi.n	8102f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d01d      	beq.n	8102f36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8102efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102efe:	d111      	bne.n	8102f24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	3304      	adds	r3, #4
 8102f04:	2100      	movs	r1, #0
 8102f06:	4618      	mov	r0, r3
 8102f08:	f000 fd28 	bl	810395c <RCCEx_PLL2_Config>
 8102f0c:	4603      	mov	r3, r0
 8102f0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102f10:	e012      	b.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	3324      	adds	r3, #36	; 0x24
 8102f16:	2102      	movs	r1, #2
 8102f18:	4618      	mov	r0, r3
 8102f1a:	f000 fdd1 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102f1e:	4603      	mov	r3, r0
 8102f20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102f22:	e009      	b.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f24:	2301      	movs	r3, #1
 8102f26:	75fb      	strb	r3, [r7, #23]
      break;
 8102f28:	e006      	b.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102f2a:	bf00      	nop
 8102f2c:	e004      	b.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102f2e:	bf00      	nop
 8102f30:	e002      	b.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102f32:	bf00      	nop
 8102f34:	e000      	b.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f38:	7dfb      	ldrb	r3, [r7, #23]
 8102f3a:	2b00      	cmp	r3, #0
 8102f3c:	d10a      	bne.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102f3e:	4b2e      	ldr	r3, [pc, #184]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102f4c:	492a      	ldr	r1, [pc, #168]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102f4e:	4313      	orrs	r3, r2
 8102f50:	654b      	str	r3, [r1, #84]	; 0x54
 8102f52:	e001      	b.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f54:	7dfb      	ldrb	r3, [r7, #23]
 8102f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d04d      	beq.n	8103000 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102f6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102f6e:	d02e      	beq.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102f70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102f74:	d828      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102f7a:	d02a      	beq.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102f80:	d822      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102f86:	d026      	beq.n	8102fd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102f8c:	d81c      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102f92:	d010      	beq.n	8102fb6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8102f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102f98:	d816      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	d01d      	beq.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8102f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102fa2:	d111      	bne.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	3304      	adds	r3, #4
 8102fa8:	2100      	movs	r1, #0
 8102faa:	4618      	mov	r0, r3
 8102fac:	f000 fcd6 	bl	810395c <RCCEx_PLL2_Config>
 8102fb0:	4603      	mov	r3, r0
 8102fb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102fb4:	e012      	b.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	3324      	adds	r3, #36	; 0x24
 8102fba:	2102      	movs	r1, #2
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f000 fd7f 	bl	8103ac0 <RCCEx_PLL3_Config>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102fc6:	e009      	b.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fc8:	2301      	movs	r3, #1
 8102fca:	75fb      	strb	r3, [r7, #23]
      break;
 8102fcc:	e006      	b.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102fce:	bf00      	nop
 8102fd0:	e004      	b.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102fd2:	bf00      	nop
 8102fd4:	e002      	b.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102fd6:	bf00      	nop
 8102fd8:	e000      	b.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fdc:	7dfb      	ldrb	r3, [r7, #23]
 8102fde:	2b00      	cmp	r3, #0
 8102fe0:	d10c      	bne.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102fe2:	4b05      	ldr	r3, [pc, #20]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102fe6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102ff0:	4901      	ldr	r1, [pc, #4]	; (8102ff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102ff2:	4313      	orrs	r3, r2
 8102ff4:	658b      	str	r3, [r1, #88]	; 0x58
 8102ff6:	e003      	b.n	8103000 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8102ff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ffc:	7dfb      	ldrb	r3, [r7, #23]
 8102ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103008:	2b00      	cmp	r3, #0
 810300a:	d04b      	beq.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103012:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103016:	d02e      	beq.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810301c:	d828      	bhi.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810301e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103022:	d02a      	beq.n	810307a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103028:	d822      	bhi.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810302a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810302e:	d026      	beq.n	810307e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8103030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103034:	d81c      	bhi.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810303a:	d010      	beq.n	810305e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 810303c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103040:	d816      	bhi.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103042:	2b00      	cmp	r3, #0
 8103044:	d01d      	beq.n	8103082 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8103046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810304a:	d111      	bne.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	3304      	adds	r3, #4
 8103050:	2100      	movs	r1, #0
 8103052:	4618      	mov	r0, r3
 8103054:	f000 fc82 	bl	810395c <RCCEx_PLL2_Config>
 8103058:	4603      	mov	r3, r0
 810305a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810305c:	e012      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	3324      	adds	r3, #36	; 0x24
 8103062:	2102      	movs	r1, #2
 8103064:	4618      	mov	r0, r3
 8103066:	f000 fd2b 	bl	8103ac0 <RCCEx_PLL3_Config>
 810306a:	4603      	mov	r3, r0
 810306c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810306e:	e009      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103070:	2301      	movs	r3, #1
 8103072:	75fb      	strb	r3, [r7, #23]
      break;
 8103074:	e006      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103076:	bf00      	nop
 8103078:	e004      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810307a:	bf00      	nop
 810307c:	e002      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810307e:	bf00      	nop
 8103080:	e000      	b.n	8103084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103084:	7dfb      	ldrb	r3, [r7, #23]
 8103086:	2b00      	cmp	r3, #0
 8103088:	d10a      	bne.n	81030a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810308a:	4b9d      	ldr	r3, [pc, #628]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103098:	4999      	ldr	r1, [pc, #612]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810309a:	4313      	orrs	r3, r2
 810309c:	658b      	str	r3, [r1, #88]	; 0x58
 810309e:	e001      	b.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030a0:	7dfb      	ldrb	r3, [r7, #23]
 81030a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	f003 0308 	and.w	r3, r3, #8
 81030ac:	2b00      	cmp	r3, #0
 81030ae:	d01a      	beq.n	81030e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81030ba:	d10a      	bne.n	81030d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	3324      	adds	r3, #36	; 0x24
 81030c0:	2102      	movs	r1, #2
 81030c2:	4618      	mov	r0, r3
 81030c4:	f000 fcfc 	bl	8103ac0 <RCCEx_PLL3_Config>
 81030c8:	4603      	mov	r3, r0
 81030ca:	2b00      	cmp	r3, #0
 81030cc:	d001      	beq.n	81030d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81030ce:	2301      	movs	r3, #1
 81030d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81030d2:	4b8b      	ldr	r3, [pc, #556]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81030e0:	4987      	ldr	r1, [pc, #540]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81030e2:	4313      	orrs	r3, r2
 81030e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	f003 0310 	and.w	r3, r3, #16
 81030ee:	2b00      	cmp	r3, #0
 81030f0:	d01a      	beq.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81030f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81030fc:	d10a      	bne.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	3324      	adds	r3, #36	; 0x24
 8103102:	2102      	movs	r1, #2
 8103104:	4618      	mov	r0, r3
 8103106:	f000 fcdb 	bl	8103ac0 <RCCEx_PLL3_Config>
 810310a:	4603      	mov	r3, r0
 810310c:	2b00      	cmp	r3, #0
 810310e:	d001      	beq.n	8103114 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8103110:	2301      	movs	r3, #1
 8103112:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103114:	4b7a      	ldr	r3, [pc, #488]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103122:	4977      	ldr	r1, [pc, #476]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103124:	4313      	orrs	r3, r2
 8103126:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103130:	2b00      	cmp	r3, #0
 8103132:	d034      	beq.n	810319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810313a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810313e:	d01d      	beq.n	810317c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8103140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103144:	d817      	bhi.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8103146:	2b00      	cmp	r3, #0
 8103148:	d003      	beq.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810314e:	d009      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8103150:	e011      	b.n	8103176 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	3304      	adds	r3, #4
 8103156:	2100      	movs	r1, #0
 8103158:	4618      	mov	r0, r3
 810315a:	f000 fbff 	bl	810395c <RCCEx_PLL2_Config>
 810315e:	4603      	mov	r3, r0
 8103160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103162:	e00c      	b.n	810317e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	3324      	adds	r3, #36	; 0x24
 8103168:	2102      	movs	r1, #2
 810316a:	4618      	mov	r0, r3
 810316c:	f000 fca8 	bl	8103ac0 <RCCEx_PLL3_Config>
 8103170:	4603      	mov	r3, r0
 8103172:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103174:	e003      	b.n	810317e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103176:	2301      	movs	r3, #1
 8103178:	75fb      	strb	r3, [r7, #23]
      break;
 810317a:	e000      	b.n	810317e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 810317c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810317e:	7dfb      	ldrb	r3, [r7, #23]
 8103180:	2b00      	cmp	r3, #0
 8103182:	d10a      	bne.n	810319a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103184:	4b5e      	ldr	r3, [pc, #376]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103192:	495b      	ldr	r1, [pc, #364]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103194:	4313      	orrs	r3, r2
 8103196:	658b      	str	r3, [r1, #88]	; 0x58
 8103198:	e001      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810319a:	7dfb      	ldrb	r3, [r7, #23]
 810319c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d033      	beq.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81031b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81031b4:	d01c      	beq.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81031b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81031ba:	d816      	bhi.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81031bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81031c0:	d003      	beq.n	81031ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81031c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031c6:	d007      	beq.n	81031d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81031c8:	e00f      	b.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031ca:	4b4d      	ldr	r3, [pc, #308]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031ce:	4a4c      	ldr	r2, [pc, #304]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81031d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81031d6:	e00c      	b.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	3324      	adds	r3, #36	; 0x24
 81031dc:	2101      	movs	r1, #1
 81031de:	4618      	mov	r0, r3
 81031e0:	f000 fc6e 	bl	8103ac0 <RCCEx_PLL3_Config>
 81031e4:	4603      	mov	r3, r0
 81031e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81031e8:	e003      	b.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81031ea:	2301      	movs	r3, #1
 81031ec:	75fb      	strb	r3, [r7, #23]
      break;
 81031ee:	e000      	b.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81031f2:	7dfb      	ldrb	r3, [r7, #23]
 81031f4:	2b00      	cmp	r3, #0
 81031f6:	d10a      	bne.n	810320e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81031f8:	4b41      	ldr	r3, [pc, #260]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103206:	493e      	ldr	r1, [pc, #248]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103208:	4313      	orrs	r3, r2
 810320a:	654b      	str	r3, [r1, #84]	; 0x54
 810320c:	e001      	b.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810320e:	7dfb      	ldrb	r3, [r7, #23]
 8103210:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810321a:	2b00      	cmp	r3, #0
 810321c:	d029      	beq.n	8103272 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103222:	2b00      	cmp	r3, #0
 8103224:	d003      	beq.n	810322e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8103226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810322a:	d007      	beq.n	810323c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 810322c:	e00f      	b.n	810324e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810322e:	4b34      	ldr	r3, [pc, #208]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103232:	4a33      	ldr	r2, [pc, #204]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103238:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810323a:	e00b      	b.n	8103254 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	3304      	adds	r3, #4
 8103240:	2102      	movs	r1, #2
 8103242:	4618      	mov	r0, r3
 8103244:	f000 fb8a 	bl	810395c <RCCEx_PLL2_Config>
 8103248:	4603      	mov	r3, r0
 810324a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810324c:	e002      	b.n	8103254 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810324e:	2301      	movs	r3, #1
 8103250:	75fb      	strb	r3, [r7, #23]
      break;
 8103252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103254:	7dfb      	ldrb	r3, [r7, #23]
 8103256:	2b00      	cmp	r3, #0
 8103258:	d109      	bne.n	810326e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810325a:	4b29      	ldr	r3, [pc, #164]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810325e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103266:	4926      	ldr	r1, [pc, #152]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103268:	4313      	orrs	r3, r2
 810326a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810326c:	e001      	b.n	8103272 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810326e:	7dfb      	ldrb	r3, [r7, #23]
 8103270:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810327a:	2b00      	cmp	r3, #0
 810327c:	d00a      	beq.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	3324      	adds	r3, #36	; 0x24
 8103282:	2102      	movs	r1, #2
 8103284:	4618      	mov	r0, r3
 8103286:	f000 fc1b 	bl	8103ac0 <RCCEx_PLL3_Config>
 810328a:	4603      	mov	r3, r0
 810328c:	2b00      	cmp	r3, #0
 810328e:	d001      	beq.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103290:	2301      	movs	r3, #1
 8103292:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810329c:	2b00      	cmp	r3, #0
 810329e:	d033      	beq.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81032a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81032a8:	d017      	beq.n	81032da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81032aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81032ae:	d811      	bhi.n	81032d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81032b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81032b4:	d013      	beq.n	81032de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81032b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81032ba:	d80b      	bhi.n	81032d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d010      	beq.n	81032e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81032c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81032c4:	d106      	bne.n	81032d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032c6:	4b0e      	ldr	r3, [pc, #56]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032ca:	4a0d      	ldr	r2, [pc, #52]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81032d2:	e007      	b.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81032d4:	2301      	movs	r3, #1
 81032d6:	75fb      	strb	r3, [r7, #23]
      break;
 81032d8:	e004      	b.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81032da:	bf00      	nop
 81032dc:	e002      	b.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81032de:	bf00      	nop
 81032e0:	e000      	b.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81032e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032e4:	7dfb      	ldrb	r3, [r7, #23]
 81032e6:	2b00      	cmp	r3, #0
 81032e8:	d10c      	bne.n	8103304 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81032ea:	4b05      	ldr	r3, [pc, #20]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81032f2:	687b      	ldr	r3, [r7, #4]
 81032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81032f6:	4902      	ldr	r1, [pc, #8]	; (8103300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032f8:	4313      	orrs	r3, r2
 81032fa:	654b      	str	r3, [r1, #84]	; 0x54
 81032fc:	e004      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81032fe:	bf00      	nop
 8103300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103304:	7dfb      	ldrb	r3, [r7, #23]
 8103306:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103310:	2b00      	cmp	r3, #0
 8103312:	d008      	beq.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103314:	4b31      	ldr	r3, [pc, #196]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103320:	492e      	ldr	r1, [pc, #184]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103322:	4313      	orrs	r3, r2
 8103324:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810332e:	2b00      	cmp	r3, #0
 8103330:	d009      	beq.n	8103346 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103332:	4b2a      	ldr	r3, [pc, #168]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103334:	691b      	ldr	r3, [r3, #16]
 8103336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103340:	4926      	ldr	r1, [pc, #152]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103342:	4313      	orrs	r3, r2
 8103344:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810334e:	2b00      	cmp	r3, #0
 8103350:	d008      	beq.n	8103364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103352:	4b22      	ldr	r3, [pc, #136]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103356:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810335e:	491f      	ldr	r1, [pc, #124]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103360:	4313      	orrs	r3, r2
 8103362:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810336c:	2b00      	cmp	r3, #0
 810336e:	d00d      	beq.n	810338c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103370:	4b1a      	ldr	r3, [pc, #104]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103372:	691b      	ldr	r3, [r3, #16]
 8103374:	4a19      	ldr	r2, [pc, #100]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810337a:	6113      	str	r3, [r2, #16]
 810337c:	4b17      	ldr	r3, [pc, #92]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810337e:	691a      	ldr	r2, [r3, #16]
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103386:	4915      	ldr	r1, [pc, #84]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103388:	4313      	orrs	r3, r2
 810338a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	2b00      	cmp	r3, #0
 8103392:	da08      	bge.n	81033a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103394:	4b11      	ldr	r3, [pc, #68]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033a0:	490e      	ldr	r1, [pc, #56]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81033a2:	4313      	orrs	r3, r2
 81033a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81033ae:	2b00      	cmp	r3, #0
 81033b0:	d009      	beq.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81033b2:	4b0a      	ldr	r3, [pc, #40]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81033c0:	4906      	ldr	r1, [pc, #24]	; (81033dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81033c2:	4313      	orrs	r3, r2
 81033c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81033c6:	7dbb      	ldrb	r3, [r7, #22]
 81033c8:	2b00      	cmp	r3, #0
 81033ca:	d101      	bne.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81033cc:	2300      	movs	r3, #0
 81033ce:	e000      	b.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81033d0:	2301      	movs	r3, #1
}
 81033d2:	4618      	mov	r0, r3
 81033d4:	3718      	adds	r7, #24
 81033d6:	46bd      	mov	sp, r7
 81033d8:	bd80      	pop	{r7, pc}
 81033da:	bf00      	nop
 81033dc:	58024400 	.word	0x58024400

081033e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81033e0:	b580      	push	{r7, lr}
 81033e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81033e4:	f7ff f858 	bl	8102498 <HAL_RCC_GetHCLKFreq>
 81033e8:	4602      	mov	r2, r0
 81033ea:	4b06      	ldr	r3, [pc, #24]	; (8103404 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81033ec:	6a1b      	ldr	r3, [r3, #32]
 81033ee:	091b      	lsrs	r3, r3, #4
 81033f0:	f003 0307 	and.w	r3, r3, #7
 81033f4:	4904      	ldr	r1, [pc, #16]	; (8103408 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81033f6:	5ccb      	ldrb	r3, [r1, r3]
 81033f8:	f003 031f 	and.w	r3, r3, #31
 81033fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103400:	4618      	mov	r0, r3
 8103402:	bd80      	pop	{r7, pc}
 8103404:	58024400 	.word	0x58024400
 8103408:	08108324 	.word	0x08108324

0810340c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810340c:	b480      	push	{r7}
 810340e:	b089      	sub	sp, #36	; 0x24
 8103410:	af00      	add	r7, sp, #0
 8103412:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103414:	4ba1      	ldr	r3, [pc, #644]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103418:	f003 0303 	and.w	r3, r3, #3
 810341c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810341e:	4b9f      	ldr	r3, [pc, #636]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103422:	0b1b      	lsrs	r3, r3, #12
 8103424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103428:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810342a:	4b9c      	ldr	r3, [pc, #624]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810342e:	091b      	lsrs	r3, r3, #4
 8103430:	f003 0301 	and.w	r3, r3, #1
 8103434:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103436:	4b99      	ldr	r3, [pc, #612]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810343a:	08db      	lsrs	r3, r3, #3
 810343c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103440:	693a      	ldr	r2, [r7, #16]
 8103442:	fb02 f303 	mul.w	r3, r2, r3
 8103446:	ee07 3a90 	vmov	s15, r3
 810344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810344e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103452:	697b      	ldr	r3, [r7, #20]
 8103454:	2b00      	cmp	r3, #0
 8103456:	f000 8111 	beq.w	810367c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810345a:	69bb      	ldr	r3, [r7, #24]
 810345c:	2b02      	cmp	r3, #2
 810345e:	f000 8083 	beq.w	8103568 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103462:	69bb      	ldr	r3, [r7, #24]
 8103464:	2b02      	cmp	r3, #2
 8103466:	f200 80a1 	bhi.w	81035ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810346a:	69bb      	ldr	r3, [r7, #24]
 810346c:	2b00      	cmp	r3, #0
 810346e:	d003      	beq.n	8103478 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103470:	69bb      	ldr	r3, [r7, #24]
 8103472:	2b01      	cmp	r3, #1
 8103474:	d056      	beq.n	8103524 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103476:	e099      	b.n	81035ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103478:	4b88      	ldr	r3, [pc, #544]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	f003 0320 	and.w	r3, r3, #32
 8103480:	2b00      	cmp	r3, #0
 8103482:	d02d      	beq.n	81034e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103484:	4b85      	ldr	r3, [pc, #532]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	08db      	lsrs	r3, r3, #3
 810348a:	f003 0303 	and.w	r3, r3, #3
 810348e:	4a84      	ldr	r2, [pc, #528]	; (81036a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103490:	fa22 f303 	lsr.w	r3, r2, r3
 8103494:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103496:	68bb      	ldr	r3, [r7, #8]
 8103498:	ee07 3a90 	vmov	s15, r3
 810349c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034a0:	697b      	ldr	r3, [r7, #20]
 81034a2:	ee07 3a90 	vmov	s15, r3
 81034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034ae:	4b7b      	ldr	r3, [pc, #492]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81034b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034b6:	ee07 3a90 	vmov	s15, r3
 81034ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034be:	ed97 6a03 	vldr	s12, [r7, #12]
 81034c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 81036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81034c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81034de:	e087      	b.n	81035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81034e0:	697b      	ldr	r3, [r7, #20]
 81034e2:	ee07 3a90 	vmov	s15, r3
 81034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81036a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81034ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034f2:	4b6a      	ldr	r3, [pc, #424]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81034f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034fa:	ee07 3a90 	vmov	s15, r3
 81034fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103502:	ed97 6a03 	vldr	s12, [r7, #12]
 8103506:	eddf 5a67 	vldr	s11, [pc, #412]	; 81036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810350a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810350e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810351e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103522:	e065      	b.n	81035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103524:	697b      	ldr	r3, [r7, #20]
 8103526:	ee07 3a90 	vmov	s15, r3
 810352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810352e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81036ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103536:	4b59      	ldr	r3, [pc, #356]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810353e:	ee07 3a90 	vmov	s15, r3
 8103542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103546:	ed97 6a03 	vldr	s12, [r7, #12]
 810354a:	eddf 5a56 	vldr	s11, [pc, #344]	; 81036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103566:	e043      	b.n	81035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103568:	697b      	ldr	r3, [r7, #20]
 810356a:	ee07 3a90 	vmov	s15, r3
 810356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103572:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810357a:	4b48      	ldr	r3, [pc, #288]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103582:	ee07 3a90 	vmov	s15, r3
 8103586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810358a:	ed97 6a03 	vldr	s12, [r7, #12]
 810358e:	eddf 5a45 	vldr	s11, [pc, #276]	; 81036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810359a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81035aa:	e021      	b.n	81035f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81035ac:	697b      	ldr	r3, [r7, #20]
 81035ae:	ee07 3a90 	vmov	s15, r3
 81035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81036ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035be:	4b37      	ldr	r3, [pc, #220]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035c6:	ee07 3a90 	vmov	s15, r3
 81035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81035d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 81036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81035ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81035f0:	4b2a      	ldr	r3, [pc, #168]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81035f4:	0a5b      	lsrs	r3, r3, #9
 81035f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81035fa:	ee07 3a90 	vmov	s15, r3
 81035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103606:	ee37 7a87 	vadd.f32	s14, s15, s14
 810360a:	edd7 6a07 	vldr	s13, [r7, #28]
 810360e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103616:	ee17 2a90 	vmov	r2, s15
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810361e:	4b1f      	ldr	r3, [pc, #124]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103622:	0c1b      	lsrs	r3, r3, #16
 8103624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103628:	ee07 3a90 	vmov	s15, r3
 810362c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103638:	edd7 6a07 	vldr	s13, [r7, #28]
 810363c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103644:	ee17 2a90 	vmov	r2, s15
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810364c:	4b13      	ldr	r3, [pc, #76]	; (810369c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103650:	0e1b      	lsrs	r3, r3, #24
 8103652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103656:	ee07 3a90 	vmov	s15, r3
 810365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810365e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103666:	edd7 6a07 	vldr	s13, [r7, #28]
 810366a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810366e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103672:	ee17 2a90 	vmov	r2, s15
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810367a:	e008      	b.n	810368e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	2200      	movs	r2, #0
 8103680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	2200      	movs	r2, #0
 8103686:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	2200      	movs	r2, #0
 810368c:	609a      	str	r2, [r3, #8]
}
 810368e:	bf00      	nop
 8103690:	3724      	adds	r7, #36	; 0x24
 8103692:	46bd      	mov	sp, r7
 8103694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103698:	4770      	bx	lr
 810369a:	bf00      	nop
 810369c:	58024400 	.word	0x58024400
 81036a0:	03d09000 	.word	0x03d09000
 81036a4:	46000000 	.word	0x46000000
 81036a8:	4c742400 	.word	0x4c742400
 81036ac:	4a742400 	.word	0x4a742400
 81036b0:	4af42400 	.word	0x4af42400

081036b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81036b4:	b480      	push	{r7}
 81036b6:	b089      	sub	sp, #36	; 0x24
 81036b8:	af00      	add	r7, sp, #0
 81036ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81036bc:	4ba1      	ldr	r3, [pc, #644]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036c0:	f003 0303 	and.w	r3, r3, #3
 81036c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81036c6:	4b9f      	ldr	r3, [pc, #636]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036ca:	0d1b      	lsrs	r3, r3, #20
 81036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81036d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81036d2:	4b9c      	ldr	r3, [pc, #624]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036d6:	0a1b      	lsrs	r3, r3, #8
 81036d8:	f003 0301 	and.w	r3, r3, #1
 81036dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81036de:	4b99      	ldr	r3, [pc, #612]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81036e2:	08db      	lsrs	r3, r3, #3
 81036e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81036e8:	693a      	ldr	r2, [r7, #16]
 81036ea:	fb02 f303 	mul.w	r3, r2, r3
 81036ee:	ee07 3a90 	vmov	s15, r3
 81036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81036fa:	697b      	ldr	r3, [r7, #20]
 81036fc:	2b00      	cmp	r3, #0
 81036fe:	f000 8111 	beq.w	8103924 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103702:	69bb      	ldr	r3, [r7, #24]
 8103704:	2b02      	cmp	r3, #2
 8103706:	f000 8083 	beq.w	8103810 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810370a:	69bb      	ldr	r3, [r7, #24]
 810370c:	2b02      	cmp	r3, #2
 810370e:	f200 80a1 	bhi.w	8103854 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103712:	69bb      	ldr	r3, [r7, #24]
 8103714:	2b00      	cmp	r3, #0
 8103716:	d003      	beq.n	8103720 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103718:	69bb      	ldr	r3, [r7, #24]
 810371a:	2b01      	cmp	r3, #1
 810371c:	d056      	beq.n	81037cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810371e:	e099      	b.n	8103854 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103720:	4b88      	ldr	r3, [pc, #544]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103722:	681b      	ldr	r3, [r3, #0]
 8103724:	f003 0320 	and.w	r3, r3, #32
 8103728:	2b00      	cmp	r3, #0
 810372a:	d02d      	beq.n	8103788 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810372c:	4b85      	ldr	r3, [pc, #532]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	08db      	lsrs	r3, r3, #3
 8103732:	f003 0303 	and.w	r3, r3, #3
 8103736:	4a84      	ldr	r2, [pc, #528]	; (8103948 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103738:	fa22 f303 	lsr.w	r3, r2, r3
 810373c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810373e:	68bb      	ldr	r3, [r7, #8]
 8103740:	ee07 3a90 	vmov	s15, r3
 8103744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103748:	697b      	ldr	r3, [r7, #20]
 810374a:	ee07 3a90 	vmov	s15, r3
 810374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103756:	4b7b      	ldr	r3, [pc, #492]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810375e:	ee07 3a90 	vmov	s15, r3
 8103762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103766:	ed97 6a03 	vldr	s12, [r7, #12]
 810376a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810394c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103782:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103786:	e087      	b.n	8103898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103788:	697b      	ldr	r3, [r7, #20]
 810378a:	ee07 3a90 	vmov	s15, r3
 810378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103792:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103950 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810379a:	4b6a      	ldr	r3, [pc, #424]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037a2:	ee07 3a90 	vmov	s15, r3
 81037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81037ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 810394c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81037ca:	e065      	b.n	8103898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81037cc:	697b      	ldr	r3, [r7, #20]
 81037ce:	ee07 3a90 	vmov	s15, r3
 81037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037de:	4b59      	ldr	r3, [pc, #356]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037e6:	ee07 3a90 	vmov	s15, r3
 81037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81037f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810394c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103806:	ee67 7a27 	vmul.f32	s15, s14, s15
 810380a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810380e:	e043      	b.n	8103898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103810:	697b      	ldr	r3, [r7, #20]
 8103812:	ee07 3a90 	vmov	s15, r3
 8103816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810381a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103822:	4b48      	ldr	r3, [pc, #288]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810382a:	ee07 3a90 	vmov	s15, r3
 810382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103832:	ed97 6a03 	vldr	s12, [r7, #12]
 8103836:	eddf 5a45 	vldr	s11, [pc, #276]	; 810394c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810384e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103852:	e021      	b.n	8103898 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103854:	697b      	ldr	r3, [r7, #20]
 8103856:	ee07 3a90 	vmov	s15, r3
 810385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810385e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103866:	4b37      	ldr	r3, [pc, #220]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810386e:	ee07 3a90 	vmov	s15, r3
 8103872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103876:	ed97 6a03 	vldr	s12, [r7, #12]
 810387a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810394c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810387e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810388a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103896:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103898:	4b2a      	ldr	r3, [pc, #168]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810389c:	0a5b      	lsrs	r3, r3, #9
 810389e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038a2:	ee07 3a90 	vmov	s15, r3
 81038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81038ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81038b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81038b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81038ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81038be:	ee17 2a90 	vmov	r2, s15
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81038c6:	4b1f      	ldr	r3, [pc, #124]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038ca:	0c1b      	lsrs	r3, r3, #16
 81038cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038d0:	ee07 3a90 	vmov	s15, r3
 81038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81038dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81038e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81038e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81038e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81038ec:	ee17 2a90 	vmov	r2, s15
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81038f4:	4b13      	ldr	r3, [pc, #76]	; (8103944 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038f8:	0e1b      	lsrs	r3, r3, #24
 81038fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038fe:	ee07 3a90 	vmov	s15, r3
 8103902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810390a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810390e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810391a:	ee17 2a90 	vmov	r2, s15
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103922:	e008      	b.n	8103936 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	2200      	movs	r2, #0
 8103928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	2200      	movs	r2, #0
 810392e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	2200      	movs	r2, #0
 8103934:	609a      	str	r2, [r3, #8]
}
 8103936:	bf00      	nop
 8103938:	3724      	adds	r7, #36	; 0x24
 810393a:	46bd      	mov	sp, r7
 810393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103940:	4770      	bx	lr
 8103942:	bf00      	nop
 8103944:	58024400 	.word	0x58024400
 8103948:	03d09000 	.word	0x03d09000
 810394c:	46000000 	.word	0x46000000
 8103950:	4c742400 	.word	0x4c742400
 8103954:	4a742400 	.word	0x4a742400
 8103958:	4af42400 	.word	0x4af42400

0810395c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810395c:	b580      	push	{r7, lr}
 810395e:	b084      	sub	sp, #16
 8103960:	af00      	add	r7, sp, #0
 8103962:	6078      	str	r0, [r7, #4]
 8103964:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103966:	2300      	movs	r3, #0
 8103968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810396a:	4b54      	ldr	r3, [pc, #336]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 810396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810396e:	f003 0303 	and.w	r3, r3, #3
 8103972:	2b03      	cmp	r3, #3
 8103974:	d101      	bne.n	810397a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103976:	2301      	movs	r3, #1
 8103978:	e09b      	b.n	8103ab2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810397a:	4b50      	ldr	r3, [pc, #320]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4a4f      	ldr	r2, [pc, #316]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103980:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103986:	f7fe f8bf 	bl	8101b08 <HAL_GetTick>
 810398a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810398c:	e008      	b.n	81039a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810398e:	f7fe f8bb 	bl	8101b08 <HAL_GetTick>
 8103992:	4602      	mov	r2, r0
 8103994:	68bb      	ldr	r3, [r7, #8]
 8103996:	1ad3      	subs	r3, r2, r3
 8103998:	2b02      	cmp	r3, #2
 810399a:	d901      	bls.n	81039a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810399c:	2303      	movs	r3, #3
 810399e:	e088      	b.n	8103ab2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81039a0:	4b46      	ldr	r3, [pc, #280]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81039a8:	2b00      	cmp	r3, #0
 81039aa:	d1f0      	bne.n	810398e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81039ac:	4b43      	ldr	r3, [pc, #268]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 81039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	031b      	lsls	r3, r3, #12
 81039ba:	4940      	ldr	r1, [pc, #256]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 81039bc:	4313      	orrs	r3, r2
 81039be:	628b      	str	r3, [r1, #40]	; 0x28
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	685b      	ldr	r3, [r3, #4]
 81039c4:	3b01      	subs	r3, #1
 81039c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	689b      	ldr	r3, [r3, #8]
 81039ce:	3b01      	subs	r3, #1
 81039d0:	025b      	lsls	r3, r3, #9
 81039d2:	b29b      	uxth	r3, r3
 81039d4:	431a      	orrs	r2, r3
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	68db      	ldr	r3, [r3, #12]
 81039da:	3b01      	subs	r3, #1
 81039dc:	041b      	lsls	r3, r3, #16
 81039de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81039e2:	431a      	orrs	r2, r3
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	691b      	ldr	r3, [r3, #16]
 81039e8:	3b01      	subs	r3, #1
 81039ea:	061b      	lsls	r3, r3, #24
 81039ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81039f0:	4932      	ldr	r1, [pc, #200]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 81039f2:	4313      	orrs	r3, r2
 81039f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81039f6:	4b31      	ldr	r3, [pc, #196]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 81039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	695b      	ldr	r3, [r3, #20]
 8103a02:	492e      	ldr	r1, [pc, #184]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a04:	4313      	orrs	r3, r2
 8103a06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103a08:	4b2c      	ldr	r3, [pc, #176]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a0c:	f023 0220 	bic.w	r2, r3, #32
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	699b      	ldr	r3, [r3, #24]
 8103a14:	4929      	ldr	r1, [pc, #164]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a16:	4313      	orrs	r3, r2
 8103a18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103a1a:	4b28      	ldr	r3, [pc, #160]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a1e:	4a27      	ldr	r2, [pc, #156]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a20:	f023 0310 	bic.w	r3, r3, #16
 8103a24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103a26:	4b25      	ldr	r3, [pc, #148]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103a2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103a32:	687a      	ldr	r2, [r7, #4]
 8103a34:	69d2      	ldr	r2, [r2, #28]
 8103a36:	00d2      	lsls	r2, r2, #3
 8103a38:	4920      	ldr	r1, [pc, #128]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a3a:	4313      	orrs	r3, r2
 8103a3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103a3e:	4b1f      	ldr	r3, [pc, #124]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a42:	4a1e      	ldr	r2, [pc, #120]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a44:	f043 0310 	orr.w	r3, r3, #16
 8103a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103a4a:	683b      	ldr	r3, [r7, #0]
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	d106      	bne.n	8103a5e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103a50:	4b1a      	ldr	r3, [pc, #104]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a54:	4a19      	ldr	r2, [pc, #100]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103a5c:	e00f      	b.n	8103a7e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103a5e:	683b      	ldr	r3, [r7, #0]
 8103a60:	2b01      	cmp	r3, #1
 8103a62:	d106      	bne.n	8103a72 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103a64:	4b15      	ldr	r3, [pc, #84]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a68:	4a14      	ldr	r2, [pc, #80]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103a70:	e005      	b.n	8103a7e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103a72:	4b12      	ldr	r3, [pc, #72]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a76:	4a11      	ldr	r2, [pc, #68]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103a7e:	4b0f      	ldr	r3, [pc, #60]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	4a0e      	ldr	r2, [pc, #56]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103a8a:	f7fe f83d 	bl	8101b08 <HAL_GetTick>
 8103a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103a90:	e008      	b.n	8103aa4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103a92:	f7fe f839 	bl	8101b08 <HAL_GetTick>
 8103a96:	4602      	mov	r2, r0
 8103a98:	68bb      	ldr	r3, [r7, #8]
 8103a9a:	1ad3      	subs	r3, r2, r3
 8103a9c:	2b02      	cmp	r3, #2
 8103a9e:	d901      	bls.n	8103aa4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103aa0:	2303      	movs	r3, #3
 8103aa2:	e006      	b.n	8103ab2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103aa4:	4b05      	ldr	r3, [pc, #20]	; (8103abc <RCCEx_PLL2_Config+0x160>)
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	d0f0      	beq.n	8103a92 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	3710      	adds	r7, #16
 8103ab6:	46bd      	mov	sp, r7
 8103ab8:	bd80      	pop	{r7, pc}
 8103aba:	bf00      	nop
 8103abc:	58024400 	.word	0x58024400

08103ac0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103ac0:	b580      	push	{r7, lr}
 8103ac2:	b084      	sub	sp, #16
 8103ac4:	af00      	add	r7, sp, #0
 8103ac6:	6078      	str	r0, [r7, #4]
 8103ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103aca:	2300      	movs	r3, #0
 8103acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103ace:	4b54      	ldr	r3, [pc, #336]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ad2:	f003 0303 	and.w	r3, r3, #3
 8103ad6:	2b03      	cmp	r3, #3
 8103ad8:	d101      	bne.n	8103ade <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103ada:	2301      	movs	r3, #1
 8103adc:	e09b      	b.n	8103c16 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103ade:	4b50      	ldr	r3, [pc, #320]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	4a4f      	ldr	r2, [pc, #316]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103aea:	f7fe f80d 	bl	8101b08 <HAL_GetTick>
 8103aee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103af0:	e008      	b.n	8103b04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103af2:	f7fe f809 	bl	8101b08 <HAL_GetTick>
 8103af6:	4602      	mov	r2, r0
 8103af8:	68bb      	ldr	r3, [r7, #8]
 8103afa:	1ad3      	subs	r3, r2, r3
 8103afc:	2b02      	cmp	r3, #2
 8103afe:	d901      	bls.n	8103b04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103b00:	2303      	movs	r3, #3
 8103b02:	e088      	b.n	8103c16 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103b04:	4b46      	ldr	r3, [pc, #280]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d1f0      	bne.n	8103af2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103b10:	4b43      	ldr	r3, [pc, #268]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	051b      	lsls	r3, r3, #20
 8103b1e:	4940      	ldr	r1, [pc, #256]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b20:	4313      	orrs	r3, r2
 8103b22:	628b      	str	r3, [r1, #40]	; 0x28
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	685b      	ldr	r3, [r3, #4]
 8103b28:	3b01      	subs	r3, #1
 8103b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	689b      	ldr	r3, [r3, #8]
 8103b32:	3b01      	subs	r3, #1
 8103b34:	025b      	lsls	r3, r3, #9
 8103b36:	b29b      	uxth	r3, r3
 8103b38:	431a      	orrs	r2, r3
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	68db      	ldr	r3, [r3, #12]
 8103b3e:	3b01      	subs	r3, #1
 8103b40:	041b      	lsls	r3, r3, #16
 8103b42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103b46:	431a      	orrs	r2, r3
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	691b      	ldr	r3, [r3, #16]
 8103b4c:	3b01      	subs	r3, #1
 8103b4e:	061b      	lsls	r3, r3, #24
 8103b50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103b54:	4932      	ldr	r1, [pc, #200]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b56:	4313      	orrs	r3, r2
 8103b58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103b5a:	4b31      	ldr	r3, [pc, #196]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	695b      	ldr	r3, [r3, #20]
 8103b66:	492e      	ldr	r1, [pc, #184]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b68:	4313      	orrs	r3, r2
 8103b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103b6c:	4b2c      	ldr	r3, [pc, #176]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	699b      	ldr	r3, [r3, #24]
 8103b78:	4929      	ldr	r1, [pc, #164]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b7a:	4313      	orrs	r3, r2
 8103b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103b7e:	4b28      	ldr	r3, [pc, #160]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b82:	4a27      	ldr	r2, [pc, #156]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103b8a:	4b25      	ldr	r3, [pc, #148]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103b92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103b96:	687a      	ldr	r2, [r7, #4]
 8103b98:	69d2      	ldr	r2, [r2, #28]
 8103b9a:	00d2      	lsls	r2, r2, #3
 8103b9c:	4920      	ldr	r1, [pc, #128]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103b9e:	4313      	orrs	r3, r2
 8103ba0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103ba2:	4b1f      	ldr	r3, [pc, #124]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ba6:	4a1e      	ldr	r2, [pc, #120]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103bae:	683b      	ldr	r3, [r7, #0]
 8103bb0:	2b00      	cmp	r3, #0
 8103bb2:	d106      	bne.n	8103bc2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103bb4:	4b1a      	ldr	r3, [pc, #104]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bb8:	4a19      	ldr	r2, [pc, #100]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103bc0:	e00f      	b.n	8103be2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103bc2:	683b      	ldr	r3, [r7, #0]
 8103bc4:	2b01      	cmp	r3, #1
 8103bc6:	d106      	bne.n	8103bd6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103bc8:	4b15      	ldr	r3, [pc, #84]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bcc:	4a14      	ldr	r2, [pc, #80]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103bd4:	e005      	b.n	8103be2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103bd6:	4b12      	ldr	r3, [pc, #72]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bda:	4a11      	ldr	r2, [pc, #68]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103be2:	4b0f      	ldr	r3, [pc, #60]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	4a0e      	ldr	r2, [pc, #56]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103bee:	f7fd ff8b 	bl	8101b08 <HAL_GetTick>
 8103bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103bf4:	e008      	b.n	8103c08 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103bf6:	f7fd ff87 	bl	8101b08 <HAL_GetTick>
 8103bfa:	4602      	mov	r2, r0
 8103bfc:	68bb      	ldr	r3, [r7, #8]
 8103bfe:	1ad3      	subs	r3, r2, r3
 8103c00:	2b02      	cmp	r3, #2
 8103c02:	d901      	bls.n	8103c08 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103c04:	2303      	movs	r3, #3
 8103c06:	e006      	b.n	8103c16 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103c08:	4b05      	ldr	r3, [pc, #20]	; (8103c20 <RCCEx_PLL3_Config+0x160>)
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d0f0      	beq.n	8103bf6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8103c16:	4618      	mov	r0, r3
 8103c18:	3710      	adds	r7, #16
 8103c1a:	46bd      	mov	sp, r7
 8103c1c:	bd80      	pop	{r7, pc}
 8103c1e:	bf00      	nop
 8103c20:	58024400 	.word	0x58024400

08103c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103c24:	b580      	push	{r7, lr}
 8103c26:	b082      	sub	sp, #8
 8103c28:	af00      	add	r7, sp, #0
 8103c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	2b00      	cmp	r3, #0
 8103c30:	d101      	bne.n	8103c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103c32:	2301      	movs	r3, #1
 8103c34:	e049      	b.n	8103cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103c3c:	b2db      	uxtb	r3, r3
 8103c3e:	2b00      	cmp	r3, #0
 8103c40:	d106      	bne.n	8103c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	2200      	movs	r2, #0
 8103c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103c4a:	6878      	ldr	r0, [r7, #4]
 8103c4c:	f7fd fd12 	bl	8101674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	2202      	movs	r2, #2
 8103c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681a      	ldr	r2, [r3, #0]
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	3304      	adds	r3, #4
 8103c60:	4619      	mov	r1, r3
 8103c62:	4610      	mov	r0, r2
 8103c64:	f000 fafa 	bl	810425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	2201      	movs	r2, #1
 8103c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	2201      	movs	r2, #1
 8103c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	2201      	movs	r2, #1
 8103c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	2201      	movs	r2, #1
 8103c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	2201      	movs	r2, #1
 8103c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	2201      	movs	r2, #1
 8103c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	2201      	movs	r2, #1
 8103c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	2201      	movs	r2, #1
 8103ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	2201      	movs	r2, #1
 8103cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	2201      	movs	r2, #1
 8103cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	2201      	movs	r2, #1
 8103cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	2201      	movs	r2, #1
 8103cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103cc8:	2300      	movs	r3, #0
}
 8103cca:	4618      	mov	r0, r3
 8103ccc:	3708      	adds	r7, #8
 8103cce:	46bd      	mov	sp, r7
 8103cd0:	bd80      	pop	{r7, pc}
	...

08103cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103cd4:	b480      	push	{r7}
 8103cd6:	b085      	sub	sp, #20
 8103cd8:	af00      	add	r7, sp, #0
 8103cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103ce2:	b2db      	uxtb	r3, r3
 8103ce4:	2b01      	cmp	r3, #1
 8103ce6:	d001      	beq.n	8103cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103ce8:	2301      	movs	r3, #1
 8103cea:	e054      	b.n	8103d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	2202      	movs	r2, #2
 8103cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	68da      	ldr	r2, [r3, #12]
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	f042 0201 	orr.w	r2, r2, #1
 8103d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a26      	ldr	r2, [pc, #152]	; (8103da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d022      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103d16:	d01d      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	4a22      	ldr	r2, [pc, #136]	; (8103da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d018      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	4a21      	ldr	r2, [pc, #132]	; (8103dac <HAL_TIM_Base_Start_IT+0xd8>)
 8103d28:	4293      	cmp	r3, r2
 8103d2a:	d013      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	4a1f      	ldr	r2, [pc, #124]	; (8103db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8103d32:	4293      	cmp	r3, r2
 8103d34:	d00e      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	4a1e      	ldr	r2, [pc, #120]	; (8103db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8103d3c:	4293      	cmp	r3, r2
 8103d3e:	d009      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	4a1c      	ldr	r2, [pc, #112]	; (8103db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8103d46:	4293      	cmp	r3, r2
 8103d48:	d004      	beq.n	8103d54 <HAL_TIM_Base_Start_IT+0x80>
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	4a1b      	ldr	r2, [pc, #108]	; (8103dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8103d50:	4293      	cmp	r3, r2
 8103d52:	d115      	bne.n	8103d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	681b      	ldr	r3, [r3, #0]
 8103d58:	689a      	ldr	r2, [r3, #8]
 8103d5a:	4b19      	ldr	r3, [pc, #100]	; (8103dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8103d5c:	4013      	ands	r3, r2
 8103d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103d60:	68fb      	ldr	r3, [r7, #12]
 8103d62:	2b06      	cmp	r3, #6
 8103d64:	d015      	beq.n	8103d92 <HAL_TIM_Base_Start_IT+0xbe>
 8103d66:	68fb      	ldr	r3, [r7, #12]
 8103d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d6c:	d011      	beq.n	8103d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	681a      	ldr	r2, [r3, #0]
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	f042 0201 	orr.w	r2, r2, #1
 8103d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103d7e:	e008      	b.n	8103d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	681a      	ldr	r2, [r3, #0]
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	f042 0201 	orr.w	r2, r2, #1
 8103d8e:	601a      	str	r2, [r3, #0]
 8103d90:	e000      	b.n	8103d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103d94:	2300      	movs	r3, #0
}
 8103d96:	4618      	mov	r0, r3
 8103d98:	3714      	adds	r7, #20
 8103d9a:	46bd      	mov	sp, r7
 8103d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103da0:	4770      	bx	lr
 8103da2:	bf00      	nop
 8103da4:	40010000 	.word	0x40010000
 8103da8:	40000400 	.word	0x40000400
 8103dac:	40000800 	.word	0x40000800
 8103db0:	40000c00 	.word	0x40000c00
 8103db4:	40010400 	.word	0x40010400
 8103db8:	40001800 	.word	0x40001800
 8103dbc:	40014000 	.word	0x40014000
 8103dc0:	00010007 	.word	0x00010007

08103dc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8103dc4:	b580      	push	{r7, lr}
 8103dc6:	b086      	sub	sp, #24
 8103dc8:	af00      	add	r7, sp, #0
 8103dca:	6078      	str	r0, [r7, #4]
 8103dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d101      	bne.n	8103dd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8103dd4:	2301      	movs	r3, #1
 8103dd6:	e097      	b.n	8103f08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103dde:	b2db      	uxtb	r3, r3
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	d106      	bne.n	8103df2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	2200      	movs	r2, #0
 8103de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8103dec:	6878      	ldr	r0, [r7, #4]
 8103dee:	f7fd fbd9 	bl	81015a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	2202      	movs	r2, #2
 8103df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	681b      	ldr	r3, [r3, #0]
 8103dfe:	689b      	ldr	r3, [r3, #8]
 8103e00:	687a      	ldr	r2, [r7, #4]
 8103e02:	6812      	ldr	r2, [r2, #0]
 8103e04:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8103e08:	f023 0307 	bic.w	r3, r3, #7
 8103e0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681a      	ldr	r2, [r3, #0]
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	3304      	adds	r3, #4
 8103e16:	4619      	mov	r1, r3
 8103e18:	4610      	mov	r0, r2
 8103e1a:	f000 fa1f 	bl	810425c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	689b      	ldr	r3, [r3, #8]
 8103e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	681b      	ldr	r3, [r3, #0]
 8103e2a:	699b      	ldr	r3, [r3, #24]
 8103e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	6a1b      	ldr	r3, [r3, #32]
 8103e34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8103e36:	683b      	ldr	r3, [r7, #0]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	697a      	ldr	r2, [r7, #20]
 8103e3c:	4313      	orrs	r3, r2
 8103e3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8103e40:	693b      	ldr	r3, [r7, #16]
 8103e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103e46:	f023 0303 	bic.w	r3, r3, #3
 8103e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8103e4c:	683b      	ldr	r3, [r7, #0]
 8103e4e:	689a      	ldr	r2, [r3, #8]
 8103e50:	683b      	ldr	r3, [r7, #0]
 8103e52:	699b      	ldr	r3, [r3, #24]
 8103e54:	021b      	lsls	r3, r3, #8
 8103e56:	4313      	orrs	r3, r2
 8103e58:	693a      	ldr	r2, [r7, #16]
 8103e5a:	4313      	orrs	r3, r2
 8103e5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8103e5e:	693b      	ldr	r3, [r7, #16]
 8103e60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8103e64:	f023 030c 	bic.w	r3, r3, #12
 8103e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8103e6a:	693b      	ldr	r3, [r7, #16]
 8103e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8103e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8103e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8103e76:	683b      	ldr	r3, [r7, #0]
 8103e78:	68da      	ldr	r2, [r3, #12]
 8103e7a:	683b      	ldr	r3, [r7, #0]
 8103e7c:	69db      	ldr	r3, [r3, #28]
 8103e7e:	021b      	lsls	r3, r3, #8
 8103e80:	4313      	orrs	r3, r2
 8103e82:	693a      	ldr	r2, [r7, #16]
 8103e84:	4313      	orrs	r3, r2
 8103e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8103e88:	683b      	ldr	r3, [r7, #0]
 8103e8a:	691b      	ldr	r3, [r3, #16]
 8103e8c:	011a      	lsls	r2, r3, #4
 8103e8e:	683b      	ldr	r3, [r7, #0]
 8103e90:	6a1b      	ldr	r3, [r3, #32]
 8103e92:	031b      	lsls	r3, r3, #12
 8103e94:	4313      	orrs	r3, r2
 8103e96:	693a      	ldr	r2, [r7, #16]
 8103e98:	4313      	orrs	r3, r2
 8103e9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8103ea2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8103eaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8103eac:	683b      	ldr	r3, [r7, #0]
 8103eae:	685a      	ldr	r2, [r3, #4]
 8103eb0:	683b      	ldr	r3, [r7, #0]
 8103eb2:	695b      	ldr	r3, [r3, #20]
 8103eb4:	011b      	lsls	r3, r3, #4
 8103eb6:	4313      	orrs	r3, r2
 8103eb8:	68fa      	ldr	r2, [r7, #12]
 8103eba:	4313      	orrs	r3, r2
 8103ebc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	681b      	ldr	r3, [r3, #0]
 8103ec2:	697a      	ldr	r2, [r7, #20]
 8103ec4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	693a      	ldr	r2, [r7, #16]
 8103ecc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	68fa      	ldr	r2, [r7, #12]
 8103ed4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	2201      	movs	r2, #1
 8103eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	2201      	movs	r2, #1
 8103ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	2201      	movs	r2, #1
 8103eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	2201      	movs	r2, #1
 8103ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	2201      	movs	r2, #1
 8103efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	2201      	movs	r2, #1
 8103f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103f06:	2300      	movs	r3, #0
}
 8103f08:	4618      	mov	r0, r3
 8103f0a:	3718      	adds	r7, #24
 8103f0c:	46bd      	mov	sp, r7
 8103f0e:	bd80      	pop	{r7, pc}

08103f10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8103f10:	b580      	push	{r7, lr}
 8103f12:	b084      	sub	sp, #16
 8103f14:	af00      	add	r7, sp, #0
 8103f16:	6078      	str	r0, [r7, #4]
 8103f18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103f20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103f28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103f30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103f38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8103f3a:	683b      	ldr	r3, [r7, #0]
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	d110      	bne.n	8103f62 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8103f40:	7bfb      	ldrb	r3, [r7, #15]
 8103f42:	2b01      	cmp	r3, #1
 8103f44:	d102      	bne.n	8103f4c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8103f46:	7b7b      	ldrb	r3, [r7, #13]
 8103f48:	2b01      	cmp	r3, #1
 8103f4a:	d001      	beq.n	8103f50 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8103f4c:	2301      	movs	r3, #1
 8103f4e:	e089      	b.n	8104064 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	2202      	movs	r2, #2
 8103f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	2202      	movs	r2, #2
 8103f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103f60:	e031      	b.n	8103fc6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8103f62:	683b      	ldr	r3, [r7, #0]
 8103f64:	2b04      	cmp	r3, #4
 8103f66:	d110      	bne.n	8103f8a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8103f68:	7bbb      	ldrb	r3, [r7, #14]
 8103f6a:	2b01      	cmp	r3, #1
 8103f6c:	d102      	bne.n	8103f74 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8103f6e:	7b3b      	ldrb	r3, [r7, #12]
 8103f70:	2b01      	cmp	r3, #1
 8103f72:	d001      	beq.n	8103f78 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8103f74:	2301      	movs	r3, #1
 8103f76:	e075      	b.n	8104064 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	2202      	movs	r2, #2
 8103f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	2202      	movs	r2, #2
 8103f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103f88:	e01d      	b.n	8103fc6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8103f8a:	7bfb      	ldrb	r3, [r7, #15]
 8103f8c:	2b01      	cmp	r3, #1
 8103f8e:	d108      	bne.n	8103fa2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8103f90:	7bbb      	ldrb	r3, [r7, #14]
 8103f92:	2b01      	cmp	r3, #1
 8103f94:	d105      	bne.n	8103fa2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8103f96:	7b7b      	ldrb	r3, [r7, #13]
 8103f98:	2b01      	cmp	r3, #1
 8103f9a:	d102      	bne.n	8103fa2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8103f9c:	7b3b      	ldrb	r3, [r7, #12]
 8103f9e:	2b01      	cmp	r3, #1
 8103fa0:	d001      	beq.n	8103fa6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8103fa2:	2301      	movs	r3, #1
 8103fa4:	e05e      	b.n	8104064 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	2202      	movs	r2, #2
 8103faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	2202      	movs	r2, #2
 8103fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	2202      	movs	r2, #2
 8103fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	2202      	movs	r2, #2
 8103fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8103fc6:	683b      	ldr	r3, [r7, #0]
 8103fc8:	2b00      	cmp	r3, #0
 8103fca:	d003      	beq.n	8103fd4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8103fcc:	683b      	ldr	r3, [r7, #0]
 8103fce:	2b04      	cmp	r3, #4
 8103fd0:	d010      	beq.n	8103ff4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8103fd2:	e01f      	b.n	8104014 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	2201      	movs	r2, #1
 8103fda:	2100      	movs	r1, #0
 8103fdc:	4618      	mov	r0, r3
 8103fde:	f000 fa73 	bl	81044c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	68da      	ldr	r2, [r3, #12]
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	f042 0202 	orr.w	r2, r2, #2
 8103ff0:	60da      	str	r2, [r3, #12]
      break;
 8103ff2:	e02e      	b.n	8104052 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	2201      	movs	r2, #1
 8103ffa:	2104      	movs	r1, #4
 8103ffc:	4618      	mov	r0, r3
 8103ffe:	f000 fa63 	bl	81044c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	68da      	ldr	r2, [r3, #12]
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	f042 0204 	orr.w	r2, r2, #4
 8104010:	60da      	str	r2, [r3, #12]
      break;
 8104012:	e01e      	b.n	8104052 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	2201      	movs	r2, #1
 810401a:	2100      	movs	r1, #0
 810401c:	4618      	mov	r0, r3
 810401e:	f000 fa53 	bl	81044c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	2201      	movs	r2, #1
 8104028:	2104      	movs	r1, #4
 810402a:	4618      	mov	r0, r3
 810402c:	f000 fa4c 	bl	81044c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	68da      	ldr	r2, [r3, #12]
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	f042 0202 	orr.w	r2, r2, #2
 810403e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	68da      	ldr	r2, [r3, #12]
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	f042 0204 	orr.w	r2, r2, #4
 810404e:	60da      	str	r2, [r3, #12]
      break;
 8104050:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	681a      	ldr	r2, [r3, #0]
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	f042 0201 	orr.w	r2, r2, #1
 8104060:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8104062:	2300      	movs	r3, #0
}
 8104064:	4618      	mov	r0, r3
 8104066:	3710      	adds	r7, #16
 8104068:	46bd      	mov	sp, r7
 810406a:	bd80      	pop	{r7, pc}

0810406c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810406c:	b580      	push	{r7, lr}
 810406e:	b084      	sub	sp, #16
 8104070:	af00      	add	r7, sp, #0
 8104072:	6078      	str	r0, [r7, #4]
 8104074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104076:	2300      	movs	r3, #0
 8104078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104080:	2b01      	cmp	r3, #1
 8104082:	d101      	bne.n	8104088 <HAL_TIM_ConfigClockSource+0x1c>
 8104084:	2302      	movs	r3, #2
 8104086:	e0de      	b.n	8104246 <HAL_TIM_ConfigClockSource+0x1da>
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	2201      	movs	r2, #1
 810408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	2202      	movs	r2, #2
 8104094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	689b      	ldr	r3, [r3, #8]
 810409e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81040a0:	68bb      	ldr	r3, [r7, #8]
 81040a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81040a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81040aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81040ac:	68bb      	ldr	r3, [r7, #8]
 81040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81040b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	68ba      	ldr	r2, [r7, #8]
 81040ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81040bc:	683b      	ldr	r3, [r7, #0]
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	4a63      	ldr	r2, [pc, #396]	; (8104250 <HAL_TIM_ConfigClockSource+0x1e4>)
 81040c2:	4293      	cmp	r3, r2
 81040c4:	f000 80a9 	beq.w	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 81040c8:	4a61      	ldr	r2, [pc, #388]	; (8104250 <HAL_TIM_ConfigClockSource+0x1e4>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	f200 80ae 	bhi.w	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 81040d0:	4a60      	ldr	r2, [pc, #384]	; (8104254 <HAL_TIM_ConfigClockSource+0x1e8>)
 81040d2:	4293      	cmp	r3, r2
 81040d4:	f000 80a1 	beq.w	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 81040d8:	4a5e      	ldr	r2, [pc, #376]	; (8104254 <HAL_TIM_ConfigClockSource+0x1e8>)
 81040da:	4293      	cmp	r3, r2
 81040dc:	f200 80a6 	bhi.w	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 81040e0:	4a5d      	ldr	r2, [pc, #372]	; (8104258 <HAL_TIM_ConfigClockSource+0x1ec>)
 81040e2:	4293      	cmp	r3, r2
 81040e4:	f000 8099 	beq.w	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 81040e8:	4a5b      	ldr	r2, [pc, #364]	; (8104258 <HAL_TIM_ConfigClockSource+0x1ec>)
 81040ea:	4293      	cmp	r3, r2
 81040ec:	f200 809e 	bhi.w	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 81040f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81040f4:	f000 8091 	beq.w	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 81040f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81040fc:	f200 8096 	bhi.w	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 8104100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104104:	f000 8089 	beq.w	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 8104108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810410c:	f200 808e 	bhi.w	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 8104110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104114:	d03e      	beq.n	8104194 <HAL_TIM_ConfigClockSource+0x128>
 8104116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810411a:	f200 8087 	bhi.w	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 810411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104122:	f000 8086 	beq.w	8104232 <HAL_TIM_ConfigClockSource+0x1c6>
 8104126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810412a:	d87f      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 810412c:	2b70      	cmp	r3, #112	; 0x70
 810412e:	d01a      	beq.n	8104166 <HAL_TIM_ConfigClockSource+0xfa>
 8104130:	2b70      	cmp	r3, #112	; 0x70
 8104132:	d87b      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 8104134:	2b60      	cmp	r3, #96	; 0x60
 8104136:	d050      	beq.n	81041da <HAL_TIM_ConfigClockSource+0x16e>
 8104138:	2b60      	cmp	r3, #96	; 0x60
 810413a:	d877      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 810413c:	2b50      	cmp	r3, #80	; 0x50
 810413e:	d03c      	beq.n	81041ba <HAL_TIM_ConfigClockSource+0x14e>
 8104140:	2b50      	cmp	r3, #80	; 0x50
 8104142:	d873      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 8104144:	2b40      	cmp	r3, #64	; 0x40
 8104146:	d058      	beq.n	81041fa <HAL_TIM_ConfigClockSource+0x18e>
 8104148:	2b40      	cmp	r3, #64	; 0x40
 810414a:	d86f      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 810414c:	2b30      	cmp	r3, #48	; 0x30
 810414e:	d064      	beq.n	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 8104150:	2b30      	cmp	r3, #48	; 0x30
 8104152:	d86b      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 8104154:	2b20      	cmp	r3, #32
 8104156:	d060      	beq.n	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 8104158:	2b20      	cmp	r3, #32
 810415a:	d867      	bhi.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
 810415c:	2b00      	cmp	r3, #0
 810415e:	d05c      	beq.n	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 8104160:	2b10      	cmp	r3, #16
 8104162:	d05a      	beq.n	810421a <HAL_TIM_ConfigClockSource+0x1ae>
 8104164:	e062      	b.n	810422c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	6818      	ldr	r0, [r3, #0]
 810416a:	683b      	ldr	r3, [r7, #0]
 810416c:	6899      	ldr	r1, [r3, #8]
 810416e:	683b      	ldr	r3, [r7, #0]
 8104170:	685a      	ldr	r2, [r3, #4]
 8104172:	683b      	ldr	r3, [r7, #0]
 8104174:	68db      	ldr	r3, [r3, #12]
 8104176:	f000 f987 	bl	8104488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	689b      	ldr	r3, [r3, #8]
 8104180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8104182:	68bb      	ldr	r3, [r7, #8]
 8104184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8104188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	68ba      	ldr	r2, [r7, #8]
 8104190:	609a      	str	r2, [r3, #8]
      break;
 8104192:	e04f      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	6818      	ldr	r0, [r3, #0]
 8104198:	683b      	ldr	r3, [r7, #0]
 810419a:	6899      	ldr	r1, [r3, #8]
 810419c:	683b      	ldr	r3, [r7, #0]
 810419e:	685a      	ldr	r2, [r3, #4]
 81041a0:	683b      	ldr	r3, [r7, #0]
 81041a2:	68db      	ldr	r3, [r3, #12]
 81041a4:	f000 f970 	bl	8104488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	689a      	ldr	r2, [r3, #8]
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81041b6:	609a      	str	r2, [r3, #8]
      break;
 81041b8:	e03c      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	6818      	ldr	r0, [r3, #0]
 81041be:	683b      	ldr	r3, [r7, #0]
 81041c0:	6859      	ldr	r1, [r3, #4]
 81041c2:	683b      	ldr	r3, [r7, #0]
 81041c4:	68db      	ldr	r3, [r3, #12]
 81041c6:	461a      	mov	r2, r3
 81041c8:	f000 f8e2 	bl	8104390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	2150      	movs	r1, #80	; 0x50
 81041d2:	4618      	mov	r0, r3
 81041d4:	f000 f93b 	bl	810444e <TIM_ITRx_SetConfig>
      break;
 81041d8:	e02c      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	6818      	ldr	r0, [r3, #0]
 81041de:	683b      	ldr	r3, [r7, #0]
 81041e0:	6859      	ldr	r1, [r3, #4]
 81041e2:	683b      	ldr	r3, [r7, #0]
 81041e4:	68db      	ldr	r3, [r3, #12]
 81041e6:	461a      	mov	r2, r3
 81041e8:	f000 f901 	bl	81043ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	2160      	movs	r1, #96	; 0x60
 81041f2:	4618      	mov	r0, r3
 81041f4:	f000 f92b 	bl	810444e <TIM_ITRx_SetConfig>
      break;
 81041f8:	e01c      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	6818      	ldr	r0, [r3, #0]
 81041fe:	683b      	ldr	r3, [r7, #0]
 8104200:	6859      	ldr	r1, [r3, #4]
 8104202:	683b      	ldr	r3, [r7, #0]
 8104204:	68db      	ldr	r3, [r3, #12]
 8104206:	461a      	mov	r2, r3
 8104208:	f000 f8c2 	bl	8104390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	2140      	movs	r1, #64	; 0x40
 8104212:	4618      	mov	r0, r3
 8104214:	f000 f91b 	bl	810444e <TIM_ITRx_SetConfig>
      break;
 8104218:	e00c      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	681a      	ldr	r2, [r3, #0]
 810421e:	683b      	ldr	r3, [r7, #0]
 8104220:	681b      	ldr	r3, [r3, #0]
 8104222:	4619      	mov	r1, r3
 8104224:	4610      	mov	r0, r2
 8104226:	f000 f912 	bl	810444e <TIM_ITRx_SetConfig>
      break;
 810422a:	e003      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810422c:	2301      	movs	r3, #1
 810422e:	73fb      	strb	r3, [r7, #15]
      break;
 8104230:	e000      	b.n	8104234 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8104232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	2201      	movs	r2, #1
 8104238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	2200      	movs	r2, #0
 8104240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8104244:	7bfb      	ldrb	r3, [r7, #15]
}
 8104246:	4618      	mov	r0, r3
 8104248:	3710      	adds	r7, #16
 810424a:	46bd      	mov	sp, r7
 810424c:	bd80      	pop	{r7, pc}
 810424e:	bf00      	nop
 8104250:	00100040 	.word	0x00100040
 8104254:	00100030 	.word	0x00100030
 8104258:	00100020 	.word	0x00100020

0810425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810425c:	b480      	push	{r7}
 810425e:	b085      	sub	sp, #20
 8104260:	af00      	add	r7, sp, #0
 8104262:	6078      	str	r0, [r7, #4]
 8104264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	4a40      	ldr	r2, [pc, #256]	; (8104370 <TIM_Base_SetConfig+0x114>)
 8104270:	4293      	cmp	r3, r2
 8104272:	d013      	beq.n	810429c <TIM_Base_SetConfig+0x40>
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810427a:	d00f      	beq.n	810429c <TIM_Base_SetConfig+0x40>
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	4a3d      	ldr	r2, [pc, #244]	; (8104374 <TIM_Base_SetConfig+0x118>)
 8104280:	4293      	cmp	r3, r2
 8104282:	d00b      	beq.n	810429c <TIM_Base_SetConfig+0x40>
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	4a3c      	ldr	r2, [pc, #240]	; (8104378 <TIM_Base_SetConfig+0x11c>)
 8104288:	4293      	cmp	r3, r2
 810428a:	d007      	beq.n	810429c <TIM_Base_SetConfig+0x40>
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	4a3b      	ldr	r2, [pc, #236]	; (810437c <TIM_Base_SetConfig+0x120>)
 8104290:	4293      	cmp	r3, r2
 8104292:	d003      	beq.n	810429c <TIM_Base_SetConfig+0x40>
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	4a3a      	ldr	r2, [pc, #232]	; (8104380 <TIM_Base_SetConfig+0x124>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d108      	bne.n	81042ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81042a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81042a4:	683b      	ldr	r3, [r7, #0]
 81042a6:	685b      	ldr	r3, [r3, #4]
 81042a8:	68fa      	ldr	r2, [r7, #12]
 81042aa:	4313      	orrs	r3, r2
 81042ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	4a2f      	ldr	r2, [pc, #188]	; (8104370 <TIM_Base_SetConfig+0x114>)
 81042b2:	4293      	cmp	r3, r2
 81042b4:	d01f      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042bc:	d01b      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	4a2c      	ldr	r2, [pc, #176]	; (8104374 <TIM_Base_SetConfig+0x118>)
 81042c2:	4293      	cmp	r3, r2
 81042c4:	d017      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	4a2b      	ldr	r2, [pc, #172]	; (8104378 <TIM_Base_SetConfig+0x11c>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d013      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	4a2a      	ldr	r2, [pc, #168]	; (810437c <TIM_Base_SetConfig+0x120>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d00f      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	4a29      	ldr	r2, [pc, #164]	; (8104380 <TIM_Base_SetConfig+0x124>)
 81042da:	4293      	cmp	r3, r2
 81042dc:	d00b      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	4a28      	ldr	r2, [pc, #160]	; (8104384 <TIM_Base_SetConfig+0x128>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d007      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	4a27      	ldr	r2, [pc, #156]	; (8104388 <TIM_Base_SetConfig+0x12c>)
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d003      	beq.n	81042f6 <TIM_Base_SetConfig+0x9a>
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	4a26      	ldr	r2, [pc, #152]	; (810438c <TIM_Base_SetConfig+0x130>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d108      	bne.n	8104308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81042f6:	68fb      	ldr	r3, [r7, #12]
 81042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81042fe:	683b      	ldr	r3, [r7, #0]
 8104300:	68db      	ldr	r3, [r3, #12]
 8104302:	68fa      	ldr	r2, [r7, #12]
 8104304:	4313      	orrs	r3, r2
 8104306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810430e:	683b      	ldr	r3, [r7, #0]
 8104310:	695b      	ldr	r3, [r3, #20]
 8104312:	4313      	orrs	r3, r2
 8104314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	68fa      	ldr	r2, [r7, #12]
 810431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810431c:	683b      	ldr	r3, [r7, #0]
 810431e:	689a      	ldr	r2, [r3, #8]
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104324:	683b      	ldr	r3, [r7, #0]
 8104326:	681a      	ldr	r2, [r3, #0]
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	4a10      	ldr	r2, [pc, #64]	; (8104370 <TIM_Base_SetConfig+0x114>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d00f      	beq.n	8104354 <TIM_Base_SetConfig+0xf8>
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	4a12      	ldr	r2, [pc, #72]	; (8104380 <TIM_Base_SetConfig+0x124>)
 8104338:	4293      	cmp	r3, r2
 810433a:	d00b      	beq.n	8104354 <TIM_Base_SetConfig+0xf8>
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	4a11      	ldr	r2, [pc, #68]	; (8104384 <TIM_Base_SetConfig+0x128>)
 8104340:	4293      	cmp	r3, r2
 8104342:	d007      	beq.n	8104354 <TIM_Base_SetConfig+0xf8>
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	4a10      	ldr	r2, [pc, #64]	; (8104388 <TIM_Base_SetConfig+0x12c>)
 8104348:	4293      	cmp	r3, r2
 810434a:	d003      	beq.n	8104354 <TIM_Base_SetConfig+0xf8>
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	4a0f      	ldr	r2, [pc, #60]	; (810438c <TIM_Base_SetConfig+0x130>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d103      	bne.n	810435c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104354:	683b      	ldr	r3, [r7, #0]
 8104356:	691a      	ldr	r2, [r3, #16]
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	2201      	movs	r2, #1
 8104360:	615a      	str	r2, [r3, #20]
}
 8104362:	bf00      	nop
 8104364:	3714      	adds	r7, #20
 8104366:	46bd      	mov	sp, r7
 8104368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810436c:	4770      	bx	lr
 810436e:	bf00      	nop
 8104370:	40010000 	.word	0x40010000
 8104374:	40000400 	.word	0x40000400
 8104378:	40000800 	.word	0x40000800
 810437c:	40000c00 	.word	0x40000c00
 8104380:	40010400 	.word	0x40010400
 8104384:	40014000 	.word	0x40014000
 8104388:	40014400 	.word	0x40014400
 810438c:	40014800 	.word	0x40014800

08104390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104390:	b480      	push	{r7}
 8104392:	b087      	sub	sp, #28
 8104394:	af00      	add	r7, sp, #0
 8104396:	60f8      	str	r0, [r7, #12]
 8104398:	60b9      	str	r1, [r7, #8]
 810439a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	6a1b      	ldr	r3, [r3, #32]
 81043a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81043a2:	68fb      	ldr	r3, [r7, #12]
 81043a4:	6a1b      	ldr	r3, [r3, #32]
 81043a6:	f023 0201 	bic.w	r2, r3, #1
 81043aa:	68fb      	ldr	r3, [r7, #12]
 81043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	699b      	ldr	r3, [r3, #24]
 81043b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81043b4:	693b      	ldr	r3, [r7, #16]
 81043b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81043ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	011b      	lsls	r3, r3, #4
 81043c0:	693a      	ldr	r2, [r7, #16]
 81043c2:	4313      	orrs	r3, r2
 81043c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81043c6:	697b      	ldr	r3, [r7, #20]
 81043c8:	f023 030a 	bic.w	r3, r3, #10
 81043cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81043ce:	697a      	ldr	r2, [r7, #20]
 81043d0:	68bb      	ldr	r3, [r7, #8]
 81043d2:	4313      	orrs	r3, r2
 81043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	693a      	ldr	r2, [r7, #16]
 81043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81043dc:	68fb      	ldr	r3, [r7, #12]
 81043de:	697a      	ldr	r2, [r7, #20]
 81043e0:	621a      	str	r2, [r3, #32]
}
 81043e2:	bf00      	nop
 81043e4:	371c      	adds	r7, #28
 81043e6:	46bd      	mov	sp, r7
 81043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043ec:	4770      	bx	lr

081043ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81043ee:	b480      	push	{r7}
 81043f0:	b087      	sub	sp, #28
 81043f2:	af00      	add	r7, sp, #0
 81043f4:	60f8      	str	r0, [r7, #12]
 81043f6:	60b9      	str	r1, [r7, #8]
 81043f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	6a1b      	ldr	r3, [r3, #32]
 81043fe:	f023 0210 	bic.w	r2, r3, #16
 8104402:	68fb      	ldr	r3, [r7, #12]
 8104404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	699b      	ldr	r3, [r3, #24]
 810440a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	6a1b      	ldr	r3, [r3, #32]
 8104410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8104412:	697b      	ldr	r3, [r7, #20]
 8104414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	031b      	lsls	r3, r3, #12
 810441e:	697a      	ldr	r2, [r7, #20]
 8104420:	4313      	orrs	r3, r2
 8104422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8104424:	693b      	ldr	r3, [r7, #16]
 8104426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810442a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810442c:	68bb      	ldr	r3, [r7, #8]
 810442e:	011b      	lsls	r3, r3, #4
 8104430:	693a      	ldr	r2, [r7, #16]
 8104432:	4313      	orrs	r3, r2
 8104434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8104436:	68fb      	ldr	r3, [r7, #12]
 8104438:	697a      	ldr	r2, [r7, #20]
 810443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	693a      	ldr	r2, [r7, #16]
 8104440:	621a      	str	r2, [r3, #32]
}
 8104442:	bf00      	nop
 8104444:	371c      	adds	r7, #28
 8104446:	46bd      	mov	sp, r7
 8104448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810444c:	4770      	bx	lr

0810444e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810444e:	b480      	push	{r7}
 8104450:	b085      	sub	sp, #20
 8104452:	af00      	add	r7, sp, #0
 8104454:	6078      	str	r0, [r7, #4]
 8104456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	689b      	ldr	r3, [r3, #8]
 810445c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810446a:	683a      	ldr	r2, [r7, #0]
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	4313      	orrs	r3, r2
 8104470:	f043 0307 	orr.w	r3, r3, #7
 8104474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	68fa      	ldr	r2, [r7, #12]
 810447a:	609a      	str	r2, [r3, #8]
}
 810447c:	bf00      	nop
 810447e:	3714      	adds	r7, #20
 8104480:	46bd      	mov	sp, r7
 8104482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104486:	4770      	bx	lr

08104488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8104488:	b480      	push	{r7}
 810448a:	b087      	sub	sp, #28
 810448c:	af00      	add	r7, sp, #0
 810448e:	60f8      	str	r0, [r7, #12]
 8104490:	60b9      	str	r1, [r7, #8]
 8104492:	607a      	str	r2, [r7, #4]
 8104494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	689b      	ldr	r3, [r3, #8]
 810449a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810449c:	697b      	ldr	r3, [r7, #20]
 810449e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81044a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81044a4:	683b      	ldr	r3, [r7, #0]
 81044a6:	021a      	lsls	r2, r3, #8
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	431a      	orrs	r2, r3
 81044ac:	68bb      	ldr	r3, [r7, #8]
 81044ae:	4313      	orrs	r3, r2
 81044b0:	697a      	ldr	r2, [r7, #20]
 81044b2:	4313      	orrs	r3, r2
 81044b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	697a      	ldr	r2, [r7, #20]
 81044ba:	609a      	str	r2, [r3, #8]
}
 81044bc:	bf00      	nop
 81044be:	371c      	adds	r7, #28
 81044c0:	46bd      	mov	sp, r7
 81044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044c6:	4770      	bx	lr

081044c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81044c8:	b480      	push	{r7}
 81044ca:	b087      	sub	sp, #28
 81044cc:	af00      	add	r7, sp, #0
 81044ce:	60f8      	str	r0, [r7, #12]
 81044d0:	60b9      	str	r1, [r7, #8]
 81044d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81044d4:	68bb      	ldr	r3, [r7, #8]
 81044d6:	f003 031f 	and.w	r3, r3, #31
 81044da:	2201      	movs	r2, #1
 81044dc:	fa02 f303 	lsl.w	r3, r2, r3
 81044e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	6a1a      	ldr	r2, [r3, #32]
 81044e6:	697b      	ldr	r3, [r7, #20]
 81044e8:	43db      	mvns	r3, r3
 81044ea:	401a      	ands	r2, r3
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81044f0:	68fb      	ldr	r3, [r7, #12]
 81044f2:	6a1a      	ldr	r2, [r3, #32]
 81044f4:	68bb      	ldr	r3, [r7, #8]
 81044f6:	f003 031f 	and.w	r3, r3, #31
 81044fa:	6879      	ldr	r1, [r7, #4]
 81044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8104500:	431a      	orrs	r2, r3
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	621a      	str	r2, [r3, #32]
}
 8104506:	bf00      	nop
 8104508:	371c      	adds	r7, #28
 810450a:	46bd      	mov	sp, r7
 810450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104510:	4770      	bx	lr
	...

08104514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8104514:	b480      	push	{r7}
 8104516:	b085      	sub	sp, #20
 8104518:	af00      	add	r7, sp, #0
 810451a:	6078      	str	r0, [r7, #4]
 810451c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104524:	2b01      	cmp	r3, #1
 8104526:	d101      	bne.n	810452c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8104528:	2302      	movs	r3, #2
 810452a:	e06d      	b.n	8104608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	2201      	movs	r2, #1
 8104530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	2202      	movs	r2, #2
 8104538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	685b      	ldr	r3, [r3, #4]
 8104542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	689b      	ldr	r3, [r3, #8]
 810454a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	4a30      	ldr	r2, [pc, #192]	; (8104614 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8104552:	4293      	cmp	r3, r2
 8104554:	d004      	beq.n	8104560 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	4a2f      	ldr	r2, [pc, #188]	; (8104618 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810455c:	4293      	cmp	r3, r2
 810455e:	d108      	bne.n	8104572 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8104560:	68fb      	ldr	r3, [r7, #12]
 8104562:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8104566:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8104568:	683b      	ldr	r3, [r7, #0]
 810456a:	685b      	ldr	r3, [r3, #4]
 810456c:	68fa      	ldr	r2, [r7, #12]
 810456e:	4313      	orrs	r3, r2
 8104570:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104578:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810457a:	683b      	ldr	r3, [r7, #0]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	68fa      	ldr	r2, [r7, #12]
 8104580:	4313      	orrs	r3, r2
 8104582:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	68fa      	ldr	r2, [r7, #12]
 810458a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	4a20      	ldr	r2, [pc, #128]	; (8104614 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8104592:	4293      	cmp	r3, r2
 8104594:	d022      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810459e:	d01d      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	4a1d      	ldr	r2, [pc, #116]	; (810461c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81045a6:	4293      	cmp	r3, r2
 81045a8:	d018      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	4a1c      	ldr	r2, [pc, #112]	; (8104620 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81045b0:	4293      	cmp	r3, r2
 81045b2:	d013      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	4a1a      	ldr	r2, [pc, #104]	; (8104624 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d00e      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a15      	ldr	r2, [pc, #84]	; (8104618 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81045c4:	4293      	cmp	r3, r2
 81045c6:	d009      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a16      	ldr	r2, [pc, #88]	; (8104628 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d004      	beq.n	81045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a15      	ldr	r2, [pc, #84]	; (810462c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d10c      	bne.n	81045f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81045dc:	68bb      	ldr	r3, [r7, #8]
 81045de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81045e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81045e4:	683b      	ldr	r3, [r7, #0]
 81045e6:	689b      	ldr	r3, [r3, #8]
 81045e8:	68ba      	ldr	r2, [r7, #8]
 81045ea:	4313      	orrs	r3, r2
 81045ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	681b      	ldr	r3, [r3, #0]
 81045f2:	68ba      	ldr	r2, [r7, #8]
 81045f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	2201      	movs	r2, #1
 81045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	2200      	movs	r2, #0
 8104602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104606:	2300      	movs	r3, #0
}
 8104608:	4618      	mov	r0, r3
 810460a:	3714      	adds	r7, #20
 810460c:	46bd      	mov	sp, r7
 810460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104612:	4770      	bx	lr
 8104614:	40010000 	.word	0x40010000
 8104618:	40010400 	.word	0x40010400
 810461c:	40000400 	.word	0x40000400
 8104620:	40000800 	.word	0x40000800
 8104624:	40000c00 	.word	0x40000c00
 8104628:	40001800 	.word	0x40001800
 810462c:	40014000 	.word	0x40014000

08104630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104630:	b580      	push	{r7, lr}
 8104632:	b082      	sub	sp, #8
 8104634:	af00      	add	r7, sp, #0
 8104636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	2b00      	cmp	r3, #0
 810463c:	d101      	bne.n	8104642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810463e:	2301      	movs	r3, #1
 8104640:	e042      	b.n	81046c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104648:	2b00      	cmp	r3, #0
 810464a:	d106      	bne.n	810465a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	2200      	movs	r2, #0
 8104650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104654:	6878      	ldr	r0, [r7, #4]
 8104656:	f7fd f82f 	bl	81016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	2224      	movs	r2, #36	; 0x24
 810465e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	681a      	ldr	r2, [r3, #0]
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	f022 0201 	bic.w	r2, r2, #1
 8104670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104672:	6878      	ldr	r0, [r7, #4]
 8104674:	f000 f8c2 	bl	81047fc <UART_SetConfig>
 8104678:	4603      	mov	r3, r0
 810467a:	2b01      	cmp	r3, #1
 810467c:	d101      	bne.n	8104682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810467e:	2301      	movs	r3, #1
 8104680:	e022      	b.n	81046c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104686:	2b00      	cmp	r3, #0
 8104688:	d002      	beq.n	8104690 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810468a:	6878      	ldr	r0, [r7, #4]
 810468c:	f000 fe1e 	bl	81052cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	685a      	ldr	r2, [r3, #4]
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810469e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	681b      	ldr	r3, [r3, #0]
 81046a4:	689a      	ldr	r2, [r3, #8]
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81046ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	681a      	ldr	r2, [r3, #0]
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	f042 0201 	orr.w	r2, r2, #1
 81046be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81046c0:	6878      	ldr	r0, [r7, #4]
 81046c2:	f000 fea5 	bl	8105410 <UART_CheckIdleState>
 81046c6:	4603      	mov	r3, r0
}
 81046c8:	4618      	mov	r0, r3
 81046ca:	3708      	adds	r7, #8
 81046cc:	46bd      	mov	sp, r7
 81046ce:	bd80      	pop	{r7, pc}

081046d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81046d0:	b580      	push	{r7, lr}
 81046d2:	b08a      	sub	sp, #40	; 0x28
 81046d4:	af02      	add	r7, sp, #8
 81046d6:	60f8      	str	r0, [r7, #12]
 81046d8:	60b9      	str	r1, [r7, #8]
 81046da:	603b      	str	r3, [r7, #0]
 81046dc:	4613      	mov	r3, r2
 81046de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046e6:	2b20      	cmp	r3, #32
 81046e8:	f040 8083 	bne.w	81047f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81046ec:	68bb      	ldr	r3, [r7, #8]
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d002      	beq.n	81046f8 <HAL_UART_Transmit+0x28>
 81046f2:	88fb      	ldrh	r3, [r7, #6]
 81046f4:	2b00      	cmp	r3, #0
 81046f6:	d101      	bne.n	81046fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81046f8:	2301      	movs	r3, #1
 81046fa:	e07b      	b.n	81047f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104702:	2b01      	cmp	r3, #1
 8104704:	d101      	bne.n	810470a <HAL_UART_Transmit+0x3a>
 8104706:	2302      	movs	r3, #2
 8104708:	e074      	b.n	81047f4 <HAL_UART_Transmit+0x124>
 810470a:	68fb      	ldr	r3, [r7, #12]
 810470c:	2201      	movs	r2, #1
 810470e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104712:	68fb      	ldr	r3, [r7, #12]
 8104714:	2200      	movs	r2, #0
 8104716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810471a:	68fb      	ldr	r3, [r7, #12]
 810471c:	2221      	movs	r2, #33	; 0x21
 810471e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104722:	f7fd f9f1 	bl	8101b08 <HAL_GetTick>
 8104726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104728:	68fb      	ldr	r3, [r7, #12]
 810472a:	88fa      	ldrh	r2, [r7, #6]
 810472c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	88fa      	ldrh	r2, [r7, #6]
 8104734:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104738:	68fb      	ldr	r3, [r7, #12]
 810473a:	689b      	ldr	r3, [r3, #8]
 810473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104740:	d108      	bne.n	8104754 <HAL_UART_Transmit+0x84>
 8104742:	68fb      	ldr	r3, [r7, #12]
 8104744:	691b      	ldr	r3, [r3, #16]
 8104746:	2b00      	cmp	r3, #0
 8104748:	d104      	bne.n	8104754 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810474a:	2300      	movs	r3, #0
 810474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810474e:	68bb      	ldr	r3, [r7, #8]
 8104750:	61bb      	str	r3, [r7, #24]
 8104752:	e003      	b.n	810475c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104754:	68bb      	ldr	r3, [r7, #8]
 8104756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104758:	2300      	movs	r3, #0
 810475a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	2200      	movs	r2, #0
 8104760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8104764:	e02c      	b.n	81047c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104766:	683b      	ldr	r3, [r7, #0]
 8104768:	9300      	str	r3, [sp, #0]
 810476a:	697b      	ldr	r3, [r7, #20]
 810476c:	2200      	movs	r2, #0
 810476e:	2180      	movs	r1, #128	; 0x80
 8104770:	68f8      	ldr	r0, [r7, #12]
 8104772:	f000 fe98 	bl	81054a6 <UART_WaitOnFlagUntilTimeout>
 8104776:	4603      	mov	r3, r0
 8104778:	2b00      	cmp	r3, #0
 810477a:	d001      	beq.n	8104780 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 810477c:	2303      	movs	r3, #3
 810477e:	e039      	b.n	81047f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104780:	69fb      	ldr	r3, [r7, #28]
 8104782:	2b00      	cmp	r3, #0
 8104784:	d10b      	bne.n	810479e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104786:	69bb      	ldr	r3, [r7, #24]
 8104788:	881b      	ldrh	r3, [r3, #0]
 810478a:	461a      	mov	r2, r3
 810478c:	68fb      	ldr	r3, [r7, #12]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104794:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104796:	69bb      	ldr	r3, [r7, #24]
 8104798:	3302      	adds	r3, #2
 810479a:	61bb      	str	r3, [r7, #24]
 810479c:	e007      	b.n	81047ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810479e:	69fb      	ldr	r3, [r7, #28]
 81047a0:	781a      	ldrb	r2, [r3, #0]
 81047a2:	68fb      	ldr	r3, [r7, #12]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81047a8:	69fb      	ldr	r3, [r7, #28]
 81047aa:	3301      	adds	r3, #1
 81047ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81047b4:	b29b      	uxth	r3, r3
 81047b6:	3b01      	subs	r3, #1
 81047b8:	b29a      	uxth	r2, r3
 81047ba:	68fb      	ldr	r3, [r7, #12]
 81047bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81047c6:	b29b      	uxth	r3, r3
 81047c8:	2b00      	cmp	r3, #0
 81047ca:	d1cc      	bne.n	8104766 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81047cc:	683b      	ldr	r3, [r7, #0]
 81047ce:	9300      	str	r3, [sp, #0]
 81047d0:	697b      	ldr	r3, [r7, #20]
 81047d2:	2200      	movs	r2, #0
 81047d4:	2140      	movs	r1, #64	; 0x40
 81047d6:	68f8      	ldr	r0, [r7, #12]
 81047d8:	f000 fe65 	bl	81054a6 <UART_WaitOnFlagUntilTimeout>
 81047dc:	4603      	mov	r3, r0
 81047de:	2b00      	cmp	r3, #0
 81047e0:	d001      	beq.n	81047e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81047e2:	2303      	movs	r3, #3
 81047e4:	e006      	b.n	81047f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	2220      	movs	r2, #32
 81047ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 81047ee:	2300      	movs	r3, #0
 81047f0:	e000      	b.n	81047f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81047f2:	2302      	movs	r3, #2
  }
}
 81047f4:	4618      	mov	r0, r3
 81047f6:	3720      	adds	r7, #32
 81047f8:	46bd      	mov	sp, r7
 81047fa:	bd80      	pop	{r7, pc}

081047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104800:	b092      	sub	sp, #72	; 0x48
 8104802:	af00      	add	r7, sp, #0
 8104804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104806:	2300      	movs	r3, #0
 8104808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810480c:	697b      	ldr	r3, [r7, #20]
 810480e:	689a      	ldr	r2, [r3, #8]
 8104810:	697b      	ldr	r3, [r7, #20]
 8104812:	691b      	ldr	r3, [r3, #16]
 8104814:	431a      	orrs	r2, r3
 8104816:	697b      	ldr	r3, [r7, #20]
 8104818:	695b      	ldr	r3, [r3, #20]
 810481a:	431a      	orrs	r2, r3
 810481c:	697b      	ldr	r3, [r7, #20]
 810481e:	69db      	ldr	r3, [r3, #28]
 8104820:	4313      	orrs	r3, r2
 8104822:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104824:	697b      	ldr	r3, [r7, #20]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	681a      	ldr	r2, [r3, #0]
 810482a:	4bbd      	ldr	r3, [pc, #756]	; (8104b20 <UART_SetConfig+0x324>)
 810482c:	4013      	ands	r3, r2
 810482e:	697a      	ldr	r2, [r7, #20]
 8104830:	6812      	ldr	r2, [r2, #0]
 8104832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8104834:	430b      	orrs	r3, r1
 8104836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104838:	697b      	ldr	r3, [r7, #20]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	685b      	ldr	r3, [r3, #4]
 810483e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104842:	697b      	ldr	r3, [r7, #20]
 8104844:	68da      	ldr	r2, [r3, #12]
 8104846:	697b      	ldr	r3, [r7, #20]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	430a      	orrs	r2, r1
 810484c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810484e:	697b      	ldr	r3, [r7, #20]
 8104850:	699b      	ldr	r3, [r3, #24]
 8104852:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104854:	697b      	ldr	r3, [r7, #20]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	4ab2      	ldr	r2, [pc, #712]	; (8104b24 <UART_SetConfig+0x328>)
 810485a:	4293      	cmp	r3, r2
 810485c:	d004      	beq.n	8104868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810485e:	697b      	ldr	r3, [r7, #20]
 8104860:	6a1b      	ldr	r3, [r3, #32]
 8104862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8104864:	4313      	orrs	r3, r2
 8104866:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104868:	697b      	ldr	r3, [r7, #20]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	689b      	ldr	r3, [r3, #8]
 810486e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104872:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104876:	697a      	ldr	r2, [r7, #20]
 8104878:	6812      	ldr	r2, [r2, #0]
 810487a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810487c:	430b      	orrs	r3, r1
 810487e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104880:	697b      	ldr	r3, [r7, #20]
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104886:	f023 010f 	bic.w	r1, r3, #15
 810488a:	697b      	ldr	r3, [r7, #20]
 810488c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810488e:	697b      	ldr	r3, [r7, #20]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	430a      	orrs	r2, r1
 8104894:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104896:	697b      	ldr	r3, [r7, #20]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	4aa3      	ldr	r2, [pc, #652]	; (8104b28 <UART_SetConfig+0x32c>)
 810489c:	4293      	cmp	r3, r2
 810489e:	d177      	bne.n	8104990 <UART_SetConfig+0x194>
 81048a0:	4ba2      	ldr	r3, [pc, #648]	; (8104b2c <UART_SetConfig+0x330>)
 81048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81048a8:	2b28      	cmp	r3, #40	; 0x28
 81048aa:	d86d      	bhi.n	8104988 <UART_SetConfig+0x18c>
 81048ac:	a201      	add	r2, pc, #4	; (adr r2, 81048b4 <UART_SetConfig+0xb8>)
 81048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048b2:	bf00      	nop
 81048b4:	08104959 	.word	0x08104959
 81048b8:	08104989 	.word	0x08104989
 81048bc:	08104989 	.word	0x08104989
 81048c0:	08104989 	.word	0x08104989
 81048c4:	08104989 	.word	0x08104989
 81048c8:	08104989 	.word	0x08104989
 81048cc:	08104989 	.word	0x08104989
 81048d0:	08104989 	.word	0x08104989
 81048d4:	08104961 	.word	0x08104961
 81048d8:	08104989 	.word	0x08104989
 81048dc:	08104989 	.word	0x08104989
 81048e0:	08104989 	.word	0x08104989
 81048e4:	08104989 	.word	0x08104989
 81048e8:	08104989 	.word	0x08104989
 81048ec:	08104989 	.word	0x08104989
 81048f0:	08104989 	.word	0x08104989
 81048f4:	08104969 	.word	0x08104969
 81048f8:	08104989 	.word	0x08104989
 81048fc:	08104989 	.word	0x08104989
 8104900:	08104989 	.word	0x08104989
 8104904:	08104989 	.word	0x08104989
 8104908:	08104989 	.word	0x08104989
 810490c:	08104989 	.word	0x08104989
 8104910:	08104989 	.word	0x08104989
 8104914:	08104971 	.word	0x08104971
 8104918:	08104989 	.word	0x08104989
 810491c:	08104989 	.word	0x08104989
 8104920:	08104989 	.word	0x08104989
 8104924:	08104989 	.word	0x08104989
 8104928:	08104989 	.word	0x08104989
 810492c:	08104989 	.word	0x08104989
 8104930:	08104989 	.word	0x08104989
 8104934:	08104979 	.word	0x08104979
 8104938:	08104989 	.word	0x08104989
 810493c:	08104989 	.word	0x08104989
 8104940:	08104989 	.word	0x08104989
 8104944:	08104989 	.word	0x08104989
 8104948:	08104989 	.word	0x08104989
 810494c:	08104989 	.word	0x08104989
 8104950:	08104989 	.word	0x08104989
 8104954:	08104981 	.word	0x08104981
 8104958:	2301      	movs	r3, #1
 810495a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810495e:	e220      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104960:	2304      	movs	r3, #4
 8104962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104966:	e21c      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104968:	2308      	movs	r3, #8
 810496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810496e:	e218      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104970:	2310      	movs	r3, #16
 8104972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104976:	e214      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104978:	2320      	movs	r3, #32
 810497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810497e:	e210      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104980:	2340      	movs	r3, #64	; 0x40
 8104982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104986:	e20c      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104988:	2380      	movs	r3, #128	; 0x80
 810498a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810498e:	e208      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104990:	697b      	ldr	r3, [r7, #20]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	4a66      	ldr	r2, [pc, #408]	; (8104b30 <UART_SetConfig+0x334>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d130      	bne.n	81049fc <UART_SetConfig+0x200>
 810499a:	4b64      	ldr	r3, [pc, #400]	; (8104b2c <UART_SetConfig+0x330>)
 810499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810499e:	f003 0307 	and.w	r3, r3, #7
 81049a2:	2b05      	cmp	r3, #5
 81049a4:	d826      	bhi.n	81049f4 <UART_SetConfig+0x1f8>
 81049a6:	a201      	add	r2, pc, #4	; (adr r2, 81049ac <UART_SetConfig+0x1b0>)
 81049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049ac:	081049c5 	.word	0x081049c5
 81049b0:	081049cd 	.word	0x081049cd
 81049b4:	081049d5 	.word	0x081049d5
 81049b8:	081049dd 	.word	0x081049dd
 81049bc:	081049e5 	.word	0x081049e5
 81049c0:	081049ed 	.word	0x081049ed
 81049c4:	2300      	movs	r3, #0
 81049c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049ca:	e1ea      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049cc:	2304      	movs	r3, #4
 81049ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049d2:	e1e6      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049d4:	2308      	movs	r3, #8
 81049d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049da:	e1e2      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049dc:	2310      	movs	r3, #16
 81049de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049e2:	e1de      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049e4:	2320      	movs	r3, #32
 81049e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049ea:	e1da      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049ec:	2340      	movs	r3, #64	; 0x40
 81049ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049f2:	e1d6      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049f4:	2380      	movs	r3, #128	; 0x80
 81049f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049fa:	e1d2      	b.n	8104da2 <UART_SetConfig+0x5a6>
 81049fc:	697b      	ldr	r3, [r7, #20]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	4a4c      	ldr	r2, [pc, #304]	; (8104b34 <UART_SetConfig+0x338>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d130      	bne.n	8104a68 <UART_SetConfig+0x26c>
 8104a06:	4b49      	ldr	r3, [pc, #292]	; (8104b2c <UART_SetConfig+0x330>)
 8104a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a0a:	f003 0307 	and.w	r3, r3, #7
 8104a0e:	2b05      	cmp	r3, #5
 8104a10:	d826      	bhi.n	8104a60 <UART_SetConfig+0x264>
 8104a12:	a201      	add	r2, pc, #4	; (adr r2, 8104a18 <UART_SetConfig+0x21c>)
 8104a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a18:	08104a31 	.word	0x08104a31
 8104a1c:	08104a39 	.word	0x08104a39
 8104a20:	08104a41 	.word	0x08104a41
 8104a24:	08104a49 	.word	0x08104a49
 8104a28:	08104a51 	.word	0x08104a51
 8104a2c:	08104a59 	.word	0x08104a59
 8104a30:	2300      	movs	r3, #0
 8104a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a36:	e1b4      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a38:	2304      	movs	r3, #4
 8104a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a3e:	e1b0      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a40:	2308      	movs	r3, #8
 8104a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a46:	e1ac      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a48:	2310      	movs	r3, #16
 8104a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a4e:	e1a8      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a50:	2320      	movs	r3, #32
 8104a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a56:	e1a4      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a58:	2340      	movs	r3, #64	; 0x40
 8104a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a5e:	e1a0      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a60:	2380      	movs	r3, #128	; 0x80
 8104a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a66:	e19c      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104a68:	697b      	ldr	r3, [r7, #20]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a32      	ldr	r2, [pc, #200]	; (8104b38 <UART_SetConfig+0x33c>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d130      	bne.n	8104ad4 <UART_SetConfig+0x2d8>
 8104a72:	4b2e      	ldr	r3, [pc, #184]	; (8104b2c <UART_SetConfig+0x330>)
 8104a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a76:	f003 0307 	and.w	r3, r3, #7
 8104a7a:	2b05      	cmp	r3, #5
 8104a7c:	d826      	bhi.n	8104acc <UART_SetConfig+0x2d0>
 8104a7e:	a201      	add	r2, pc, #4	; (adr r2, 8104a84 <UART_SetConfig+0x288>)
 8104a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a84:	08104a9d 	.word	0x08104a9d
 8104a88:	08104aa5 	.word	0x08104aa5
 8104a8c:	08104aad 	.word	0x08104aad
 8104a90:	08104ab5 	.word	0x08104ab5
 8104a94:	08104abd 	.word	0x08104abd
 8104a98:	08104ac5 	.word	0x08104ac5
 8104a9c:	2300      	movs	r3, #0
 8104a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104aa2:	e17e      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104aa4:	2304      	movs	r3, #4
 8104aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104aaa:	e17a      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104aac:	2308      	movs	r3, #8
 8104aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ab2:	e176      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104ab4:	2310      	movs	r3, #16
 8104ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104aba:	e172      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104abc:	2320      	movs	r3, #32
 8104abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ac2:	e16e      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104ac4:	2340      	movs	r3, #64	; 0x40
 8104ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104aca:	e16a      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104acc:	2380      	movs	r3, #128	; 0x80
 8104ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ad2:	e166      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104ad4:	697b      	ldr	r3, [r7, #20]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	4a18      	ldr	r2, [pc, #96]	; (8104b3c <UART_SetConfig+0x340>)
 8104ada:	4293      	cmp	r3, r2
 8104adc:	d140      	bne.n	8104b60 <UART_SetConfig+0x364>
 8104ade:	4b13      	ldr	r3, [pc, #76]	; (8104b2c <UART_SetConfig+0x330>)
 8104ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ae2:	f003 0307 	and.w	r3, r3, #7
 8104ae6:	2b05      	cmp	r3, #5
 8104ae8:	d836      	bhi.n	8104b58 <UART_SetConfig+0x35c>
 8104aea:	a201      	add	r2, pc, #4	; (adr r2, 8104af0 <UART_SetConfig+0x2f4>)
 8104aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104af0:	08104b09 	.word	0x08104b09
 8104af4:	08104b11 	.word	0x08104b11
 8104af8:	08104b19 	.word	0x08104b19
 8104afc:	08104b41 	.word	0x08104b41
 8104b00:	08104b49 	.word	0x08104b49
 8104b04:	08104b51 	.word	0x08104b51
 8104b08:	2300      	movs	r3, #0
 8104b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b0e:	e148      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b10:	2304      	movs	r3, #4
 8104b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b16:	e144      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b18:	2308      	movs	r3, #8
 8104b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b1e:	e140      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b20:	cfff69f3 	.word	0xcfff69f3
 8104b24:	58000c00 	.word	0x58000c00
 8104b28:	40011000 	.word	0x40011000
 8104b2c:	58024400 	.word	0x58024400
 8104b30:	40004400 	.word	0x40004400
 8104b34:	40004800 	.word	0x40004800
 8104b38:	40004c00 	.word	0x40004c00
 8104b3c:	40005000 	.word	0x40005000
 8104b40:	2310      	movs	r3, #16
 8104b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b46:	e12c      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b48:	2320      	movs	r3, #32
 8104b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b4e:	e128      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b50:	2340      	movs	r3, #64	; 0x40
 8104b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b56:	e124      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b58:	2380      	movs	r3, #128	; 0x80
 8104b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b5e:	e120      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104b60:	697b      	ldr	r3, [r7, #20]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	4acb      	ldr	r2, [pc, #812]	; (8104e94 <UART_SetConfig+0x698>)
 8104b66:	4293      	cmp	r3, r2
 8104b68:	d176      	bne.n	8104c58 <UART_SetConfig+0x45c>
 8104b6a:	4bcb      	ldr	r3, [pc, #812]	; (8104e98 <UART_SetConfig+0x69c>)
 8104b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104b72:	2b28      	cmp	r3, #40	; 0x28
 8104b74:	d86c      	bhi.n	8104c50 <UART_SetConfig+0x454>
 8104b76:	a201      	add	r2, pc, #4	; (adr r2, 8104b7c <UART_SetConfig+0x380>)
 8104b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b7c:	08104c21 	.word	0x08104c21
 8104b80:	08104c51 	.word	0x08104c51
 8104b84:	08104c51 	.word	0x08104c51
 8104b88:	08104c51 	.word	0x08104c51
 8104b8c:	08104c51 	.word	0x08104c51
 8104b90:	08104c51 	.word	0x08104c51
 8104b94:	08104c51 	.word	0x08104c51
 8104b98:	08104c51 	.word	0x08104c51
 8104b9c:	08104c29 	.word	0x08104c29
 8104ba0:	08104c51 	.word	0x08104c51
 8104ba4:	08104c51 	.word	0x08104c51
 8104ba8:	08104c51 	.word	0x08104c51
 8104bac:	08104c51 	.word	0x08104c51
 8104bb0:	08104c51 	.word	0x08104c51
 8104bb4:	08104c51 	.word	0x08104c51
 8104bb8:	08104c51 	.word	0x08104c51
 8104bbc:	08104c31 	.word	0x08104c31
 8104bc0:	08104c51 	.word	0x08104c51
 8104bc4:	08104c51 	.word	0x08104c51
 8104bc8:	08104c51 	.word	0x08104c51
 8104bcc:	08104c51 	.word	0x08104c51
 8104bd0:	08104c51 	.word	0x08104c51
 8104bd4:	08104c51 	.word	0x08104c51
 8104bd8:	08104c51 	.word	0x08104c51
 8104bdc:	08104c39 	.word	0x08104c39
 8104be0:	08104c51 	.word	0x08104c51
 8104be4:	08104c51 	.word	0x08104c51
 8104be8:	08104c51 	.word	0x08104c51
 8104bec:	08104c51 	.word	0x08104c51
 8104bf0:	08104c51 	.word	0x08104c51
 8104bf4:	08104c51 	.word	0x08104c51
 8104bf8:	08104c51 	.word	0x08104c51
 8104bfc:	08104c41 	.word	0x08104c41
 8104c00:	08104c51 	.word	0x08104c51
 8104c04:	08104c51 	.word	0x08104c51
 8104c08:	08104c51 	.word	0x08104c51
 8104c0c:	08104c51 	.word	0x08104c51
 8104c10:	08104c51 	.word	0x08104c51
 8104c14:	08104c51 	.word	0x08104c51
 8104c18:	08104c51 	.word	0x08104c51
 8104c1c:	08104c49 	.word	0x08104c49
 8104c20:	2301      	movs	r3, #1
 8104c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c26:	e0bc      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c28:	2304      	movs	r3, #4
 8104c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c2e:	e0b8      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c30:	2308      	movs	r3, #8
 8104c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c36:	e0b4      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c38:	2310      	movs	r3, #16
 8104c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c3e:	e0b0      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c40:	2320      	movs	r3, #32
 8104c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c46:	e0ac      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c48:	2340      	movs	r3, #64	; 0x40
 8104c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c4e:	e0a8      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c50:	2380      	movs	r3, #128	; 0x80
 8104c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c56:	e0a4      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c58:	697b      	ldr	r3, [r7, #20]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	4a8f      	ldr	r2, [pc, #572]	; (8104e9c <UART_SetConfig+0x6a0>)
 8104c5e:	4293      	cmp	r3, r2
 8104c60:	d130      	bne.n	8104cc4 <UART_SetConfig+0x4c8>
 8104c62:	4b8d      	ldr	r3, [pc, #564]	; (8104e98 <UART_SetConfig+0x69c>)
 8104c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c66:	f003 0307 	and.w	r3, r3, #7
 8104c6a:	2b05      	cmp	r3, #5
 8104c6c:	d826      	bhi.n	8104cbc <UART_SetConfig+0x4c0>
 8104c6e:	a201      	add	r2, pc, #4	; (adr r2, 8104c74 <UART_SetConfig+0x478>)
 8104c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c74:	08104c8d 	.word	0x08104c8d
 8104c78:	08104c95 	.word	0x08104c95
 8104c7c:	08104c9d 	.word	0x08104c9d
 8104c80:	08104ca5 	.word	0x08104ca5
 8104c84:	08104cad 	.word	0x08104cad
 8104c88:	08104cb5 	.word	0x08104cb5
 8104c8c:	2300      	movs	r3, #0
 8104c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c92:	e086      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c94:	2304      	movs	r3, #4
 8104c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c9a:	e082      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104c9c:	2308      	movs	r3, #8
 8104c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ca2:	e07e      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104ca4:	2310      	movs	r3, #16
 8104ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104caa:	e07a      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104cac:	2320      	movs	r3, #32
 8104cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cb2:	e076      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104cb4:	2340      	movs	r3, #64	; 0x40
 8104cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cba:	e072      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104cbc:	2380      	movs	r3, #128	; 0x80
 8104cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cc2:	e06e      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104cc4:	697b      	ldr	r3, [r7, #20]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	4a75      	ldr	r2, [pc, #468]	; (8104ea0 <UART_SetConfig+0x6a4>)
 8104cca:	4293      	cmp	r3, r2
 8104ccc:	d130      	bne.n	8104d30 <UART_SetConfig+0x534>
 8104cce:	4b72      	ldr	r3, [pc, #456]	; (8104e98 <UART_SetConfig+0x69c>)
 8104cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cd2:	f003 0307 	and.w	r3, r3, #7
 8104cd6:	2b05      	cmp	r3, #5
 8104cd8:	d826      	bhi.n	8104d28 <UART_SetConfig+0x52c>
 8104cda:	a201      	add	r2, pc, #4	; (adr r2, 8104ce0 <UART_SetConfig+0x4e4>)
 8104cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ce0:	08104cf9 	.word	0x08104cf9
 8104ce4:	08104d01 	.word	0x08104d01
 8104ce8:	08104d09 	.word	0x08104d09
 8104cec:	08104d11 	.word	0x08104d11
 8104cf0:	08104d19 	.word	0x08104d19
 8104cf4:	08104d21 	.word	0x08104d21
 8104cf8:	2300      	movs	r3, #0
 8104cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cfe:	e050      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d00:	2304      	movs	r3, #4
 8104d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d06:	e04c      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d08:	2308      	movs	r3, #8
 8104d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d0e:	e048      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d10:	2310      	movs	r3, #16
 8104d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d16:	e044      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d18:	2320      	movs	r3, #32
 8104d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d1e:	e040      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d20:	2340      	movs	r3, #64	; 0x40
 8104d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d26:	e03c      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d28:	2380      	movs	r3, #128	; 0x80
 8104d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d2e:	e038      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d30:	697b      	ldr	r3, [r7, #20]
 8104d32:	681b      	ldr	r3, [r3, #0]
 8104d34:	4a5b      	ldr	r2, [pc, #364]	; (8104ea4 <UART_SetConfig+0x6a8>)
 8104d36:	4293      	cmp	r3, r2
 8104d38:	d130      	bne.n	8104d9c <UART_SetConfig+0x5a0>
 8104d3a:	4b57      	ldr	r3, [pc, #348]	; (8104e98 <UART_SetConfig+0x69c>)
 8104d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d3e:	f003 0307 	and.w	r3, r3, #7
 8104d42:	2b05      	cmp	r3, #5
 8104d44:	d826      	bhi.n	8104d94 <UART_SetConfig+0x598>
 8104d46:	a201      	add	r2, pc, #4	; (adr r2, 8104d4c <UART_SetConfig+0x550>)
 8104d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d4c:	08104d65 	.word	0x08104d65
 8104d50:	08104d6d 	.word	0x08104d6d
 8104d54:	08104d75 	.word	0x08104d75
 8104d58:	08104d7d 	.word	0x08104d7d
 8104d5c:	08104d85 	.word	0x08104d85
 8104d60:	08104d8d 	.word	0x08104d8d
 8104d64:	2302      	movs	r3, #2
 8104d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d6a:	e01a      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d6c:	2304      	movs	r3, #4
 8104d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d72:	e016      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d74:	2308      	movs	r3, #8
 8104d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d7a:	e012      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d7c:	2310      	movs	r3, #16
 8104d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d82:	e00e      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d84:	2320      	movs	r3, #32
 8104d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d8a:	e00a      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d8c:	2340      	movs	r3, #64	; 0x40
 8104d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d92:	e006      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d94:	2380      	movs	r3, #128	; 0x80
 8104d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d9a:	e002      	b.n	8104da2 <UART_SetConfig+0x5a6>
 8104d9c:	2380      	movs	r3, #128	; 0x80
 8104d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8104da2:	697b      	ldr	r3, [r7, #20]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	4a3f      	ldr	r2, [pc, #252]	; (8104ea4 <UART_SetConfig+0x6a8>)
 8104da8:	4293      	cmp	r3, r2
 8104daa:	f040 80f8 	bne.w	8104f9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8104dae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8104db2:	2b20      	cmp	r3, #32
 8104db4:	dc46      	bgt.n	8104e44 <UART_SetConfig+0x648>
 8104db6:	2b02      	cmp	r3, #2
 8104db8:	f2c0 8082 	blt.w	8104ec0 <UART_SetConfig+0x6c4>
 8104dbc:	3b02      	subs	r3, #2
 8104dbe:	2b1e      	cmp	r3, #30
 8104dc0:	d87e      	bhi.n	8104ec0 <UART_SetConfig+0x6c4>
 8104dc2:	a201      	add	r2, pc, #4	; (adr r2, 8104dc8 <UART_SetConfig+0x5cc>)
 8104dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dc8:	08104e4b 	.word	0x08104e4b
 8104dcc:	08104ec1 	.word	0x08104ec1
 8104dd0:	08104e53 	.word	0x08104e53
 8104dd4:	08104ec1 	.word	0x08104ec1
 8104dd8:	08104ec1 	.word	0x08104ec1
 8104ddc:	08104ec1 	.word	0x08104ec1
 8104de0:	08104e63 	.word	0x08104e63
 8104de4:	08104ec1 	.word	0x08104ec1
 8104de8:	08104ec1 	.word	0x08104ec1
 8104dec:	08104ec1 	.word	0x08104ec1
 8104df0:	08104ec1 	.word	0x08104ec1
 8104df4:	08104ec1 	.word	0x08104ec1
 8104df8:	08104ec1 	.word	0x08104ec1
 8104dfc:	08104ec1 	.word	0x08104ec1
 8104e00:	08104e73 	.word	0x08104e73
 8104e04:	08104ec1 	.word	0x08104ec1
 8104e08:	08104ec1 	.word	0x08104ec1
 8104e0c:	08104ec1 	.word	0x08104ec1
 8104e10:	08104ec1 	.word	0x08104ec1
 8104e14:	08104ec1 	.word	0x08104ec1
 8104e18:	08104ec1 	.word	0x08104ec1
 8104e1c:	08104ec1 	.word	0x08104ec1
 8104e20:	08104ec1 	.word	0x08104ec1
 8104e24:	08104ec1 	.word	0x08104ec1
 8104e28:	08104ec1 	.word	0x08104ec1
 8104e2c:	08104ec1 	.word	0x08104ec1
 8104e30:	08104ec1 	.word	0x08104ec1
 8104e34:	08104ec1 	.word	0x08104ec1
 8104e38:	08104ec1 	.word	0x08104ec1
 8104e3c:	08104ec1 	.word	0x08104ec1
 8104e40:	08104eb3 	.word	0x08104eb3
 8104e44:	2b40      	cmp	r3, #64	; 0x40
 8104e46:	d037      	beq.n	8104eb8 <UART_SetConfig+0x6bc>
 8104e48:	e03a      	b.n	8104ec0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8104e4a:	f7fe fac9 	bl	81033e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8104e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104e50:	e03c      	b.n	8104ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104e56:	4618      	mov	r0, r3
 8104e58:	f7fe fad8 	bl	810340c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e60:	e034      	b.n	8104ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e62:	f107 0318 	add.w	r3, r7, #24
 8104e66:	4618      	mov	r0, r3
 8104e68:	f7fe fc24 	bl	81036b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104e6c:	69fb      	ldr	r3, [r7, #28]
 8104e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e70:	e02c      	b.n	8104ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e72:	4b09      	ldr	r3, [pc, #36]	; (8104e98 <UART_SetConfig+0x69c>)
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	f003 0320 	and.w	r3, r3, #32
 8104e7a:	2b00      	cmp	r3, #0
 8104e7c:	d016      	beq.n	8104eac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104e7e:	4b06      	ldr	r3, [pc, #24]	; (8104e98 <UART_SetConfig+0x69c>)
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	08db      	lsrs	r3, r3, #3
 8104e84:	f003 0303 	and.w	r3, r3, #3
 8104e88:	4a07      	ldr	r2, [pc, #28]	; (8104ea8 <UART_SetConfig+0x6ac>)
 8104e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8104e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104e90:	e01c      	b.n	8104ecc <UART_SetConfig+0x6d0>
 8104e92:	bf00      	nop
 8104e94:	40011400 	.word	0x40011400
 8104e98:	58024400 	.word	0x58024400
 8104e9c:	40007800 	.word	0x40007800
 8104ea0:	40007c00 	.word	0x40007c00
 8104ea4:	58000c00 	.word	0x58000c00
 8104ea8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8104eac:	4b9d      	ldr	r3, [pc, #628]	; (8105124 <UART_SetConfig+0x928>)
 8104eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104eb0:	e00c      	b.n	8104ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104eb2:	4b9d      	ldr	r3, [pc, #628]	; (8105128 <UART_SetConfig+0x92c>)
 8104eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104eb6:	e009      	b.n	8104ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ebe:	e005      	b.n	8104ecc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8104ec0:	2300      	movs	r3, #0
 8104ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8104ec4:	2301      	movs	r3, #1
 8104ec6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8104eca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8104ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104ece:	2b00      	cmp	r3, #0
 8104ed0:	f000 81de 	beq.w	8105290 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8104ed4:	697b      	ldr	r3, [r7, #20]
 8104ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ed8:	4a94      	ldr	r2, [pc, #592]	; (810512c <UART_SetConfig+0x930>)
 8104eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104ede:	461a      	mov	r2, r3
 8104ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8104ee6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104ee8:	697b      	ldr	r3, [r7, #20]
 8104eea:	685a      	ldr	r2, [r3, #4]
 8104eec:	4613      	mov	r3, r2
 8104eee:	005b      	lsls	r3, r3, #1
 8104ef0:	4413      	add	r3, r2
 8104ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104ef4:	429a      	cmp	r2, r3
 8104ef6:	d305      	bcc.n	8104f04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8104ef8:	697b      	ldr	r3, [r7, #20]
 8104efa:	685b      	ldr	r3, [r3, #4]
 8104efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104f00:	429a      	cmp	r2, r3
 8104f02:	d903      	bls.n	8104f0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8104f04:	2301      	movs	r3, #1
 8104f06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8104f0a:	e1c1      	b.n	8105290 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104f0e:	2200      	movs	r2, #0
 8104f10:	60bb      	str	r3, [r7, #8]
 8104f12:	60fa      	str	r2, [r7, #12]
 8104f14:	697b      	ldr	r3, [r7, #20]
 8104f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f18:	4a84      	ldr	r2, [pc, #528]	; (810512c <UART_SetConfig+0x930>)
 8104f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104f1e:	b29b      	uxth	r3, r3
 8104f20:	2200      	movs	r2, #0
 8104f22:	603b      	str	r3, [r7, #0]
 8104f24:	607a      	str	r2, [r7, #4]
 8104f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8104f2e:	f7fb ff13 	bl	8100d58 <__aeabi_uldivmod>
 8104f32:	4602      	mov	r2, r0
 8104f34:	460b      	mov	r3, r1
 8104f36:	4610      	mov	r0, r2
 8104f38:	4619      	mov	r1, r3
 8104f3a:	f04f 0200 	mov.w	r2, #0
 8104f3e:	f04f 0300 	mov.w	r3, #0
 8104f42:	020b      	lsls	r3, r1, #8
 8104f44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8104f48:	0202      	lsls	r2, r0, #8
 8104f4a:	6979      	ldr	r1, [r7, #20]
 8104f4c:	6849      	ldr	r1, [r1, #4]
 8104f4e:	0849      	lsrs	r1, r1, #1
 8104f50:	2000      	movs	r0, #0
 8104f52:	460c      	mov	r4, r1
 8104f54:	4605      	mov	r5, r0
 8104f56:	eb12 0804 	adds.w	r8, r2, r4
 8104f5a:	eb43 0905 	adc.w	r9, r3, r5
 8104f5e:	697b      	ldr	r3, [r7, #20]
 8104f60:	685b      	ldr	r3, [r3, #4]
 8104f62:	2200      	movs	r2, #0
 8104f64:	469a      	mov	sl, r3
 8104f66:	4693      	mov	fp, r2
 8104f68:	4652      	mov	r2, sl
 8104f6a:	465b      	mov	r3, fp
 8104f6c:	4640      	mov	r0, r8
 8104f6e:	4649      	mov	r1, r9
 8104f70:	f7fb fef2 	bl	8100d58 <__aeabi_uldivmod>
 8104f74:	4602      	mov	r2, r0
 8104f76:	460b      	mov	r3, r1
 8104f78:	4613      	mov	r3, r2
 8104f7a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8104f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104f82:	d308      	bcc.n	8104f96 <UART_SetConfig+0x79a>
 8104f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104f8a:	d204      	bcs.n	8104f96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8104f8c:	697b      	ldr	r3, [r7, #20]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104f92:	60da      	str	r2, [r3, #12]
 8104f94:	e17c      	b.n	8105290 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8104f96:	2301      	movs	r3, #1
 8104f98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8104f9c:	e178      	b.n	8105290 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8104f9e:	697b      	ldr	r3, [r7, #20]
 8104fa0:	69db      	ldr	r3, [r3, #28]
 8104fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104fa6:	f040 80c5 	bne.w	8105134 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8104faa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8104fae:	2b20      	cmp	r3, #32
 8104fb0:	dc48      	bgt.n	8105044 <UART_SetConfig+0x848>
 8104fb2:	2b00      	cmp	r3, #0
 8104fb4:	db7b      	blt.n	81050ae <UART_SetConfig+0x8b2>
 8104fb6:	2b20      	cmp	r3, #32
 8104fb8:	d879      	bhi.n	81050ae <UART_SetConfig+0x8b2>
 8104fba:	a201      	add	r2, pc, #4	; (adr r2, 8104fc0 <UART_SetConfig+0x7c4>)
 8104fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fc0:	0810504b 	.word	0x0810504b
 8104fc4:	08105053 	.word	0x08105053
 8104fc8:	081050af 	.word	0x081050af
 8104fcc:	081050af 	.word	0x081050af
 8104fd0:	0810505b 	.word	0x0810505b
 8104fd4:	081050af 	.word	0x081050af
 8104fd8:	081050af 	.word	0x081050af
 8104fdc:	081050af 	.word	0x081050af
 8104fe0:	0810506b 	.word	0x0810506b
 8104fe4:	081050af 	.word	0x081050af
 8104fe8:	081050af 	.word	0x081050af
 8104fec:	081050af 	.word	0x081050af
 8104ff0:	081050af 	.word	0x081050af
 8104ff4:	081050af 	.word	0x081050af
 8104ff8:	081050af 	.word	0x081050af
 8104ffc:	081050af 	.word	0x081050af
 8105000:	0810507b 	.word	0x0810507b
 8105004:	081050af 	.word	0x081050af
 8105008:	081050af 	.word	0x081050af
 810500c:	081050af 	.word	0x081050af
 8105010:	081050af 	.word	0x081050af
 8105014:	081050af 	.word	0x081050af
 8105018:	081050af 	.word	0x081050af
 810501c:	081050af 	.word	0x081050af
 8105020:	081050af 	.word	0x081050af
 8105024:	081050af 	.word	0x081050af
 8105028:	081050af 	.word	0x081050af
 810502c:	081050af 	.word	0x081050af
 8105030:	081050af 	.word	0x081050af
 8105034:	081050af 	.word	0x081050af
 8105038:	081050af 	.word	0x081050af
 810503c:	081050af 	.word	0x081050af
 8105040:	081050a1 	.word	0x081050a1
 8105044:	2b40      	cmp	r3, #64	; 0x40
 8105046:	d02e      	beq.n	81050a6 <UART_SetConfig+0x8aa>
 8105048:	e031      	b.n	81050ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810504a:	f7fd fa57 	bl	81024fc <HAL_RCC_GetPCLK1Freq>
 810504e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105050:	e033      	b.n	81050ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105052:	f7fd fa69 	bl	8102528 <HAL_RCC_GetPCLK2Freq>
 8105056:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105058:	e02f      	b.n	81050ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810505a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810505e:	4618      	mov	r0, r3
 8105060:	f7fe f9d4 	bl	810340c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105068:	e027      	b.n	81050ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810506a:	f107 0318 	add.w	r3, r7, #24
 810506e:	4618      	mov	r0, r3
 8105070:	f7fe fb20 	bl	81036b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105074:	69fb      	ldr	r3, [r7, #28]
 8105076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105078:	e01f      	b.n	81050ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810507a:	4b2d      	ldr	r3, [pc, #180]	; (8105130 <UART_SetConfig+0x934>)
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	f003 0320 	and.w	r3, r3, #32
 8105082:	2b00      	cmp	r3, #0
 8105084:	d009      	beq.n	810509a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105086:	4b2a      	ldr	r3, [pc, #168]	; (8105130 <UART_SetConfig+0x934>)
 8105088:	681b      	ldr	r3, [r3, #0]
 810508a:	08db      	lsrs	r3, r3, #3
 810508c:	f003 0303 	and.w	r3, r3, #3
 8105090:	4a24      	ldr	r2, [pc, #144]	; (8105124 <UART_SetConfig+0x928>)
 8105092:	fa22 f303 	lsr.w	r3, r2, r3
 8105096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105098:	e00f      	b.n	81050ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810509a:	4b22      	ldr	r3, [pc, #136]	; (8105124 <UART_SetConfig+0x928>)
 810509c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810509e:	e00c      	b.n	81050ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81050a0:	4b21      	ldr	r3, [pc, #132]	; (8105128 <UART_SetConfig+0x92c>)
 81050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050a4:	e009      	b.n	81050ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81050a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050ac:	e005      	b.n	81050ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81050ae:	2300      	movs	r3, #0
 81050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81050b2:	2301      	movs	r3, #1
 81050b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81050b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81050ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81050bc:	2b00      	cmp	r3, #0
 81050be:	f000 80e7 	beq.w	8105290 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81050c2:	697b      	ldr	r3, [r7, #20]
 81050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050c6:	4a19      	ldr	r2, [pc, #100]	; (810512c <UART_SetConfig+0x930>)
 81050c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81050cc:	461a      	mov	r2, r3
 81050ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81050d0:	fbb3 f3f2 	udiv	r3, r3, r2
 81050d4:	005a      	lsls	r2, r3, #1
 81050d6:	697b      	ldr	r3, [r7, #20]
 81050d8:	685b      	ldr	r3, [r3, #4]
 81050da:	085b      	lsrs	r3, r3, #1
 81050dc:	441a      	add	r2, r3
 81050de:	697b      	ldr	r3, [r7, #20]
 81050e0:	685b      	ldr	r3, [r3, #4]
 81050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81050e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050ea:	2b0f      	cmp	r3, #15
 81050ec:	d916      	bls.n	810511c <UART_SetConfig+0x920>
 81050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81050f4:	d212      	bcs.n	810511c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050f8:	b29b      	uxth	r3, r3
 81050fa:	f023 030f 	bic.w	r3, r3, #15
 81050fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105102:	085b      	lsrs	r3, r3, #1
 8105104:	b29b      	uxth	r3, r3
 8105106:	f003 0307 	and.w	r3, r3, #7
 810510a:	b29a      	uxth	r2, r3
 810510c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810510e:	4313      	orrs	r3, r2
 8105110:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8105112:	697b      	ldr	r3, [r7, #20]
 8105114:	681b      	ldr	r3, [r3, #0]
 8105116:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8105118:	60da      	str	r2, [r3, #12]
 810511a:	e0b9      	b.n	8105290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810511c:	2301      	movs	r3, #1
 810511e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105122:	e0b5      	b.n	8105290 <UART_SetConfig+0xa94>
 8105124:	03d09000 	.word	0x03d09000
 8105128:	003d0900 	.word	0x003d0900
 810512c:	08108334 	.word	0x08108334
 8105130:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105134:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105138:	2b20      	cmp	r3, #32
 810513a:	dc49      	bgt.n	81051d0 <UART_SetConfig+0x9d4>
 810513c:	2b00      	cmp	r3, #0
 810513e:	db7c      	blt.n	810523a <UART_SetConfig+0xa3e>
 8105140:	2b20      	cmp	r3, #32
 8105142:	d87a      	bhi.n	810523a <UART_SetConfig+0xa3e>
 8105144:	a201      	add	r2, pc, #4	; (adr r2, 810514c <UART_SetConfig+0x950>)
 8105146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810514a:	bf00      	nop
 810514c:	081051d7 	.word	0x081051d7
 8105150:	081051df 	.word	0x081051df
 8105154:	0810523b 	.word	0x0810523b
 8105158:	0810523b 	.word	0x0810523b
 810515c:	081051e7 	.word	0x081051e7
 8105160:	0810523b 	.word	0x0810523b
 8105164:	0810523b 	.word	0x0810523b
 8105168:	0810523b 	.word	0x0810523b
 810516c:	081051f7 	.word	0x081051f7
 8105170:	0810523b 	.word	0x0810523b
 8105174:	0810523b 	.word	0x0810523b
 8105178:	0810523b 	.word	0x0810523b
 810517c:	0810523b 	.word	0x0810523b
 8105180:	0810523b 	.word	0x0810523b
 8105184:	0810523b 	.word	0x0810523b
 8105188:	0810523b 	.word	0x0810523b
 810518c:	08105207 	.word	0x08105207
 8105190:	0810523b 	.word	0x0810523b
 8105194:	0810523b 	.word	0x0810523b
 8105198:	0810523b 	.word	0x0810523b
 810519c:	0810523b 	.word	0x0810523b
 81051a0:	0810523b 	.word	0x0810523b
 81051a4:	0810523b 	.word	0x0810523b
 81051a8:	0810523b 	.word	0x0810523b
 81051ac:	0810523b 	.word	0x0810523b
 81051b0:	0810523b 	.word	0x0810523b
 81051b4:	0810523b 	.word	0x0810523b
 81051b8:	0810523b 	.word	0x0810523b
 81051bc:	0810523b 	.word	0x0810523b
 81051c0:	0810523b 	.word	0x0810523b
 81051c4:	0810523b 	.word	0x0810523b
 81051c8:	0810523b 	.word	0x0810523b
 81051cc:	0810522d 	.word	0x0810522d
 81051d0:	2b40      	cmp	r3, #64	; 0x40
 81051d2:	d02e      	beq.n	8105232 <UART_SetConfig+0xa36>
 81051d4:	e031      	b.n	810523a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81051d6:	f7fd f991 	bl	81024fc <HAL_RCC_GetPCLK1Freq>
 81051da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81051dc:	e033      	b.n	8105246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81051de:	f7fd f9a3 	bl	8102528 <HAL_RCC_GetPCLK2Freq>
 81051e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81051e4:	e02f      	b.n	8105246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81051ea:	4618      	mov	r0, r3
 81051ec:	f7fe f90e 	bl	810340c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051f4:	e027      	b.n	8105246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81051f6:	f107 0318 	add.w	r3, r7, #24
 81051fa:	4618      	mov	r0, r3
 81051fc:	f7fe fa5a 	bl	81036b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105200:	69fb      	ldr	r3, [r7, #28]
 8105202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105204:	e01f      	b.n	8105246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105206:	4b2d      	ldr	r3, [pc, #180]	; (81052bc <UART_SetConfig+0xac0>)
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	f003 0320 	and.w	r3, r3, #32
 810520e:	2b00      	cmp	r3, #0
 8105210:	d009      	beq.n	8105226 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105212:	4b2a      	ldr	r3, [pc, #168]	; (81052bc <UART_SetConfig+0xac0>)
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	08db      	lsrs	r3, r3, #3
 8105218:	f003 0303 	and.w	r3, r3, #3
 810521c:	4a28      	ldr	r2, [pc, #160]	; (81052c0 <UART_SetConfig+0xac4>)
 810521e:	fa22 f303 	lsr.w	r3, r2, r3
 8105222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105224:	e00f      	b.n	8105246 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8105226:	4b26      	ldr	r3, [pc, #152]	; (81052c0 <UART_SetConfig+0xac4>)
 8105228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810522a:	e00c      	b.n	8105246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810522c:	4b25      	ldr	r3, [pc, #148]	; (81052c4 <UART_SetConfig+0xac8>)
 810522e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105230:	e009      	b.n	8105246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105238:	e005      	b.n	8105246 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810523a:	2300      	movs	r3, #0
 810523c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810523e:	2301      	movs	r3, #1
 8105240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105244:	bf00      	nop
    }

    if (pclk != 0U)
 8105246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105248:	2b00      	cmp	r3, #0
 810524a:	d021      	beq.n	8105290 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810524c:	697b      	ldr	r3, [r7, #20]
 810524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105250:	4a1d      	ldr	r2, [pc, #116]	; (81052c8 <UART_SetConfig+0xacc>)
 8105252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105256:	461a      	mov	r2, r3
 8105258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810525a:	fbb3 f2f2 	udiv	r2, r3, r2
 810525e:	697b      	ldr	r3, [r7, #20]
 8105260:	685b      	ldr	r3, [r3, #4]
 8105262:	085b      	lsrs	r3, r3, #1
 8105264:	441a      	add	r2, r3
 8105266:	697b      	ldr	r3, [r7, #20]
 8105268:	685b      	ldr	r3, [r3, #4]
 810526a:	fbb2 f3f3 	udiv	r3, r2, r3
 810526e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105272:	2b0f      	cmp	r3, #15
 8105274:	d909      	bls.n	810528a <UART_SetConfig+0xa8e>
 8105276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810527c:	d205      	bcs.n	810528a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105280:	b29a      	uxth	r2, r3
 8105282:	697b      	ldr	r3, [r7, #20]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	60da      	str	r2, [r3, #12]
 8105288:	e002      	b.n	8105290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810528a:	2301      	movs	r3, #1
 810528c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105290:	697b      	ldr	r3, [r7, #20]
 8105292:	2201      	movs	r2, #1
 8105294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105298:	697b      	ldr	r3, [r7, #20]
 810529a:	2201      	movs	r2, #1
 810529c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81052a0:	697b      	ldr	r3, [r7, #20]
 81052a2:	2200      	movs	r2, #0
 81052a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81052a6:	697b      	ldr	r3, [r7, #20]
 81052a8:	2200      	movs	r2, #0
 81052aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81052ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81052b0:	4618      	mov	r0, r3
 81052b2:	3748      	adds	r7, #72	; 0x48
 81052b4:	46bd      	mov	sp, r7
 81052b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81052ba:	bf00      	nop
 81052bc:	58024400 	.word	0x58024400
 81052c0:	03d09000 	.word	0x03d09000
 81052c4:	003d0900 	.word	0x003d0900
 81052c8:	08108334 	.word	0x08108334

081052cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81052cc:	b480      	push	{r7}
 81052ce:	b083      	sub	sp, #12
 81052d0:	af00      	add	r7, sp, #0
 81052d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052d8:	f003 0301 	and.w	r3, r3, #1
 81052dc:	2b00      	cmp	r3, #0
 81052de:	d00a      	beq.n	81052f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	685b      	ldr	r3, [r3, #4]
 81052e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81052ee:	687b      	ldr	r3, [r7, #4]
 81052f0:	681b      	ldr	r3, [r3, #0]
 81052f2:	430a      	orrs	r2, r1
 81052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052fa:	f003 0302 	and.w	r3, r3, #2
 81052fe:	2b00      	cmp	r3, #0
 8105300:	d00a      	beq.n	8105318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	685b      	ldr	r3, [r3, #4]
 8105308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	430a      	orrs	r2, r1
 8105316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810531c:	f003 0304 	and.w	r3, r3, #4
 8105320:	2b00      	cmp	r3, #0
 8105322:	d00a      	beq.n	810533a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	685b      	ldr	r3, [r3, #4]
 810532a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	430a      	orrs	r2, r1
 8105338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810533e:	f003 0308 	and.w	r3, r3, #8
 8105342:	2b00      	cmp	r3, #0
 8105344:	d00a      	beq.n	810535c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	685b      	ldr	r3, [r3, #4]
 810534c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	430a      	orrs	r2, r1
 810535a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105360:	f003 0310 	and.w	r3, r3, #16
 8105364:	2b00      	cmp	r3, #0
 8105366:	d00a      	beq.n	810537e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	689b      	ldr	r3, [r3, #8]
 810536e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	430a      	orrs	r2, r1
 810537c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105382:	f003 0320 	and.w	r3, r3, #32
 8105386:	2b00      	cmp	r3, #0
 8105388:	d00a      	beq.n	81053a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	681b      	ldr	r3, [r3, #0]
 810538e:	689b      	ldr	r3, [r3, #8]
 8105390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	430a      	orrs	r2, r1
 810539e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81053a8:	2b00      	cmp	r3, #0
 81053aa:	d01a      	beq.n	81053e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81053ac:	687b      	ldr	r3, [r7, #4]
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	685b      	ldr	r3, [r3, #4]
 81053b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	430a      	orrs	r2, r1
 81053c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81053ca:	d10a      	bne.n	81053e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	685b      	ldr	r3, [r3, #4]
 81053d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	681b      	ldr	r3, [r3, #0]
 81053de:	430a      	orrs	r2, r1
 81053e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81053ea:	2b00      	cmp	r3, #0
 81053ec:	d00a      	beq.n	8105404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	685b      	ldr	r3, [r3, #4]
 81053f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81053f8:	687b      	ldr	r3, [r7, #4]
 81053fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	430a      	orrs	r2, r1
 8105402:	605a      	str	r2, [r3, #4]
  }
}
 8105404:	bf00      	nop
 8105406:	370c      	adds	r7, #12
 8105408:	46bd      	mov	sp, r7
 810540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810540e:	4770      	bx	lr

08105410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105410:	b580      	push	{r7, lr}
 8105412:	b086      	sub	sp, #24
 8105414:	af02      	add	r7, sp, #8
 8105416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	2200      	movs	r2, #0
 810541c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105420:	f7fc fb72 	bl	8101b08 <HAL_GetTick>
 8105424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	f003 0308 	and.w	r3, r3, #8
 8105430:	2b08      	cmp	r3, #8
 8105432:	d10e      	bne.n	8105452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105438:	9300      	str	r3, [sp, #0]
 810543a:	68fb      	ldr	r3, [r7, #12]
 810543c:	2200      	movs	r2, #0
 810543e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105442:	6878      	ldr	r0, [r7, #4]
 8105444:	f000 f82f 	bl	81054a6 <UART_WaitOnFlagUntilTimeout>
 8105448:	4603      	mov	r3, r0
 810544a:	2b00      	cmp	r3, #0
 810544c:	d001      	beq.n	8105452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810544e:	2303      	movs	r3, #3
 8105450:	e025      	b.n	810549e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	f003 0304 	and.w	r3, r3, #4
 810545c:	2b04      	cmp	r3, #4
 810545e:	d10e      	bne.n	810547e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105464:	9300      	str	r3, [sp, #0]
 8105466:	68fb      	ldr	r3, [r7, #12]
 8105468:	2200      	movs	r2, #0
 810546a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810546e:	6878      	ldr	r0, [r7, #4]
 8105470:	f000 f819 	bl	81054a6 <UART_WaitOnFlagUntilTimeout>
 8105474:	4603      	mov	r3, r0
 8105476:	2b00      	cmp	r3, #0
 8105478:	d001      	beq.n	810547e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810547a:	2303      	movs	r3, #3
 810547c:	e00f      	b.n	810549e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	2220      	movs	r2, #32
 8105482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	2220      	movs	r2, #32
 810548a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	2200      	movs	r2, #0
 8105492:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	2200      	movs	r2, #0
 8105498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810549c:	2300      	movs	r3, #0
}
 810549e:	4618      	mov	r0, r3
 81054a0:	3710      	adds	r7, #16
 81054a2:	46bd      	mov	sp, r7
 81054a4:	bd80      	pop	{r7, pc}

081054a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81054a6:	b580      	push	{r7, lr}
 81054a8:	b09c      	sub	sp, #112	; 0x70
 81054aa:	af00      	add	r7, sp, #0
 81054ac:	60f8      	str	r0, [r7, #12]
 81054ae:	60b9      	str	r1, [r7, #8]
 81054b0:	603b      	str	r3, [r7, #0]
 81054b2:	4613      	mov	r3, r2
 81054b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81054b6:	e0a9      	b.n	810560c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81054b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054be:	f000 80a5 	beq.w	810560c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81054c2:	f7fc fb21 	bl	8101b08 <HAL_GetTick>
 81054c6:	4602      	mov	r2, r0
 81054c8:	683b      	ldr	r3, [r7, #0]
 81054ca:	1ad3      	subs	r3, r2, r3
 81054cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81054ce:	429a      	cmp	r2, r3
 81054d0:	d302      	bcc.n	81054d8 <UART_WaitOnFlagUntilTimeout+0x32>
 81054d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81054d4:	2b00      	cmp	r3, #0
 81054d6:	d140      	bne.n	810555a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81054d8:	68fb      	ldr	r3, [r7, #12]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81054de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81054e0:	e853 3f00 	ldrex	r3, [r3]
 81054e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 81054e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81054e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81054ec:	667b      	str	r3, [r7, #100]	; 0x64
 81054ee:	68fb      	ldr	r3, [r7, #12]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	461a      	mov	r2, r3
 81054f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81054f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 81054f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81054fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81054fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81054fe:	e841 2300 	strex	r3, r2, [r1]
 8105502:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105506:	2b00      	cmp	r3, #0
 8105508:	d1e6      	bne.n	81054d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810550a:	68fb      	ldr	r3, [r7, #12]
 810550c:	681b      	ldr	r3, [r3, #0]
 810550e:	3308      	adds	r3, #8
 8105510:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105514:	e853 3f00 	ldrex	r3, [r3]
 8105518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810551c:	f023 0301 	bic.w	r3, r3, #1
 8105520:	663b      	str	r3, [r7, #96]	; 0x60
 8105522:	68fb      	ldr	r3, [r7, #12]
 8105524:	681b      	ldr	r3, [r3, #0]
 8105526:	3308      	adds	r3, #8
 8105528:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810552a:	64ba      	str	r2, [r7, #72]	; 0x48
 810552c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810552e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105532:	e841 2300 	strex	r3, r2, [r1]
 8105536:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8105538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810553a:	2b00      	cmp	r3, #0
 810553c:	d1e5      	bne.n	810550a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810553e:	68fb      	ldr	r3, [r7, #12]
 8105540:	2220      	movs	r2, #32
 8105542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8105546:	68fb      	ldr	r3, [r7, #12]
 8105548:	2220      	movs	r2, #32
 810554a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	2200      	movs	r2, #0
 8105552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8105556:	2303      	movs	r3, #3
 8105558:	e069      	b.n	810562e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810555a:	68fb      	ldr	r3, [r7, #12]
 810555c:	681b      	ldr	r3, [r3, #0]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	f003 0304 	and.w	r3, r3, #4
 8105564:	2b00      	cmp	r3, #0
 8105566:	d051      	beq.n	810560c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105568:	68fb      	ldr	r3, [r7, #12]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	69db      	ldr	r3, [r3, #28]
 810556e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105576:	d149      	bne.n	810560c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105578:	68fb      	ldr	r3, [r7, #12]
 810557a:	681b      	ldr	r3, [r3, #0]
 810557c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105580:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105582:	68fb      	ldr	r3, [r7, #12]
 8105584:	681b      	ldr	r3, [r3, #0]
 8105586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810558a:	e853 3f00 	ldrex	r3, [r3]
 810558e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105592:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105598:	68fb      	ldr	r3, [r7, #12]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	461a      	mov	r2, r3
 810559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81055a0:	637b      	str	r3, [r7, #52]	; 0x34
 81055a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81055a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81055a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81055a8:	e841 2300 	strex	r3, r2, [r1]
 81055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81055b0:	2b00      	cmp	r3, #0
 81055b2:	d1e6      	bne.n	8105582 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	3308      	adds	r3, #8
 81055ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81055bc:	697b      	ldr	r3, [r7, #20]
 81055be:	e853 3f00 	ldrex	r3, [r3]
 81055c2:	613b      	str	r3, [r7, #16]
   return(result);
 81055c4:	693b      	ldr	r3, [r7, #16]
 81055c6:	f023 0301 	bic.w	r3, r3, #1
 81055ca:	66bb      	str	r3, [r7, #104]	; 0x68
 81055cc:	68fb      	ldr	r3, [r7, #12]
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	3308      	adds	r3, #8
 81055d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81055d4:	623a      	str	r2, [r7, #32]
 81055d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81055d8:	69f9      	ldr	r1, [r7, #28]
 81055da:	6a3a      	ldr	r2, [r7, #32]
 81055dc:	e841 2300 	strex	r3, r2, [r1]
 81055e0:	61bb      	str	r3, [r7, #24]
   return(result);
 81055e2:	69bb      	ldr	r3, [r7, #24]
 81055e4:	2b00      	cmp	r3, #0
 81055e6:	d1e5      	bne.n	81055b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 81055e8:	68fb      	ldr	r3, [r7, #12]
 81055ea:	2220      	movs	r2, #32
 81055ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 81055f0:	68fb      	ldr	r3, [r7, #12]
 81055f2:	2220      	movs	r2, #32
 81055f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	2220      	movs	r2, #32
 81055fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105600:	68fb      	ldr	r3, [r7, #12]
 8105602:	2200      	movs	r2, #0
 8105604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105608:	2303      	movs	r3, #3
 810560a:	e010      	b.n	810562e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810560c:	68fb      	ldr	r3, [r7, #12]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	69da      	ldr	r2, [r3, #28]
 8105612:	68bb      	ldr	r3, [r7, #8]
 8105614:	4013      	ands	r3, r2
 8105616:	68ba      	ldr	r2, [r7, #8]
 8105618:	429a      	cmp	r2, r3
 810561a:	bf0c      	ite	eq
 810561c:	2301      	moveq	r3, #1
 810561e:	2300      	movne	r3, #0
 8105620:	b2db      	uxtb	r3, r3
 8105622:	461a      	mov	r2, r3
 8105624:	79fb      	ldrb	r3, [r7, #7]
 8105626:	429a      	cmp	r2, r3
 8105628:	f43f af46 	beq.w	81054b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810562c:	2300      	movs	r3, #0
}
 810562e:	4618      	mov	r0, r3
 8105630:	3770      	adds	r7, #112	; 0x70
 8105632:	46bd      	mov	sp, r7
 8105634:	bd80      	pop	{r7, pc}

08105636 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105636:	b480      	push	{r7}
 8105638:	b085      	sub	sp, #20
 810563a:	af00      	add	r7, sp, #0
 810563c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105644:	2b01      	cmp	r3, #1
 8105646:	d101      	bne.n	810564c <HAL_UARTEx_DisableFifoMode+0x16>
 8105648:	2302      	movs	r3, #2
 810564a:	e027      	b.n	810569c <HAL_UARTEx_DisableFifoMode+0x66>
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	2201      	movs	r2, #1
 8105650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	2224      	movs	r2, #36	; 0x24
 8105658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	681b      	ldr	r3, [r3, #0]
 8105660:	681b      	ldr	r3, [r3, #0]
 8105662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	681a      	ldr	r2, [r3, #0]
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	681b      	ldr	r3, [r3, #0]
 810566e:	f022 0201 	bic.w	r2, r2, #1
 8105672:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105674:	68fb      	ldr	r3, [r7, #12]
 8105676:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810567a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810567c:	687b      	ldr	r3, [r7, #4]
 810567e:	2200      	movs	r2, #0
 8105680:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	68fa      	ldr	r2, [r7, #12]
 8105688:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	2220      	movs	r2, #32
 810568e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	2200      	movs	r2, #0
 8105696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810569a:	2300      	movs	r3, #0
}
 810569c:	4618      	mov	r0, r3
 810569e:	3714      	adds	r7, #20
 81056a0:	46bd      	mov	sp, r7
 81056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056a6:	4770      	bx	lr

081056a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81056a8:	b580      	push	{r7, lr}
 81056aa:	b084      	sub	sp, #16
 81056ac:	af00      	add	r7, sp, #0
 81056ae:	6078      	str	r0, [r7, #4]
 81056b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81056b8:	2b01      	cmp	r3, #1
 81056ba:	d101      	bne.n	81056c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81056bc:	2302      	movs	r3, #2
 81056be:	e02d      	b.n	810571c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	2201      	movs	r2, #1
 81056c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	2224      	movs	r2, #36	; 0x24
 81056cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	681a      	ldr	r2, [r3, #0]
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	681b      	ldr	r3, [r3, #0]
 81056e2:	f022 0201 	bic.w	r2, r2, #1
 81056e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	681b      	ldr	r3, [r3, #0]
 81056ec:	689b      	ldr	r3, [r3, #8]
 81056ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	683a      	ldr	r2, [r7, #0]
 81056f8:	430a      	orrs	r2, r1
 81056fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81056fc:	6878      	ldr	r0, [r7, #4]
 81056fe:	f000 f84f 	bl	81057a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	681b      	ldr	r3, [r3, #0]
 8105706:	68fa      	ldr	r2, [r7, #12]
 8105708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	2220      	movs	r2, #32
 810570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	2200      	movs	r2, #0
 8105716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810571a:	2300      	movs	r3, #0
}
 810571c:	4618      	mov	r0, r3
 810571e:	3710      	adds	r7, #16
 8105720:	46bd      	mov	sp, r7
 8105722:	bd80      	pop	{r7, pc}

08105724 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105724:	b580      	push	{r7, lr}
 8105726:	b084      	sub	sp, #16
 8105728:	af00      	add	r7, sp, #0
 810572a:	6078      	str	r0, [r7, #4]
 810572c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105734:	2b01      	cmp	r3, #1
 8105736:	d101      	bne.n	810573c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105738:	2302      	movs	r3, #2
 810573a:	e02d      	b.n	8105798 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	2201      	movs	r2, #1
 8105740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	2224      	movs	r2, #36	; 0x24
 8105748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	681b      	ldr	r3, [r3, #0]
 8105750:	681b      	ldr	r3, [r3, #0]
 8105752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	681a      	ldr	r2, [r3, #0]
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	681b      	ldr	r3, [r3, #0]
 810575e:	f022 0201 	bic.w	r2, r2, #1
 8105762:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	689b      	ldr	r3, [r3, #8]
 810576a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	681b      	ldr	r3, [r3, #0]
 8105772:	683a      	ldr	r2, [r7, #0]
 8105774:	430a      	orrs	r2, r1
 8105776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105778:	6878      	ldr	r0, [r7, #4]
 810577a:	f000 f811 	bl	81057a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	681b      	ldr	r3, [r3, #0]
 8105782:	68fa      	ldr	r2, [r7, #12]
 8105784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	2220      	movs	r2, #32
 810578a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	2200      	movs	r2, #0
 8105792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105796:	2300      	movs	r3, #0
}
 8105798:	4618      	mov	r0, r3
 810579a:	3710      	adds	r7, #16
 810579c:	46bd      	mov	sp, r7
 810579e:	bd80      	pop	{r7, pc}

081057a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81057a0:	b480      	push	{r7}
 81057a2:	b085      	sub	sp, #20
 81057a4:	af00      	add	r7, sp, #0
 81057a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81057a8:	687b      	ldr	r3, [r7, #4]
 81057aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057ac:	2b00      	cmp	r3, #0
 81057ae:	d108      	bne.n	81057c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81057b0:	687b      	ldr	r3, [r7, #4]
 81057b2:	2201      	movs	r2, #1
 81057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81057b8:	687b      	ldr	r3, [r7, #4]
 81057ba:	2201      	movs	r2, #1
 81057bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81057c0:	e031      	b.n	8105826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81057c2:	2310      	movs	r3, #16
 81057c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81057c6:	2310      	movs	r3, #16
 81057c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	689b      	ldr	r3, [r3, #8]
 81057d0:	0e5b      	lsrs	r3, r3, #25
 81057d2:	b2db      	uxtb	r3, r3
 81057d4:	f003 0307 	and.w	r3, r3, #7
 81057d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	681b      	ldr	r3, [r3, #0]
 81057de:	689b      	ldr	r3, [r3, #8]
 81057e0:	0f5b      	lsrs	r3, r3, #29
 81057e2:	b2db      	uxtb	r3, r3
 81057e4:	f003 0307 	and.w	r3, r3, #7
 81057e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81057ea:	7bbb      	ldrb	r3, [r7, #14]
 81057ec:	7b3a      	ldrb	r2, [r7, #12]
 81057ee:	4911      	ldr	r1, [pc, #68]	; (8105834 <UARTEx_SetNbDataToProcess+0x94>)
 81057f0:	5c8a      	ldrb	r2, [r1, r2]
 81057f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81057f6:	7b3a      	ldrb	r2, [r7, #12]
 81057f8:	490f      	ldr	r1, [pc, #60]	; (8105838 <UARTEx_SetNbDataToProcess+0x98>)
 81057fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81057fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8105800:	b29a      	uxth	r2, r3
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105808:	7bfb      	ldrb	r3, [r7, #15]
 810580a:	7b7a      	ldrb	r2, [r7, #13]
 810580c:	4909      	ldr	r1, [pc, #36]	; (8105834 <UARTEx_SetNbDataToProcess+0x94>)
 810580e:	5c8a      	ldrb	r2, [r1, r2]
 8105810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105814:	7b7a      	ldrb	r2, [r7, #13]
 8105816:	4908      	ldr	r1, [pc, #32]	; (8105838 <UARTEx_SetNbDataToProcess+0x98>)
 8105818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810581a:	fb93 f3f2 	sdiv	r3, r3, r2
 810581e:	b29a      	uxth	r2, r3
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105826:	bf00      	nop
 8105828:	3714      	adds	r7, #20
 810582a:	46bd      	mov	sp, r7
 810582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105830:	4770      	bx	lr
 8105832:	bf00      	nop
 8105834:	0810834c 	.word	0x0810834c
 8105838:	08108354 	.word	0x08108354

0810583c <__errno>:
 810583c:	4b01      	ldr	r3, [pc, #4]	; (8105844 <__errno+0x8>)
 810583e:	6818      	ldr	r0, [r3, #0]
 8105840:	4770      	bx	lr
 8105842:	bf00      	nop
 8105844:	10000028 	.word	0x10000028

08105848 <__libc_init_array>:
 8105848:	b570      	push	{r4, r5, r6, lr}
 810584a:	4d0d      	ldr	r5, [pc, #52]	; (8105880 <__libc_init_array+0x38>)
 810584c:	4c0d      	ldr	r4, [pc, #52]	; (8105884 <__libc_init_array+0x3c>)
 810584e:	1b64      	subs	r4, r4, r5
 8105850:	10a4      	asrs	r4, r4, #2
 8105852:	2600      	movs	r6, #0
 8105854:	42a6      	cmp	r6, r4
 8105856:	d109      	bne.n	810586c <__libc_init_array+0x24>
 8105858:	4d0b      	ldr	r5, [pc, #44]	; (8105888 <__libc_init_array+0x40>)
 810585a:	4c0c      	ldr	r4, [pc, #48]	; (810588c <__libc_init_array+0x44>)
 810585c:	f002 fd50 	bl	8108300 <_init>
 8105860:	1b64      	subs	r4, r4, r5
 8105862:	10a4      	asrs	r4, r4, #2
 8105864:	2600      	movs	r6, #0
 8105866:	42a6      	cmp	r6, r4
 8105868:	d105      	bne.n	8105876 <__libc_init_array+0x2e>
 810586a:	bd70      	pop	{r4, r5, r6, pc}
 810586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8105870:	4798      	blx	r3
 8105872:	3601      	adds	r6, #1
 8105874:	e7ee      	b.n	8105854 <__libc_init_array+0xc>
 8105876:	f855 3b04 	ldr.w	r3, [r5], #4
 810587a:	4798      	blx	r3
 810587c:	3601      	adds	r6, #1
 810587e:	e7f2      	b.n	8105866 <__libc_init_array+0x1e>
 8105880:	0810873c 	.word	0x0810873c
 8105884:	0810873c 	.word	0x0810873c
 8105888:	0810873c 	.word	0x0810873c
 810588c:	08108740 	.word	0x08108740

08105890 <memset>:
 8105890:	4402      	add	r2, r0
 8105892:	4603      	mov	r3, r0
 8105894:	4293      	cmp	r3, r2
 8105896:	d100      	bne.n	810589a <memset+0xa>
 8105898:	4770      	bx	lr
 810589a:	f803 1b01 	strb.w	r1, [r3], #1
 810589e:	e7f9      	b.n	8105894 <memset+0x4>

081058a0 <__cvt>:
 81058a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81058a4:	ec55 4b10 	vmov	r4, r5, d0
 81058a8:	2d00      	cmp	r5, #0
 81058aa:	460e      	mov	r6, r1
 81058ac:	4619      	mov	r1, r3
 81058ae:	462b      	mov	r3, r5
 81058b0:	bfbb      	ittet	lt
 81058b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81058b6:	461d      	movlt	r5, r3
 81058b8:	2300      	movge	r3, #0
 81058ba:	232d      	movlt	r3, #45	; 0x2d
 81058bc:	700b      	strb	r3, [r1, #0]
 81058be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81058c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81058c4:	4691      	mov	r9, r2
 81058c6:	f023 0820 	bic.w	r8, r3, #32
 81058ca:	bfbc      	itt	lt
 81058cc:	4622      	movlt	r2, r4
 81058ce:	4614      	movlt	r4, r2
 81058d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81058d4:	d005      	beq.n	81058e2 <__cvt+0x42>
 81058d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81058da:	d100      	bne.n	81058de <__cvt+0x3e>
 81058dc:	3601      	adds	r6, #1
 81058de:	2102      	movs	r1, #2
 81058e0:	e000      	b.n	81058e4 <__cvt+0x44>
 81058e2:	2103      	movs	r1, #3
 81058e4:	ab03      	add	r3, sp, #12
 81058e6:	9301      	str	r3, [sp, #4]
 81058e8:	ab02      	add	r3, sp, #8
 81058ea:	9300      	str	r3, [sp, #0]
 81058ec:	ec45 4b10 	vmov	d0, r4, r5
 81058f0:	4653      	mov	r3, sl
 81058f2:	4632      	mov	r2, r6
 81058f4:	f000 fce4 	bl	81062c0 <_dtoa_r>
 81058f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81058fc:	4607      	mov	r7, r0
 81058fe:	d102      	bne.n	8105906 <__cvt+0x66>
 8105900:	f019 0f01 	tst.w	r9, #1
 8105904:	d022      	beq.n	810594c <__cvt+0xac>
 8105906:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810590a:	eb07 0906 	add.w	r9, r7, r6
 810590e:	d110      	bne.n	8105932 <__cvt+0x92>
 8105910:	783b      	ldrb	r3, [r7, #0]
 8105912:	2b30      	cmp	r3, #48	; 0x30
 8105914:	d10a      	bne.n	810592c <__cvt+0x8c>
 8105916:	2200      	movs	r2, #0
 8105918:	2300      	movs	r3, #0
 810591a:	4620      	mov	r0, r4
 810591c:	4629      	mov	r1, r5
 810591e:	f7fb f95b 	bl	8100bd8 <__aeabi_dcmpeq>
 8105922:	b918      	cbnz	r0, 810592c <__cvt+0x8c>
 8105924:	f1c6 0601 	rsb	r6, r6, #1
 8105928:	f8ca 6000 	str.w	r6, [sl]
 810592c:	f8da 3000 	ldr.w	r3, [sl]
 8105930:	4499      	add	r9, r3
 8105932:	2200      	movs	r2, #0
 8105934:	2300      	movs	r3, #0
 8105936:	4620      	mov	r0, r4
 8105938:	4629      	mov	r1, r5
 810593a:	f7fb f94d 	bl	8100bd8 <__aeabi_dcmpeq>
 810593e:	b108      	cbz	r0, 8105944 <__cvt+0xa4>
 8105940:	f8cd 900c 	str.w	r9, [sp, #12]
 8105944:	2230      	movs	r2, #48	; 0x30
 8105946:	9b03      	ldr	r3, [sp, #12]
 8105948:	454b      	cmp	r3, r9
 810594a:	d307      	bcc.n	810595c <__cvt+0xbc>
 810594c:	9b03      	ldr	r3, [sp, #12]
 810594e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8105950:	1bdb      	subs	r3, r3, r7
 8105952:	4638      	mov	r0, r7
 8105954:	6013      	str	r3, [r2, #0]
 8105956:	b004      	add	sp, #16
 8105958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810595c:	1c59      	adds	r1, r3, #1
 810595e:	9103      	str	r1, [sp, #12]
 8105960:	701a      	strb	r2, [r3, #0]
 8105962:	e7f0      	b.n	8105946 <__cvt+0xa6>

08105964 <__exponent>:
 8105964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8105966:	4603      	mov	r3, r0
 8105968:	2900      	cmp	r1, #0
 810596a:	bfb8      	it	lt
 810596c:	4249      	neglt	r1, r1
 810596e:	f803 2b02 	strb.w	r2, [r3], #2
 8105972:	bfb4      	ite	lt
 8105974:	222d      	movlt	r2, #45	; 0x2d
 8105976:	222b      	movge	r2, #43	; 0x2b
 8105978:	2909      	cmp	r1, #9
 810597a:	7042      	strb	r2, [r0, #1]
 810597c:	dd2a      	ble.n	81059d4 <__exponent+0x70>
 810597e:	f10d 0407 	add.w	r4, sp, #7
 8105982:	46a4      	mov	ip, r4
 8105984:	270a      	movs	r7, #10
 8105986:	46a6      	mov	lr, r4
 8105988:	460a      	mov	r2, r1
 810598a:	fb91 f6f7 	sdiv	r6, r1, r7
 810598e:	fb07 1516 	mls	r5, r7, r6, r1
 8105992:	3530      	adds	r5, #48	; 0x30
 8105994:	2a63      	cmp	r2, #99	; 0x63
 8105996:	f104 34ff 	add.w	r4, r4, #4294967295
 810599a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810599e:	4631      	mov	r1, r6
 81059a0:	dcf1      	bgt.n	8105986 <__exponent+0x22>
 81059a2:	3130      	adds	r1, #48	; 0x30
 81059a4:	f1ae 0502 	sub.w	r5, lr, #2
 81059a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 81059ac:	1c44      	adds	r4, r0, #1
 81059ae:	4629      	mov	r1, r5
 81059b0:	4561      	cmp	r1, ip
 81059b2:	d30a      	bcc.n	81059ca <__exponent+0x66>
 81059b4:	f10d 0209 	add.w	r2, sp, #9
 81059b8:	eba2 020e 	sub.w	r2, r2, lr
 81059bc:	4565      	cmp	r5, ip
 81059be:	bf88      	it	hi
 81059c0:	2200      	movhi	r2, #0
 81059c2:	4413      	add	r3, r2
 81059c4:	1a18      	subs	r0, r3, r0
 81059c6:	b003      	add	sp, #12
 81059c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81059ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 81059ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 81059d2:	e7ed      	b.n	81059b0 <__exponent+0x4c>
 81059d4:	2330      	movs	r3, #48	; 0x30
 81059d6:	3130      	adds	r1, #48	; 0x30
 81059d8:	7083      	strb	r3, [r0, #2]
 81059da:	70c1      	strb	r1, [r0, #3]
 81059dc:	1d03      	adds	r3, r0, #4
 81059de:	e7f1      	b.n	81059c4 <__exponent+0x60>

081059e0 <_printf_float>:
 81059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81059e4:	ed2d 8b02 	vpush	{d8}
 81059e8:	b08d      	sub	sp, #52	; 0x34
 81059ea:	460c      	mov	r4, r1
 81059ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81059f0:	4616      	mov	r6, r2
 81059f2:	461f      	mov	r7, r3
 81059f4:	4605      	mov	r5, r0
 81059f6:	f001 fb47 	bl	8107088 <_localeconv_r>
 81059fa:	f8d0 a000 	ldr.w	sl, [r0]
 81059fe:	4650      	mov	r0, sl
 8105a00:	f7fa fc6e 	bl	81002e0 <strlen>
 8105a04:	2300      	movs	r3, #0
 8105a06:	930a      	str	r3, [sp, #40]	; 0x28
 8105a08:	6823      	ldr	r3, [r4, #0]
 8105a0a:	9305      	str	r3, [sp, #20]
 8105a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8105a10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8105a14:	3307      	adds	r3, #7
 8105a16:	f023 0307 	bic.w	r3, r3, #7
 8105a1a:	f103 0208 	add.w	r2, r3, #8
 8105a1e:	f8c8 2000 	str.w	r2, [r8]
 8105a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8105a2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8105a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8105a32:	9307      	str	r3, [sp, #28]
 8105a34:	f8cd 8018 	str.w	r8, [sp, #24]
 8105a38:	ee08 0a10 	vmov	s16, r0
 8105a3c:	4b9f      	ldr	r3, [pc, #636]	; (8105cbc <_printf_float+0x2dc>)
 8105a3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8105a42:	f04f 32ff 	mov.w	r2, #4294967295
 8105a46:	f7fb f8f9 	bl	8100c3c <__aeabi_dcmpun>
 8105a4a:	bb88      	cbnz	r0, 8105ab0 <_printf_float+0xd0>
 8105a4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8105a50:	4b9a      	ldr	r3, [pc, #616]	; (8105cbc <_printf_float+0x2dc>)
 8105a52:	f04f 32ff 	mov.w	r2, #4294967295
 8105a56:	f7fb f8d3 	bl	8100c00 <__aeabi_dcmple>
 8105a5a:	bb48      	cbnz	r0, 8105ab0 <_printf_float+0xd0>
 8105a5c:	2200      	movs	r2, #0
 8105a5e:	2300      	movs	r3, #0
 8105a60:	4640      	mov	r0, r8
 8105a62:	4649      	mov	r1, r9
 8105a64:	f7fb f8c2 	bl	8100bec <__aeabi_dcmplt>
 8105a68:	b110      	cbz	r0, 8105a70 <_printf_float+0x90>
 8105a6a:	232d      	movs	r3, #45	; 0x2d
 8105a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105a70:	4b93      	ldr	r3, [pc, #588]	; (8105cc0 <_printf_float+0x2e0>)
 8105a72:	4894      	ldr	r0, [pc, #592]	; (8105cc4 <_printf_float+0x2e4>)
 8105a74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8105a78:	bf94      	ite	ls
 8105a7a:	4698      	movls	r8, r3
 8105a7c:	4680      	movhi	r8, r0
 8105a7e:	2303      	movs	r3, #3
 8105a80:	6123      	str	r3, [r4, #16]
 8105a82:	9b05      	ldr	r3, [sp, #20]
 8105a84:	f023 0204 	bic.w	r2, r3, #4
 8105a88:	6022      	str	r2, [r4, #0]
 8105a8a:	f04f 0900 	mov.w	r9, #0
 8105a8e:	9700      	str	r7, [sp, #0]
 8105a90:	4633      	mov	r3, r6
 8105a92:	aa0b      	add	r2, sp, #44	; 0x2c
 8105a94:	4621      	mov	r1, r4
 8105a96:	4628      	mov	r0, r5
 8105a98:	f000 f9d8 	bl	8105e4c <_printf_common>
 8105a9c:	3001      	adds	r0, #1
 8105a9e:	f040 8090 	bne.w	8105bc2 <_printf_float+0x1e2>
 8105aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8105aa6:	b00d      	add	sp, #52	; 0x34
 8105aa8:	ecbd 8b02 	vpop	{d8}
 8105aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105ab0:	4642      	mov	r2, r8
 8105ab2:	464b      	mov	r3, r9
 8105ab4:	4640      	mov	r0, r8
 8105ab6:	4649      	mov	r1, r9
 8105ab8:	f7fb f8c0 	bl	8100c3c <__aeabi_dcmpun>
 8105abc:	b140      	cbz	r0, 8105ad0 <_printf_float+0xf0>
 8105abe:	464b      	mov	r3, r9
 8105ac0:	2b00      	cmp	r3, #0
 8105ac2:	bfbc      	itt	lt
 8105ac4:	232d      	movlt	r3, #45	; 0x2d
 8105ac6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8105aca:	487f      	ldr	r0, [pc, #508]	; (8105cc8 <_printf_float+0x2e8>)
 8105acc:	4b7f      	ldr	r3, [pc, #508]	; (8105ccc <_printf_float+0x2ec>)
 8105ace:	e7d1      	b.n	8105a74 <_printf_float+0x94>
 8105ad0:	6863      	ldr	r3, [r4, #4]
 8105ad2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8105ad6:	9206      	str	r2, [sp, #24]
 8105ad8:	1c5a      	adds	r2, r3, #1
 8105ada:	d13f      	bne.n	8105b5c <_printf_float+0x17c>
 8105adc:	2306      	movs	r3, #6
 8105ade:	6063      	str	r3, [r4, #4]
 8105ae0:	9b05      	ldr	r3, [sp, #20]
 8105ae2:	6861      	ldr	r1, [r4, #4]
 8105ae4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8105ae8:	2300      	movs	r3, #0
 8105aea:	9303      	str	r3, [sp, #12]
 8105aec:	ab0a      	add	r3, sp, #40	; 0x28
 8105aee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8105af2:	ab09      	add	r3, sp, #36	; 0x24
 8105af4:	ec49 8b10 	vmov	d0, r8, r9
 8105af8:	9300      	str	r3, [sp, #0]
 8105afa:	6022      	str	r2, [r4, #0]
 8105afc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8105b00:	4628      	mov	r0, r5
 8105b02:	f7ff fecd 	bl	81058a0 <__cvt>
 8105b06:	9b06      	ldr	r3, [sp, #24]
 8105b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8105b0a:	2b47      	cmp	r3, #71	; 0x47
 8105b0c:	4680      	mov	r8, r0
 8105b0e:	d108      	bne.n	8105b22 <_printf_float+0x142>
 8105b10:	1cc8      	adds	r0, r1, #3
 8105b12:	db02      	blt.n	8105b1a <_printf_float+0x13a>
 8105b14:	6863      	ldr	r3, [r4, #4]
 8105b16:	4299      	cmp	r1, r3
 8105b18:	dd41      	ble.n	8105b9e <_printf_float+0x1be>
 8105b1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8105b1e:	fa5f fb8b 	uxtb.w	fp, fp
 8105b22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8105b26:	d820      	bhi.n	8105b6a <_printf_float+0x18a>
 8105b28:	3901      	subs	r1, #1
 8105b2a:	465a      	mov	r2, fp
 8105b2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8105b30:	9109      	str	r1, [sp, #36]	; 0x24
 8105b32:	f7ff ff17 	bl	8105964 <__exponent>
 8105b36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8105b38:	1813      	adds	r3, r2, r0
 8105b3a:	2a01      	cmp	r2, #1
 8105b3c:	4681      	mov	r9, r0
 8105b3e:	6123      	str	r3, [r4, #16]
 8105b40:	dc02      	bgt.n	8105b48 <_printf_float+0x168>
 8105b42:	6822      	ldr	r2, [r4, #0]
 8105b44:	07d2      	lsls	r2, r2, #31
 8105b46:	d501      	bpl.n	8105b4c <_printf_float+0x16c>
 8105b48:	3301      	adds	r3, #1
 8105b4a:	6123      	str	r3, [r4, #16]
 8105b4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8105b50:	2b00      	cmp	r3, #0
 8105b52:	d09c      	beq.n	8105a8e <_printf_float+0xae>
 8105b54:	232d      	movs	r3, #45	; 0x2d
 8105b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105b5a:	e798      	b.n	8105a8e <_printf_float+0xae>
 8105b5c:	9a06      	ldr	r2, [sp, #24]
 8105b5e:	2a47      	cmp	r2, #71	; 0x47
 8105b60:	d1be      	bne.n	8105ae0 <_printf_float+0x100>
 8105b62:	2b00      	cmp	r3, #0
 8105b64:	d1bc      	bne.n	8105ae0 <_printf_float+0x100>
 8105b66:	2301      	movs	r3, #1
 8105b68:	e7b9      	b.n	8105ade <_printf_float+0xfe>
 8105b6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8105b6e:	d118      	bne.n	8105ba2 <_printf_float+0x1c2>
 8105b70:	2900      	cmp	r1, #0
 8105b72:	6863      	ldr	r3, [r4, #4]
 8105b74:	dd0b      	ble.n	8105b8e <_printf_float+0x1ae>
 8105b76:	6121      	str	r1, [r4, #16]
 8105b78:	b913      	cbnz	r3, 8105b80 <_printf_float+0x1a0>
 8105b7a:	6822      	ldr	r2, [r4, #0]
 8105b7c:	07d0      	lsls	r0, r2, #31
 8105b7e:	d502      	bpl.n	8105b86 <_printf_float+0x1a6>
 8105b80:	3301      	adds	r3, #1
 8105b82:	440b      	add	r3, r1
 8105b84:	6123      	str	r3, [r4, #16]
 8105b86:	65a1      	str	r1, [r4, #88]	; 0x58
 8105b88:	f04f 0900 	mov.w	r9, #0
 8105b8c:	e7de      	b.n	8105b4c <_printf_float+0x16c>
 8105b8e:	b913      	cbnz	r3, 8105b96 <_printf_float+0x1b6>
 8105b90:	6822      	ldr	r2, [r4, #0]
 8105b92:	07d2      	lsls	r2, r2, #31
 8105b94:	d501      	bpl.n	8105b9a <_printf_float+0x1ba>
 8105b96:	3302      	adds	r3, #2
 8105b98:	e7f4      	b.n	8105b84 <_printf_float+0x1a4>
 8105b9a:	2301      	movs	r3, #1
 8105b9c:	e7f2      	b.n	8105b84 <_printf_float+0x1a4>
 8105b9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8105ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105ba4:	4299      	cmp	r1, r3
 8105ba6:	db05      	blt.n	8105bb4 <_printf_float+0x1d4>
 8105ba8:	6823      	ldr	r3, [r4, #0]
 8105baa:	6121      	str	r1, [r4, #16]
 8105bac:	07d8      	lsls	r0, r3, #31
 8105bae:	d5ea      	bpl.n	8105b86 <_printf_float+0x1a6>
 8105bb0:	1c4b      	adds	r3, r1, #1
 8105bb2:	e7e7      	b.n	8105b84 <_printf_float+0x1a4>
 8105bb4:	2900      	cmp	r1, #0
 8105bb6:	bfd4      	ite	le
 8105bb8:	f1c1 0202 	rsble	r2, r1, #2
 8105bbc:	2201      	movgt	r2, #1
 8105bbe:	4413      	add	r3, r2
 8105bc0:	e7e0      	b.n	8105b84 <_printf_float+0x1a4>
 8105bc2:	6823      	ldr	r3, [r4, #0]
 8105bc4:	055a      	lsls	r2, r3, #21
 8105bc6:	d407      	bmi.n	8105bd8 <_printf_float+0x1f8>
 8105bc8:	6923      	ldr	r3, [r4, #16]
 8105bca:	4642      	mov	r2, r8
 8105bcc:	4631      	mov	r1, r6
 8105bce:	4628      	mov	r0, r5
 8105bd0:	47b8      	blx	r7
 8105bd2:	3001      	adds	r0, #1
 8105bd4:	d12c      	bne.n	8105c30 <_printf_float+0x250>
 8105bd6:	e764      	b.n	8105aa2 <_printf_float+0xc2>
 8105bd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8105bdc:	f240 80e0 	bls.w	8105da0 <_printf_float+0x3c0>
 8105be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8105be4:	2200      	movs	r2, #0
 8105be6:	2300      	movs	r3, #0
 8105be8:	f7fa fff6 	bl	8100bd8 <__aeabi_dcmpeq>
 8105bec:	2800      	cmp	r0, #0
 8105bee:	d034      	beq.n	8105c5a <_printf_float+0x27a>
 8105bf0:	4a37      	ldr	r2, [pc, #220]	; (8105cd0 <_printf_float+0x2f0>)
 8105bf2:	2301      	movs	r3, #1
 8105bf4:	4631      	mov	r1, r6
 8105bf6:	4628      	mov	r0, r5
 8105bf8:	47b8      	blx	r7
 8105bfa:	3001      	adds	r0, #1
 8105bfc:	f43f af51 	beq.w	8105aa2 <_printf_float+0xc2>
 8105c00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8105c04:	429a      	cmp	r2, r3
 8105c06:	db02      	blt.n	8105c0e <_printf_float+0x22e>
 8105c08:	6823      	ldr	r3, [r4, #0]
 8105c0a:	07d8      	lsls	r0, r3, #31
 8105c0c:	d510      	bpl.n	8105c30 <_printf_float+0x250>
 8105c0e:	ee18 3a10 	vmov	r3, s16
 8105c12:	4652      	mov	r2, sl
 8105c14:	4631      	mov	r1, r6
 8105c16:	4628      	mov	r0, r5
 8105c18:	47b8      	blx	r7
 8105c1a:	3001      	adds	r0, #1
 8105c1c:	f43f af41 	beq.w	8105aa2 <_printf_float+0xc2>
 8105c20:	f04f 0800 	mov.w	r8, #0
 8105c24:	f104 091a 	add.w	r9, r4, #26
 8105c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105c2a:	3b01      	subs	r3, #1
 8105c2c:	4543      	cmp	r3, r8
 8105c2e:	dc09      	bgt.n	8105c44 <_printf_float+0x264>
 8105c30:	6823      	ldr	r3, [r4, #0]
 8105c32:	079b      	lsls	r3, r3, #30
 8105c34:	f100 8105 	bmi.w	8105e42 <_printf_float+0x462>
 8105c38:	68e0      	ldr	r0, [r4, #12]
 8105c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105c3c:	4298      	cmp	r0, r3
 8105c3e:	bfb8      	it	lt
 8105c40:	4618      	movlt	r0, r3
 8105c42:	e730      	b.n	8105aa6 <_printf_float+0xc6>
 8105c44:	2301      	movs	r3, #1
 8105c46:	464a      	mov	r2, r9
 8105c48:	4631      	mov	r1, r6
 8105c4a:	4628      	mov	r0, r5
 8105c4c:	47b8      	blx	r7
 8105c4e:	3001      	adds	r0, #1
 8105c50:	f43f af27 	beq.w	8105aa2 <_printf_float+0xc2>
 8105c54:	f108 0801 	add.w	r8, r8, #1
 8105c58:	e7e6      	b.n	8105c28 <_printf_float+0x248>
 8105c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105c5c:	2b00      	cmp	r3, #0
 8105c5e:	dc39      	bgt.n	8105cd4 <_printf_float+0x2f4>
 8105c60:	4a1b      	ldr	r2, [pc, #108]	; (8105cd0 <_printf_float+0x2f0>)
 8105c62:	2301      	movs	r3, #1
 8105c64:	4631      	mov	r1, r6
 8105c66:	4628      	mov	r0, r5
 8105c68:	47b8      	blx	r7
 8105c6a:	3001      	adds	r0, #1
 8105c6c:	f43f af19 	beq.w	8105aa2 <_printf_float+0xc2>
 8105c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8105c74:	4313      	orrs	r3, r2
 8105c76:	d102      	bne.n	8105c7e <_printf_float+0x29e>
 8105c78:	6823      	ldr	r3, [r4, #0]
 8105c7a:	07d9      	lsls	r1, r3, #31
 8105c7c:	d5d8      	bpl.n	8105c30 <_printf_float+0x250>
 8105c7e:	ee18 3a10 	vmov	r3, s16
 8105c82:	4652      	mov	r2, sl
 8105c84:	4631      	mov	r1, r6
 8105c86:	4628      	mov	r0, r5
 8105c88:	47b8      	blx	r7
 8105c8a:	3001      	adds	r0, #1
 8105c8c:	f43f af09 	beq.w	8105aa2 <_printf_float+0xc2>
 8105c90:	f04f 0900 	mov.w	r9, #0
 8105c94:	f104 0a1a 	add.w	sl, r4, #26
 8105c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105c9a:	425b      	negs	r3, r3
 8105c9c:	454b      	cmp	r3, r9
 8105c9e:	dc01      	bgt.n	8105ca4 <_printf_float+0x2c4>
 8105ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105ca2:	e792      	b.n	8105bca <_printf_float+0x1ea>
 8105ca4:	2301      	movs	r3, #1
 8105ca6:	4652      	mov	r2, sl
 8105ca8:	4631      	mov	r1, r6
 8105caa:	4628      	mov	r0, r5
 8105cac:	47b8      	blx	r7
 8105cae:	3001      	adds	r0, #1
 8105cb0:	f43f aef7 	beq.w	8105aa2 <_printf_float+0xc2>
 8105cb4:	f109 0901 	add.w	r9, r9, #1
 8105cb8:	e7ee      	b.n	8105c98 <_printf_float+0x2b8>
 8105cba:	bf00      	nop
 8105cbc:	7fefffff 	.word	0x7fefffff
 8105cc0:	08108360 	.word	0x08108360
 8105cc4:	08108364 	.word	0x08108364
 8105cc8:	0810836c 	.word	0x0810836c
 8105ccc:	08108368 	.word	0x08108368
 8105cd0:	08108370 	.word	0x08108370
 8105cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8105cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8105cd8:	429a      	cmp	r2, r3
 8105cda:	bfa8      	it	ge
 8105cdc:	461a      	movge	r2, r3
 8105cde:	2a00      	cmp	r2, #0
 8105ce0:	4691      	mov	r9, r2
 8105ce2:	dc37      	bgt.n	8105d54 <_printf_float+0x374>
 8105ce4:	f04f 0b00 	mov.w	fp, #0
 8105ce8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8105cec:	f104 021a 	add.w	r2, r4, #26
 8105cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8105cf2:	9305      	str	r3, [sp, #20]
 8105cf4:	eba3 0309 	sub.w	r3, r3, r9
 8105cf8:	455b      	cmp	r3, fp
 8105cfa:	dc33      	bgt.n	8105d64 <_printf_float+0x384>
 8105cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8105d00:	429a      	cmp	r2, r3
 8105d02:	db3b      	blt.n	8105d7c <_printf_float+0x39c>
 8105d04:	6823      	ldr	r3, [r4, #0]
 8105d06:	07da      	lsls	r2, r3, #31
 8105d08:	d438      	bmi.n	8105d7c <_printf_float+0x39c>
 8105d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105d0c:	9a05      	ldr	r2, [sp, #20]
 8105d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8105d10:	1a9a      	subs	r2, r3, r2
 8105d12:	eba3 0901 	sub.w	r9, r3, r1
 8105d16:	4591      	cmp	r9, r2
 8105d18:	bfa8      	it	ge
 8105d1a:	4691      	movge	r9, r2
 8105d1c:	f1b9 0f00 	cmp.w	r9, #0
 8105d20:	dc35      	bgt.n	8105d8e <_printf_float+0x3ae>
 8105d22:	f04f 0800 	mov.w	r8, #0
 8105d26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8105d2a:	f104 0a1a 	add.w	sl, r4, #26
 8105d2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8105d32:	1a9b      	subs	r3, r3, r2
 8105d34:	eba3 0309 	sub.w	r3, r3, r9
 8105d38:	4543      	cmp	r3, r8
 8105d3a:	f77f af79 	ble.w	8105c30 <_printf_float+0x250>
 8105d3e:	2301      	movs	r3, #1
 8105d40:	4652      	mov	r2, sl
 8105d42:	4631      	mov	r1, r6
 8105d44:	4628      	mov	r0, r5
 8105d46:	47b8      	blx	r7
 8105d48:	3001      	adds	r0, #1
 8105d4a:	f43f aeaa 	beq.w	8105aa2 <_printf_float+0xc2>
 8105d4e:	f108 0801 	add.w	r8, r8, #1
 8105d52:	e7ec      	b.n	8105d2e <_printf_float+0x34e>
 8105d54:	4613      	mov	r3, r2
 8105d56:	4631      	mov	r1, r6
 8105d58:	4642      	mov	r2, r8
 8105d5a:	4628      	mov	r0, r5
 8105d5c:	47b8      	blx	r7
 8105d5e:	3001      	adds	r0, #1
 8105d60:	d1c0      	bne.n	8105ce4 <_printf_float+0x304>
 8105d62:	e69e      	b.n	8105aa2 <_printf_float+0xc2>
 8105d64:	2301      	movs	r3, #1
 8105d66:	4631      	mov	r1, r6
 8105d68:	4628      	mov	r0, r5
 8105d6a:	9205      	str	r2, [sp, #20]
 8105d6c:	47b8      	blx	r7
 8105d6e:	3001      	adds	r0, #1
 8105d70:	f43f ae97 	beq.w	8105aa2 <_printf_float+0xc2>
 8105d74:	9a05      	ldr	r2, [sp, #20]
 8105d76:	f10b 0b01 	add.w	fp, fp, #1
 8105d7a:	e7b9      	b.n	8105cf0 <_printf_float+0x310>
 8105d7c:	ee18 3a10 	vmov	r3, s16
 8105d80:	4652      	mov	r2, sl
 8105d82:	4631      	mov	r1, r6
 8105d84:	4628      	mov	r0, r5
 8105d86:	47b8      	blx	r7
 8105d88:	3001      	adds	r0, #1
 8105d8a:	d1be      	bne.n	8105d0a <_printf_float+0x32a>
 8105d8c:	e689      	b.n	8105aa2 <_printf_float+0xc2>
 8105d8e:	9a05      	ldr	r2, [sp, #20]
 8105d90:	464b      	mov	r3, r9
 8105d92:	4442      	add	r2, r8
 8105d94:	4631      	mov	r1, r6
 8105d96:	4628      	mov	r0, r5
 8105d98:	47b8      	blx	r7
 8105d9a:	3001      	adds	r0, #1
 8105d9c:	d1c1      	bne.n	8105d22 <_printf_float+0x342>
 8105d9e:	e680      	b.n	8105aa2 <_printf_float+0xc2>
 8105da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8105da2:	2a01      	cmp	r2, #1
 8105da4:	dc01      	bgt.n	8105daa <_printf_float+0x3ca>
 8105da6:	07db      	lsls	r3, r3, #31
 8105da8:	d538      	bpl.n	8105e1c <_printf_float+0x43c>
 8105daa:	2301      	movs	r3, #1
 8105dac:	4642      	mov	r2, r8
 8105dae:	4631      	mov	r1, r6
 8105db0:	4628      	mov	r0, r5
 8105db2:	47b8      	blx	r7
 8105db4:	3001      	adds	r0, #1
 8105db6:	f43f ae74 	beq.w	8105aa2 <_printf_float+0xc2>
 8105dba:	ee18 3a10 	vmov	r3, s16
 8105dbe:	4652      	mov	r2, sl
 8105dc0:	4631      	mov	r1, r6
 8105dc2:	4628      	mov	r0, r5
 8105dc4:	47b8      	blx	r7
 8105dc6:	3001      	adds	r0, #1
 8105dc8:	f43f ae6b 	beq.w	8105aa2 <_printf_float+0xc2>
 8105dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8105dd0:	2200      	movs	r2, #0
 8105dd2:	2300      	movs	r3, #0
 8105dd4:	f7fa ff00 	bl	8100bd8 <__aeabi_dcmpeq>
 8105dd8:	b9d8      	cbnz	r0, 8105e12 <_printf_float+0x432>
 8105dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105ddc:	f108 0201 	add.w	r2, r8, #1
 8105de0:	3b01      	subs	r3, #1
 8105de2:	4631      	mov	r1, r6
 8105de4:	4628      	mov	r0, r5
 8105de6:	47b8      	blx	r7
 8105de8:	3001      	adds	r0, #1
 8105dea:	d10e      	bne.n	8105e0a <_printf_float+0x42a>
 8105dec:	e659      	b.n	8105aa2 <_printf_float+0xc2>
 8105dee:	2301      	movs	r3, #1
 8105df0:	4652      	mov	r2, sl
 8105df2:	4631      	mov	r1, r6
 8105df4:	4628      	mov	r0, r5
 8105df6:	47b8      	blx	r7
 8105df8:	3001      	adds	r0, #1
 8105dfa:	f43f ae52 	beq.w	8105aa2 <_printf_float+0xc2>
 8105dfe:	f108 0801 	add.w	r8, r8, #1
 8105e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8105e04:	3b01      	subs	r3, #1
 8105e06:	4543      	cmp	r3, r8
 8105e08:	dcf1      	bgt.n	8105dee <_printf_float+0x40e>
 8105e0a:	464b      	mov	r3, r9
 8105e0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8105e10:	e6dc      	b.n	8105bcc <_printf_float+0x1ec>
 8105e12:	f04f 0800 	mov.w	r8, #0
 8105e16:	f104 0a1a 	add.w	sl, r4, #26
 8105e1a:	e7f2      	b.n	8105e02 <_printf_float+0x422>
 8105e1c:	2301      	movs	r3, #1
 8105e1e:	4642      	mov	r2, r8
 8105e20:	e7df      	b.n	8105de2 <_printf_float+0x402>
 8105e22:	2301      	movs	r3, #1
 8105e24:	464a      	mov	r2, r9
 8105e26:	4631      	mov	r1, r6
 8105e28:	4628      	mov	r0, r5
 8105e2a:	47b8      	blx	r7
 8105e2c:	3001      	adds	r0, #1
 8105e2e:	f43f ae38 	beq.w	8105aa2 <_printf_float+0xc2>
 8105e32:	f108 0801 	add.w	r8, r8, #1
 8105e36:	68e3      	ldr	r3, [r4, #12]
 8105e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8105e3a:	1a5b      	subs	r3, r3, r1
 8105e3c:	4543      	cmp	r3, r8
 8105e3e:	dcf0      	bgt.n	8105e22 <_printf_float+0x442>
 8105e40:	e6fa      	b.n	8105c38 <_printf_float+0x258>
 8105e42:	f04f 0800 	mov.w	r8, #0
 8105e46:	f104 0919 	add.w	r9, r4, #25
 8105e4a:	e7f4      	b.n	8105e36 <_printf_float+0x456>

08105e4c <_printf_common>:
 8105e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105e50:	4616      	mov	r6, r2
 8105e52:	4699      	mov	r9, r3
 8105e54:	688a      	ldr	r2, [r1, #8]
 8105e56:	690b      	ldr	r3, [r1, #16]
 8105e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8105e5c:	4293      	cmp	r3, r2
 8105e5e:	bfb8      	it	lt
 8105e60:	4613      	movlt	r3, r2
 8105e62:	6033      	str	r3, [r6, #0]
 8105e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8105e68:	4607      	mov	r7, r0
 8105e6a:	460c      	mov	r4, r1
 8105e6c:	b10a      	cbz	r2, 8105e72 <_printf_common+0x26>
 8105e6e:	3301      	adds	r3, #1
 8105e70:	6033      	str	r3, [r6, #0]
 8105e72:	6823      	ldr	r3, [r4, #0]
 8105e74:	0699      	lsls	r1, r3, #26
 8105e76:	bf42      	ittt	mi
 8105e78:	6833      	ldrmi	r3, [r6, #0]
 8105e7a:	3302      	addmi	r3, #2
 8105e7c:	6033      	strmi	r3, [r6, #0]
 8105e7e:	6825      	ldr	r5, [r4, #0]
 8105e80:	f015 0506 	ands.w	r5, r5, #6
 8105e84:	d106      	bne.n	8105e94 <_printf_common+0x48>
 8105e86:	f104 0a19 	add.w	sl, r4, #25
 8105e8a:	68e3      	ldr	r3, [r4, #12]
 8105e8c:	6832      	ldr	r2, [r6, #0]
 8105e8e:	1a9b      	subs	r3, r3, r2
 8105e90:	42ab      	cmp	r3, r5
 8105e92:	dc26      	bgt.n	8105ee2 <_printf_common+0x96>
 8105e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8105e98:	1e13      	subs	r3, r2, #0
 8105e9a:	6822      	ldr	r2, [r4, #0]
 8105e9c:	bf18      	it	ne
 8105e9e:	2301      	movne	r3, #1
 8105ea0:	0692      	lsls	r2, r2, #26
 8105ea2:	d42b      	bmi.n	8105efc <_printf_common+0xb0>
 8105ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8105ea8:	4649      	mov	r1, r9
 8105eaa:	4638      	mov	r0, r7
 8105eac:	47c0      	blx	r8
 8105eae:	3001      	adds	r0, #1
 8105eb0:	d01e      	beq.n	8105ef0 <_printf_common+0xa4>
 8105eb2:	6823      	ldr	r3, [r4, #0]
 8105eb4:	68e5      	ldr	r5, [r4, #12]
 8105eb6:	6832      	ldr	r2, [r6, #0]
 8105eb8:	f003 0306 	and.w	r3, r3, #6
 8105ebc:	2b04      	cmp	r3, #4
 8105ebe:	bf08      	it	eq
 8105ec0:	1aad      	subeq	r5, r5, r2
 8105ec2:	68a3      	ldr	r3, [r4, #8]
 8105ec4:	6922      	ldr	r2, [r4, #16]
 8105ec6:	bf0c      	ite	eq
 8105ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8105ecc:	2500      	movne	r5, #0
 8105ece:	4293      	cmp	r3, r2
 8105ed0:	bfc4      	itt	gt
 8105ed2:	1a9b      	subgt	r3, r3, r2
 8105ed4:	18ed      	addgt	r5, r5, r3
 8105ed6:	2600      	movs	r6, #0
 8105ed8:	341a      	adds	r4, #26
 8105eda:	42b5      	cmp	r5, r6
 8105edc:	d11a      	bne.n	8105f14 <_printf_common+0xc8>
 8105ede:	2000      	movs	r0, #0
 8105ee0:	e008      	b.n	8105ef4 <_printf_common+0xa8>
 8105ee2:	2301      	movs	r3, #1
 8105ee4:	4652      	mov	r2, sl
 8105ee6:	4649      	mov	r1, r9
 8105ee8:	4638      	mov	r0, r7
 8105eea:	47c0      	blx	r8
 8105eec:	3001      	adds	r0, #1
 8105eee:	d103      	bne.n	8105ef8 <_printf_common+0xac>
 8105ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8105ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105ef8:	3501      	adds	r5, #1
 8105efa:	e7c6      	b.n	8105e8a <_printf_common+0x3e>
 8105efc:	18e1      	adds	r1, r4, r3
 8105efe:	1c5a      	adds	r2, r3, #1
 8105f00:	2030      	movs	r0, #48	; 0x30
 8105f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8105f06:	4422      	add	r2, r4
 8105f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8105f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8105f10:	3302      	adds	r3, #2
 8105f12:	e7c7      	b.n	8105ea4 <_printf_common+0x58>
 8105f14:	2301      	movs	r3, #1
 8105f16:	4622      	mov	r2, r4
 8105f18:	4649      	mov	r1, r9
 8105f1a:	4638      	mov	r0, r7
 8105f1c:	47c0      	blx	r8
 8105f1e:	3001      	adds	r0, #1
 8105f20:	d0e6      	beq.n	8105ef0 <_printf_common+0xa4>
 8105f22:	3601      	adds	r6, #1
 8105f24:	e7d9      	b.n	8105eda <_printf_common+0x8e>
	...

08105f28 <_printf_i>:
 8105f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8105f2c:	7e0f      	ldrb	r7, [r1, #24]
 8105f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8105f30:	2f78      	cmp	r7, #120	; 0x78
 8105f32:	4691      	mov	r9, r2
 8105f34:	4680      	mov	r8, r0
 8105f36:	460c      	mov	r4, r1
 8105f38:	469a      	mov	sl, r3
 8105f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8105f3e:	d807      	bhi.n	8105f50 <_printf_i+0x28>
 8105f40:	2f62      	cmp	r7, #98	; 0x62
 8105f42:	d80a      	bhi.n	8105f5a <_printf_i+0x32>
 8105f44:	2f00      	cmp	r7, #0
 8105f46:	f000 80d8 	beq.w	81060fa <_printf_i+0x1d2>
 8105f4a:	2f58      	cmp	r7, #88	; 0x58
 8105f4c:	f000 80a3 	beq.w	8106096 <_printf_i+0x16e>
 8105f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8105f58:	e03a      	b.n	8105fd0 <_printf_i+0xa8>
 8105f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8105f5e:	2b15      	cmp	r3, #21
 8105f60:	d8f6      	bhi.n	8105f50 <_printf_i+0x28>
 8105f62:	a101      	add	r1, pc, #4	; (adr r1, 8105f68 <_printf_i+0x40>)
 8105f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8105f68:	08105fc1 	.word	0x08105fc1
 8105f6c:	08105fd5 	.word	0x08105fd5
 8105f70:	08105f51 	.word	0x08105f51
 8105f74:	08105f51 	.word	0x08105f51
 8105f78:	08105f51 	.word	0x08105f51
 8105f7c:	08105f51 	.word	0x08105f51
 8105f80:	08105fd5 	.word	0x08105fd5
 8105f84:	08105f51 	.word	0x08105f51
 8105f88:	08105f51 	.word	0x08105f51
 8105f8c:	08105f51 	.word	0x08105f51
 8105f90:	08105f51 	.word	0x08105f51
 8105f94:	081060e1 	.word	0x081060e1
 8105f98:	08106005 	.word	0x08106005
 8105f9c:	081060c3 	.word	0x081060c3
 8105fa0:	08105f51 	.word	0x08105f51
 8105fa4:	08105f51 	.word	0x08105f51
 8105fa8:	08106103 	.word	0x08106103
 8105fac:	08105f51 	.word	0x08105f51
 8105fb0:	08106005 	.word	0x08106005
 8105fb4:	08105f51 	.word	0x08105f51
 8105fb8:	08105f51 	.word	0x08105f51
 8105fbc:	081060cb 	.word	0x081060cb
 8105fc0:	682b      	ldr	r3, [r5, #0]
 8105fc2:	1d1a      	adds	r2, r3, #4
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	602a      	str	r2, [r5, #0]
 8105fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8105fd0:	2301      	movs	r3, #1
 8105fd2:	e0a3      	b.n	810611c <_printf_i+0x1f4>
 8105fd4:	6820      	ldr	r0, [r4, #0]
 8105fd6:	6829      	ldr	r1, [r5, #0]
 8105fd8:	0606      	lsls	r6, r0, #24
 8105fda:	f101 0304 	add.w	r3, r1, #4
 8105fde:	d50a      	bpl.n	8105ff6 <_printf_i+0xce>
 8105fe0:	680e      	ldr	r6, [r1, #0]
 8105fe2:	602b      	str	r3, [r5, #0]
 8105fe4:	2e00      	cmp	r6, #0
 8105fe6:	da03      	bge.n	8105ff0 <_printf_i+0xc8>
 8105fe8:	232d      	movs	r3, #45	; 0x2d
 8105fea:	4276      	negs	r6, r6
 8105fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105ff0:	485e      	ldr	r0, [pc, #376]	; (810616c <_printf_i+0x244>)
 8105ff2:	230a      	movs	r3, #10
 8105ff4:	e019      	b.n	810602a <_printf_i+0x102>
 8105ff6:	680e      	ldr	r6, [r1, #0]
 8105ff8:	602b      	str	r3, [r5, #0]
 8105ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8105ffe:	bf18      	it	ne
 8106000:	b236      	sxthne	r6, r6
 8106002:	e7ef      	b.n	8105fe4 <_printf_i+0xbc>
 8106004:	682b      	ldr	r3, [r5, #0]
 8106006:	6820      	ldr	r0, [r4, #0]
 8106008:	1d19      	adds	r1, r3, #4
 810600a:	6029      	str	r1, [r5, #0]
 810600c:	0601      	lsls	r1, r0, #24
 810600e:	d501      	bpl.n	8106014 <_printf_i+0xec>
 8106010:	681e      	ldr	r6, [r3, #0]
 8106012:	e002      	b.n	810601a <_printf_i+0xf2>
 8106014:	0646      	lsls	r6, r0, #25
 8106016:	d5fb      	bpl.n	8106010 <_printf_i+0xe8>
 8106018:	881e      	ldrh	r6, [r3, #0]
 810601a:	4854      	ldr	r0, [pc, #336]	; (810616c <_printf_i+0x244>)
 810601c:	2f6f      	cmp	r7, #111	; 0x6f
 810601e:	bf0c      	ite	eq
 8106020:	2308      	moveq	r3, #8
 8106022:	230a      	movne	r3, #10
 8106024:	2100      	movs	r1, #0
 8106026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810602a:	6865      	ldr	r5, [r4, #4]
 810602c:	60a5      	str	r5, [r4, #8]
 810602e:	2d00      	cmp	r5, #0
 8106030:	bfa2      	ittt	ge
 8106032:	6821      	ldrge	r1, [r4, #0]
 8106034:	f021 0104 	bicge.w	r1, r1, #4
 8106038:	6021      	strge	r1, [r4, #0]
 810603a:	b90e      	cbnz	r6, 8106040 <_printf_i+0x118>
 810603c:	2d00      	cmp	r5, #0
 810603e:	d04d      	beq.n	81060dc <_printf_i+0x1b4>
 8106040:	4615      	mov	r5, r2
 8106042:	fbb6 f1f3 	udiv	r1, r6, r3
 8106046:	fb03 6711 	mls	r7, r3, r1, r6
 810604a:	5dc7      	ldrb	r7, [r0, r7]
 810604c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106050:	4637      	mov	r7, r6
 8106052:	42bb      	cmp	r3, r7
 8106054:	460e      	mov	r6, r1
 8106056:	d9f4      	bls.n	8106042 <_printf_i+0x11a>
 8106058:	2b08      	cmp	r3, #8
 810605a:	d10b      	bne.n	8106074 <_printf_i+0x14c>
 810605c:	6823      	ldr	r3, [r4, #0]
 810605e:	07de      	lsls	r6, r3, #31
 8106060:	d508      	bpl.n	8106074 <_printf_i+0x14c>
 8106062:	6923      	ldr	r3, [r4, #16]
 8106064:	6861      	ldr	r1, [r4, #4]
 8106066:	4299      	cmp	r1, r3
 8106068:	bfde      	ittt	le
 810606a:	2330      	movle	r3, #48	; 0x30
 810606c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8106070:	f105 35ff 	addle.w	r5, r5, #4294967295
 8106074:	1b52      	subs	r2, r2, r5
 8106076:	6122      	str	r2, [r4, #16]
 8106078:	f8cd a000 	str.w	sl, [sp]
 810607c:	464b      	mov	r3, r9
 810607e:	aa03      	add	r2, sp, #12
 8106080:	4621      	mov	r1, r4
 8106082:	4640      	mov	r0, r8
 8106084:	f7ff fee2 	bl	8105e4c <_printf_common>
 8106088:	3001      	adds	r0, #1
 810608a:	d14c      	bne.n	8106126 <_printf_i+0x1fe>
 810608c:	f04f 30ff 	mov.w	r0, #4294967295
 8106090:	b004      	add	sp, #16
 8106092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106096:	4835      	ldr	r0, [pc, #212]	; (810616c <_printf_i+0x244>)
 8106098:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810609c:	6829      	ldr	r1, [r5, #0]
 810609e:	6823      	ldr	r3, [r4, #0]
 81060a0:	f851 6b04 	ldr.w	r6, [r1], #4
 81060a4:	6029      	str	r1, [r5, #0]
 81060a6:	061d      	lsls	r5, r3, #24
 81060a8:	d514      	bpl.n	81060d4 <_printf_i+0x1ac>
 81060aa:	07df      	lsls	r7, r3, #31
 81060ac:	bf44      	itt	mi
 81060ae:	f043 0320 	orrmi.w	r3, r3, #32
 81060b2:	6023      	strmi	r3, [r4, #0]
 81060b4:	b91e      	cbnz	r6, 81060be <_printf_i+0x196>
 81060b6:	6823      	ldr	r3, [r4, #0]
 81060b8:	f023 0320 	bic.w	r3, r3, #32
 81060bc:	6023      	str	r3, [r4, #0]
 81060be:	2310      	movs	r3, #16
 81060c0:	e7b0      	b.n	8106024 <_printf_i+0xfc>
 81060c2:	6823      	ldr	r3, [r4, #0]
 81060c4:	f043 0320 	orr.w	r3, r3, #32
 81060c8:	6023      	str	r3, [r4, #0]
 81060ca:	2378      	movs	r3, #120	; 0x78
 81060cc:	4828      	ldr	r0, [pc, #160]	; (8106170 <_printf_i+0x248>)
 81060ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81060d2:	e7e3      	b.n	810609c <_printf_i+0x174>
 81060d4:	0659      	lsls	r1, r3, #25
 81060d6:	bf48      	it	mi
 81060d8:	b2b6      	uxthmi	r6, r6
 81060da:	e7e6      	b.n	81060aa <_printf_i+0x182>
 81060dc:	4615      	mov	r5, r2
 81060de:	e7bb      	b.n	8106058 <_printf_i+0x130>
 81060e0:	682b      	ldr	r3, [r5, #0]
 81060e2:	6826      	ldr	r6, [r4, #0]
 81060e4:	6961      	ldr	r1, [r4, #20]
 81060e6:	1d18      	adds	r0, r3, #4
 81060e8:	6028      	str	r0, [r5, #0]
 81060ea:	0635      	lsls	r5, r6, #24
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	d501      	bpl.n	81060f4 <_printf_i+0x1cc>
 81060f0:	6019      	str	r1, [r3, #0]
 81060f2:	e002      	b.n	81060fa <_printf_i+0x1d2>
 81060f4:	0670      	lsls	r0, r6, #25
 81060f6:	d5fb      	bpl.n	81060f0 <_printf_i+0x1c8>
 81060f8:	8019      	strh	r1, [r3, #0]
 81060fa:	2300      	movs	r3, #0
 81060fc:	6123      	str	r3, [r4, #16]
 81060fe:	4615      	mov	r5, r2
 8106100:	e7ba      	b.n	8106078 <_printf_i+0x150>
 8106102:	682b      	ldr	r3, [r5, #0]
 8106104:	1d1a      	adds	r2, r3, #4
 8106106:	602a      	str	r2, [r5, #0]
 8106108:	681d      	ldr	r5, [r3, #0]
 810610a:	6862      	ldr	r2, [r4, #4]
 810610c:	2100      	movs	r1, #0
 810610e:	4628      	mov	r0, r5
 8106110:	f7fa f8ee 	bl	81002f0 <memchr>
 8106114:	b108      	cbz	r0, 810611a <_printf_i+0x1f2>
 8106116:	1b40      	subs	r0, r0, r5
 8106118:	6060      	str	r0, [r4, #4]
 810611a:	6863      	ldr	r3, [r4, #4]
 810611c:	6123      	str	r3, [r4, #16]
 810611e:	2300      	movs	r3, #0
 8106120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106124:	e7a8      	b.n	8106078 <_printf_i+0x150>
 8106126:	6923      	ldr	r3, [r4, #16]
 8106128:	462a      	mov	r2, r5
 810612a:	4649      	mov	r1, r9
 810612c:	4640      	mov	r0, r8
 810612e:	47d0      	blx	sl
 8106130:	3001      	adds	r0, #1
 8106132:	d0ab      	beq.n	810608c <_printf_i+0x164>
 8106134:	6823      	ldr	r3, [r4, #0]
 8106136:	079b      	lsls	r3, r3, #30
 8106138:	d413      	bmi.n	8106162 <_printf_i+0x23a>
 810613a:	68e0      	ldr	r0, [r4, #12]
 810613c:	9b03      	ldr	r3, [sp, #12]
 810613e:	4298      	cmp	r0, r3
 8106140:	bfb8      	it	lt
 8106142:	4618      	movlt	r0, r3
 8106144:	e7a4      	b.n	8106090 <_printf_i+0x168>
 8106146:	2301      	movs	r3, #1
 8106148:	4632      	mov	r2, r6
 810614a:	4649      	mov	r1, r9
 810614c:	4640      	mov	r0, r8
 810614e:	47d0      	blx	sl
 8106150:	3001      	adds	r0, #1
 8106152:	d09b      	beq.n	810608c <_printf_i+0x164>
 8106154:	3501      	adds	r5, #1
 8106156:	68e3      	ldr	r3, [r4, #12]
 8106158:	9903      	ldr	r1, [sp, #12]
 810615a:	1a5b      	subs	r3, r3, r1
 810615c:	42ab      	cmp	r3, r5
 810615e:	dcf2      	bgt.n	8106146 <_printf_i+0x21e>
 8106160:	e7eb      	b.n	810613a <_printf_i+0x212>
 8106162:	2500      	movs	r5, #0
 8106164:	f104 0619 	add.w	r6, r4, #25
 8106168:	e7f5      	b.n	8106156 <_printf_i+0x22e>
 810616a:	bf00      	nop
 810616c:	08108372 	.word	0x08108372
 8106170:	08108383 	.word	0x08108383

08106174 <iprintf>:
 8106174:	b40f      	push	{r0, r1, r2, r3}
 8106176:	4b0a      	ldr	r3, [pc, #40]	; (81061a0 <iprintf+0x2c>)
 8106178:	b513      	push	{r0, r1, r4, lr}
 810617a:	681c      	ldr	r4, [r3, #0]
 810617c:	b124      	cbz	r4, 8106188 <iprintf+0x14>
 810617e:	69a3      	ldr	r3, [r4, #24]
 8106180:	b913      	cbnz	r3, 8106188 <iprintf+0x14>
 8106182:	4620      	mov	r0, r4
 8106184:	f000 fee2 	bl	8106f4c <__sinit>
 8106188:	ab05      	add	r3, sp, #20
 810618a:	9a04      	ldr	r2, [sp, #16]
 810618c:	68a1      	ldr	r1, [r4, #8]
 810618e:	9301      	str	r3, [sp, #4]
 8106190:	4620      	mov	r0, r4
 8106192:	f001 fc3b 	bl	8107a0c <_vfiprintf_r>
 8106196:	b002      	add	sp, #8
 8106198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810619c:	b004      	add	sp, #16
 810619e:	4770      	bx	lr
 81061a0:	10000028 	.word	0x10000028

081061a4 <quorem>:
 81061a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81061a8:	6903      	ldr	r3, [r0, #16]
 81061aa:	690c      	ldr	r4, [r1, #16]
 81061ac:	42a3      	cmp	r3, r4
 81061ae:	4607      	mov	r7, r0
 81061b0:	f2c0 8081 	blt.w	81062b6 <quorem+0x112>
 81061b4:	3c01      	subs	r4, #1
 81061b6:	f101 0814 	add.w	r8, r1, #20
 81061ba:	f100 0514 	add.w	r5, r0, #20
 81061be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81061c2:	9301      	str	r3, [sp, #4]
 81061c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81061c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81061cc:	3301      	adds	r3, #1
 81061ce:	429a      	cmp	r2, r3
 81061d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81061d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81061d8:	fbb2 f6f3 	udiv	r6, r2, r3
 81061dc:	d331      	bcc.n	8106242 <quorem+0x9e>
 81061de:	f04f 0e00 	mov.w	lr, #0
 81061e2:	4640      	mov	r0, r8
 81061e4:	46ac      	mov	ip, r5
 81061e6:	46f2      	mov	sl, lr
 81061e8:	f850 2b04 	ldr.w	r2, [r0], #4
 81061ec:	b293      	uxth	r3, r2
 81061ee:	fb06 e303 	mla	r3, r6, r3, lr
 81061f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81061f6:	b29b      	uxth	r3, r3
 81061f8:	ebaa 0303 	sub.w	r3, sl, r3
 81061fc:	f8dc a000 	ldr.w	sl, [ip]
 8106200:	0c12      	lsrs	r2, r2, #16
 8106202:	fa13 f38a 	uxtah	r3, r3, sl
 8106206:	fb06 e202 	mla	r2, r6, r2, lr
 810620a:	9300      	str	r3, [sp, #0]
 810620c:	9b00      	ldr	r3, [sp, #0]
 810620e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8106212:	b292      	uxth	r2, r2
 8106214:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8106218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810621c:	f8bd 3000 	ldrh.w	r3, [sp]
 8106220:	4581      	cmp	r9, r0
 8106222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8106226:	f84c 3b04 	str.w	r3, [ip], #4
 810622a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810622e:	d2db      	bcs.n	81061e8 <quorem+0x44>
 8106230:	f855 300b 	ldr.w	r3, [r5, fp]
 8106234:	b92b      	cbnz	r3, 8106242 <quorem+0x9e>
 8106236:	9b01      	ldr	r3, [sp, #4]
 8106238:	3b04      	subs	r3, #4
 810623a:	429d      	cmp	r5, r3
 810623c:	461a      	mov	r2, r3
 810623e:	d32e      	bcc.n	810629e <quorem+0xfa>
 8106240:	613c      	str	r4, [r7, #16]
 8106242:	4638      	mov	r0, r7
 8106244:	f001 f9c0 	bl	81075c8 <__mcmp>
 8106248:	2800      	cmp	r0, #0
 810624a:	db24      	blt.n	8106296 <quorem+0xf2>
 810624c:	3601      	adds	r6, #1
 810624e:	4628      	mov	r0, r5
 8106250:	f04f 0c00 	mov.w	ip, #0
 8106254:	f858 2b04 	ldr.w	r2, [r8], #4
 8106258:	f8d0 e000 	ldr.w	lr, [r0]
 810625c:	b293      	uxth	r3, r2
 810625e:	ebac 0303 	sub.w	r3, ip, r3
 8106262:	0c12      	lsrs	r2, r2, #16
 8106264:	fa13 f38e 	uxtah	r3, r3, lr
 8106268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810626c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8106270:	b29b      	uxth	r3, r3
 8106272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8106276:	45c1      	cmp	r9, r8
 8106278:	f840 3b04 	str.w	r3, [r0], #4
 810627c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8106280:	d2e8      	bcs.n	8106254 <quorem+0xb0>
 8106282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8106286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810628a:	b922      	cbnz	r2, 8106296 <quorem+0xf2>
 810628c:	3b04      	subs	r3, #4
 810628e:	429d      	cmp	r5, r3
 8106290:	461a      	mov	r2, r3
 8106292:	d30a      	bcc.n	81062aa <quorem+0x106>
 8106294:	613c      	str	r4, [r7, #16]
 8106296:	4630      	mov	r0, r6
 8106298:	b003      	add	sp, #12
 810629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810629e:	6812      	ldr	r2, [r2, #0]
 81062a0:	3b04      	subs	r3, #4
 81062a2:	2a00      	cmp	r2, #0
 81062a4:	d1cc      	bne.n	8106240 <quorem+0x9c>
 81062a6:	3c01      	subs	r4, #1
 81062a8:	e7c7      	b.n	810623a <quorem+0x96>
 81062aa:	6812      	ldr	r2, [r2, #0]
 81062ac:	3b04      	subs	r3, #4
 81062ae:	2a00      	cmp	r2, #0
 81062b0:	d1f0      	bne.n	8106294 <quorem+0xf0>
 81062b2:	3c01      	subs	r4, #1
 81062b4:	e7eb      	b.n	810628e <quorem+0xea>
 81062b6:	2000      	movs	r0, #0
 81062b8:	e7ee      	b.n	8106298 <quorem+0xf4>
 81062ba:	0000      	movs	r0, r0
 81062bc:	0000      	movs	r0, r0
	...

081062c0 <_dtoa_r>:
 81062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81062c4:	ed2d 8b04 	vpush	{d8-d9}
 81062c8:	ec57 6b10 	vmov	r6, r7, d0
 81062cc:	b093      	sub	sp, #76	; 0x4c
 81062ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81062d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81062d4:	9106      	str	r1, [sp, #24]
 81062d6:	ee10 aa10 	vmov	sl, s0
 81062da:	4604      	mov	r4, r0
 81062dc:	9209      	str	r2, [sp, #36]	; 0x24
 81062de:	930c      	str	r3, [sp, #48]	; 0x30
 81062e0:	46bb      	mov	fp, r7
 81062e2:	b975      	cbnz	r5, 8106302 <_dtoa_r+0x42>
 81062e4:	2010      	movs	r0, #16
 81062e6:	f000 fed7 	bl	8107098 <malloc>
 81062ea:	4602      	mov	r2, r0
 81062ec:	6260      	str	r0, [r4, #36]	; 0x24
 81062ee:	b920      	cbnz	r0, 81062fa <_dtoa_r+0x3a>
 81062f0:	4ba7      	ldr	r3, [pc, #668]	; (8106590 <_dtoa_r+0x2d0>)
 81062f2:	21ea      	movs	r1, #234	; 0xea
 81062f4:	48a7      	ldr	r0, [pc, #668]	; (8106594 <_dtoa_r+0x2d4>)
 81062f6:	f001 fddf 	bl	8107eb8 <__assert_func>
 81062fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81062fe:	6005      	str	r5, [r0, #0]
 8106300:	60c5      	str	r5, [r0, #12]
 8106302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8106304:	6819      	ldr	r1, [r3, #0]
 8106306:	b151      	cbz	r1, 810631e <_dtoa_r+0x5e>
 8106308:	685a      	ldr	r2, [r3, #4]
 810630a:	604a      	str	r2, [r1, #4]
 810630c:	2301      	movs	r3, #1
 810630e:	4093      	lsls	r3, r2
 8106310:	608b      	str	r3, [r1, #8]
 8106312:	4620      	mov	r0, r4
 8106314:	f000 ff16 	bl	8107144 <_Bfree>
 8106318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810631a:	2200      	movs	r2, #0
 810631c:	601a      	str	r2, [r3, #0]
 810631e:	1e3b      	subs	r3, r7, #0
 8106320:	bfaa      	itet	ge
 8106322:	2300      	movge	r3, #0
 8106324:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8106328:	f8c8 3000 	strge.w	r3, [r8]
 810632c:	4b9a      	ldr	r3, [pc, #616]	; (8106598 <_dtoa_r+0x2d8>)
 810632e:	bfbc      	itt	lt
 8106330:	2201      	movlt	r2, #1
 8106332:	f8c8 2000 	strlt.w	r2, [r8]
 8106336:	ea33 030b 	bics.w	r3, r3, fp
 810633a:	d11b      	bne.n	8106374 <_dtoa_r+0xb4>
 810633c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810633e:	f242 730f 	movw	r3, #9999	; 0x270f
 8106342:	6013      	str	r3, [r2, #0]
 8106344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8106348:	4333      	orrs	r3, r6
 810634a:	f000 8592 	beq.w	8106e72 <_dtoa_r+0xbb2>
 810634e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106350:	b963      	cbnz	r3, 810636c <_dtoa_r+0xac>
 8106352:	4b92      	ldr	r3, [pc, #584]	; (810659c <_dtoa_r+0x2dc>)
 8106354:	e022      	b.n	810639c <_dtoa_r+0xdc>
 8106356:	4b92      	ldr	r3, [pc, #584]	; (81065a0 <_dtoa_r+0x2e0>)
 8106358:	9301      	str	r3, [sp, #4]
 810635a:	3308      	adds	r3, #8
 810635c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810635e:	6013      	str	r3, [r2, #0]
 8106360:	9801      	ldr	r0, [sp, #4]
 8106362:	b013      	add	sp, #76	; 0x4c
 8106364:	ecbd 8b04 	vpop	{d8-d9}
 8106368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810636c:	4b8b      	ldr	r3, [pc, #556]	; (810659c <_dtoa_r+0x2dc>)
 810636e:	9301      	str	r3, [sp, #4]
 8106370:	3303      	adds	r3, #3
 8106372:	e7f3      	b.n	810635c <_dtoa_r+0x9c>
 8106374:	2200      	movs	r2, #0
 8106376:	2300      	movs	r3, #0
 8106378:	4650      	mov	r0, sl
 810637a:	4659      	mov	r1, fp
 810637c:	f7fa fc2c 	bl	8100bd8 <__aeabi_dcmpeq>
 8106380:	ec4b ab19 	vmov	d9, sl, fp
 8106384:	4680      	mov	r8, r0
 8106386:	b158      	cbz	r0, 81063a0 <_dtoa_r+0xe0>
 8106388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810638a:	2301      	movs	r3, #1
 810638c:	6013      	str	r3, [r2, #0]
 810638e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106390:	2b00      	cmp	r3, #0
 8106392:	f000 856b 	beq.w	8106e6c <_dtoa_r+0xbac>
 8106396:	4883      	ldr	r0, [pc, #524]	; (81065a4 <_dtoa_r+0x2e4>)
 8106398:	6018      	str	r0, [r3, #0]
 810639a:	1e43      	subs	r3, r0, #1
 810639c:	9301      	str	r3, [sp, #4]
 810639e:	e7df      	b.n	8106360 <_dtoa_r+0xa0>
 81063a0:	ec4b ab10 	vmov	d0, sl, fp
 81063a4:	aa10      	add	r2, sp, #64	; 0x40
 81063a6:	a911      	add	r1, sp, #68	; 0x44
 81063a8:	4620      	mov	r0, r4
 81063aa:	f001 f9b3 	bl	8107714 <__d2b>
 81063ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 81063b2:	ee08 0a10 	vmov	s16, r0
 81063b6:	2d00      	cmp	r5, #0
 81063b8:	f000 8084 	beq.w	81064c4 <_dtoa_r+0x204>
 81063bc:	ee19 3a90 	vmov	r3, s19
 81063c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81063c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81063c8:	4656      	mov	r6, sl
 81063ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81063ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81063d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 81063d6:	4b74      	ldr	r3, [pc, #464]	; (81065a8 <_dtoa_r+0x2e8>)
 81063d8:	2200      	movs	r2, #0
 81063da:	4630      	mov	r0, r6
 81063dc:	4639      	mov	r1, r7
 81063de:	f7f9 ffdb 	bl	8100398 <__aeabi_dsub>
 81063e2:	a365      	add	r3, pc, #404	; (adr r3, 8106578 <_dtoa_r+0x2b8>)
 81063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063e8:	f7fa f98e 	bl	8100708 <__aeabi_dmul>
 81063ec:	a364      	add	r3, pc, #400	; (adr r3, 8106580 <_dtoa_r+0x2c0>)
 81063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063f2:	f7f9 ffd3 	bl	810039c <__adddf3>
 81063f6:	4606      	mov	r6, r0
 81063f8:	4628      	mov	r0, r5
 81063fa:	460f      	mov	r7, r1
 81063fc:	f7fa f91a 	bl	8100634 <__aeabi_i2d>
 8106400:	a361      	add	r3, pc, #388	; (adr r3, 8106588 <_dtoa_r+0x2c8>)
 8106402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106406:	f7fa f97f 	bl	8100708 <__aeabi_dmul>
 810640a:	4602      	mov	r2, r0
 810640c:	460b      	mov	r3, r1
 810640e:	4630      	mov	r0, r6
 8106410:	4639      	mov	r1, r7
 8106412:	f7f9 ffc3 	bl	810039c <__adddf3>
 8106416:	4606      	mov	r6, r0
 8106418:	460f      	mov	r7, r1
 810641a:	f7fa fc25 	bl	8100c68 <__aeabi_d2iz>
 810641e:	2200      	movs	r2, #0
 8106420:	9000      	str	r0, [sp, #0]
 8106422:	2300      	movs	r3, #0
 8106424:	4630      	mov	r0, r6
 8106426:	4639      	mov	r1, r7
 8106428:	f7fa fbe0 	bl	8100bec <__aeabi_dcmplt>
 810642c:	b150      	cbz	r0, 8106444 <_dtoa_r+0x184>
 810642e:	9800      	ldr	r0, [sp, #0]
 8106430:	f7fa f900 	bl	8100634 <__aeabi_i2d>
 8106434:	4632      	mov	r2, r6
 8106436:	463b      	mov	r3, r7
 8106438:	f7fa fbce 	bl	8100bd8 <__aeabi_dcmpeq>
 810643c:	b910      	cbnz	r0, 8106444 <_dtoa_r+0x184>
 810643e:	9b00      	ldr	r3, [sp, #0]
 8106440:	3b01      	subs	r3, #1
 8106442:	9300      	str	r3, [sp, #0]
 8106444:	9b00      	ldr	r3, [sp, #0]
 8106446:	2b16      	cmp	r3, #22
 8106448:	d85a      	bhi.n	8106500 <_dtoa_r+0x240>
 810644a:	9a00      	ldr	r2, [sp, #0]
 810644c:	4b57      	ldr	r3, [pc, #348]	; (81065ac <_dtoa_r+0x2ec>)
 810644e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8106452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106456:	ec51 0b19 	vmov	r0, r1, d9
 810645a:	f7fa fbc7 	bl	8100bec <__aeabi_dcmplt>
 810645e:	2800      	cmp	r0, #0
 8106460:	d050      	beq.n	8106504 <_dtoa_r+0x244>
 8106462:	9b00      	ldr	r3, [sp, #0]
 8106464:	3b01      	subs	r3, #1
 8106466:	9300      	str	r3, [sp, #0]
 8106468:	2300      	movs	r3, #0
 810646a:	930b      	str	r3, [sp, #44]	; 0x2c
 810646c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810646e:	1b5d      	subs	r5, r3, r5
 8106470:	1e6b      	subs	r3, r5, #1
 8106472:	9305      	str	r3, [sp, #20]
 8106474:	bf45      	ittet	mi
 8106476:	f1c5 0301 	rsbmi	r3, r5, #1
 810647a:	9304      	strmi	r3, [sp, #16]
 810647c:	2300      	movpl	r3, #0
 810647e:	2300      	movmi	r3, #0
 8106480:	bf4c      	ite	mi
 8106482:	9305      	strmi	r3, [sp, #20]
 8106484:	9304      	strpl	r3, [sp, #16]
 8106486:	9b00      	ldr	r3, [sp, #0]
 8106488:	2b00      	cmp	r3, #0
 810648a:	db3d      	blt.n	8106508 <_dtoa_r+0x248>
 810648c:	9b05      	ldr	r3, [sp, #20]
 810648e:	9a00      	ldr	r2, [sp, #0]
 8106490:	920a      	str	r2, [sp, #40]	; 0x28
 8106492:	4413      	add	r3, r2
 8106494:	9305      	str	r3, [sp, #20]
 8106496:	2300      	movs	r3, #0
 8106498:	9307      	str	r3, [sp, #28]
 810649a:	9b06      	ldr	r3, [sp, #24]
 810649c:	2b09      	cmp	r3, #9
 810649e:	f200 8089 	bhi.w	81065b4 <_dtoa_r+0x2f4>
 81064a2:	2b05      	cmp	r3, #5
 81064a4:	bfc4      	itt	gt
 81064a6:	3b04      	subgt	r3, #4
 81064a8:	9306      	strgt	r3, [sp, #24]
 81064aa:	9b06      	ldr	r3, [sp, #24]
 81064ac:	f1a3 0302 	sub.w	r3, r3, #2
 81064b0:	bfcc      	ite	gt
 81064b2:	2500      	movgt	r5, #0
 81064b4:	2501      	movle	r5, #1
 81064b6:	2b03      	cmp	r3, #3
 81064b8:	f200 8087 	bhi.w	81065ca <_dtoa_r+0x30a>
 81064bc:	e8df f003 	tbb	[pc, r3]
 81064c0:	59383a2d 	.word	0x59383a2d
 81064c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 81064c8:	441d      	add	r5, r3
 81064ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81064ce:	2b20      	cmp	r3, #32
 81064d0:	bfc1      	itttt	gt
 81064d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81064d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81064da:	fa0b f303 	lslgt.w	r3, fp, r3
 81064de:	fa26 f000 	lsrgt.w	r0, r6, r0
 81064e2:	bfda      	itte	le
 81064e4:	f1c3 0320 	rsble	r3, r3, #32
 81064e8:	fa06 f003 	lslle.w	r0, r6, r3
 81064ec:	4318      	orrgt	r0, r3
 81064ee:	f7fa f891 	bl	8100614 <__aeabi_ui2d>
 81064f2:	2301      	movs	r3, #1
 81064f4:	4606      	mov	r6, r0
 81064f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81064fa:	3d01      	subs	r5, #1
 81064fc:	930e      	str	r3, [sp, #56]	; 0x38
 81064fe:	e76a      	b.n	81063d6 <_dtoa_r+0x116>
 8106500:	2301      	movs	r3, #1
 8106502:	e7b2      	b.n	810646a <_dtoa_r+0x1aa>
 8106504:	900b      	str	r0, [sp, #44]	; 0x2c
 8106506:	e7b1      	b.n	810646c <_dtoa_r+0x1ac>
 8106508:	9b04      	ldr	r3, [sp, #16]
 810650a:	9a00      	ldr	r2, [sp, #0]
 810650c:	1a9b      	subs	r3, r3, r2
 810650e:	9304      	str	r3, [sp, #16]
 8106510:	4253      	negs	r3, r2
 8106512:	9307      	str	r3, [sp, #28]
 8106514:	2300      	movs	r3, #0
 8106516:	930a      	str	r3, [sp, #40]	; 0x28
 8106518:	e7bf      	b.n	810649a <_dtoa_r+0x1da>
 810651a:	2300      	movs	r3, #0
 810651c:	9308      	str	r3, [sp, #32]
 810651e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106520:	2b00      	cmp	r3, #0
 8106522:	dc55      	bgt.n	81065d0 <_dtoa_r+0x310>
 8106524:	2301      	movs	r3, #1
 8106526:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810652a:	461a      	mov	r2, r3
 810652c:	9209      	str	r2, [sp, #36]	; 0x24
 810652e:	e00c      	b.n	810654a <_dtoa_r+0x28a>
 8106530:	2301      	movs	r3, #1
 8106532:	e7f3      	b.n	810651c <_dtoa_r+0x25c>
 8106534:	2300      	movs	r3, #0
 8106536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106538:	9308      	str	r3, [sp, #32]
 810653a:	9b00      	ldr	r3, [sp, #0]
 810653c:	4413      	add	r3, r2
 810653e:	9302      	str	r3, [sp, #8]
 8106540:	3301      	adds	r3, #1
 8106542:	2b01      	cmp	r3, #1
 8106544:	9303      	str	r3, [sp, #12]
 8106546:	bfb8      	it	lt
 8106548:	2301      	movlt	r3, #1
 810654a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810654c:	2200      	movs	r2, #0
 810654e:	6042      	str	r2, [r0, #4]
 8106550:	2204      	movs	r2, #4
 8106552:	f102 0614 	add.w	r6, r2, #20
 8106556:	429e      	cmp	r6, r3
 8106558:	6841      	ldr	r1, [r0, #4]
 810655a:	d93d      	bls.n	81065d8 <_dtoa_r+0x318>
 810655c:	4620      	mov	r0, r4
 810655e:	f000 fdb1 	bl	81070c4 <_Balloc>
 8106562:	9001      	str	r0, [sp, #4]
 8106564:	2800      	cmp	r0, #0
 8106566:	d13b      	bne.n	81065e0 <_dtoa_r+0x320>
 8106568:	4b11      	ldr	r3, [pc, #68]	; (81065b0 <_dtoa_r+0x2f0>)
 810656a:	4602      	mov	r2, r0
 810656c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8106570:	e6c0      	b.n	81062f4 <_dtoa_r+0x34>
 8106572:	2301      	movs	r3, #1
 8106574:	e7df      	b.n	8106536 <_dtoa_r+0x276>
 8106576:	bf00      	nop
 8106578:	636f4361 	.word	0x636f4361
 810657c:	3fd287a7 	.word	0x3fd287a7
 8106580:	8b60c8b3 	.word	0x8b60c8b3
 8106584:	3fc68a28 	.word	0x3fc68a28
 8106588:	509f79fb 	.word	0x509f79fb
 810658c:	3fd34413 	.word	0x3fd34413
 8106590:	081083a1 	.word	0x081083a1
 8106594:	081083b8 	.word	0x081083b8
 8106598:	7ff00000 	.word	0x7ff00000
 810659c:	0810839d 	.word	0x0810839d
 81065a0:	08108394 	.word	0x08108394
 81065a4:	08108371 	.word	0x08108371
 81065a8:	3ff80000 	.word	0x3ff80000
 81065ac:	08108508 	.word	0x08108508
 81065b0:	08108413 	.word	0x08108413
 81065b4:	2501      	movs	r5, #1
 81065b6:	2300      	movs	r3, #0
 81065b8:	9306      	str	r3, [sp, #24]
 81065ba:	9508      	str	r5, [sp, #32]
 81065bc:	f04f 33ff 	mov.w	r3, #4294967295
 81065c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 81065c4:	2200      	movs	r2, #0
 81065c6:	2312      	movs	r3, #18
 81065c8:	e7b0      	b.n	810652c <_dtoa_r+0x26c>
 81065ca:	2301      	movs	r3, #1
 81065cc:	9308      	str	r3, [sp, #32]
 81065ce:	e7f5      	b.n	81065bc <_dtoa_r+0x2fc>
 81065d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81065d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 81065d6:	e7b8      	b.n	810654a <_dtoa_r+0x28a>
 81065d8:	3101      	adds	r1, #1
 81065da:	6041      	str	r1, [r0, #4]
 81065dc:	0052      	lsls	r2, r2, #1
 81065de:	e7b8      	b.n	8106552 <_dtoa_r+0x292>
 81065e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81065e2:	9a01      	ldr	r2, [sp, #4]
 81065e4:	601a      	str	r2, [r3, #0]
 81065e6:	9b03      	ldr	r3, [sp, #12]
 81065e8:	2b0e      	cmp	r3, #14
 81065ea:	f200 809d 	bhi.w	8106728 <_dtoa_r+0x468>
 81065ee:	2d00      	cmp	r5, #0
 81065f0:	f000 809a 	beq.w	8106728 <_dtoa_r+0x468>
 81065f4:	9b00      	ldr	r3, [sp, #0]
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	dd32      	ble.n	8106660 <_dtoa_r+0x3a0>
 81065fa:	4ab7      	ldr	r2, [pc, #732]	; (81068d8 <_dtoa_r+0x618>)
 81065fc:	f003 030f 	and.w	r3, r3, #15
 8106600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8106604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8106608:	9b00      	ldr	r3, [sp, #0]
 810660a:	05d8      	lsls	r0, r3, #23
 810660c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8106610:	d516      	bpl.n	8106640 <_dtoa_r+0x380>
 8106612:	4bb2      	ldr	r3, [pc, #712]	; (81068dc <_dtoa_r+0x61c>)
 8106614:	ec51 0b19 	vmov	r0, r1, d9
 8106618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810661c:	f7fa f99e 	bl	810095c <__aeabi_ddiv>
 8106620:	f007 070f 	and.w	r7, r7, #15
 8106624:	4682      	mov	sl, r0
 8106626:	468b      	mov	fp, r1
 8106628:	2503      	movs	r5, #3
 810662a:	4eac      	ldr	r6, [pc, #688]	; (81068dc <_dtoa_r+0x61c>)
 810662c:	b957      	cbnz	r7, 8106644 <_dtoa_r+0x384>
 810662e:	4642      	mov	r2, r8
 8106630:	464b      	mov	r3, r9
 8106632:	4650      	mov	r0, sl
 8106634:	4659      	mov	r1, fp
 8106636:	f7fa f991 	bl	810095c <__aeabi_ddiv>
 810663a:	4682      	mov	sl, r0
 810663c:	468b      	mov	fp, r1
 810663e:	e028      	b.n	8106692 <_dtoa_r+0x3d2>
 8106640:	2502      	movs	r5, #2
 8106642:	e7f2      	b.n	810662a <_dtoa_r+0x36a>
 8106644:	07f9      	lsls	r1, r7, #31
 8106646:	d508      	bpl.n	810665a <_dtoa_r+0x39a>
 8106648:	4640      	mov	r0, r8
 810664a:	4649      	mov	r1, r9
 810664c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8106650:	f7fa f85a 	bl	8100708 <__aeabi_dmul>
 8106654:	3501      	adds	r5, #1
 8106656:	4680      	mov	r8, r0
 8106658:	4689      	mov	r9, r1
 810665a:	107f      	asrs	r7, r7, #1
 810665c:	3608      	adds	r6, #8
 810665e:	e7e5      	b.n	810662c <_dtoa_r+0x36c>
 8106660:	f000 809b 	beq.w	810679a <_dtoa_r+0x4da>
 8106664:	9b00      	ldr	r3, [sp, #0]
 8106666:	4f9d      	ldr	r7, [pc, #628]	; (81068dc <_dtoa_r+0x61c>)
 8106668:	425e      	negs	r6, r3
 810666a:	4b9b      	ldr	r3, [pc, #620]	; (81068d8 <_dtoa_r+0x618>)
 810666c:	f006 020f 	and.w	r2, r6, #15
 8106670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8106674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106678:	ec51 0b19 	vmov	r0, r1, d9
 810667c:	f7fa f844 	bl	8100708 <__aeabi_dmul>
 8106680:	1136      	asrs	r6, r6, #4
 8106682:	4682      	mov	sl, r0
 8106684:	468b      	mov	fp, r1
 8106686:	2300      	movs	r3, #0
 8106688:	2502      	movs	r5, #2
 810668a:	2e00      	cmp	r6, #0
 810668c:	d17a      	bne.n	8106784 <_dtoa_r+0x4c4>
 810668e:	2b00      	cmp	r3, #0
 8106690:	d1d3      	bne.n	810663a <_dtoa_r+0x37a>
 8106692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8106694:	2b00      	cmp	r3, #0
 8106696:	f000 8082 	beq.w	810679e <_dtoa_r+0x4de>
 810669a:	4b91      	ldr	r3, [pc, #580]	; (81068e0 <_dtoa_r+0x620>)
 810669c:	2200      	movs	r2, #0
 810669e:	4650      	mov	r0, sl
 81066a0:	4659      	mov	r1, fp
 81066a2:	f7fa faa3 	bl	8100bec <__aeabi_dcmplt>
 81066a6:	2800      	cmp	r0, #0
 81066a8:	d079      	beq.n	810679e <_dtoa_r+0x4de>
 81066aa:	9b03      	ldr	r3, [sp, #12]
 81066ac:	2b00      	cmp	r3, #0
 81066ae:	d076      	beq.n	810679e <_dtoa_r+0x4de>
 81066b0:	9b02      	ldr	r3, [sp, #8]
 81066b2:	2b00      	cmp	r3, #0
 81066b4:	dd36      	ble.n	8106724 <_dtoa_r+0x464>
 81066b6:	9b00      	ldr	r3, [sp, #0]
 81066b8:	4650      	mov	r0, sl
 81066ba:	4659      	mov	r1, fp
 81066bc:	1e5f      	subs	r7, r3, #1
 81066be:	2200      	movs	r2, #0
 81066c0:	4b88      	ldr	r3, [pc, #544]	; (81068e4 <_dtoa_r+0x624>)
 81066c2:	f7fa f821 	bl	8100708 <__aeabi_dmul>
 81066c6:	9e02      	ldr	r6, [sp, #8]
 81066c8:	4682      	mov	sl, r0
 81066ca:	468b      	mov	fp, r1
 81066cc:	3501      	adds	r5, #1
 81066ce:	4628      	mov	r0, r5
 81066d0:	f7f9 ffb0 	bl	8100634 <__aeabi_i2d>
 81066d4:	4652      	mov	r2, sl
 81066d6:	465b      	mov	r3, fp
 81066d8:	f7fa f816 	bl	8100708 <__aeabi_dmul>
 81066dc:	4b82      	ldr	r3, [pc, #520]	; (81068e8 <_dtoa_r+0x628>)
 81066de:	2200      	movs	r2, #0
 81066e0:	f7f9 fe5c 	bl	810039c <__adddf3>
 81066e4:	46d0      	mov	r8, sl
 81066e6:	46d9      	mov	r9, fp
 81066e8:	4682      	mov	sl, r0
 81066ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 81066ee:	2e00      	cmp	r6, #0
 81066f0:	d158      	bne.n	81067a4 <_dtoa_r+0x4e4>
 81066f2:	4b7e      	ldr	r3, [pc, #504]	; (81068ec <_dtoa_r+0x62c>)
 81066f4:	2200      	movs	r2, #0
 81066f6:	4640      	mov	r0, r8
 81066f8:	4649      	mov	r1, r9
 81066fa:	f7f9 fe4d 	bl	8100398 <__aeabi_dsub>
 81066fe:	4652      	mov	r2, sl
 8106700:	465b      	mov	r3, fp
 8106702:	4680      	mov	r8, r0
 8106704:	4689      	mov	r9, r1
 8106706:	f7fa fa8f 	bl	8100c28 <__aeabi_dcmpgt>
 810670a:	2800      	cmp	r0, #0
 810670c:	f040 8295 	bne.w	8106c3a <_dtoa_r+0x97a>
 8106710:	4652      	mov	r2, sl
 8106712:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8106716:	4640      	mov	r0, r8
 8106718:	4649      	mov	r1, r9
 810671a:	f7fa fa67 	bl	8100bec <__aeabi_dcmplt>
 810671e:	2800      	cmp	r0, #0
 8106720:	f040 8289 	bne.w	8106c36 <_dtoa_r+0x976>
 8106724:	ec5b ab19 	vmov	sl, fp, d9
 8106728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810672a:	2b00      	cmp	r3, #0
 810672c:	f2c0 8148 	blt.w	81069c0 <_dtoa_r+0x700>
 8106730:	9a00      	ldr	r2, [sp, #0]
 8106732:	2a0e      	cmp	r2, #14
 8106734:	f300 8144 	bgt.w	81069c0 <_dtoa_r+0x700>
 8106738:	4b67      	ldr	r3, [pc, #412]	; (81068d8 <_dtoa_r+0x618>)
 810673a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810673e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8106742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106744:	2b00      	cmp	r3, #0
 8106746:	f280 80d5 	bge.w	81068f4 <_dtoa_r+0x634>
 810674a:	9b03      	ldr	r3, [sp, #12]
 810674c:	2b00      	cmp	r3, #0
 810674e:	f300 80d1 	bgt.w	81068f4 <_dtoa_r+0x634>
 8106752:	f040 826f 	bne.w	8106c34 <_dtoa_r+0x974>
 8106756:	4b65      	ldr	r3, [pc, #404]	; (81068ec <_dtoa_r+0x62c>)
 8106758:	2200      	movs	r2, #0
 810675a:	4640      	mov	r0, r8
 810675c:	4649      	mov	r1, r9
 810675e:	f7f9 ffd3 	bl	8100708 <__aeabi_dmul>
 8106762:	4652      	mov	r2, sl
 8106764:	465b      	mov	r3, fp
 8106766:	f7fa fa55 	bl	8100c14 <__aeabi_dcmpge>
 810676a:	9e03      	ldr	r6, [sp, #12]
 810676c:	4637      	mov	r7, r6
 810676e:	2800      	cmp	r0, #0
 8106770:	f040 8245 	bne.w	8106bfe <_dtoa_r+0x93e>
 8106774:	9d01      	ldr	r5, [sp, #4]
 8106776:	2331      	movs	r3, #49	; 0x31
 8106778:	f805 3b01 	strb.w	r3, [r5], #1
 810677c:	9b00      	ldr	r3, [sp, #0]
 810677e:	3301      	adds	r3, #1
 8106780:	9300      	str	r3, [sp, #0]
 8106782:	e240      	b.n	8106c06 <_dtoa_r+0x946>
 8106784:	07f2      	lsls	r2, r6, #31
 8106786:	d505      	bpl.n	8106794 <_dtoa_r+0x4d4>
 8106788:	e9d7 2300 	ldrd	r2, r3, [r7]
 810678c:	f7f9 ffbc 	bl	8100708 <__aeabi_dmul>
 8106790:	3501      	adds	r5, #1
 8106792:	2301      	movs	r3, #1
 8106794:	1076      	asrs	r6, r6, #1
 8106796:	3708      	adds	r7, #8
 8106798:	e777      	b.n	810668a <_dtoa_r+0x3ca>
 810679a:	2502      	movs	r5, #2
 810679c:	e779      	b.n	8106692 <_dtoa_r+0x3d2>
 810679e:	9f00      	ldr	r7, [sp, #0]
 81067a0:	9e03      	ldr	r6, [sp, #12]
 81067a2:	e794      	b.n	81066ce <_dtoa_r+0x40e>
 81067a4:	9901      	ldr	r1, [sp, #4]
 81067a6:	4b4c      	ldr	r3, [pc, #304]	; (81068d8 <_dtoa_r+0x618>)
 81067a8:	4431      	add	r1, r6
 81067aa:	910d      	str	r1, [sp, #52]	; 0x34
 81067ac:	9908      	ldr	r1, [sp, #32]
 81067ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 81067b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81067b6:	2900      	cmp	r1, #0
 81067b8:	d043      	beq.n	8106842 <_dtoa_r+0x582>
 81067ba:	494d      	ldr	r1, [pc, #308]	; (81068f0 <_dtoa_r+0x630>)
 81067bc:	2000      	movs	r0, #0
 81067be:	f7fa f8cd 	bl	810095c <__aeabi_ddiv>
 81067c2:	4652      	mov	r2, sl
 81067c4:	465b      	mov	r3, fp
 81067c6:	f7f9 fde7 	bl	8100398 <__aeabi_dsub>
 81067ca:	9d01      	ldr	r5, [sp, #4]
 81067cc:	4682      	mov	sl, r0
 81067ce:	468b      	mov	fp, r1
 81067d0:	4649      	mov	r1, r9
 81067d2:	4640      	mov	r0, r8
 81067d4:	f7fa fa48 	bl	8100c68 <__aeabi_d2iz>
 81067d8:	4606      	mov	r6, r0
 81067da:	f7f9 ff2b 	bl	8100634 <__aeabi_i2d>
 81067de:	4602      	mov	r2, r0
 81067e0:	460b      	mov	r3, r1
 81067e2:	4640      	mov	r0, r8
 81067e4:	4649      	mov	r1, r9
 81067e6:	f7f9 fdd7 	bl	8100398 <__aeabi_dsub>
 81067ea:	3630      	adds	r6, #48	; 0x30
 81067ec:	f805 6b01 	strb.w	r6, [r5], #1
 81067f0:	4652      	mov	r2, sl
 81067f2:	465b      	mov	r3, fp
 81067f4:	4680      	mov	r8, r0
 81067f6:	4689      	mov	r9, r1
 81067f8:	f7fa f9f8 	bl	8100bec <__aeabi_dcmplt>
 81067fc:	2800      	cmp	r0, #0
 81067fe:	d163      	bne.n	81068c8 <_dtoa_r+0x608>
 8106800:	4642      	mov	r2, r8
 8106802:	464b      	mov	r3, r9
 8106804:	4936      	ldr	r1, [pc, #216]	; (81068e0 <_dtoa_r+0x620>)
 8106806:	2000      	movs	r0, #0
 8106808:	f7f9 fdc6 	bl	8100398 <__aeabi_dsub>
 810680c:	4652      	mov	r2, sl
 810680e:	465b      	mov	r3, fp
 8106810:	f7fa f9ec 	bl	8100bec <__aeabi_dcmplt>
 8106814:	2800      	cmp	r0, #0
 8106816:	f040 80b5 	bne.w	8106984 <_dtoa_r+0x6c4>
 810681a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810681c:	429d      	cmp	r5, r3
 810681e:	d081      	beq.n	8106724 <_dtoa_r+0x464>
 8106820:	4b30      	ldr	r3, [pc, #192]	; (81068e4 <_dtoa_r+0x624>)
 8106822:	2200      	movs	r2, #0
 8106824:	4650      	mov	r0, sl
 8106826:	4659      	mov	r1, fp
 8106828:	f7f9 ff6e 	bl	8100708 <__aeabi_dmul>
 810682c:	4b2d      	ldr	r3, [pc, #180]	; (81068e4 <_dtoa_r+0x624>)
 810682e:	4682      	mov	sl, r0
 8106830:	468b      	mov	fp, r1
 8106832:	4640      	mov	r0, r8
 8106834:	4649      	mov	r1, r9
 8106836:	2200      	movs	r2, #0
 8106838:	f7f9 ff66 	bl	8100708 <__aeabi_dmul>
 810683c:	4680      	mov	r8, r0
 810683e:	4689      	mov	r9, r1
 8106840:	e7c6      	b.n	81067d0 <_dtoa_r+0x510>
 8106842:	4650      	mov	r0, sl
 8106844:	4659      	mov	r1, fp
 8106846:	f7f9 ff5f 	bl	8100708 <__aeabi_dmul>
 810684a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810684c:	9d01      	ldr	r5, [sp, #4]
 810684e:	930f      	str	r3, [sp, #60]	; 0x3c
 8106850:	4682      	mov	sl, r0
 8106852:	468b      	mov	fp, r1
 8106854:	4649      	mov	r1, r9
 8106856:	4640      	mov	r0, r8
 8106858:	f7fa fa06 	bl	8100c68 <__aeabi_d2iz>
 810685c:	4606      	mov	r6, r0
 810685e:	f7f9 fee9 	bl	8100634 <__aeabi_i2d>
 8106862:	3630      	adds	r6, #48	; 0x30
 8106864:	4602      	mov	r2, r0
 8106866:	460b      	mov	r3, r1
 8106868:	4640      	mov	r0, r8
 810686a:	4649      	mov	r1, r9
 810686c:	f7f9 fd94 	bl	8100398 <__aeabi_dsub>
 8106870:	f805 6b01 	strb.w	r6, [r5], #1
 8106874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106876:	429d      	cmp	r5, r3
 8106878:	4680      	mov	r8, r0
 810687a:	4689      	mov	r9, r1
 810687c:	f04f 0200 	mov.w	r2, #0
 8106880:	d124      	bne.n	81068cc <_dtoa_r+0x60c>
 8106882:	4b1b      	ldr	r3, [pc, #108]	; (81068f0 <_dtoa_r+0x630>)
 8106884:	4650      	mov	r0, sl
 8106886:	4659      	mov	r1, fp
 8106888:	f7f9 fd88 	bl	810039c <__adddf3>
 810688c:	4602      	mov	r2, r0
 810688e:	460b      	mov	r3, r1
 8106890:	4640      	mov	r0, r8
 8106892:	4649      	mov	r1, r9
 8106894:	f7fa f9c8 	bl	8100c28 <__aeabi_dcmpgt>
 8106898:	2800      	cmp	r0, #0
 810689a:	d173      	bne.n	8106984 <_dtoa_r+0x6c4>
 810689c:	4652      	mov	r2, sl
 810689e:	465b      	mov	r3, fp
 81068a0:	4913      	ldr	r1, [pc, #76]	; (81068f0 <_dtoa_r+0x630>)
 81068a2:	2000      	movs	r0, #0
 81068a4:	f7f9 fd78 	bl	8100398 <__aeabi_dsub>
 81068a8:	4602      	mov	r2, r0
 81068aa:	460b      	mov	r3, r1
 81068ac:	4640      	mov	r0, r8
 81068ae:	4649      	mov	r1, r9
 81068b0:	f7fa f99c 	bl	8100bec <__aeabi_dcmplt>
 81068b4:	2800      	cmp	r0, #0
 81068b6:	f43f af35 	beq.w	8106724 <_dtoa_r+0x464>
 81068ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 81068bc:	1e6b      	subs	r3, r5, #1
 81068be:	930f      	str	r3, [sp, #60]	; 0x3c
 81068c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81068c4:	2b30      	cmp	r3, #48	; 0x30
 81068c6:	d0f8      	beq.n	81068ba <_dtoa_r+0x5fa>
 81068c8:	9700      	str	r7, [sp, #0]
 81068ca:	e049      	b.n	8106960 <_dtoa_r+0x6a0>
 81068cc:	4b05      	ldr	r3, [pc, #20]	; (81068e4 <_dtoa_r+0x624>)
 81068ce:	f7f9 ff1b 	bl	8100708 <__aeabi_dmul>
 81068d2:	4680      	mov	r8, r0
 81068d4:	4689      	mov	r9, r1
 81068d6:	e7bd      	b.n	8106854 <_dtoa_r+0x594>
 81068d8:	08108508 	.word	0x08108508
 81068dc:	081084e0 	.word	0x081084e0
 81068e0:	3ff00000 	.word	0x3ff00000
 81068e4:	40240000 	.word	0x40240000
 81068e8:	401c0000 	.word	0x401c0000
 81068ec:	40140000 	.word	0x40140000
 81068f0:	3fe00000 	.word	0x3fe00000
 81068f4:	9d01      	ldr	r5, [sp, #4]
 81068f6:	4656      	mov	r6, sl
 81068f8:	465f      	mov	r7, fp
 81068fa:	4642      	mov	r2, r8
 81068fc:	464b      	mov	r3, r9
 81068fe:	4630      	mov	r0, r6
 8106900:	4639      	mov	r1, r7
 8106902:	f7fa f82b 	bl	810095c <__aeabi_ddiv>
 8106906:	f7fa f9af 	bl	8100c68 <__aeabi_d2iz>
 810690a:	4682      	mov	sl, r0
 810690c:	f7f9 fe92 	bl	8100634 <__aeabi_i2d>
 8106910:	4642      	mov	r2, r8
 8106912:	464b      	mov	r3, r9
 8106914:	f7f9 fef8 	bl	8100708 <__aeabi_dmul>
 8106918:	4602      	mov	r2, r0
 810691a:	460b      	mov	r3, r1
 810691c:	4630      	mov	r0, r6
 810691e:	4639      	mov	r1, r7
 8106920:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8106924:	f7f9 fd38 	bl	8100398 <__aeabi_dsub>
 8106928:	f805 6b01 	strb.w	r6, [r5], #1
 810692c:	9e01      	ldr	r6, [sp, #4]
 810692e:	9f03      	ldr	r7, [sp, #12]
 8106930:	1bae      	subs	r6, r5, r6
 8106932:	42b7      	cmp	r7, r6
 8106934:	4602      	mov	r2, r0
 8106936:	460b      	mov	r3, r1
 8106938:	d135      	bne.n	81069a6 <_dtoa_r+0x6e6>
 810693a:	f7f9 fd2f 	bl	810039c <__adddf3>
 810693e:	4642      	mov	r2, r8
 8106940:	464b      	mov	r3, r9
 8106942:	4606      	mov	r6, r0
 8106944:	460f      	mov	r7, r1
 8106946:	f7fa f96f 	bl	8100c28 <__aeabi_dcmpgt>
 810694a:	b9d0      	cbnz	r0, 8106982 <_dtoa_r+0x6c2>
 810694c:	4642      	mov	r2, r8
 810694e:	464b      	mov	r3, r9
 8106950:	4630      	mov	r0, r6
 8106952:	4639      	mov	r1, r7
 8106954:	f7fa f940 	bl	8100bd8 <__aeabi_dcmpeq>
 8106958:	b110      	cbz	r0, 8106960 <_dtoa_r+0x6a0>
 810695a:	f01a 0f01 	tst.w	sl, #1
 810695e:	d110      	bne.n	8106982 <_dtoa_r+0x6c2>
 8106960:	4620      	mov	r0, r4
 8106962:	ee18 1a10 	vmov	r1, s16
 8106966:	f000 fbed 	bl	8107144 <_Bfree>
 810696a:	2300      	movs	r3, #0
 810696c:	9800      	ldr	r0, [sp, #0]
 810696e:	702b      	strb	r3, [r5, #0]
 8106970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8106972:	3001      	adds	r0, #1
 8106974:	6018      	str	r0, [r3, #0]
 8106976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106978:	2b00      	cmp	r3, #0
 810697a:	f43f acf1 	beq.w	8106360 <_dtoa_r+0xa0>
 810697e:	601d      	str	r5, [r3, #0]
 8106980:	e4ee      	b.n	8106360 <_dtoa_r+0xa0>
 8106982:	9f00      	ldr	r7, [sp, #0]
 8106984:	462b      	mov	r3, r5
 8106986:	461d      	mov	r5, r3
 8106988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810698c:	2a39      	cmp	r2, #57	; 0x39
 810698e:	d106      	bne.n	810699e <_dtoa_r+0x6de>
 8106990:	9a01      	ldr	r2, [sp, #4]
 8106992:	429a      	cmp	r2, r3
 8106994:	d1f7      	bne.n	8106986 <_dtoa_r+0x6c6>
 8106996:	9901      	ldr	r1, [sp, #4]
 8106998:	2230      	movs	r2, #48	; 0x30
 810699a:	3701      	adds	r7, #1
 810699c:	700a      	strb	r2, [r1, #0]
 810699e:	781a      	ldrb	r2, [r3, #0]
 81069a0:	3201      	adds	r2, #1
 81069a2:	701a      	strb	r2, [r3, #0]
 81069a4:	e790      	b.n	81068c8 <_dtoa_r+0x608>
 81069a6:	4ba6      	ldr	r3, [pc, #664]	; (8106c40 <_dtoa_r+0x980>)
 81069a8:	2200      	movs	r2, #0
 81069aa:	f7f9 fead 	bl	8100708 <__aeabi_dmul>
 81069ae:	2200      	movs	r2, #0
 81069b0:	2300      	movs	r3, #0
 81069b2:	4606      	mov	r6, r0
 81069b4:	460f      	mov	r7, r1
 81069b6:	f7fa f90f 	bl	8100bd8 <__aeabi_dcmpeq>
 81069ba:	2800      	cmp	r0, #0
 81069bc:	d09d      	beq.n	81068fa <_dtoa_r+0x63a>
 81069be:	e7cf      	b.n	8106960 <_dtoa_r+0x6a0>
 81069c0:	9a08      	ldr	r2, [sp, #32]
 81069c2:	2a00      	cmp	r2, #0
 81069c4:	f000 80d7 	beq.w	8106b76 <_dtoa_r+0x8b6>
 81069c8:	9a06      	ldr	r2, [sp, #24]
 81069ca:	2a01      	cmp	r2, #1
 81069cc:	f300 80ba 	bgt.w	8106b44 <_dtoa_r+0x884>
 81069d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81069d2:	2a00      	cmp	r2, #0
 81069d4:	f000 80b2 	beq.w	8106b3c <_dtoa_r+0x87c>
 81069d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 81069dc:	9e07      	ldr	r6, [sp, #28]
 81069de:	9d04      	ldr	r5, [sp, #16]
 81069e0:	9a04      	ldr	r2, [sp, #16]
 81069e2:	441a      	add	r2, r3
 81069e4:	9204      	str	r2, [sp, #16]
 81069e6:	9a05      	ldr	r2, [sp, #20]
 81069e8:	2101      	movs	r1, #1
 81069ea:	441a      	add	r2, r3
 81069ec:	4620      	mov	r0, r4
 81069ee:	9205      	str	r2, [sp, #20]
 81069f0:	f000 fc60 	bl	81072b4 <__i2b>
 81069f4:	4607      	mov	r7, r0
 81069f6:	2d00      	cmp	r5, #0
 81069f8:	dd0c      	ble.n	8106a14 <_dtoa_r+0x754>
 81069fa:	9b05      	ldr	r3, [sp, #20]
 81069fc:	2b00      	cmp	r3, #0
 81069fe:	dd09      	ble.n	8106a14 <_dtoa_r+0x754>
 8106a00:	42ab      	cmp	r3, r5
 8106a02:	9a04      	ldr	r2, [sp, #16]
 8106a04:	bfa8      	it	ge
 8106a06:	462b      	movge	r3, r5
 8106a08:	1ad2      	subs	r2, r2, r3
 8106a0a:	9204      	str	r2, [sp, #16]
 8106a0c:	9a05      	ldr	r2, [sp, #20]
 8106a0e:	1aed      	subs	r5, r5, r3
 8106a10:	1ad3      	subs	r3, r2, r3
 8106a12:	9305      	str	r3, [sp, #20]
 8106a14:	9b07      	ldr	r3, [sp, #28]
 8106a16:	b31b      	cbz	r3, 8106a60 <_dtoa_r+0x7a0>
 8106a18:	9b08      	ldr	r3, [sp, #32]
 8106a1a:	2b00      	cmp	r3, #0
 8106a1c:	f000 80af 	beq.w	8106b7e <_dtoa_r+0x8be>
 8106a20:	2e00      	cmp	r6, #0
 8106a22:	dd13      	ble.n	8106a4c <_dtoa_r+0x78c>
 8106a24:	4639      	mov	r1, r7
 8106a26:	4632      	mov	r2, r6
 8106a28:	4620      	mov	r0, r4
 8106a2a:	f000 fd03 	bl	8107434 <__pow5mult>
 8106a2e:	ee18 2a10 	vmov	r2, s16
 8106a32:	4601      	mov	r1, r0
 8106a34:	4607      	mov	r7, r0
 8106a36:	4620      	mov	r0, r4
 8106a38:	f000 fc52 	bl	81072e0 <__multiply>
 8106a3c:	ee18 1a10 	vmov	r1, s16
 8106a40:	4680      	mov	r8, r0
 8106a42:	4620      	mov	r0, r4
 8106a44:	f000 fb7e 	bl	8107144 <_Bfree>
 8106a48:	ee08 8a10 	vmov	s16, r8
 8106a4c:	9b07      	ldr	r3, [sp, #28]
 8106a4e:	1b9a      	subs	r2, r3, r6
 8106a50:	d006      	beq.n	8106a60 <_dtoa_r+0x7a0>
 8106a52:	ee18 1a10 	vmov	r1, s16
 8106a56:	4620      	mov	r0, r4
 8106a58:	f000 fcec 	bl	8107434 <__pow5mult>
 8106a5c:	ee08 0a10 	vmov	s16, r0
 8106a60:	2101      	movs	r1, #1
 8106a62:	4620      	mov	r0, r4
 8106a64:	f000 fc26 	bl	81072b4 <__i2b>
 8106a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106a6a:	2b00      	cmp	r3, #0
 8106a6c:	4606      	mov	r6, r0
 8106a6e:	f340 8088 	ble.w	8106b82 <_dtoa_r+0x8c2>
 8106a72:	461a      	mov	r2, r3
 8106a74:	4601      	mov	r1, r0
 8106a76:	4620      	mov	r0, r4
 8106a78:	f000 fcdc 	bl	8107434 <__pow5mult>
 8106a7c:	9b06      	ldr	r3, [sp, #24]
 8106a7e:	2b01      	cmp	r3, #1
 8106a80:	4606      	mov	r6, r0
 8106a82:	f340 8081 	ble.w	8106b88 <_dtoa_r+0x8c8>
 8106a86:	f04f 0800 	mov.w	r8, #0
 8106a8a:	6933      	ldr	r3, [r6, #16]
 8106a8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8106a90:	6918      	ldr	r0, [r3, #16]
 8106a92:	f000 fbbf 	bl	8107214 <__hi0bits>
 8106a96:	f1c0 0020 	rsb	r0, r0, #32
 8106a9a:	9b05      	ldr	r3, [sp, #20]
 8106a9c:	4418      	add	r0, r3
 8106a9e:	f010 001f 	ands.w	r0, r0, #31
 8106aa2:	f000 8092 	beq.w	8106bca <_dtoa_r+0x90a>
 8106aa6:	f1c0 0320 	rsb	r3, r0, #32
 8106aaa:	2b04      	cmp	r3, #4
 8106aac:	f340 808a 	ble.w	8106bc4 <_dtoa_r+0x904>
 8106ab0:	f1c0 001c 	rsb	r0, r0, #28
 8106ab4:	9b04      	ldr	r3, [sp, #16]
 8106ab6:	4403      	add	r3, r0
 8106ab8:	9304      	str	r3, [sp, #16]
 8106aba:	9b05      	ldr	r3, [sp, #20]
 8106abc:	4403      	add	r3, r0
 8106abe:	4405      	add	r5, r0
 8106ac0:	9305      	str	r3, [sp, #20]
 8106ac2:	9b04      	ldr	r3, [sp, #16]
 8106ac4:	2b00      	cmp	r3, #0
 8106ac6:	dd07      	ble.n	8106ad8 <_dtoa_r+0x818>
 8106ac8:	ee18 1a10 	vmov	r1, s16
 8106acc:	461a      	mov	r2, r3
 8106ace:	4620      	mov	r0, r4
 8106ad0:	f000 fd0a 	bl	81074e8 <__lshift>
 8106ad4:	ee08 0a10 	vmov	s16, r0
 8106ad8:	9b05      	ldr	r3, [sp, #20]
 8106ada:	2b00      	cmp	r3, #0
 8106adc:	dd05      	ble.n	8106aea <_dtoa_r+0x82a>
 8106ade:	4631      	mov	r1, r6
 8106ae0:	461a      	mov	r2, r3
 8106ae2:	4620      	mov	r0, r4
 8106ae4:	f000 fd00 	bl	81074e8 <__lshift>
 8106ae8:	4606      	mov	r6, r0
 8106aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8106aec:	2b00      	cmp	r3, #0
 8106aee:	d06e      	beq.n	8106bce <_dtoa_r+0x90e>
 8106af0:	ee18 0a10 	vmov	r0, s16
 8106af4:	4631      	mov	r1, r6
 8106af6:	f000 fd67 	bl	81075c8 <__mcmp>
 8106afa:	2800      	cmp	r0, #0
 8106afc:	da67      	bge.n	8106bce <_dtoa_r+0x90e>
 8106afe:	9b00      	ldr	r3, [sp, #0]
 8106b00:	3b01      	subs	r3, #1
 8106b02:	ee18 1a10 	vmov	r1, s16
 8106b06:	9300      	str	r3, [sp, #0]
 8106b08:	220a      	movs	r2, #10
 8106b0a:	2300      	movs	r3, #0
 8106b0c:	4620      	mov	r0, r4
 8106b0e:	f000 fb3b 	bl	8107188 <__multadd>
 8106b12:	9b08      	ldr	r3, [sp, #32]
 8106b14:	ee08 0a10 	vmov	s16, r0
 8106b18:	2b00      	cmp	r3, #0
 8106b1a:	f000 81b1 	beq.w	8106e80 <_dtoa_r+0xbc0>
 8106b1e:	2300      	movs	r3, #0
 8106b20:	4639      	mov	r1, r7
 8106b22:	220a      	movs	r2, #10
 8106b24:	4620      	mov	r0, r4
 8106b26:	f000 fb2f 	bl	8107188 <__multadd>
 8106b2a:	9b02      	ldr	r3, [sp, #8]
 8106b2c:	2b00      	cmp	r3, #0
 8106b2e:	4607      	mov	r7, r0
 8106b30:	f300 808e 	bgt.w	8106c50 <_dtoa_r+0x990>
 8106b34:	9b06      	ldr	r3, [sp, #24]
 8106b36:	2b02      	cmp	r3, #2
 8106b38:	dc51      	bgt.n	8106bde <_dtoa_r+0x91e>
 8106b3a:	e089      	b.n	8106c50 <_dtoa_r+0x990>
 8106b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8106b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8106b42:	e74b      	b.n	81069dc <_dtoa_r+0x71c>
 8106b44:	9b03      	ldr	r3, [sp, #12]
 8106b46:	1e5e      	subs	r6, r3, #1
 8106b48:	9b07      	ldr	r3, [sp, #28]
 8106b4a:	42b3      	cmp	r3, r6
 8106b4c:	bfbf      	itttt	lt
 8106b4e:	9b07      	ldrlt	r3, [sp, #28]
 8106b50:	9607      	strlt	r6, [sp, #28]
 8106b52:	1af2      	sublt	r2, r6, r3
 8106b54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8106b56:	bfb6      	itet	lt
 8106b58:	189b      	addlt	r3, r3, r2
 8106b5a:	1b9e      	subge	r6, r3, r6
 8106b5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8106b5e:	9b03      	ldr	r3, [sp, #12]
 8106b60:	bfb8      	it	lt
 8106b62:	2600      	movlt	r6, #0
 8106b64:	2b00      	cmp	r3, #0
 8106b66:	bfb7      	itett	lt
 8106b68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8106b6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8106b70:	1a9d      	sublt	r5, r3, r2
 8106b72:	2300      	movlt	r3, #0
 8106b74:	e734      	b.n	81069e0 <_dtoa_r+0x720>
 8106b76:	9e07      	ldr	r6, [sp, #28]
 8106b78:	9d04      	ldr	r5, [sp, #16]
 8106b7a:	9f08      	ldr	r7, [sp, #32]
 8106b7c:	e73b      	b.n	81069f6 <_dtoa_r+0x736>
 8106b7e:	9a07      	ldr	r2, [sp, #28]
 8106b80:	e767      	b.n	8106a52 <_dtoa_r+0x792>
 8106b82:	9b06      	ldr	r3, [sp, #24]
 8106b84:	2b01      	cmp	r3, #1
 8106b86:	dc18      	bgt.n	8106bba <_dtoa_r+0x8fa>
 8106b88:	f1ba 0f00 	cmp.w	sl, #0
 8106b8c:	d115      	bne.n	8106bba <_dtoa_r+0x8fa>
 8106b8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8106b92:	b993      	cbnz	r3, 8106bba <_dtoa_r+0x8fa>
 8106b94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8106b98:	0d1b      	lsrs	r3, r3, #20
 8106b9a:	051b      	lsls	r3, r3, #20
 8106b9c:	b183      	cbz	r3, 8106bc0 <_dtoa_r+0x900>
 8106b9e:	9b04      	ldr	r3, [sp, #16]
 8106ba0:	3301      	adds	r3, #1
 8106ba2:	9304      	str	r3, [sp, #16]
 8106ba4:	9b05      	ldr	r3, [sp, #20]
 8106ba6:	3301      	adds	r3, #1
 8106ba8:	9305      	str	r3, [sp, #20]
 8106baa:	f04f 0801 	mov.w	r8, #1
 8106bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106bb0:	2b00      	cmp	r3, #0
 8106bb2:	f47f af6a 	bne.w	8106a8a <_dtoa_r+0x7ca>
 8106bb6:	2001      	movs	r0, #1
 8106bb8:	e76f      	b.n	8106a9a <_dtoa_r+0x7da>
 8106bba:	f04f 0800 	mov.w	r8, #0
 8106bbe:	e7f6      	b.n	8106bae <_dtoa_r+0x8ee>
 8106bc0:	4698      	mov	r8, r3
 8106bc2:	e7f4      	b.n	8106bae <_dtoa_r+0x8ee>
 8106bc4:	f43f af7d 	beq.w	8106ac2 <_dtoa_r+0x802>
 8106bc8:	4618      	mov	r0, r3
 8106bca:	301c      	adds	r0, #28
 8106bcc:	e772      	b.n	8106ab4 <_dtoa_r+0x7f4>
 8106bce:	9b03      	ldr	r3, [sp, #12]
 8106bd0:	2b00      	cmp	r3, #0
 8106bd2:	dc37      	bgt.n	8106c44 <_dtoa_r+0x984>
 8106bd4:	9b06      	ldr	r3, [sp, #24]
 8106bd6:	2b02      	cmp	r3, #2
 8106bd8:	dd34      	ble.n	8106c44 <_dtoa_r+0x984>
 8106bda:	9b03      	ldr	r3, [sp, #12]
 8106bdc:	9302      	str	r3, [sp, #8]
 8106bde:	9b02      	ldr	r3, [sp, #8]
 8106be0:	b96b      	cbnz	r3, 8106bfe <_dtoa_r+0x93e>
 8106be2:	4631      	mov	r1, r6
 8106be4:	2205      	movs	r2, #5
 8106be6:	4620      	mov	r0, r4
 8106be8:	f000 face 	bl	8107188 <__multadd>
 8106bec:	4601      	mov	r1, r0
 8106bee:	4606      	mov	r6, r0
 8106bf0:	ee18 0a10 	vmov	r0, s16
 8106bf4:	f000 fce8 	bl	81075c8 <__mcmp>
 8106bf8:	2800      	cmp	r0, #0
 8106bfa:	f73f adbb 	bgt.w	8106774 <_dtoa_r+0x4b4>
 8106bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106c00:	9d01      	ldr	r5, [sp, #4]
 8106c02:	43db      	mvns	r3, r3
 8106c04:	9300      	str	r3, [sp, #0]
 8106c06:	f04f 0800 	mov.w	r8, #0
 8106c0a:	4631      	mov	r1, r6
 8106c0c:	4620      	mov	r0, r4
 8106c0e:	f000 fa99 	bl	8107144 <_Bfree>
 8106c12:	2f00      	cmp	r7, #0
 8106c14:	f43f aea4 	beq.w	8106960 <_dtoa_r+0x6a0>
 8106c18:	f1b8 0f00 	cmp.w	r8, #0
 8106c1c:	d005      	beq.n	8106c2a <_dtoa_r+0x96a>
 8106c1e:	45b8      	cmp	r8, r7
 8106c20:	d003      	beq.n	8106c2a <_dtoa_r+0x96a>
 8106c22:	4641      	mov	r1, r8
 8106c24:	4620      	mov	r0, r4
 8106c26:	f000 fa8d 	bl	8107144 <_Bfree>
 8106c2a:	4639      	mov	r1, r7
 8106c2c:	4620      	mov	r0, r4
 8106c2e:	f000 fa89 	bl	8107144 <_Bfree>
 8106c32:	e695      	b.n	8106960 <_dtoa_r+0x6a0>
 8106c34:	2600      	movs	r6, #0
 8106c36:	4637      	mov	r7, r6
 8106c38:	e7e1      	b.n	8106bfe <_dtoa_r+0x93e>
 8106c3a:	9700      	str	r7, [sp, #0]
 8106c3c:	4637      	mov	r7, r6
 8106c3e:	e599      	b.n	8106774 <_dtoa_r+0x4b4>
 8106c40:	40240000 	.word	0x40240000
 8106c44:	9b08      	ldr	r3, [sp, #32]
 8106c46:	2b00      	cmp	r3, #0
 8106c48:	f000 80ca 	beq.w	8106de0 <_dtoa_r+0xb20>
 8106c4c:	9b03      	ldr	r3, [sp, #12]
 8106c4e:	9302      	str	r3, [sp, #8]
 8106c50:	2d00      	cmp	r5, #0
 8106c52:	dd05      	ble.n	8106c60 <_dtoa_r+0x9a0>
 8106c54:	4639      	mov	r1, r7
 8106c56:	462a      	mov	r2, r5
 8106c58:	4620      	mov	r0, r4
 8106c5a:	f000 fc45 	bl	81074e8 <__lshift>
 8106c5e:	4607      	mov	r7, r0
 8106c60:	f1b8 0f00 	cmp.w	r8, #0
 8106c64:	d05b      	beq.n	8106d1e <_dtoa_r+0xa5e>
 8106c66:	6879      	ldr	r1, [r7, #4]
 8106c68:	4620      	mov	r0, r4
 8106c6a:	f000 fa2b 	bl	81070c4 <_Balloc>
 8106c6e:	4605      	mov	r5, r0
 8106c70:	b928      	cbnz	r0, 8106c7e <_dtoa_r+0x9be>
 8106c72:	4b87      	ldr	r3, [pc, #540]	; (8106e90 <_dtoa_r+0xbd0>)
 8106c74:	4602      	mov	r2, r0
 8106c76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8106c7a:	f7ff bb3b 	b.w	81062f4 <_dtoa_r+0x34>
 8106c7e:	693a      	ldr	r2, [r7, #16]
 8106c80:	3202      	adds	r2, #2
 8106c82:	0092      	lsls	r2, r2, #2
 8106c84:	f107 010c 	add.w	r1, r7, #12
 8106c88:	300c      	adds	r0, #12
 8106c8a:	f000 fa0d 	bl	81070a8 <memcpy>
 8106c8e:	2201      	movs	r2, #1
 8106c90:	4629      	mov	r1, r5
 8106c92:	4620      	mov	r0, r4
 8106c94:	f000 fc28 	bl	81074e8 <__lshift>
 8106c98:	9b01      	ldr	r3, [sp, #4]
 8106c9a:	f103 0901 	add.w	r9, r3, #1
 8106c9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8106ca2:	4413      	add	r3, r2
 8106ca4:	9305      	str	r3, [sp, #20]
 8106ca6:	f00a 0301 	and.w	r3, sl, #1
 8106caa:	46b8      	mov	r8, r7
 8106cac:	9304      	str	r3, [sp, #16]
 8106cae:	4607      	mov	r7, r0
 8106cb0:	4631      	mov	r1, r6
 8106cb2:	ee18 0a10 	vmov	r0, s16
 8106cb6:	f7ff fa75 	bl	81061a4 <quorem>
 8106cba:	4641      	mov	r1, r8
 8106cbc:	9002      	str	r0, [sp, #8]
 8106cbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8106cc2:	ee18 0a10 	vmov	r0, s16
 8106cc6:	f000 fc7f 	bl	81075c8 <__mcmp>
 8106cca:	463a      	mov	r2, r7
 8106ccc:	9003      	str	r0, [sp, #12]
 8106cce:	4631      	mov	r1, r6
 8106cd0:	4620      	mov	r0, r4
 8106cd2:	f000 fc95 	bl	8107600 <__mdiff>
 8106cd6:	68c2      	ldr	r2, [r0, #12]
 8106cd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8106cdc:	4605      	mov	r5, r0
 8106cde:	bb02      	cbnz	r2, 8106d22 <_dtoa_r+0xa62>
 8106ce0:	4601      	mov	r1, r0
 8106ce2:	ee18 0a10 	vmov	r0, s16
 8106ce6:	f000 fc6f 	bl	81075c8 <__mcmp>
 8106cea:	4602      	mov	r2, r0
 8106cec:	4629      	mov	r1, r5
 8106cee:	4620      	mov	r0, r4
 8106cf0:	9207      	str	r2, [sp, #28]
 8106cf2:	f000 fa27 	bl	8107144 <_Bfree>
 8106cf6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8106cfa:	ea43 0102 	orr.w	r1, r3, r2
 8106cfe:	9b04      	ldr	r3, [sp, #16]
 8106d00:	430b      	orrs	r3, r1
 8106d02:	464d      	mov	r5, r9
 8106d04:	d10f      	bne.n	8106d26 <_dtoa_r+0xa66>
 8106d06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8106d0a:	d02a      	beq.n	8106d62 <_dtoa_r+0xaa2>
 8106d0c:	9b03      	ldr	r3, [sp, #12]
 8106d0e:	2b00      	cmp	r3, #0
 8106d10:	dd02      	ble.n	8106d18 <_dtoa_r+0xa58>
 8106d12:	9b02      	ldr	r3, [sp, #8]
 8106d14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8106d18:	f88b a000 	strb.w	sl, [fp]
 8106d1c:	e775      	b.n	8106c0a <_dtoa_r+0x94a>
 8106d1e:	4638      	mov	r0, r7
 8106d20:	e7ba      	b.n	8106c98 <_dtoa_r+0x9d8>
 8106d22:	2201      	movs	r2, #1
 8106d24:	e7e2      	b.n	8106cec <_dtoa_r+0xa2c>
 8106d26:	9b03      	ldr	r3, [sp, #12]
 8106d28:	2b00      	cmp	r3, #0
 8106d2a:	db04      	blt.n	8106d36 <_dtoa_r+0xa76>
 8106d2c:	9906      	ldr	r1, [sp, #24]
 8106d2e:	430b      	orrs	r3, r1
 8106d30:	9904      	ldr	r1, [sp, #16]
 8106d32:	430b      	orrs	r3, r1
 8106d34:	d122      	bne.n	8106d7c <_dtoa_r+0xabc>
 8106d36:	2a00      	cmp	r2, #0
 8106d38:	ddee      	ble.n	8106d18 <_dtoa_r+0xa58>
 8106d3a:	ee18 1a10 	vmov	r1, s16
 8106d3e:	2201      	movs	r2, #1
 8106d40:	4620      	mov	r0, r4
 8106d42:	f000 fbd1 	bl	81074e8 <__lshift>
 8106d46:	4631      	mov	r1, r6
 8106d48:	ee08 0a10 	vmov	s16, r0
 8106d4c:	f000 fc3c 	bl	81075c8 <__mcmp>
 8106d50:	2800      	cmp	r0, #0
 8106d52:	dc03      	bgt.n	8106d5c <_dtoa_r+0xa9c>
 8106d54:	d1e0      	bne.n	8106d18 <_dtoa_r+0xa58>
 8106d56:	f01a 0f01 	tst.w	sl, #1
 8106d5a:	d0dd      	beq.n	8106d18 <_dtoa_r+0xa58>
 8106d5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8106d60:	d1d7      	bne.n	8106d12 <_dtoa_r+0xa52>
 8106d62:	2339      	movs	r3, #57	; 0x39
 8106d64:	f88b 3000 	strb.w	r3, [fp]
 8106d68:	462b      	mov	r3, r5
 8106d6a:	461d      	mov	r5, r3
 8106d6c:	3b01      	subs	r3, #1
 8106d6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8106d72:	2a39      	cmp	r2, #57	; 0x39
 8106d74:	d071      	beq.n	8106e5a <_dtoa_r+0xb9a>
 8106d76:	3201      	adds	r2, #1
 8106d78:	701a      	strb	r2, [r3, #0]
 8106d7a:	e746      	b.n	8106c0a <_dtoa_r+0x94a>
 8106d7c:	2a00      	cmp	r2, #0
 8106d7e:	dd07      	ble.n	8106d90 <_dtoa_r+0xad0>
 8106d80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8106d84:	d0ed      	beq.n	8106d62 <_dtoa_r+0xaa2>
 8106d86:	f10a 0301 	add.w	r3, sl, #1
 8106d8a:	f88b 3000 	strb.w	r3, [fp]
 8106d8e:	e73c      	b.n	8106c0a <_dtoa_r+0x94a>
 8106d90:	9b05      	ldr	r3, [sp, #20]
 8106d92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8106d96:	4599      	cmp	r9, r3
 8106d98:	d047      	beq.n	8106e2a <_dtoa_r+0xb6a>
 8106d9a:	ee18 1a10 	vmov	r1, s16
 8106d9e:	2300      	movs	r3, #0
 8106da0:	220a      	movs	r2, #10
 8106da2:	4620      	mov	r0, r4
 8106da4:	f000 f9f0 	bl	8107188 <__multadd>
 8106da8:	45b8      	cmp	r8, r7
 8106daa:	ee08 0a10 	vmov	s16, r0
 8106dae:	f04f 0300 	mov.w	r3, #0
 8106db2:	f04f 020a 	mov.w	r2, #10
 8106db6:	4641      	mov	r1, r8
 8106db8:	4620      	mov	r0, r4
 8106dba:	d106      	bne.n	8106dca <_dtoa_r+0xb0a>
 8106dbc:	f000 f9e4 	bl	8107188 <__multadd>
 8106dc0:	4680      	mov	r8, r0
 8106dc2:	4607      	mov	r7, r0
 8106dc4:	f109 0901 	add.w	r9, r9, #1
 8106dc8:	e772      	b.n	8106cb0 <_dtoa_r+0x9f0>
 8106dca:	f000 f9dd 	bl	8107188 <__multadd>
 8106dce:	4639      	mov	r1, r7
 8106dd0:	4680      	mov	r8, r0
 8106dd2:	2300      	movs	r3, #0
 8106dd4:	220a      	movs	r2, #10
 8106dd6:	4620      	mov	r0, r4
 8106dd8:	f000 f9d6 	bl	8107188 <__multadd>
 8106ddc:	4607      	mov	r7, r0
 8106dde:	e7f1      	b.n	8106dc4 <_dtoa_r+0xb04>
 8106de0:	9b03      	ldr	r3, [sp, #12]
 8106de2:	9302      	str	r3, [sp, #8]
 8106de4:	9d01      	ldr	r5, [sp, #4]
 8106de6:	ee18 0a10 	vmov	r0, s16
 8106dea:	4631      	mov	r1, r6
 8106dec:	f7ff f9da 	bl	81061a4 <quorem>
 8106df0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8106df4:	9b01      	ldr	r3, [sp, #4]
 8106df6:	f805 ab01 	strb.w	sl, [r5], #1
 8106dfa:	1aea      	subs	r2, r5, r3
 8106dfc:	9b02      	ldr	r3, [sp, #8]
 8106dfe:	4293      	cmp	r3, r2
 8106e00:	dd09      	ble.n	8106e16 <_dtoa_r+0xb56>
 8106e02:	ee18 1a10 	vmov	r1, s16
 8106e06:	2300      	movs	r3, #0
 8106e08:	220a      	movs	r2, #10
 8106e0a:	4620      	mov	r0, r4
 8106e0c:	f000 f9bc 	bl	8107188 <__multadd>
 8106e10:	ee08 0a10 	vmov	s16, r0
 8106e14:	e7e7      	b.n	8106de6 <_dtoa_r+0xb26>
 8106e16:	9b02      	ldr	r3, [sp, #8]
 8106e18:	2b00      	cmp	r3, #0
 8106e1a:	bfc8      	it	gt
 8106e1c:	461d      	movgt	r5, r3
 8106e1e:	9b01      	ldr	r3, [sp, #4]
 8106e20:	bfd8      	it	le
 8106e22:	2501      	movle	r5, #1
 8106e24:	441d      	add	r5, r3
 8106e26:	f04f 0800 	mov.w	r8, #0
 8106e2a:	ee18 1a10 	vmov	r1, s16
 8106e2e:	2201      	movs	r2, #1
 8106e30:	4620      	mov	r0, r4
 8106e32:	f000 fb59 	bl	81074e8 <__lshift>
 8106e36:	4631      	mov	r1, r6
 8106e38:	ee08 0a10 	vmov	s16, r0
 8106e3c:	f000 fbc4 	bl	81075c8 <__mcmp>
 8106e40:	2800      	cmp	r0, #0
 8106e42:	dc91      	bgt.n	8106d68 <_dtoa_r+0xaa8>
 8106e44:	d102      	bne.n	8106e4c <_dtoa_r+0xb8c>
 8106e46:	f01a 0f01 	tst.w	sl, #1
 8106e4a:	d18d      	bne.n	8106d68 <_dtoa_r+0xaa8>
 8106e4c:	462b      	mov	r3, r5
 8106e4e:	461d      	mov	r5, r3
 8106e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8106e54:	2a30      	cmp	r2, #48	; 0x30
 8106e56:	d0fa      	beq.n	8106e4e <_dtoa_r+0xb8e>
 8106e58:	e6d7      	b.n	8106c0a <_dtoa_r+0x94a>
 8106e5a:	9a01      	ldr	r2, [sp, #4]
 8106e5c:	429a      	cmp	r2, r3
 8106e5e:	d184      	bne.n	8106d6a <_dtoa_r+0xaaa>
 8106e60:	9b00      	ldr	r3, [sp, #0]
 8106e62:	3301      	adds	r3, #1
 8106e64:	9300      	str	r3, [sp, #0]
 8106e66:	2331      	movs	r3, #49	; 0x31
 8106e68:	7013      	strb	r3, [r2, #0]
 8106e6a:	e6ce      	b.n	8106c0a <_dtoa_r+0x94a>
 8106e6c:	4b09      	ldr	r3, [pc, #36]	; (8106e94 <_dtoa_r+0xbd4>)
 8106e6e:	f7ff ba95 	b.w	810639c <_dtoa_r+0xdc>
 8106e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8106e74:	2b00      	cmp	r3, #0
 8106e76:	f47f aa6e 	bne.w	8106356 <_dtoa_r+0x96>
 8106e7a:	4b07      	ldr	r3, [pc, #28]	; (8106e98 <_dtoa_r+0xbd8>)
 8106e7c:	f7ff ba8e 	b.w	810639c <_dtoa_r+0xdc>
 8106e80:	9b02      	ldr	r3, [sp, #8]
 8106e82:	2b00      	cmp	r3, #0
 8106e84:	dcae      	bgt.n	8106de4 <_dtoa_r+0xb24>
 8106e86:	9b06      	ldr	r3, [sp, #24]
 8106e88:	2b02      	cmp	r3, #2
 8106e8a:	f73f aea8 	bgt.w	8106bde <_dtoa_r+0x91e>
 8106e8e:	e7a9      	b.n	8106de4 <_dtoa_r+0xb24>
 8106e90:	08108413 	.word	0x08108413
 8106e94:	08108370 	.word	0x08108370
 8106e98:	08108394 	.word	0x08108394

08106e9c <std>:
 8106e9c:	2300      	movs	r3, #0
 8106e9e:	b510      	push	{r4, lr}
 8106ea0:	4604      	mov	r4, r0
 8106ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8106ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106eaa:	6083      	str	r3, [r0, #8]
 8106eac:	8181      	strh	r1, [r0, #12]
 8106eae:	6643      	str	r3, [r0, #100]	; 0x64
 8106eb0:	81c2      	strh	r2, [r0, #14]
 8106eb2:	6183      	str	r3, [r0, #24]
 8106eb4:	4619      	mov	r1, r3
 8106eb6:	2208      	movs	r2, #8
 8106eb8:	305c      	adds	r0, #92	; 0x5c
 8106eba:	f7fe fce9 	bl	8105890 <memset>
 8106ebe:	4b05      	ldr	r3, [pc, #20]	; (8106ed4 <std+0x38>)
 8106ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8106ec2:	4b05      	ldr	r3, [pc, #20]	; (8106ed8 <std+0x3c>)
 8106ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8106ec6:	4b05      	ldr	r3, [pc, #20]	; (8106edc <std+0x40>)
 8106ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106eca:	4b05      	ldr	r3, [pc, #20]	; (8106ee0 <std+0x44>)
 8106ecc:	6224      	str	r4, [r4, #32]
 8106ece:	6323      	str	r3, [r4, #48]	; 0x30
 8106ed0:	bd10      	pop	{r4, pc}
 8106ed2:	bf00      	nop
 8106ed4:	08107c8d 	.word	0x08107c8d
 8106ed8:	08107caf 	.word	0x08107caf
 8106edc:	08107ce7 	.word	0x08107ce7
 8106ee0:	08107d0b 	.word	0x08107d0b

08106ee4 <_cleanup_r>:
 8106ee4:	4901      	ldr	r1, [pc, #4]	; (8106eec <_cleanup_r+0x8>)
 8106ee6:	f000 b8af 	b.w	8107048 <_fwalk_reent>
 8106eea:	bf00      	nop
 8106eec:	08108021 	.word	0x08108021

08106ef0 <__sfmoreglue>:
 8106ef0:	b570      	push	{r4, r5, r6, lr}
 8106ef2:	2268      	movs	r2, #104	; 0x68
 8106ef4:	1e4d      	subs	r5, r1, #1
 8106ef6:	4355      	muls	r5, r2
 8106ef8:	460e      	mov	r6, r1
 8106efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8106efe:	f000 fce7 	bl	81078d0 <_malloc_r>
 8106f02:	4604      	mov	r4, r0
 8106f04:	b140      	cbz	r0, 8106f18 <__sfmoreglue+0x28>
 8106f06:	2100      	movs	r1, #0
 8106f08:	e9c0 1600 	strd	r1, r6, [r0]
 8106f0c:	300c      	adds	r0, #12
 8106f0e:	60a0      	str	r0, [r4, #8]
 8106f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8106f14:	f7fe fcbc 	bl	8105890 <memset>
 8106f18:	4620      	mov	r0, r4
 8106f1a:	bd70      	pop	{r4, r5, r6, pc}

08106f1c <__sfp_lock_acquire>:
 8106f1c:	4801      	ldr	r0, [pc, #4]	; (8106f24 <__sfp_lock_acquire+0x8>)
 8106f1e:	f000 b8b8 	b.w	8107092 <__retarget_lock_acquire_recursive>
 8106f22:	bf00      	nop
 8106f24:	10000375 	.word	0x10000375

08106f28 <__sfp_lock_release>:
 8106f28:	4801      	ldr	r0, [pc, #4]	; (8106f30 <__sfp_lock_release+0x8>)
 8106f2a:	f000 b8b3 	b.w	8107094 <__retarget_lock_release_recursive>
 8106f2e:	bf00      	nop
 8106f30:	10000375 	.word	0x10000375

08106f34 <__sinit_lock_acquire>:
 8106f34:	4801      	ldr	r0, [pc, #4]	; (8106f3c <__sinit_lock_acquire+0x8>)
 8106f36:	f000 b8ac 	b.w	8107092 <__retarget_lock_acquire_recursive>
 8106f3a:	bf00      	nop
 8106f3c:	10000376 	.word	0x10000376

08106f40 <__sinit_lock_release>:
 8106f40:	4801      	ldr	r0, [pc, #4]	; (8106f48 <__sinit_lock_release+0x8>)
 8106f42:	f000 b8a7 	b.w	8107094 <__retarget_lock_release_recursive>
 8106f46:	bf00      	nop
 8106f48:	10000376 	.word	0x10000376

08106f4c <__sinit>:
 8106f4c:	b510      	push	{r4, lr}
 8106f4e:	4604      	mov	r4, r0
 8106f50:	f7ff fff0 	bl	8106f34 <__sinit_lock_acquire>
 8106f54:	69a3      	ldr	r3, [r4, #24]
 8106f56:	b11b      	cbz	r3, 8106f60 <__sinit+0x14>
 8106f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106f5c:	f7ff bff0 	b.w	8106f40 <__sinit_lock_release>
 8106f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8106f64:	6523      	str	r3, [r4, #80]	; 0x50
 8106f66:	4b13      	ldr	r3, [pc, #76]	; (8106fb4 <__sinit+0x68>)
 8106f68:	4a13      	ldr	r2, [pc, #76]	; (8106fb8 <__sinit+0x6c>)
 8106f6a:	681b      	ldr	r3, [r3, #0]
 8106f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8106f6e:	42a3      	cmp	r3, r4
 8106f70:	bf04      	itt	eq
 8106f72:	2301      	moveq	r3, #1
 8106f74:	61a3      	streq	r3, [r4, #24]
 8106f76:	4620      	mov	r0, r4
 8106f78:	f000 f820 	bl	8106fbc <__sfp>
 8106f7c:	6060      	str	r0, [r4, #4]
 8106f7e:	4620      	mov	r0, r4
 8106f80:	f000 f81c 	bl	8106fbc <__sfp>
 8106f84:	60a0      	str	r0, [r4, #8]
 8106f86:	4620      	mov	r0, r4
 8106f88:	f000 f818 	bl	8106fbc <__sfp>
 8106f8c:	2200      	movs	r2, #0
 8106f8e:	60e0      	str	r0, [r4, #12]
 8106f90:	2104      	movs	r1, #4
 8106f92:	6860      	ldr	r0, [r4, #4]
 8106f94:	f7ff ff82 	bl	8106e9c <std>
 8106f98:	68a0      	ldr	r0, [r4, #8]
 8106f9a:	2201      	movs	r2, #1
 8106f9c:	2109      	movs	r1, #9
 8106f9e:	f7ff ff7d 	bl	8106e9c <std>
 8106fa2:	68e0      	ldr	r0, [r4, #12]
 8106fa4:	2202      	movs	r2, #2
 8106fa6:	2112      	movs	r1, #18
 8106fa8:	f7ff ff78 	bl	8106e9c <std>
 8106fac:	2301      	movs	r3, #1
 8106fae:	61a3      	str	r3, [r4, #24]
 8106fb0:	e7d2      	b.n	8106f58 <__sinit+0xc>
 8106fb2:	bf00      	nop
 8106fb4:	0810835c 	.word	0x0810835c
 8106fb8:	08106ee5 	.word	0x08106ee5

08106fbc <__sfp>:
 8106fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106fbe:	4607      	mov	r7, r0
 8106fc0:	f7ff ffac 	bl	8106f1c <__sfp_lock_acquire>
 8106fc4:	4b1e      	ldr	r3, [pc, #120]	; (8107040 <__sfp+0x84>)
 8106fc6:	681e      	ldr	r6, [r3, #0]
 8106fc8:	69b3      	ldr	r3, [r6, #24]
 8106fca:	b913      	cbnz	r3, 8106fd2 <__sfp+0x16>
 8106fcc:	4630      	mov	r0, r6
 8106fce:	f7ff ffbd 	bl	8106f4c <__sinit>
 8106fd2:	3648      	adds	r6, #72	; 0x48
 8106fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8106fd8:	3b01      	subs	r3, #1
 8106fda:	d503      	bpl.n	8106fe4 <__sfp+0x28>
 8106fdc:	6833      	ldr	r3, [r6, #0]
 8106fde:	b30b      	cbz	r3, 8107024 <__sfp+0x68>
 8106fe0:	6836      	ldr	r6, [r6, #0]
 8106fe2:	e7f7      	b.n	8106fd4 <__sfp+0x18>
 8106fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8106fe8:	b9d5      	cbnz	r5, 8107020 <__sfp+0x64>
 8106fea:	4b16      	ldr	r3, [pc, #88]	; (8107044 <__sfp+0x88>)
 8106fec:	60e3      	str	r3, [r4, #12]
 8106fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8106ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8106ff4:	f000 f84c 	bl	8107090 <__retarget_lock_init_recursive>
 8106ff8:	f7ff ff96 	bl	8106f28 <__sfp_lock_release>
 8106ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8107000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8107004:	6025      	str	r5, [r4, #0]
 8107006:	61a5      	str	r5, [r4, #24]
 8107008:	2208      	movs	r2, #8
 810700a:	4629      	mov	r1, r5
 810700c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8107010:	f7fe fc3e 	bl	8105890 <memset>
 8107014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8107018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810701c:	4620      	mov	r0, r4
 810701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107020:	3468      	adds	r4, #104	; 0x68
 8107022:	e7d9      	b.n	8106fd8 <__sfp+0x1c>
 8107024:	2104      	movs	r1, #4
 8107026:	4638      	mov	r0, r7
 8107028:	f7ff ff62 	bl	8106ef0 <__sfmoreglue>
 810702c:	4604      	mov	r4, r0
 810702e:	6030      	str	r0, [r6, #0]
 8107030:	2800      	cmp	r0, #0
 8107032:	d1d5      	bne.n	8106fe0 <__sfp+0x24>
 8107034:	f7ff ff78 	bl	8106f28 <__sfp_lock_release>
 8107038:	230c      	movs	r3, #12
 810703a:	603b      	str	r3, [r7, #0]
 810703c:	e7ee      	b.n	810701c <__sfp+0x60>
 810703e:	bf00      	nop
 8107040:	0810835c 	.word	0x0810835c
 8107044:	ffff0001 	.word	0xffff0001

08107048 <_fwalk_reent>:
 8107048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810704c:	4606      	mov	r6, r0
 810704e:	4688      	mov	r8, r1
 8107050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8107054:	2700      	movs	r7, #0
 8107056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810705a:	f1b9 0901 	subs.w	r9, r9, #1
 810705e:	d505      	bpl.n	810706c <_fwalk_reent+0x24>
 8107060:	6824      	ldr	r4, [r4, #0]
 8107062:	2c00      	cmp	r4, #0
 8107064:	d1f7      	bne.n	8107056 <_fwalk_reent+0xe>
 8107066:	4638      	mov	r0, r7
 8107068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810706c:	89ab      	ldrh	r3, [r5, #12]
 810706e:	2b01      	cmp	r3, #1
 8107070:	d907      	bls.n	8107082 <_fwalk_reent+0x3a>
 8107072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107076:	3301      	adds	r3, #1
 8107078:	d003      	beq.n	8107082 <_fwalk_reent+0x3a>
 810707a:	4629      	mov	r1, r5
 810707c:	4630      	mov	r0, r6
 810707e:	47c0      	blx	r8
 8107080:	4307      	orrs	r7, r0
 8107082:	3568      	adds	r5, #104	; 0x68
 8107084:	e7e9      	b.n	810705a <_fwalk_reent+0x12>
	...

08107088 <_localeconv_r>:
 8107088:	4800      	ldr	r0, [pc, #0]	; (810708c <_localeconv_r+0x4>)
 810708a:	4770      	bx	lr
 810708c:	1000017c 	.word	0x1000017c

08107090 <__retarget_lock_init_recursive>:
 8107090:	4770      	bx	lr

08107092 <__retarget_lock_acquire_recursive>:
 8107092:	4770      	bx	lr

08107094 <__retarget_lock_release_recursive>:
 8107094:	4770      	bx	lr
	...

08107098 <malloc>:
 8107098:	4b02      	ldr	r3, [pc, #8]	; (81070a4 <malloc+0xc>)
 810709a:	4601      	mov	r1, r0
 810709c:	6818      	ldr	r0, [r3, #0]
 810709e:	f000 bc17 	b.w	81078d0 <_malloc_r>
 81070a2:	bf00      	nop
 81070a4:	10000028 	.word	0x10000028

081070a8 <memcpy>:
 81070a8:	440a      	add	r2, r1
 81070aa:	4291      	cmp	r1, r2
 81070ac:	f100 33ff 	add.w	r3, r0, #4294967295
 81070b0:	d100      	bne.n	81070b4 <memcpy+0xc>
 81070b2:	4770      	bx	lr
 81070b4:	b510      	push	{r4, lr}
 81070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 81070ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 81070be:	4291      	cmp	r1, r2
 81070c0:	d1f9      	bne.n	81070b6 <memcpy+0xe>
 81070c2:	bd10      	pop	{r4, pc}

081070c4 <_Balloc>:
 81070c4:	b570      	push	{r4, r5, r6, lr}
 81070c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81070c8:	4604      	mov	r4, r0
 81070ca:	460d      	mov	r5, r1
 81070cc:	b976      	cbnz	r6, 81070ec <_Balloc+0x28>
 81070ce:	2010      	movs	r0, #16
 81070d0:	f7ff ffe2 	bl	8107098 <malloc>
 81070d4:	4602      	mov	r2, r0
 81070d6:	6260      	str	r0, [r4, #36]	; 0x24
 81070d8:	b920      	cbnz	r0, 81070e4 <_Balloc+0x20>
 81070da:	4b18      	ldr	r3, [pc, #96]	; (810713c <_Balloc+0x78>)
 81070dc:	4818      	ldr	r0, [pc, #96]	; (8107140 <_Balloc+0x7c>)
 81070de:	2166      	movs	r1, #102	; 0x66
 81070e0:	f000 feea 	bl	8107eb8 <__assert_func>
 81070e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81070e8:	6006      	str	r6, [r0, #0]
 81070ea:	60c6      	str	r6, [r0, #12]
 81070ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 81070ee:	68f3      	ldr	r3, [r6, #12]
 81070f0:	b183      	cbz	r3, 8107114 <_Balloc+0x50>
 81070f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81070f4:	68db      	ldr	r3, [r3, #12]
 81070f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81070fa:	b9b8      	cbnz	r0, 810712c <_Balloc+0x68>
 81070fc:	2101      	movs	r1, #1
 81070fe:	fa01 f605 	lsl.w	r6, r1, r5
 8107102:	1d72      	adds	r2, r6, #5
 8107104:	0092      	lsls	r2, r2, #2
 8107106:	4620      	mov	r0, r4
 8107108:	f000 fb60 	bl	81077cc <_calloc_r>
 810710c:	b160      	cbz	r0, 8107128 <_Balloc+0x64>
 810710e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8107112:	e00e      	b.n	8107132 <_Balloc+0x6e>
 8107114:	2221      	movs	r2, #33	; 0x21
 8107116:	2104      	movs	r1, #4
 8107118:	4620      	mov	r0, r4
 810711a:	f000 fb57 	bl	81077cc <_calloc_r>
 810711e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8107120:	60f0      	str	r0, [r6, #12]
 8107122:	68db      	ldr	r3, [r3, #12]
 8107124:	2b00      	cmp	r3, #0
 8107126:	d1e4      	bne.n	81070f2 <_Balloc+0x2e>
 8107128:	2000      	movs	r0, #0
 810712a:	bd70      	pop	{r4, r5, r6, pc}
 810712c:	6802      	ldr	r2, [r0, #0]
 810712e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8107132:	2300      	movs	r3, #0
 8107134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8107138:	e7f7      	b.n	810712a <_Balloc+0x66>
 810713a:	bf00      	nop
 810713c:	081083a1 	.word	0x081083a1
 8107140:	08108484 	.word	0x08108484

08107144 <_Bfree>:
 8107144:	b570      	push	{r4, r5, r6, lr}
 8107146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8107148:	4605      	mov	r5, r0
 810714a:	460c      	mov	r4, r1
 810714c:	b976      	cbnz	r6, 810716c <_Bfree+0x28>
 810714e:	2010      	movs	r0, #16
 8107150:	f7ff ffa2 	bl	8107098 <malloc>
 8107154:	4602      	mov	r2, r0
 8107156:	6268      	str	r0, [r5, #36]	; 0x24
 8107158:	b920      	cbnz	r0, 8107164 <_Bfree+0x20>
 810715a:	4b09      	ldr	r3, [pc, #36]	; (8107180 <_Bfree+0x3c>)
 810715c:	4809      	ldr	r0, [pc, #36]	; (8107184 <_Bfree+0x40>)
 810715e:	218a      	movs	r1, #138	; 0x8a
 8107160:	f000 feaa 	bl	8107eb8 <__assert_func>
 8107164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8107168:	6006      	str	r6, [r0, #0]
 810716a:	60c6      	str	r6, [r0, #12]
 810716c:	b13c      	cbz	r4, 810717e <_Bfree+0x3a>
 810716e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8107170:	6862      	ldr	r2, [r4, #4]
 8107172:	68db      	ldr	r3, [r3, #12]
 8107174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8107178:	6021      	str	r1, [r4, #0]
 810717a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810717e:	bd70      	pop	{r4, r5, r6, pc}
 8107180:	081083a1 	.word	0x081083a1
 8107184:	08108484 	.word	0x08108484

08107188 <__multadd>:
 8107188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810718c:	690d      	ldr	r5, [r1, #16]
 810718e:	4607      	mov	r7, r0
 8107190:	460c      	mov	r4, r1
 8107192:	461e      	mov	r6, r3
 8107194:	f101 0c14 	add.w	ip, r1, #20
 8107198:	2000      	movs	r0, #0
 810719a:	f8dc 3000 	ldr.w	r3, [ip]
 810719e:	b299      	uxth	r1, r3
 81071a0:	fb02 6101 	mla	r1, r2, r1, r6
 81071a4:	0c1e      	lsrs	r6, r3, #16
 81071a6:	0c0b      	lsrs	r3, r1, #16
 81071a8:	fb02 3306 	mla	r3, r2, r6, r3
 81071ac:	b289      	uxth	r1, r1
 81071ae:	3001      	adds	r0, #1
 81071b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 81071b4:	4285      	cmp	r5, r0
 81071b6:	f84c 1b04 	str.w	r1, [ip], #4
 81071ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 81071be:	dcec      	bgt.n	810719a <__multadd+0x12>
 81071c0:	b30e      	cbz	r6, 8107206 <__multadd+0x7e>
 81071c2:	68a3      	ldr	r3, [r4, #8]
 81071c4:	42ab      	cmp	r3, r5
 81071c6:	dc19      	bgt.n	81071fc <__multadd+0x74>
 81071c8:	6861      	ldr	r1, [r4, #4]
 81071ca:	4638      	mov	r0, r7
 81071cc:	3101      	adds	r1, #1
 81071ce:	f7ff ff79 	bl	81070c4 <_Balloc>
 81071d2:	4680      	mov	r8, r0
 81071d4:	b928      	cbnz	r0, 81071e2 <__multadd+0x5a>
 81071d6:	4602      	mov	r2, r0
 81071d8:	4b0c      	ldr	r3, [pc, #48]	; (810720c <__multadd+0x84>)
 81071da:	480d      	ldr	r0, [pc, #52]	; (8107210 <__multadd+0x88>)
 81071dc:	21b5      	movs	r1, #181	; 0xb5
 81071de:	f000 fe6b 	bl	8107eb8 <__assert_func>
 81071e2:	6922      	ldr	r2, [r4, #16]
 81071e4:	3202      	adds	r2, #2
 81071e6:	f104 010c 	add.w	r1, r4, #12
 81071ea:	0092      	lsls	r2, r2, #2
 81071ec:	300c      	adds	r0, #12
 81071ee:	f7ff ff5b 	bl	81070a8 <memcpy>
 81071f2:	4621      	mov	r1, r4
 81071f4:	4638      	mov	r0, r7
 81071f6:	f7ff ffa5 	bl	8107144 <_Bfree>
 81071fa:	4644      	mov	r4, r8
 81071fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8107200:	3501      	adds	r5, #1
 8107202:	615e      	str	r6, [r3, #20]
 8107204:	6125      	str	r5, [r4, #16]
 8107206:	4620      	mov	r0, r4
 8107208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810720c:	08108413 	.word	0x08108413
 8107210:	08108484 	.word	0x08108484

08107214 <__hi0bits>:
 8107214:	0c03      	lsrs	r3, r0, #16
 8107216:	041b      	lsls	r3, r3, #16
 8107218:	b9d3      	cbnz	r3, 8107250 <__hi0bits+0x3c>
 810721a:	0400      	lsls	r0, r0, #16
 810721c:	2310      	movs	r3, #16
 810721e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8107222:	bf04      	itt	eq
 8107224:	0200      	lsleq	r0, r0, #8
 8107226:	3308      	addeq	r3, #8
 8107228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810722c:	bf04      	itt	eq
 810722e:	0100      	lsleq	r0, r0, #4
 8107230:	3304      	addeq	r3, #4
 8107232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8107236:	bf04      	itt	eq
 8107238:	0080      	lsleq	r0, r0, #2
 810723a:	3302      	addeq	r3, #2
 810723c:	2800      	cmp	r0, #0
 810723e:	db05      	blt.n	810724c <__hi0bits+0x38>
 8107240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8107244:	f103 0301 	add.w	r3, r3, #1
 8107248:	bf08      	it	eq
 810724a:	2320      	moveq	r3, #32
 810724c:	4618      	mov	r0, r3
 810724e:	4770      	bx	lr
 8107250:	2300      	movs	r3, #0
 8107252:	e7e4      	b.n	810721e <__hi0bits+0xa>

08107254 <__lo0bits>:
 8107254:	6803      	ldr	r3, [r0, #0]
 8107256:	f013 0207 	ands.w	r2, r3, #7
 810725a:	4601      	mov	r1, r0
 810725c:	d00b      	beq.n	8107276 <__lo0bits+0x22>
 810725e:	07da      	lsls	r2, r3, #31
 8107260:	d423      	bmi.n	81072aa <__lo0bits+0x56>
 8107262:	0798      	lsls	r0, r3, #30
 8107264:	bf49      	itett	mi
 8107266:	085b      	lsrmi	r3, r3, #1
 8107268:	089b      	lsrpl	r3, r3, #2
 810726a:	2001      	movmi	r0, #1
 810726c:	600b      	strmi	r3, [r1, #0]
 810726e:	bf5c      	itt	pl
 8107270:	600b      	strpl	r3, [r1, #0]
 8107272:	2002      	movpl	r0, #2
 8107274:	4770      	bx	lr
 8107276:	b298      	uxth	r0, r3
 8107278:	b9a8      	cbnz	r0, 81072a6 <__lo0bits+0x52>
 810727a:	0c1b      	lsrs	r3, r3, #16
 810727c:	2010      	movs	r0, #16
 810727e:	b2da      	uxtb	r2, r3
 8107280:	b90a      	cbnz	r2, 8107286 <__lo0bits+0x32>
 8107282:	3008      	adds	r0, #8
 8107284:	0a1b      	lsrs	r3, r3, #8
 8107286:	071a      	lsls	r2, r3, #28
 8107288:	bf04      	itt	eq
 810728a:	091b      	lsreq	r3, r3, #4
 810728c:	3004      	addeq	r0, #4
 810728e:	079a      	lsls	r2, r3, #30
 8107290:	bf04      	itt	eq
 8107292:	089b      	lsreq	r3, r3, #2
 8107294:	3002      	addeq	r0, #2
 8107296:	07da      	lsls	r2, r3, #31
 8107298:	d403      	bmi.n	81072a2 <__lo0bits+0x4e>
 810729a:	085b      	lsrs	r3, r3, #1
 810729c:	f100 0001 	add.w	r0, r0, #1
 81072a0:	d005      	beq.n	81072ae <__lo0bits+0x5a>
 81072a2:	600b      	str	r3, [r1, #0]
 81072a4:	4770      	bx	lr
 81072a6:	4610      	mov	r0, r2
 81072a8:	e7e9      	b.n	810727e <__lo0bits+0x2a>
 81072aa:	2000      	movs	r0, #0
 81072ac:	4770      	bx	lr
 81072ae:	2020      	movs	r0, #32
 81072b0:	4770      	bx	lr
	...

081072b4 <__i2b>:
 81072b4:	b510      	push	{r4, lr}
 81072b6:	460c      	mov	r4, r1
 81072b8:	2101      	movs	r1, #1
 81072ba:	f7ff ff03 	bl	81070c4 <_Balloc>
 81072be:	4602      	mov	r2, r0
 81072c0:	b928      	cbnz	r0, 81072ce <__i2b+0x1a>
 81072c2:	4b05      	ldr	r3, [pc, #20]	; (81072d8 <__i2b+0x24>)
 81072c4:	4805      	ldr	r0, [pc, #20]	; (81072dc <__i2b+0x28>)
 81072c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 81072ca:	f000 fdf5 	bl	8107eb8 <__assert_func>
 81072ce:	2301      	movs	r3, #1
 81072d0:	6144      	str	r4, [r0, #20]
 81072d2:	6103      	str	r3, [r0, #16]
 81072d4:	bd10      	pop	{r4, pc}
 81072d6:	bf00      	nop
 81072d8:	08108413 	.word	0x08108413
 81072dc:	08108484 	.word	0x08108484

081072e0 <__multiply>:
 81072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81072e4:	4691      	mov	r9, r2
 81072e6:	690a      	ldr	r2, [r1, #16]
 81072e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 81072ec:	429a      	cmp	r2, r3
 81072ee:	bfb8      	it	lt
 81072f0:	460b      	movlt	r3, r1
 81072f2:	460c      	mov	r4, r1
 81072f4:	bfbc      	itt	lt
 81072f6:	464c      	movlt	r4, r9
 81072f8:	4699      	movlt	r9, r3
 81072fa:	6927      	ldr	r7, [r4, #16]
 81072fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8107300:	68a3      	ldr	r3, [r4, #8]
 8107302:	6861      	ldr	r1, [r4, #4]
 8107304:	eb07 060a 	add.w	r6, r7, sl
 8107308:	42b3      	cmp	r3, r6
 810730a:	b085      	sub	sp, #20
 810730c:	bfb8      	it	lt
 810730e:	3101      	addlt	r1, #1
 8107310:	f7ff fed8 	bl	81070c4 <_Balloc>
 8107314:	b930      	cbnz	r0, 8107324 <__multiply+0x44>
 8107316:	4602      	mov	r2, r0
 8107318:	4b44      	ldr	r3, [pc, #272]	; (810742c <__multiply+0x14c>)
 810731a:	4845      	ldr	r0, [pc, #276]	; (8107430 <__multiply+0x150>)
 810731c:	f240 115d 	movw	r1, #349	; 0x15d
 8107320:	f000 fdca 	bl	8107eb8 <__assert_func>
 8107324:	f100 0514 	add.w	r5, r0, #20
 8107328:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810732c:	462b      	mov	r3, r5
 810732e:	2200      	movs	r2, #0
 8107330:	4543      	cmp	r3, r8
 8107332:	d321      	bcc.n	8107378 <__multiply+0x98>
 8107334:	f104 0314 	add.w	r3, r4, #20
 8107338:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810733c:	f109 0314 	add.w	r3, r9, #20
 8107340:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8107344:	9202      	str	r2, [sp, #8]
 8107346:	1b3a      	subs	r2, r7, r4
 8107348:	3a15      	subs	r2, #21
 810734a:	f022 0203 	bic.w	r2, r2, #3
 810734e:	3204      	adds	r2, #4
 8107350:	f104 0115 	add.w	r1, r4, #21
 8107354:	428f      	cmp	r7, r1
 8107356:	bf38      	it	cc
 8107358:	2204      	movcc	r2, #4
 810735a:	9201      	str	r2, [sp, #4]
 810735c:	9a02      	ldr	r2, [sp, #8]
 810735e:	9303      	str	r3, [sp, #12]
 8107360:	429a      	cmp	r2, r3
 8107362:	d80c      	bhi.n	810737e <__multiply+0x9e>
 8107364:	2e00      	cmp	r6, #0
 8107366:	dd03      	ble.n	8107370 <__multiply+0x90>
 8107368:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810736c:	2b00      	cmp	r3, #0
 810736e:	d05a      	beq.n	8107426 <__multiply+0x146>
 8107370:	6106      	str	r6, [r0, #16]
 8107372:	b005      	add	sp, #20
 8107374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107378:	f843 2b04 	str.w	r2, [r3], #4
 810737c:	e7d8      	b.n	8107330 <__multiply+0x50>
 810737e:	f8b3 a000 	ldrh.w	sl, [r3]
 8107382:	f1ba 0f00 	cmp.w	sl, #0
 8107386:	d024      	beq.n	81073d2 <__multiply+0xf2>
 8107388:	f104 0e14 	add.w	lr, r4, #20
 810738c:	46a9      	mov	r9, r5
 810738e:	f04f 0c00 	mov.w	ip, #0
 8107392:	f85e 2b04 	ldr.w	r2, [lr], #4
 8107396:	f8d9 1000 	ldr.w	r1, [r9]
 810739a:	fa1f fb82 	uxth.w	fp, r2
 810739e:	b289      	uxth	r1, r1
 81073a0:	fb0a 110b 	mla	r1, sl, fp, r1
 81073a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 81073a8:	f8d9 2000 	ldr.w	r2, [r9]
 81073ac:	4461      	add	r1, ip
 81073ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 81073b2:	fb0a c20b 	mla	r2, sl, fp, ip
 81073b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 81073ba:	b289      	uxth	r1, r1
 81073bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 81073c0:	4577      	cmp	r7, lr
 81073c2:	f849 1b04 	str.w	r1, [r9], #4
 81073c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 81073ca:	d8e2      	bhi.n	8107392 <__multiply+0xb2>
 81073cc:	9a01      	ldr	r2, [sp, #4]
 81073ce:	f845 c002 	str.w	ip, [r5, r2]
 81073d2:	9a03      	ldr	r2, [sp, #12]
 81073d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 81073d8:	3304      	adds	r3, #4
 81073da:	f1b9 0f00 	cmp.w	r9, #0
 81073de:	d020      	beq.n	8107422 <__multiply+0x142>
 81073e0:	6829      	ldr	r1, [r5, #0]
 81073e2:	f104 0c14 	add.w	ip, r4, #20
 81073e6:	46ae      	mov	lr, r5
 81073e8:	f04f 0a00 	mov.w	sl, #0
 81073ec:	f8bc b000 	ldrh.w	fp, [ip]
 81073f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 81073f4:	fb09 220b 	mla	r2, r9, fp, r2
 81073f8:	4492      	add	sl, r2
 81073fa:	b289      	uxth	r1, r1
 81073fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8107400:	f84e 1b04 	str.w	r1, [lr], #4
 8107404:	f85c 2b04 	ldr.w	r2, [ip], #4
 8107408:	f8be 1000 	ldrh.w	r1, [lr]
 810740c:	0c12      	lsrs	r2, r2, #16
 810740e:	fb09 1102 	mla	r1, r9, r2, r1
 8107412:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8107416:	4567      	cmp	r7, ip
 8107418:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810741c:	d8e6      	bhi.n	81073ec <__multiply+0x10c>
 810741e:	9a01      	ldr	r2, [sp, #4]
 8107420:	50a9      	str	r1, [r5, r2]
 8107422:	3504      	adds	r5, #4
 8107424:	e79a      	b.n	810735c <__multiply+0x7c>
 8107426:	3e01      	subs	r6, #1
 8107428:	e79c      	b.n	8107364 <__multiply+0x84>
 810742a:	bf00      	nop
 810742c:	08108413 	.word	0x08108413
 8107430:	08108484 	.word	0x08108484

08107434 <__pow5mult>:
 8107434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107438:	4615      	mov	r5, r2
 810743a:	f012 0203 	ands.w	r2, r2, #3
 810743e:	4606      	mov	r6, r0
 8107440:	460f      	mov	r7, r1
 8107442:	d007      	beq.n	8107454 <__pow5mult+0x20>
 8107444:	4c25      	ldr	r4, [pc, #148]	; (81074dc <__pow5mult+0xa8>)
 8107446:	3a01      	subs	r2, #1
 8107448:	2300      	movs	r3, #0
 810744a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810744e:	f7ff fe9b 	bl	8107188 <__multadd>
 8107452:	4607      	mov	r7, r0
 8107454:	10ad      	asrs	r5, r5, #2
 8107456:	d03d      	beq.n	81074d4 <__pow5mult+0xa0>
 8107458:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810745a:	b97c      	cbnz	r4, 810747c <__pow5mult+0x48>
 810745c:	2010      	movs	r0, #16
 810745e:	f7ff fe1b 	bl	8107098 <malloc>
 8107462:	4602      	mov	r2, r0
 8107464:	6270      	str	r0, [r6, #36]	; 0x24
 8107466:	b928      	cbnz	r0, 8107474 <__pow5mult+0x40>
 8107468:	4b1d      	ldr	r3, [pc, #116]	; (81074e0 <__pow5mult+0xac>)
 810746a:	481e      	ldr	r0, [pc, #120]	; (81074e4 <__pow5mult+0xb0>)
 810746c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8107470:	f000 fd22 	bl	8107eb8 <__assert_func>
 8107474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8107478:	6004      	str	r4, [r0, #0]
 810747a:	60c4      	str	r4, [r0, #12]
 810747c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8107480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8107484:	b94c      	cbnz	r4, 810749a <__pow5mult+0x66>
 8107486:	f240 2171 	movw	r1, #625	; 0x271
 810748a:	4630      	mov	r0, r6
 810748c:	f7ff ff12 	bl	81072b4 <__i2b>
 8107490:	2300      	movs	r3, #0
 8107492:	f8c8 0008 	str.w	r0, [r8, #8]
 8107496:	4604      	mov	r4, r0
 8107498:	6003      	str	r3, [r0, #0]
 810749a:	f04f 0900 	mov.w	r9, #0
 810749e:	07eb      	lsls	r3, r5, #31
 81074a0:	d50a      	bpl.n	81074b8 <__pow5mult+0x84>
 81074a2:	4639      	mov	r1, r7
 81074a4:	4622      	mov	r2, r4
 81074a6:	4630      	mov	r0, r6
 81074a8:	f7ff ff1a 	bl	81072e0 <__multiply>
 81074ac:	4639      	mov	r1, r7
 81074ae:	4680      	mov	r8, r0
 81074b0:	4630      	mov	r0, r6
 81074b2:	f7ff fe47 	bl	8107144 <_Bfree>
 81074b6:	4647      	mov	r7, r8
 81074b8:	106d      	asrs	r5, r5, #1
 81074ba:	d00b      	beq.n	81074d4 <__pow5mult+0xa0>
 81074bc:	6820      	ldr	r0, [r4, #0]
 81074be:	b938      	cbnz	r0, 81074d0 <__pow5mult+0x9c>
 81074c0:	4622      	mov	r2, r4
 81074c2:	4621      	mov	r1, r4
 81074c4:	4630      	mov	r0, r6
 81074c6:	f7ff ff0b 	bl	81072e0 <__multiply>
 81074ca:	6020      	str	r0, [r4, #0]
 81074cc:	f8c0 9000 	str.w	r9, [r0]
 81074d0:	4604      	mov	r4, r0
 81074d2:	e7e4      	b.n	810749e <__pow5mult+0x6a>
 81074d4:	4638      	mov	r0, r7
 81074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81074da:	bf00      	nop
 81074dc:	081085d0 	.word	0x081085d0
 81074e0:	081083a1 	.word	0x081083a1
 81074e4:	08108484 	.word	0x08108484

081074e8 <__lshift>:
 81074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81074ec:	460c      	mov	r4, r1
 81074ee:	6849      	ldr	r1, [r1, #4]
 81074f0:	6923      	ldr	r3, [r4, #16]
 81074f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81074f6:	68a3      	ldr	r3, [r4, #8]
 81074f8:	4607      	mov	r7, r0
 81074fa:	4691      	mov	r9, r2
 81074fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8107500:	f108 0601 	add.w	r6, r8, #1
 8107504:	42b3      	cmp	r3, r6
 8107506:	db0b      	blt.n	8107520 <__lshift+0x38>
 8107508:	4638      	mov	r0, r7
 810750a:	f7ff fddb 	bl	81070c4 <_Balloc>
 810750e:	4605      	mov	r5, r0
 8107510:	b948      	cbnz	r0, 8107526 <__lshift+0x3e>
 8107512:	4602      	mov	r2, r0
 8107514:	4b2a      	ldr	r3, [pc, #168]	; (81075c0 <__lshift+0xd8>)
 8107516:	482b      	ldr	r0, [pc, #172]	; (81075c4 <__lshift+0xdc>)
 8107518:	f240 11d9 	movw	r1, #473	; 0x1d9
 810751c:	f000 fccc 	bl	8107eb8 <__assert_func>
 8107520:	3101      	adds	r1, #1
 8107522:	005b      	lsls	r3, r3, #1
 8107524:	e7ee      	b.n	8107504 <__lshift+0x1c>
 8107526:	2300      	movs	r3, #0
 8107528:	f100 0114 	add.w	r1, r0, #20
 810752c:	f100 0210 	add.w	r2, r0, #16
 8107530:	4618      	mov	r0, r3
 8107532:	4553      	cmp	r3, sl
 8107534:	db37      	blt.n	81075a6 <__lshift+0xbe>
 8107536:	6920      	ldr	r0, [r4, #16]
 8107538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810753c:	f104 0314 	add.w	r3, r4, #20
 8107540:	f019 091f 	ands.w	r9, r9, #31
 8107544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8107548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810754c:	d02f      	beq.n	81075ae <__lshift+0xc6>
 810754e:	f1c9 0e20 	rsb	lr, r9, #32
 8107552:	468a      	mov	sl, r1
 8107554:	f04f 0c00 	mov.w	ip, #0
 8107558:	681a      	ldr	r2, [r3, #0]
 810755a:	fa02 f209 	lsl.w	r2, r2, r9
 810755e:	ea42 020c 	orr.w	r2, r2, ip
 8107562:	f84a 2b04 	str.w	r2, [sl], #4
 8107566:	f853 2b04 	ldr.w	r2, [r3], #4
 810756a:	4298      	cmp	r0, r3
 810756c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8107570:	d8f2      	bhi.n	8107558 <__lshift+0x70>
 8107572:	1b03      	subs	r3, r0, r4
 8107574:	3b15      	subs	r3, #21
 8107576:	f023 0303 	bic.w	r3, r3, #3
 810757a:	3304      	adds	r3, #4
 810757c:	f104 0215 	add.w	r2, r4, #21
 8107580:	4290      	cmp	r0, r2
 8107582:	bf38      	it	cc
 8107584:	2304      	movcc	r3, #4
 8107586:	f841 c003 	str.w	ip, [r1, r3]
 810758a:	f1bc 0f00 	cmp.w	ip, #0
 810758e:	d001      	beq.n	8107594 <__lshift+0xac>
 8107590:	f108 0602 	add.w	r6, r8, #2
 8107594:	3e01      	subs	r6, #1
 8107596:	4638      	mov	r0, r7
 8107598:	612e      	str	r6, [r5, #16]
 810759a:	4621      	mov	r1, r4
 810759c:	f7ff fdd2 	bl	8107144 <_Bfree>
 81075a0:	4628      	mov	r0, r5
 81075a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81075a6:	f842 0f04 	str.w	r0, [r2, #4]!
 81075aa:	3301      	adds	r3, #1
 81075ac:	e7c1      	b.n	8107532 <__lshift+0x4a>
 81075ae:	3904      	subs	r1, #4
 81075b0:	f853 2b04 	ldr.w	r2, [r3], #4
 81075b4:	f841 2f04 	str.w	r2, [r1, #4]!
 81075b8:	4298      	cmp	r0, r3
 81075ba:	d8f9      	bhi.n	81075b0 <__lshift+0xc8>
 81075bc:	e7ea      	b.n	8107594 <__lshift+0xac>
 81075be:	bf00      	nop
 81075c0:	08108413 	.word	0x08108413
 81075c4:	08108484 	.word	0x08108484

081075c8 <__mcmp>:
 81075c8:	b530      	push	{r4, r5, lr}
 81075ca:	6902      	ldr	r2, [r0, #16]
 81075cc:	690c      	ldr	r4, [r1, #16]
 81075ce:	1b12      	subs	r2, r2, r4
 81075d0:	d10e      	bne.n	81075f0 <__mcmp+0x28>
 81075d2:	f100 0314 	add.w	r3, r0, #20
 81075d6:	3114      	adds	r1, #20
 81075d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 81075dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 81075e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 81075e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 81075e8:	42a5      	cmp	r5, r4
 81075ea:	d003      	beq.n	81075f4 <__mcmp+0x2c>
 81075ec:	d305      	bcc.n	81075fa <__mcmp+0x32>
 81075ee:	2201      	movs	r2, #1
 81075f0:	4610      	mov	r0, r2
 81075f2:	bd30      	pop	{r4, r5, pc}
 81075f4:	4283      	cmp	r3, r0
 81075f6:	d3f3      	bcc.n	81075e0 <__mcmp+0x18>
 81075f8:	e7fa      	b.n	81075f0 <__mcmp+0x28>
 81075fa:	f04f 32ff 	mov.w	r2, #4294967295
 81075fe:	e7f7      	b.n	81075f0 <__mcmp+0x28>

08107600 <__mdiff>:
 8107600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107604:	460c      	mov	r4, r1
 8107606:	4606      	mov	r6, r0
 8107608:	4611      	mov	r1, r2
 810760a:	4620      	mov	r0, r4
 810760c:	4690      	mov	r8, r2
 810760e:	f7ff ffdb 	bl	81075c8 <__mcmp>
 8107612:	1e05      	subs	r5, r0, #0
 8107614:	d110      	bne.n	8107638 <__mdiff+0x38>
 8107616:	4629      	mov	r1, r5
 8107618:	4630      	mov	r0, r6
 810761a:	f7ff fd53 	bl	81070c4 <_Balloc>
 810761e:	b930      	cbnz	r0, 810762e <__mdiff+0x2e>
 8107620:	4b3a      	ldr	r3, [pc, #232]	; (810770c <__mdiff+0x10c>)
 8107622:	4602      	mov	r2, r0
 8107624:	f240 2132 	movw	r1, #562	; 0x232
 8107628:	4839      	ldr	r0, [pc, #228]	; (8107710 <__mdiff+0x110>)
 810762a:	f000 fc45 	bl	8107eb8 <__assert_func>
 810762e:	2301      	movs	r3, #1
 8107630:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8107634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107638:	bfa4      	itt	ge
 810763a:	4643      	movge	r3, r8
 810763c:	46a0      	movge	r8, r4
 810763e:	4630      	mov	r0, r6
 8107640:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8107644:	bfa6      	itte	ge
 8107646:	461c      	movge	r4, r3
 8107648:	2500      	movge	r5, #0
 810764a:	2501      	movlt	r5, #1
 810764c:	f7ff fd3a 	bl	81070c4 <_Balloc>
 8107650:	b920      	cbnz	r0, 810765c <__mdiff+0x5c>
 8107652:	4b2e      	ldr	r3, [pc, #184]	; (810770c <__mdiff+0x10c>)
 8107654:	4602      	mov	r2, r0
 8107656:	f44f 7110 	mov.w	r1, #576	; 0x240
 810765a:	e7e5      	b.n	8107628 <__mdiff+0x28>
 810765c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8107660:	6926      	ldr	r6, [r4, #16]
 8107662:	60c5      	str	r5, [r0, #12]
 8107664:	f104 0914 	add.w	r9, r4, #20
 8107668:	f108 0514 	add.w	r5, r8, #20
 810766c:	f100 0e14 	add.w	lr, r0, #20
 8107670:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8107674:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8107678:	f108 0210 	add.w	r2, r8, #16
 810767c:	46f2      	mov	sl, lr
 810767e:	2100      	movs	r1, #0
 8107680:	f859 3b04 	ldr.w	r3, [r9], #4
 8107684:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8107688:	fa1f f883 	uxth.w	r8, r3
 810768c:	fa11 f18b 	uxtah	r1, r1, fp
 8107690:	0c1b      	lsrs	r3, r3, #16
 8107692:	eba1 0808 	sub.w	r8, r1, r8
 8107696:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810769a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810769e:	fa1f f888 	uxth.w	r8, r8
 81076a2:	1419      	asrs	r1, r3, #16
 81076a4:	454e      	cmp	r6, r9
 81076a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 81076aa:	f84a 3b04 	str.w	r3, [sl], #4
 81076ae:	d8e7      	bhi.n	8107680 <__mdiff+0x80>
 81076b0:	1b33      	subs	r3, r6, r4
 81076b2:	3b15      	subs	r3, #21
 81076b4:	f023 0303 	bic.w	r3, r3, #3
 81076b8:	3304      	adds	r3, #4
 81076ba:	3415      	adds	r4, #21
 81076bc:	42a6      	cmp	r6, r4
 81076be:	bf38      	it	cc
 81076c0:	2304      	movcc	r3, #4
 81076c2:	441d      	add	r5, r3
 81076c4:	4473      	add	r3, lr
 81076c6:	469e      	mov	lr, r3
 81076c8:	462e      	mov	r6, r5
 81076ca:	4566      	cmp	r6, ip
 81076cc:	d30e      	bcc.n	81076ec <__mdiff+0xec>
 81076ce:	f10c 0203 	add.w	r2, ip, #3
 81076d2:	1b52      	subs	r2, r2, r5
 81076d4:	f022 0203 	bic.w	r2, r2, #3
 81076d8:	3d03      	subs	r5, #3
 81076da:	45ac      	cmp	ip, r5
 81076dc:	bf38      	it	cc
 81076de:	2200      	movcc	r2, #0
 81076e0:	441a      	add	r2, r3
 81076e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 81076e6:	b17b      	cbz	r3, 8107708 <__mdiff+0x108>
 81076e8:	6107      	str	r7, [r0, #16]
 81076ea:	e7a3      	b.n	8107634 <__mdiff+0x34>
 81076ec:	f856 8b04 	ldr.w	r8, [r6], #4
 81076f0:	fa11 f288 	uxtah	r2, r1, r8
 81076f4:	1414      	asrs	r4, r2, #16
 81076f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 81076fa:	b292      	uxth	r2, r2
 81076fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8107700:	f84e 2b04 	str.w	r2, [lr], #4
 8107704:	1421      	asrs	r1, r4, #16
 8107706:	e7e0      	b.n	81076ca <__mdiff+0xca>
 8107708:	3f01      	subs	r7, #1
 810770a:	e7ea      	b.n	81076e2 <__mdiff+0xe2>
 810770c:	08108413 	.word	0x08108413
 8107710:	08108484 	.word	0x08108484

08107714 <__d2b>:
 8107714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8107718:	4689      	mov	r9, r1
 810771a:	2101      	movs	r1, #1
 810771c:	ec57 6b10 	vmov	r6, r7, d0
 8107720:	4690      	mov	r8, r2
 8107722:	f7ff fccf 	bl	81070c4 <_Balloc>
 8107726:	4604      	mov	r4, r0
 8107728:	b930      	cbnz	r0, 8107738 <__d2b+0x24>
 810772a:	4602      	mov	r2, r0
 810772c:	4b25      	ldr	r3, [pc, #148]	; (81077c4 <__d2b+0xb0>)
 810772e:	4826      	ldr	r0, [pc, #152]	; (81077c8 <__d2b+0xb4>)
 8107730:	f240 310a 	movw	r1, #778	; 0x30a
 8107734:	f000 fbc0 	bl	8107eb8 <__assert_func>
 8107738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810773c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8107740:	bb35      	cbnz	r5, 8107790 <__d2b+0x7c>
 8107742:	2e00      	cmp	r6, #0
 8107744:	9301      	str	r3, [sp, #4]
 8107746:	d028      	beq.n	810779a <__d2b+0x86>
 8107748:	4668      	mov	r0, sp
 810774a:	9600      	str	r6, [sp, #0]
 810774c:	f7ff fd82 	bl	8107254 <__lo0bits>
 8107750:	9900      	ldr	r1, [sp, #0]
 8107752:	b300      	cbz	r0, 8107796 <__d2b+0x82>
 8107754:	9a01      	ldr	r2, [sp, #4]
 8107756:	f1c0 0320 	rsb	r3, r0, #32
 810775a:	fa02 f303 	lsl.w	r3, r2, r3
 810775e:	430b      	orrs	r3, r1
 8107760:	40c2      	lsrs	r2, r0
 8107762:	6163      	str	r3, [r4, #20]
 8107764:	9201      	str	r2, [sp, #4]
 8107766:	9b01      	ldr	r3, [sp, #4]
 8107768:	61a3      	str	r3, [r4, #24]
 810776a:	2b00      	cmp	r3, #0
 810776c:	bf14      	ite	ne
 810776e:	2202      	movne	r2, #2
 8107770:	2201      	moveq	r2, #1
 8107772:	6122      	str	r2, [r4, #16]
 8107774:	b1d5      	cbz	r5, 81077ac <__d2b+0x98>
 8107776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810777a:	4405      	add	r5, r0
 810777c:	f8c9 5000 	str.w	r5, [r9]
 8107780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8107784:	f8c8 0000 	str.w	r0, [r8]
 8107788:	4620      	mov	r0, r4
 810778a:	b003      	add	sp, #12
 810778c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8107790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107794:	e7d5      	b.n	8107742 <__d2b+0x2e>
 8107796:	6161      	str	r1, [r4, #20]
 8107798:	e7e5      	b.n	8107766 <__d2b+0x52>
 810779a:	a801      	add	r0, sp, #4
 810779c:	f7ff fd5a 	bl	8107254 <__lo0bits>
 81077a0:	9b01      	ldr	r3, [sp, #4]
 81077a2:	6163      	str	r3, [r4, #20]
 81077a4:	2201      	movs	r2, #1
 81077a6:	6122      	str	r2, [r4, #16]
 81077a8:	3020      	adds	r0, #32
 81077aa:	e7e3      	b.n	8107774 <__d2b+0x60>
 81077ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 81077b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 81077b4:	f8c9 0000 	str.w	r0, [r9]
 81077b8:	6918      	ldr	r0, [r3, #16]
 81077ba:	f7ff fd2b 	bl	8107214 <__hi0bits>
 81077be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 81077c2:	e7df      	b.n	8107784 <__d2b+0x70>
 81077c4:	08108413 	.word	0x08108413
 81077c8:	08108484 	.word	0x08108484

081077cc <_calloc_r>:
 81077cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81077ce:	fba1 2402 	umull	r2, r4, r1, r2
 81077d2:	b94c      	cbnz	r4, 81077e8 <_calloc_r+0x1c>
 81077d4:	4611      	mov	r1, r2
 81077d6:	9201      	str	r2, [sp, #4]
 81077d8:	f000 f87a 	bl	81078d0 <_malloc_r>
 81077dc:	9a01      	ldr	r2, [sp, #4]
 81077de:	4605      	mov	r5, r0
 81077e0:	b930      	cbnz	r0, 81077f0 <_calloc_r+0x24>
 81077e2:	4628      	mov	r0, r5
 81077e4:	b003      	add	sp, #12
 81077e6:	bd30      	pop	{r4, r5, pc}
 81077e8:	220c      	movs	r2, #12
 81077ea:	6002      	str	r2, [r0, #0]
 81077ec:	2500      	movs	r5, #0
 81077ee:	e7f8      	b.n	81077e2 <_calloc_r+0x16>
 81077f0:	4621      	mov	r1, r4
 81077f2:	f7fe f84d 	bl	8105890 <memset>
 81077f6:	e7f4      	b.n	81077e2 <_calloc_r+0x16>

081077f8 <_free_r>:
 81077f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81077fa:	2900      	cmp	r1, #0
 81077fc:	d044      	beq.n	8107888 <_free_r+0x90>
 81077fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107802:	9001      	str	r0, [sp, #4]
 8107804:	2b00      	cmp	r3, #0
 8107806:	f1a1 0404 	sub.w	r4, r1, #4
 810780a:	bfb8      	it	lt
 810780c:	18e4      	addlt	r4, r4, r3
 810780e:	f000 fcdf 	bl	81081d0 <__malloc_lock>
 8107812:	4a1e      	ldr	r2, [pc, #120]	; (810788c <_free_r+0x94>)
 8107814:	9801      	ldr	r0, [sp, #4]
 8107816:	6813      	ldr	r3, [r2, #0]
 8107818:	b933      	cbnz	r3, 8107828 <_free_r+0x30>
 810781a:	6063      	str	r3, [r4, #4]
 810781c:	6014      	str	r4, [r2, #0]
 810781e:	b003      	add	sp, #12
 8107820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8107824:	f000 bcda 	b.w	81081dc <__malloc_unlock>
 8107828:	42a3      	cmp	r3, r4
 810782a:	d908      	bls.n	810783e <_free_r+0x46>
 810782c:	6825      	ldr	r5, [r4, #0]
 810782e:	1961      	adds	r1, r4, r5
 8107830:	428b      	cmp	r3, r1
 8107832:	bf01      	itttt	eq
 8107834:	6819      	ldreq	r1, [r3, #0]
 8107836:	685b      	ldreq	r3, [r3, #4]
 8107838:	1949      	addeq	r1, r1, r5
 810783a:	6021      	streq	r1, [r4, #0]
 810783c:	e7ed      	b.n	810781a <_free_r+0x22>
 810783e:	461a      	mov	r2, r3
 8107840:	685b      	ldr	r3, [r3, #4]
 8107842:	b10b      	cbz	r3, 8107848 <_free_r+0x50>
 8107844:	42a3      	cmp	r3, r4
 8107846:	d9fa      	bls.n	810783e <_free_r+0x46>
 8107848:	6811      	ldr	r1, [r2, #0]
 810784a:	1855      	adds	r5, r2, r1
 810784c:	42a5      	cmp	r5, r4
 810784e:	d10b      	bne.n	8107868 <_free_r+0x70>
 8107850:	6824      	ldr	r4, [r4, #0]
 8107852:	4421      	add	r1, r4
 8107854:	1854      	adds	r4, r2, r1
 8107856:	42a3      	cmp	r3, r4
 8107858:	6011      	str	r1, [r2, #0]
 810785a:	d1e0      	bne.n	810781e <_free_r+0x26>
 810785c:	681c      	ldr	r4, [r3, #0]
 810785e:	685b      	ldr	r3, [r3, #4]
 8107860:	6053      	str	r3, [r2, #4]
 8107862:	4421      	add	r1, r4
 8107864:	6011      	str	r1, [r2, #0]
 8107866:	e7da      	b.n	810781e <_free_r+0x26>
 8107868:	d902      	bls.n	8107870 <_free_r+0x78>
 810786a:	230c      	movs	r3, #12
 810786c:	6003      	str	r3, [r0, #0]
 810786e:	e7d6      	b.n	810781e <_free_r+0x26>
 8107870:	6825      	ldr	r5, [r4, #0]
 8107872:	1961      	adds	r1, r4, r5
 8107874:	428b      	cmp	r3, r1
 8107876:	bf04      	itt	eq
 8107878:	6819      	ldreq	r1, [r3, #0]
 810787a:	685b      	ldreq	r3, [r3, #4]
 810787c:	6063      	str	r3, [r4, #4]
 810787e:	bf04      	itt	eq
 8107880:	1949      	addeq	r1, r1, r5
 8107882:	6021      	streq	r1, [r4, #0]
 8107884:	6054      	str	r4, [r2, #4]
 8107886:	e7ca      	b.n	810781e <_free_r+0x26>
 8107888:	b003      	add	sp, #12
 810788a:	bd30      	pop	{r4, r5, pc}
 810788c:	10000378 	.word	0x10000378

08107890 <sbrk_aligned>:
 8107890:	b570      	push	{r4, r5, r6, lr}
 8107892:	4e0e      	ldr	r6, [pc, #56]	; (81078cc <sbrk_aligned+0x3c>)
 8107894:	460c      	mov	r4, r1
 8107896:	6831      	ldr	r1, [r6, #0]
 8107898:	4605      	mov	r5, r0
 810789a:	b911      	cbnz	r1, 81078a2 <sbrk_aligned+0x12>
 810789c:	f000 f9e6 	bl	8107c6c <_sbrk_r>
 81078a0:	6030      	str	r0, [r6, #0]
 81078a2:	4621      	mov	r1, r4
 81078a4:	4628      	mov	r0, r5
 81078a6:	f000 f9e1 	bl	8107c6c <_sbrk_r>
 81078aa:	1c43      	adds	r3, r0, #1
 81078ac:	d00a      	beq.n	81078c4 <sbrk_aligned+0x34>
 81078ae:	1cc4      	adds	r4, r0, #3
 81078b0:	f024 0403 	bic.w	r4, r4, #3
 81078b4:	42a0      	cmp	r0, r4
 81078b6:	d007      	beq.n	81078c8 <sbrk_aligned+0x38>
 81078b8:	1a21      	subs	r1, r4, r0
 81078ba:	4628      	mov	r0, r5
 81078bc:	f000 f9d6 	bl	8107c6c <_sbrk_r>
 81078c0:	3001      	adds	r0, #1
 81078c2:	d101      	bne.n	81078c8 <sbrk_aligned+0x38>
 81078c4:	f04f 34ff 	mov.w	r4, #4294967295
 81078c8:	4620      	mov	r0, r4
 81078ca:	bd70      	pop	{r4, r5, r6, pc}
 81078cc:	1000037c 	.word	0x1000037c

081078d0 <_malloc_r>:
 81078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81078d4:	1ccd      	adds	r5, r1, #3
 81078d6:	f025 0503 	bic.w	r5, r5, #3
 81078da:	3508      	adds	r5, #8
 81078dc:	2d0c      	cmp	r5, #12
 81078de:	bf38      	it	cc
 81078e0:	250c      	movcc	r5, #12
 81078e2:	2d00      	cmp	r5, #0
 81078e4:	4607      	mov	r7, r0
 81078e6:	db01      	blt.n	81078ec <_malloc_r+0x1c>
 81078e8:	42a9      	cmp	r1, r5
 81078ea:	d905      	bls.n	81078f8 <_malloc_r+0x28>
 81078ec:	230c      	movs	r3, #12
 81078ee:	603b      	str	r3, [r7, #0]
 81078f0:	2600      	movs	r6, #0
 81078f2:	4630      	mov	r0, r6
 81078f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81078f8:	4e2e      	ldr	r6, [pc, #184]	; (81079b4 <_malloc_r+0xe4>)
 81078fa:	f000 fc69 	bl	81081d0 <__malloc_lock>
 81078fe:	6833      	ldr	r3, [r6, #0]
 8107900:	461c      	mov	r4, r3
 8107902:	bb34      	cbnz	r4, 8107952 <_malloc_r+0x82>
 8107904:	4629      	mov	r1, r5
 8107906:	4638      	mov	r0, r7
 8107908:	f7ff ffc2 	bl	8107890 <sbrk_aligned>
 810790c:	1c43      	adds	r3, r0, #1
 810790e:	4604      	mov	r4, r0
 8107910:	d14d      	bne.n	81079ae <_malloc_r+0xde>
 8107912:	6834      	ldr	r4, [r6, #0]
 8107914:	4626      	mov	r6, r4
 8107916:	2e00      	cmp	r6, #0
 8107918:	d140      	bne.n	810799c <_malloc_r+0xcc>
 810791a:	6823      	ldr	r3, [r4, #0]
 810791c:	4631      	mov	r1, r6
 810791e:	4638      	mov	r0, r7
 8107920:	eb04 0803 	add.w	r8, r4, r3
 8107924:	f000 f9a2 	bl	8107c6c <_sbrk_r>
 8107928:	4580      	cmp	r8, r0
 810792a:	d13a      	bne.n	81079a2 <_malloc_r+0xd2>
 810792c:	6821      	ldr	r1, [r4, #0]
 810792e:	3503      	adds	r5, #3
 8107930:	1a6d      	subs	r5, r5, r1
 8107932:	f025 0503 	bic.w	r5, r5, #3
 8107936:	3508      	adds	r5, #8
 8107938:	2d0c      	cmp	r5, #12
 810793a:	bf38      	it	cc
 810793c:	250c      	movcc	r5, #12
 810793e:	4629      	mov	r1, r5
 8107940:	4638      	mov	r0, r7
 8107942:	f7ff ffa5 	bl	8107890 <sbrk_aligned>
 8107946:	3001      	adds	r0, #1
 8107948:	d02b      	beq.n	81079a2 <_malloc_r+0xd2>
 810794a:	6823      	ldr	r3, [r4, #0]
 810794c:	442b      	add	r3, r5
 810794e:	6023      	str	r3, [r4, #0]
 8107950:	e00e      	b.n	8107970 <_malloc_r+0xa0>
 8107952:	6822      	ldr	r2, [r4, #0]
 8107954:	1b52      	subs	r2, r2, r5
 8107956:	d41e      	bmi.n	8107996 <_malloc_r+0xc6>
 8107958:	2a0b      	cmp	r2, #11
 810795a:	d916      	bls.n	810798a <_malloc_r+0xba>
 810795c:	1961      	adds	r1, r4, r5
 810795e:	42a3      	cmp	r3, r4
 8107960:	6025      	str	r5, [r4, #0]
 8107962:	bf18      	it	ne
 8107964:	6059      	strne	r1, [r3, #4]
 8107966:	6863      	ldr	r3, [r4, #4]
 8107968:	bf08      	it	eq
 810796a:	6031      	streq	r1, [r6, #0]
 810796c:	5162      	str	r2, [r4, r5]
 810796e:	604b      	str	r3, [r1, #4]
 8107970:	4638      	mov	r0, r7
 8107972:	f104 060b 	add.w	r6, r4, #11
 8107976:	f000 fc31 	bl	81081dc <__malloc_unlock>
 810797a:	f026 0607 	bic.w	r6, r6, #7
 810797e:	1d23      	adds	r3, r4, #4
 8107980:	1af2      	subs	r2, r6, r3
 8107982:	d0b6      	beq.n	81078f2 <_malloc_r+0x22>
 8107984:	1b9b      	subs	r3, r3, r6
 8107986:	50a3      	str	r3, [r4, r2]
 8107988:	e7b3      	b.n	81078f2 <_malloc_r+0x22>
 810798a:	6862      	ldr	r2, [r4, #4]
 810798c:	42a3      	cmp	r3, r4
 810798e:	bf0c      	ite	eq
 8107990:	6032      	streq	r2, [r6, #0]
 8107992:	605a      	strne	r2, [r3, #4]
 8107994:	e7ec      	b.n	8107970 <_malloc_r+0xa0>
 8107996:	4623      	mov	r3, r4
 8107998:	6864      	ldr	r4, [r4, #4]
 810799a:	e7b2      	b.n	8107902 <_malloc_r+0x32>
 810799c:	4634      	mov	r4, r6
 810799e:	6876      	ldr	r6, [r6, #4]
 81079a0:	e7b9      	b.n	8107916 <_malloc_r+0x46>
 81079a2:	230c      	movs	r3, #12
 81079a4:	603b      	str	r3, [r7, #0]
 81079a6:	4638      	mov	r0, r7
 81079a8:	f000 fc18 	bl	81081dc <__malloc_unlock>
 81079ac:	e7a1      	b.n	81078f2 <_malloc_r+0x22>
 81079ae:	6025      	str	r5, [r4, #0]
 81079b0:	e7de      	b.n	8107970 <_malloc_r+0xa0>
 81079b2:	bf00      	nop
 81079b4:	10000378 	.word	0x10000378

081079b8 <__sfputc_r>:
 81079b8:	6893      	ldr	r3, [r2, #8]
 81079ba:	3b01      	subs	r3, #1
 81079bc:	2b00      	cmp	r3, #0
 81079be:	b410      	push	{r4}
 81079c0:	6093      	str	r3, [r2, #8]
 81079c2:	da08      	bge.n	81079d6 <__sfputc_r+0x1e>
 81079c4:	6994      	ldr	r4, [r2, #24]
 81079c6:	42a3      	cmp	r3, r4
 81079c8:	db01      	blt.n	81079ce <__sfputc_r+0x16>
 81079ca:	290a      	cmp	r1, #10
 81079cc:	d103      	bne.n	81079d6 <__sfputc_r+0x1e>
 81079ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 81079d2:	f000 b99f 	b.w	8107d14 <__swbuf_r>
 81079d6:	6813      	ldr	r3, [r2, #0]
 81079d8:	1c58      	adds	r0, r3, #1
 81079da:	6010      	str	r0, [r2, #0]
 81079dc:	7019      	strb	r1, [r3, #0]
 81079de:	4608      	mov	r0, r1
 81079e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 81079e4:	4770      	bx	lr

081079e6 <__sfputs_r>:
 81079e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81079e8:	4606      	mov	r6, r0
 81079ea:	460f      	mov	r7, r1
 81079ec:	4614      	mov	r4, r2
 81079ee:	18d5      	adds	r5, r2, r3
 81079f0:	42ac      	cmp	r4, r5
 81079f2:	d101      	bne.n	81079f8 <__sfputs_r+0x12>
 81079f4:	2000      	movs	r0, #0
 81079f6:	e007      	b.n	8107a08 <__sfputs_r+0x22>
 81079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81079fc:	463a      	mov	r2, r7
 81079fe:	4630      	mov	r0, r6
 8107a00:	f7ff ffda 	bl	81079b8 <__sfputc_r>
 8107a04:	1c43      	adds	r3, r0, #1
 8107a06:	d1f3      	bne.n	81079f0 <__sfputs_r+0xa>
 8107a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08107a0c <_vfiprintf_r>:
 8107a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107a10:	460d      	mov	r5, r1
 8107a12:	b09d      	sub	sp, #116	; 0x74
 8107a14:	4614      	mov	r4, r2
 8107a16:	4698      	mov	r8, r3
 8107a18:	4606      	mov	r6, r0
 8107a1a:	b118      	cbz	r0, 8107a24 <_vfiprintf_r+0x18>
 8107a1c:	6983      	ldr	r3, [r0, #24]
 8107a1e:	b90b      	cbnz	r3, 8107a24 <_vfiprintf_r+0x18>
 8107a20:	f7ff fa94 	bl	8106f4c <__sinit>
 8107a24:	4b89      	ldr	r3, [pc, #548]	; (8107c4c <_vfiprintf_r+0x240>)
 8107a26:	429d      	cmp	r5, r3
 8107a28:	d11b      	bne.n	8107a62 <_vfiprintf_r+0x56>
 8107a2a:	6875      	ldr	r5, [r6, #4]
 8107a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107a2e:	07d9      	lsls	r1, r3, #31
 8107a30:	d405      	bmi.n	8107a3e <_vfiprintf_r+0x32>
 8107a32:	89ab      	ldrh	r3, [r5, #12]
 8107a34:	059a      	lsls	r2, r3, #22
 8107a36:	d402      	bmi.n	8107a3e <_vfiprintf_r+0x32>
 8107a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107a3a:	f7ff fb2a 	bl	8107092 <__retarget_lock_acquire_recursive>
 8107a3e:	89ab      	ldrh	r3, [r5, #12]
 8107a40:	071b      	lsls	r3, r3, #28
 8107a42:	d501      	bpl.n	8107a48 <_vfiprintf_r+0x3c>
 8107a44:	692b      	ldr	r3, [r5, #16]
 8107a46:	b9eb      	cbnz	r3, 8107a84 <_vfiprintf_r+0x78>
 8107a48:	4629      	mov	r1, r5
 8107a4a:	4630      	mov	r0, r6
 8107a4c:	f000 f9c6 	bl	8107ddc <__swsetup_r>
 8107a50:	b1c0      	cbz	r0, 8107a84 <_vfiprintf_r+0x78>
 8107a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107a54:	07dc      	lsls	r4, r3, #31
 8107a56:	d50e      	bpl.n	8107a76 <_vfiprintf_r+0x6a>
 8107a58:	f04f 30ff 	mov.w	r0, #4294967295
 8107a5c:	b01d      	add	sp, #116	; 0x74
 8107a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107a62:	4b7b      	ldr	r3, [pc, #492]	; (8107c50 <_vfiprintf_r+0x244>)
 8107a64:	429d      	cmp	r5, r3
 8107a66:	d101      	bne.n	8107a6c <_vfiprintf_r+0x60>
 8107a68:	68b5      	ldr	r5, [r6, #8]
 8107a6a:	e7df      	b.n	8107a2c <_vfiprintf_r+0x20>
 8107a6c:	4b79      	ldr	r3, [pc, #484]	; (8107c54 <_vfiprintf_r+0x248>)
 8107a6e:	429d      	cmp	r5, r3
 8107a70:	bf08      	it	eq
 8107a72:	68f5      	ldreq	r5, [r6, #12]
 8107a74:	e7da      	b.n	8107a2c <_vfiprintf_r+0x20>
 8107a76:	89ab      	ldrh	r3, [r5, #12]
 8107a78:	0598      	lsls	r0, r3, #22
 8107a7a:	d4ed      	bmi.n	8107a58 <_vfiprintf_r+0x4c>
 8107a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107a7e:	f7ff fb09 	bl	8107094 <__retarget_lock_release_recursive>
 8107a82:	e7e9      	b.n	8107a58 <_vfiprintf_r+0x4c>
 8107a84:	2300      	movs	r3, #0
 8107a86:	9309      	str	r3, [sp, #36]	; 0x24
 8107a88:	2320      	movs	r3, #32
 8107a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8107a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8107a92:	2330      	movs	r3, #48	; 0x30
 8107a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8107c58 <_vfiprintf_r+0x24c>
 8107a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8107a9c:	f04f 0901 	mov.w	r9, #1
 8107aa0:	4623      	mov	r3, r4
 8107aa2:	469a      	mov	sl, r3
 8107aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107aa8:	b10a      	cbz	r2, 8107aae <_vfiprintf_r+0xa2>
 8107aaa:	2a25      	cmp	r2, #37	; 0x25
 8107aac:	d1f9      	bne.n	8107aa2 <_vfiprintf_r+0x96>
 8107aae:	ebba 0b04 	subs.w	fp, sl, r4
 8107ab2:	d00b      	beq.n	8107acc <_vfiprintf_r+0xc0>
 8107ab4:	465b      	mov	r3, fp
 8107ab6:	4622      	mov	r2, r4
 8107ab8:	4629      	mov	r1, r5
 8107aba:	4630      	mov	r0, r6
 8107abc:	f7ff ff93 	bl	81079e6 <__sfputs_r>
 8107ac0:	3001      	adds	r0, #1
 8107ac2:	f000 80aa 	beq.w	8107c1a <_vfiprintf_r+0x20e>
 8107ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8107ac8:	445a      	add	r2, fp
 8107aca:	9209      	str	r2, [sp, #36]	; 0x24
 8107acc:	f89a 3000 	ldrb.w	r3, [sl]
 8107ad0:	2b00      	cmp	r3, #0
 8107ad2:	f000 80a2 	beq.w	8107c1a <_vfiprintf_r+0x20e>
 8107ad6:	2300      	movs	r3, #0
 8107ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8107adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8107ae0:	f10a 0a01 	add.w	sl, sl, #1
 8107ae4:	9304      	str	r3, [sp, #16]
 8107ae6:	9307      	str	r3, [sp, #28]
 8107ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8107aec:	931a      	str	r3, [sp, #104]	; 0x68
 8107aee:	4654      	mov	r4, sl
 8107af0:	2205      	movs	r2, #5
 8107af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107af6:	4858      	ldr	r0, [pc, #352]	; (8107c58 <_vfiprintf_r+0x24c>)
 8107af8:	f7f8 fbfa 	bl	81002f0 <memchr>
 8107afc:	9a04      	ldr	r2, [sp, #16]
 8107afe:	b9d8      	cbnz	r0, 8107b38 <_vfiprintf_r+0x12c>
 8107b00:	06d1      	lsls	r1, r2, #27
 8107b02:	bf44      	itt	mi
 8107b04:	2320      	movmi	r3, #32
 8107b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107b0a:	0713      	lsls	r3, r2, #28
 8107b0c:	bf44      	itt	mi
 8107b0e:	232b      	movmi	r3, #43	; 0x2b
 8107b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107b14:	f89a 3000 	ldrb.w	r3, [sl]
 8107b18:	2b2a      	cmp	r3, #42	; 0x2a
 8107b1a:	d015      	beq.n	8107b48 <_vfiprintf_r+0x13c>
 8107b1c:	9a07      	ldr	r2, [sp, #28]
 8107b1e:	4654      	mov	r4, sl
 8107b20:	2000      	movs	r0, #0
 8107b22:	f04f 0c0a 	mov.w	ip, #10
 8107b26:	4621      	mov	r1, r4
 8107b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107b2c:	3b30      	subs	r3, #48	; 0x30
 8107b2e:	2b09      	cmp	r3, #9
 8107b30:	d94e      	bls.n	8107bd0 <_vfiprintf_r+0x1c4>
 8107b32:	b1b0      	cbz	r0, 8107b62 <_vfiprintf_r+0x156>
 8107b34:	9207      	str	r2, [sp, #28]
 8107b36:	e014      	b.n	8107b62 <_vfiprintf_r+0x156>
 8107b38:	eba0 0308 	sub.w	r3, r0, r8
 8107b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8107b40:	4313      	orrs	r3, r2
 8107b42:	9304      	str	r3, [sp, #16]
 8107b44:	46a2      	mov	sl, r4
 8107b46:	e7d2      	b.n	8107aee <_vfiprintf_r+0xe2>
 8107b48:	9b03      	ldr	r3, [sp, #12]
 8107b4a:	1d19      	adds	r1, r3, #4
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	9103      	str	r1, [sp, #12]
 8107b50:	2b00      	cmp	r3, #0
 8107b52:	bfbb      	ittet	lt
 8107b54:	425b      	neglt	r3, r3
 8107b56:	f042 0202 	orrlt.w	r2, r2, #2
 8107b5a:	9307      	strge	r3, [sp, #28]
 8107b5c:	9307      	strlt	r3, [sp, #28]
 8107b5e:	bfb8      	it	lt
 8107b60:	9204      	strlt	r2, [sp, #16]
 8107b62:	7823      	ldrb	r3, [r4, #0]
 8107b64:	2b2e      	cmp	r3, #46	; 0x2e
 8107b66:	d10c      	bne.n	8107b82 <_vfiprintf_r+0x176>
 8107b68:	7863      	ldrb	r3, [r4, #1]
 8107b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8107b6c:	d135      	bne.n	8107bda <_vfiprintf_r+0x1ce>
 8107b6e:	9b03      	ldr	r3, [sp, #12]
 8107b70:	1d1a      	adds	r2, r3, #4
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	9203      	str	r2, [sp, #12]
 8107b76:	2b00      	cmp	r3, #0
 8107b78:	bfb8      	it	lt
 8107b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8107b7e:	3402      	adds	r4, #2
 8107b80:	9305      	str	r3, [sp, #20]
 8107b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8107c68 <_vfiprintf_r+0x25c>
 8107b86:	7821      	ldrb	r1, [r4, #0]
 8107b88:	2203      	movs	r2, #3
 8107b8a:	4650      	mov	r0, sl
 8107b8c:	f7f8 fbb0 	bl	81002f0 <memchr>
 8107b90:	b140      	cbz	r0, 8107ba4 <_vfiprintf_r+0x198>
 8107b92:	2340      	movs	r3, #64	; 0x40
 8107b94:	eba0 000a 	sub.w	r0, r0, sl
 8107b98:	fa03 f000 	lsl.w	r0, r3, r0
 8107b9c:	9b04      	ldr	r3, [sp, #16]
 8107b9e:	4303      	orrs	r3, r0
 8107ba0:	3401      	adds	r4, #1
 8107ba2:	9304      	str	r3, [sp, #16]
 8107ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107ba8:	482c      	ldr	r0, [pc, #176]	; (8107c5c <_vfiprintf_r+0x250>)
 8107baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8107bae:	2206      	movs	r2, #6
 8107bb0:	f7f8 fb9e 	bl	81002f0 <memchr>
 8107bb4:	2800      	cmp	r0, #0
 8107bb6:	d03f      	beq.n	8107c38 <_vfiprintf_r+0x22c>
 8107bb8:	4b29      	ldr	r3, [pc, #164]	; (8107c60 <_vfiprintf_r+0x254>)
 8107bba:	bb1b      	cbnz	r3, 8107c04 <_vfiprintf_r+0x1f8>
 8107bbc:	9b03      	ldr	r3, [sp, #12]
 8107bbe:	3307      	adds	r3, #7
 8107bc0:	f023 0307 	bic.w	r3, r3, #7
 8107bc4:	3308      	adds	r3, #8
 8107bc6:	9303      	str	r3, [sp, #12]
 8107bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107bca:	443b      	add	r3, r7
 8107bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8107bce:	e767      	b.n	8107aa0 <_vfiprintf_r+0x94>
 8107bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8107bd4:	460c      	mov	r4, r1
 8107bd6:	2001      	movs	r0, #1
 8107bd8:	e7a5      	b.n	8107b26 <_vfiprintf_r+0x11a>
 8107bda:	2300      	movs	r3, #0
 8107bdc:	3401      	adds	r4, #1
 8107bde:	9305      	str	r3, [sp, #20]
 8107be0:	4619      	mov	r1, r3
 8107be2:	f04f 0c0a 	mov.w	ip, #10
 8107be6:	4620      	mov	r0, r4
 8107be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107bec:	3a30      	subs	r2, #48	; 0x30
 8107bee:	2a09      	cmp	r2, #9
 8107bf0:	d903      	bls.n	8107bfa <_vfiprintf_r+0x1ee>
 8107bf2:	2b00      	cmp	r3, #0
 8107bf4:	d0c5      	beq.n	8107b82 <_vfiprintf_r+0x176>
 8107bf6:	9105      	str	r1, [sp, #20]
 8107bf8:	e7c3      	b.n	8107b82 <_vfiprintf_r+0x176>
 8107bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8107bfe:	4604      	mov	r4, r0
 8107c00:	2301      	movs	r3, #1
 8107c02:	e7f0      	b.n	8107be6 <_vfiprintf_r+0x1da>
 8107c04:	ab03      	add	r3, sp, #12
 8107c06:	9300      	str	r3, [sp, #0]
 8107c08:	462a      	mov	r2, r5
 8107c0a:	4b16      	ldr	r3, [pc, #88]	; (8107c64 <_vfiprintf_r+0x258>)
 8107c0c:	a904      	add	r1, sp, #16
 8107c0e:	4630      	mov	r0, r6
 8107c10:	f7fd fee6 	bl	81059e0 <_printf_float>
 8107c14:	4607      	mov	r7, r0
 8107c16:	1c78      	adds	r0, r7, #1
 8107c18:	d1d6      	bne.n	8107bc8 <_vfiprintf_r+0x1bc>
 8107c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107c1c:	07d9      	lsls	r1, r3, #31
 8107c1e:	d405      	bmi.n	8107c2c <_vfiprintf_r+0x220>
 8107c20:	89ab      	ldrh	r3, [r5, #12]
 8107c22:	059a      	lsls	r2, r3, #22
 8107c24:	d402      	bmi.n	8107c2c <_vfiprintf_r+0x220>
 8107c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107c28:	f7ff fa34 	bl	8107094 <__retarget_lock_release_recursive>
 8107c2c:	89ab      	ldrh	r3, [r5, #12]
 8107c2e:	065b      	lsls	r3, r3, #25
 8107c30:	f53f af12 	bmi.w	8107a58 <_vfiprintf_r+0x4c>
 8107c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8107c36:	e711      	b.n	8107a5c <_vfiprintf_r+0x50>
 8107c38:	ab03      	add	r3, sp, #12
 8107c3a:	9300      	str	r3, [sp, #0]
 8107c3c:	462a      	mov	r2, r5
 8107c3e:	4b09      	ldr	r3, [pc, #36]	; (8107c64 <_vfiprintf_r+0x258>)
 8107c40:	a904      	add	r1, sp, #16
 8107c42:	4630      	mov	r0, r6
 8107c44:	f7fe f970 	bl	8105f28 <_printf_i>
 8107c48:	e7e4      	b.n	8107c14 <_vfiprintf_r+0x208>
 8107c4a:	bf00      	nop
 8107c4c:	08108444 	.word	0x08108444
 8107c50:	08108464 	.word	0x08108464
 8107c54:	08108424 	.word	0x08108424
 8107c58:	081085dc 	.word	0x081085dc
 8107c5c:	081085e6 	.word	0x081085e6
 8107c60:	081059e1 	.word	0x081059e1
 8107c64:	081079e7 	.word	0x081079e7
 8107c68:	081085e2 	.word	0x081085e2

08107c6c <_sbrk_r>:
 8107c6c:	b538      	push	{r3, r4, r5, lr}
 8107c6e:	4d06      	ldr	r5, [pc, #24]	; (8107c88 <_sbrk_r+0x1c>)
 8107c70:	2300      	movs	r3, #0
 8107c72:	4604      	mov	r4, r0
 8107c74:	4608      	mov	r0, r1
 8107c76:	602b      	str	r3, [r5, #0]
 8107c78:	f7f9 fe3e 	bl	81018f8 <_sbrk>
 8107c7c:	1c43      	adds	r3, r0, #1
 8107c7e:	d102      	bne.n	8107c86 <_sbrk_r+0x1a>
 8107c80:	682b      	ldr	r3, [r5, #0]
 8107c82:	b103      	cbz	r3, 8107c86 <_sbrk_r+0x1a>
 8107c84:	6023      	str	r3, [r4, #0]
 8107c86:	bd38      	pop	{r3, r4, r5, pc}
 8107c88:	10000380 	.word	0x10000380

08107c8c <__sread>:
 8107c8c:	b510      	push	{r4, lr}
 8107c8e:	460c      	mov	r4, r1
 8107c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c94:	f000 faa8 	bl	81081e8 <_read_r>
 8107c98:	2800      	cmp	r0, #0
 8107c9a:	bfab      	itete	ge
 8107c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8107c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8107ca0:	181b      	addge	r3, r3, r0
 8107ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8107ca6:	bfac      	ite	ge
 8107ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8107caa:	81a3      	strhlt	r3, [r4, #12]
 8107cac:	bd10      	pop	{r4, pc}

08107cae <__swrite>:
 8107cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107cb2:	461f      	mov	r7, r3
 8107cb4:	898b      	ldrh	r3, [r1, #12]
 8107cb6:	05db      	lsls	r3, r3, #23
 8107cb8:	4605      	mov	r5, r0
 8107cba:	460c      	mov	r4, r1
 8107cbc:	4616      	mov	r6, r2
 8107cbe:	d505      	bpl.n	8107ccc <__swrite+0x1e>
 8107cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107cc4:	2302      	movs	r3, #2
 8107cc6:	2200      	movs	r2, #0
 8107cc8:	f000 f9f8 	bl	81080bc <_lseek_r>
 8107ccc:	89a3      	ldrh	r3, [r4, #12]
 8107cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107cd6:	81a3      	strh	r3, [r4, #12]
 8107cd8:	4632      	mov	r2, r6
 8107cda:	463b      	mov	r3, r7
 8107cdc:	4628      	mov	r0, r5
 8107cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107ce2:	f000 b869 	b.w	8107db8 <_write_r>

08107ce6 <__sseek>:
 8107ce6:	b510      	push	{r4, lr}
 8107ce8:	460c      	mov	r4, r1
 8107cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107cee:	f000 f9e5 	bl	81080bc <_lseek_r>
 8107cf2:	1c43      	adds	r3, r0, #1
 8107cf4:	89a3      	ldrh	r3, [r4, #12]
 8107cf6:	bf15      	itete	ne
 8107cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8107cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8107cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8107d02:	81a3      	strheq	r3, [r4, #12]
 8107d04:	bf18      	it	ne
 8107d06:	81a3      	strhne	r3, [r4, #12]
 8107d08:	bd10      	pop	{r4, pc}

08107d0a <__sclose>:
 8107d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107d0e:	f000 b8f1 	b.w	8107ef4 <_close_r>
	...

08107d14 <__swbuf_r>:
 8107d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107d16:	460e      	mov	r6, r1
 8107d18:	4614      	mov	r4, r2
 8107d1a:	4605      	mov	r5, r0
 8107d1c:	b118      	cbz	r0, 8107d26 <__swbuf_r+0x12>
 8107d1e:	6983      	ldr	r3, [r0, #24]
 8107d20:	b90b      	cbnz	r3, 8107d26 <__swbuf_r+0x12>
 8107d22:	f7ff f913 	bl	8106f4c <__sinit>
 8107d26:	4b21      	ldr	r3, [pc, #132]	; (8107dac <__swbuf_r+0x98>)
 8107d28:	429c      	cmp	r4, r3
 8107d2a:	d12b      	bne.n	8107d84 <__swbuf_r+0x70>
 8107d2c:	686c      	ldr	r4, [r5, #4]
 8107d2e:	69a3      	ldr	r3, [r4, #24]
 8107d30:	60a3      	str	r3, [r4, #8]
 8107d32:	89a3      	ldrh	r3, [r4, #12]
 8107d34:	071a      	lsls	r2, r3, #28
 8107d36:	d52f      	bpl.n	8107d98 <__swbuf_r+0x84>
 8107d38:	6923      	ldr	r3, [r4, #16]
 8107d3a:	b36b      	cbz	r3, 8107d98 <__swbuf_r+0x84>
 8107d3c:	6923      	ldr	r3, [r4, #16]
 8107d3e:	6820      	ldr	r0, [r4, #0]
 8107d40:	1ac0      	subs	r0, r0, r3
 8107d42:	6963      	ldr	r3, [r4, #20]
 8107d44:	b2f6      	uxtb	r6, r6
 8107d46:	4283      	cmp	r3, r0
 8107d48:	4637      	mov	r7, r6
 8107d4a:	dc04      	bgt.n	8107d56 <__swbuf_r+0x42>
 8107d4c:	4621      	mov	r1, r4
 8107d4e:	4628      	mov	r0, r5
 8107d50:	f000 f966 	bl	8108020 <_fflush_r>
 8107d54:	bb30      	cbnz	r0, 8107da4 <__swbuf_r+0x90>
 8107d56:	68a3      	ldr	r3, [r4, #8]
 8107d58:	3b01      	subs	r3, #1
 8107d5a:	60a3      	str	r3, [r4, #8]
 8107d5c:	6823      	ldr	r3, [r4, #0]
 8107d5e:	1c5a      	adds	r2, r3, #1
 8107d60:	6022      	str	r2, [r4, #0]
 8107d62:	701e      	strb	r6, [r3, #0]
 8107d64:	6963      	ldr	r3, [r4, #20]
 8107d66:	3001      	adds	r0, #1
 8107d68:	4283      	cmp	r3, r0
 8107d6a:	d004      	beq.n	8107d76 <__swbuf_r+0x62>
 8107d6c:	89a3      	ldrh	r3, [r4, #12]
 8107d6e:	07db      	lsls	r3, r3, #31
 8107d70:	d506      	bpl.n	8107d80 <__swbuf_r+0x6c>
 8107d72:	2e0a      	cmp	r6, #10
 8107d74:	d104      	bne.n	8107d80 <__swbuf_r+0x6c>
 8107d76:	4621      	mov	r1, r4
 8107d78:	4628      	mov	r0, r5
 8107d7a:	f000 f951 	bl	8108020 <_fflush_r>
 8107d7e:	b988      	cbnz	r0, 8107da4 <__swbuf_r+0x90>
 8107d80:	4638      	mov	r0, r7
 8107d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107d84:	4b0a      	ldr	r3, [pc, #40]	; (8107db0 <__swbuf_r+0x9c>)
 8107d86:	429c      	cmp	r4, r3
 8107d88:	d101      	bne.n	8107d8e <__swbuf_r+0x7a>
 8107d8a:	68ac      	ldr	r4, [r5, #8]
 8107d8c:	e7cf      	b.n	8107d2e <__swbuf_r+0x1a>
 8107d8e:	4b09      	ldr	r3, [pc, #36]	; (8107db4 <__swbuf_r+0xa0>)
 8107d90:	429c      	cmp	r4, r3
 8107d92:	bf08      	it	eq
 8107d94:	68ec      	ldreq	r4, [r5, #12]
 8107d96:	e7ca      	b.n	8107d2e <__swbuf_r+0x1a>
 8107d98:	4621      	mov	r1, r4
 8107d9a:	4628      	mov	r0, r5
 8107d9c:	f000 f81e 	bl	8107ddc <__swsetup_r>
 8107da0:	2800      	cmp	r0, #0
 8107da2:	d0cb      	beq.n	8107d3c <__swbuf_r+0x28>
 8107da4:	f04f 37ff 	mov.w	r7, #4294967295
 8107da8:	e7ea      	b.n	8107d80 <__swbuf_r+0x6c>
 8107daa:	bf00      	nop
 8107dac:	08108444 	.word	0x08108444
 8107db0:	08108464 	.word	0x08108464
 8107db4:	08108424 	.word	0x08108424

08107db8 <_write_r>:
 8107db8:	b538      	push	{r3, r4, r5, lr}
 8107dba:	4d07      	ldr	r5, [pc, #28]	; (8107dd8 <_write_r+0x20>)
 8107dbc:	4604      	mov	r4, r0
 8107dbe:	4608      	mov	r0, r1
 8107dc0:	4611      	mov	r1, r2
 8107dc2:	2200      	movs	r2, #0
 8107dc4:	602a      	str	r2, [r5, #0]
 8107dc6:	461a      	mov	r2, r3
 8107dc8:	f7f9 fd45 	bl	8101856 <_write>
 8107dcc:	1c43      	adds	r3, r0, #1
 8107dce:	d102      	bne.n	8107dd6 <_write_r+0x1e>
 8107dd0:	682b      	ldr	r3, [r5, #0]
 8107dd2:	b103      	cbz	r3, 8107dd6 <_write_r+0x1e>
 8107dd4:	6023      	str	r3, [r4, #0]
 8107dd6:	bd38      	pop	{r3, r4, r5, pc}
 8107dd8:	10000380 	.word	0x10000380

08107ddc <__swsetup_r>:
 8107ddc:	4b32      	ldr	r3, [pc, #200]	; (8107ea8 <__swsetup_r+0xcc>)
 8107dde:	b570      	push	{r4, r5, r6, lr}
 8107de0:	681d      	ldr	r5, [r3, #0]
 8107de2:	4606      	mov	r6, r0
 8107de4:	460c      	mov	r4, r1
 8107de6:	b125      	cbz	r5, 8107df2 <__swsetup_r+0x16>
 8107de8:	69ab      	ldr	r3, [r5, #24]
 8107dea:	b913      	cbnz	r3, 8107df2 <__swsetup_r+0x16>
 8107dec:	4628      	mov	r0, r5
 8107dee:	f7ff f8ad 	bl	8106f4c <__sinit>
 8107df2:	4b2e      	ldr	r3, [pc, #184]	; (8107eac <__swsetup_r+0xd0>)
 8107df4:	429c      	cmp	r4, r3
 8107df6:	d10f      	bne.n	8107e18 <__swsetup_r+0x3c>
 8107df8:	686c      	ldr	r4, [r5, #4]
 8107dfa:	89a3      	ldrh	r3, [r4, #12]
 8107dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107e00:	0719      	lsls	r1, r3, #28
 8107e02:	d42c      	bmi.n	8107e5e <__swsetup_r+0x82>
 8107e04:	06dd      	lsls	r5, r3, #27
 8107e06:	d411      	bmi.n	8107e2c <__swsetup_r+0x50>
 8107e08:	2309      	movs	r3, #9
 8107e0a:	6033      	str	r3, [r6, #0]
 8107e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8107e10:	81a3      	strh	r3, [r4, #12]
 8107e12:	f04f 30ff 	mov.w	r0, #4294967295
 8107e16:	e03e      	b.n	8107e96 <__swsetup_r+0xba>
 8107e18:	4b25      	ldr	r3, [pc, #148]	; (8107eb0 <__swsetup_r+0xd4>)
 8107e1a:	429c      	cmp	r4, r3
 8107e1c:	d101      	bne.n	8107e22 <__swsetup_r+0x46>
 8107e1e:	68ac      	ldr	r4, [r5, #8]
 8107e20:	e7eb      	b.n	8107dfa <__swsetup_r+0x1e>
 8107e22:	4b24      	ldr	r3, [pc, #144]	; (8107eb4 <__swsetup_r+0xd8>)
 8107e24:	429c      	cmp	r4, r3
 8107e26:	bf08      	it	eq
 8107e28:	68ec      	ldreq	r4, [r5, #12]
 8107e2a:	e7e6      	b.n	8107dfa <__swsetup_r+0x1e>
 8107e2c:	0758      	lsls	r0, r3, #29
 8107e2e:	d512      	bpl.n	8107e56 <__swsetup_r+0x7a>
 8107e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107e32:	b141      	cbz	r1, 8107e46 <__swsetup_r+0x6a>
 8107e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107e38:	4299      	cmp	r1, r3
 8107e3a:	d002      	beq.n	8107e42 <__swsetup_r+0x66>
 8107e3c:	4630      	mov	r0, r6
 8107e3e:	f7ff fcdb 	bl	81077f8 <_free_r>
 8107e42:	2300      	movs	r3, #0
 8107e44:	6363      	str	r3, [r4, #52]	; 0x34
 8107e46:	89a3      	ldrh	r3, [r4, #12]
 8107e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8107e4c:	81a3      	strh	r3, [r4, #12]
 8107e4e:	2300      	movs	r3, #0
 8107e50:	6063      	str	r3, [r4, #4]
 8107e52:	6923      	ldr	r3, [r4, #16]
 8107e54:	6023      	str	r3, [r4, #0]
 8107e56:	89a3      	ldrh	r3, [r4, #12]
 8107e58:	f043 0308 	orr.w	r3, r3, #8
 8107e5c:	81a3      	strh	r3, [r4, #12]
 8107e5e:	6923      	ldr	r3, [r4, #16]
 8107e60:	b94b      	cbnz	r3, 8107e76 <__swsetup_r+0x9a>
 8107e62:	89a3      	ldrh	r3, [r4, #12]
 8107e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8107e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107e6c:	d003      	beq.n	8107e76 <__swsetup_r+0x9a>
 8107e6e:	4621      	mov	r1, r4
 8107e70:	4630      	mov	r0, r6
 8107e72:	f000 f95b 	bl	810812c <__smakebuf_r>
 8107e76:	89a0      	ldrh	r0, [r4, #12]
 8107e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107e7c:	f010 0301 	ands.w	r3, r0, #1
 8107e80:	d00a      	beq.n	8107e98 <__swsetup_r+0xbc>
 8107e82:	2300      	movs	r3, #0
 8107e84:	60a3      	str	r3, [r4, #8]
 8107e86:	6963      	ldr	r3, [r4, #20]
 8107e88:	425b      	negs	r3, r3
 8107e8a:	61a3      	str	r3, [r4, #24]
 8107e8c:	6923      	ldr	r3, [r4, #16]
 8107e8e:	b943      	cbnz	r3, 8107ea2 <__swsetup_r+0xc6>
 8107e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8107e94:	d1ba      	bne.n	8107e0c <__swsetup_r+0x30>
 8107e96:	bd70      	pop	{r4, r5, r6, pc}
 8107e98:	0781      	lsls	r1, r0, #30
 8107e9a:	bf58      	it	pl
 8107e9c:	6963      	ldrpl	r3, [r4, #20]
 8107e9e:	60a3      	str	r3, [r4, #8]
 8107ea0:	e7f4      	b.n	8107e8c <__swsetup_r+0xb0>
 8107ea2:	2000      	movs	r0, #0
 8107ea4:	e7f7      	b.n	8107e96 <__swsetup_r+0xba>
 8107ea6:	bf00      	nop
 8107ea8:	10000028 	.word	0x10000028
 8107eac:	08108444 	.word	0x08108444
 8107eb0:	08108464 	.word	0x08108464
 8107eb4:	08108424 	.word	0x08108424

08107eb8 <__assert_func>:
 8107eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8107eba:	4614      	mov	r4, r2
 8107ebc:	461a      	mov	r2, r3
 8107ebe:	4b09      	ldr	r3, [pc, #36]	; (8107ee4 <__assert_func+0x2c>)
 8107ec0:	681b      	ldr	r3, [r3, #0]
 8107ec2:	4605      	mov	r5, r0
 8107ec4:	68d8      	ldr	r0, [r3, #12]
 8107ec6:	b14c      	cbz	r4, 8107edc <__assert_func+0x24>
 8107ec8:	4b07      	ldr	r3, [pc, #28]	; (8107ee8 <__assert_func+0x30>)
 8107eca:	9100      	str	r1, [sp, #0]
 8107ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8107ed0:	4906      	ldr	r1, [pc, #24]	; (8107eec <__assert_func+0x34>)
 8107ed2:	462b      	mov	r3, r5
 8107ed4:	f000 f8e0 	bl	8108098 <fiprintf>
 8107ed8:	f000 f9a5 	bl	8108226 <abort>
 8107edc:	4b04      	ldr	r3, [pc, #16]	; (8107ef0 <__assert_func+0x38>)
 8107ede:	461c      	mov	r4, r3
 8107ee0:	e7f3      	b.n	8107eca <__assert_func+0x12>
 8107ee2:	bf00      	nop
 8107ee4:	10000028 	.word	0x10000028
 8107ee8:	081085ed 	.word	0x081085ed
 8107eec:	081085fa 	.word	0x081085fa
 8107ef0:	08108628 	.word	0x08108628

08107ef4 <_close_r>:
 8107ef4:	b538      	push	{r3, r4, r5, lr}
 8107ef6:	4d06      	ldr	r5, [pc, #24]	; (8107f10 <_close_r+0x1c>)
 8107ef8:	2300      	movs	r3, #0
 8107efa:	4604      	mov	r4, r0
 8107efc:	4608      	mov	r0, r1
 8107efe:	602b      	str	r3, [r5, #0]
 8107f00:	f7f9 fcc5 	bl	810188e <_close>
 8107f04:	1c43      	adds	r3, r0, #1
 8107f06:	d102      	bne.n	8107f0e <_close_r+0x1a>
 8107f08:	682b      	ldr	r3, [r5, #0]
 8107f0a:	b103      	cbz	r3, 8107f0e <_close_r+0x1a>
 8107f0c:	6023      	str	r3, [r4, #0]
 8107f0e:	bd38      	pop	{r3, r4, r5, pc}
 8107f10:	10000380 	.word	0x10000380

08107f14 <__sflush_r>:
 8107f14:	898a      	ldrh	r2, [r1, #12]
 8107f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107f1a:	4605      	mov	r5, r0
 8107f1c:	0710      	lsls	r0, r2, #28
 8107f1e:	460c      	mov	r4, r1
 8107f20:	d458      	bmi.n	8107fd4 <__sflush_r+0xc0>
 8107f22:	684b      	ldr	r3, [r1, #4]
 8107f24:	2b00      	cmp	r3, #0
 8107f26:	dc05      	bgt.n	8107f34 <__sflush_r+0x20>
 8107f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8107f2a:	2b00      	cmp	r3, #0
 8107f2c:	dc02      	bgt.n	8107f34 <__sflush_r+0x20>
 8107f2e:	2000      	movs	r0, #0
 8107f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8107f36:	2e00      	cmp	r6, #0
 8107f38:	d0f9      	beq.n	8107f2e <__sflush_r+0x1a>
 8107f3a:	2300      	movs	r3, #0
 8107f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8107f40:	682f      	ldr	r7, [r5, #0]
 8107f42:	602b      	str	r3, [r5, #0]
 8107f44:	d032      	beq.n	8107fac <__sflush_r+0x98>
 8107f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8107f48:	89a3      	ldrh	r3, [r4, #12]
 8107f4a:	075a      	lsls	r2, r3, #29
 8107f4c:	d505      	bpl.n	8107f5a <__sflush_r+0x46>
 8107f4e:	6863      	ldr	r3, [r4, #4]
 8107f50:	1ac0      	subs	r0, r0, r3
 8107f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8107f54:	b10b      	cbz	r3, 8107f5a <__sflush_r+0x46>
 8107f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8107f58:	1ac0      	subs	r0, r0, r3
 8107f5a:	2300      	movs	r3, #0
 8107f5c:	4602      	mov	r2, r0
 8107f5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8107f60:	6a21      	ldr	r1, [r4, #32]
 8107f62:	4628      	mov	r0, r5
 8107f64:	47b0      	blx	r6
 8107f66:	1c43      	adds	r3, r0, #1
 8107f68:	89a3      	ldrh	r3, [r4, #12]
 8107f6a:	d106      	bne.n	8107f7a <__sflush_r+0x66>
 8107f6c:	6829      	ldr	r1, [r5, #0]
 8107f6e:	291d      	cmp	r1, #29
 8107f70:	d82c      	bhi.n	8107fcc <__sflush_r+0xb8>
 8107f72:	4a2a      	ldr	r2, [pc, #168]	; (810801c <__sflush_r+0x108>)
 8107f74:	40ca      	lsrs	r2, r1
 8107f76:	07d6      	lsls	r6, r2, #31
 8107f78:	d528      	bpl.n	8107fcc <__sflush_r+0xb8>
 8107f7a:	2200      	movs	r2, #0
 8107f7c:	6062      	str	r2, [r4, #4]
 8107f7e:	04d9      	lsls	r1, r3, #19
 8107f80:	6922      	ldr	r2, [r4, #16]
 8107f82:	6022      	str	r2, [r4, #0]
 8107f84:	d504      	bpl.n	8107f90 <__sflush_r+0x7c>
 8107f86:	1c42      	adds	r2, r0, #1
 8107f88:	d101      	bne.n	8107f8e <__sflush_r+0x7a>
 8107f8a:	682b      	ldr	r3, [r5, #0]
 8107f8c:	b903      	cbnz	r3, 8107f90 <__sflush_r+0x7c>
 8107f8e:	6560      	str	r0, [r4, #84]	; 0x54
 8107f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107f92:	602f      	str	r7, [r5, #0]
 8107f94:	2900      	cmp	r1, #0
 8107f96:	d0ca      	beq.n	8107f2e <__sflush_r+0x1a>
 8107f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107f9c:	4299      	cmp	r1, r3
 8107f9e:	d002      	beq.n	8107fa6 <__sflush_r+0x92>
 8107fa0:	4628      	mov	r0, r5
 8107fa2:	f7ff fc29 	bl	81077f8 <_free_r>
 8107fa6:	2000      	movs	r0, #0
 8107fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8107faa:	e7c1      	b.n	8107f30 <__sflush_r+0x1c>
 8107fac:	6a21      	ldr	r1, [r4, #32]
 8107fae:	2301      	movs	r3, #1
 8107fb0:	4628      	mov	r0, r5
 8107fb2:	47b0      	blx	r6
 8107fb4:	1c41      	adds	r1, r0, #1
 8107fb6:	d1c7      	bne.n	8107f48 <__sflush_r+0x34>
 8107fb8:	682b      	ldr	r3, [r5, #0]
 8107fba:	2b00      	cmp	r3, #0
 8107fbc:	d0c4      	beq.n	8107f48 <__sflush_r+0x34>
 8107fbe:	2b1d      	cmp	r3, #29
 8107fc0:	d001      	beq.n	8107fc6 <__sflush_r+0xb2>
 8107fc2:	2b16      	cmp	r3, #22
 8107fc4:	d101      	bne.n	8107fca <__sflush_r+0xb6>
 8107fc6:	602f      	str	r7, [r5, #0]
 8107fc8:	e7b1      	b.n	8107f2e <__sflush_r+0x1a>
 8107fca:	89a3      	ldrh	r3, [r4, #12]
 8107fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8107fd0:	81a3      	strh	r3, [r4, #12]
 8107fd2:	e7ad      	b.n	8107f30 <__sflush_r+0x1c>
 8107fd4:	690f      	ldr	r7, [r1, #16]
 8107fd6:	2f00      	cmp	r7, #0
 8107fd8:	d0a9      	beq.n	8107f2e <__sflush_r+0x1a>
 8107fda:	0793      	lsls	r3, r2, #30
 8107fdc:	680e      	ldr	r6, [r1, #0]
 8107fde:	bf08      	it	eq
 8107fe0:	694b      	ldreq	r3, [r1, #20]
 8107fe2:	600f      	str	r7, [r1, #0]
 8107fe4:	bf18      	it	ne
 8107fe6:	2300      	movne	r3, #0
 8107fe8:	eba6 0807 	sub.w	r8, r6, r7
 8107fec:	608b      	str	r3, [r1, #8]
 8107fee:	f1b8 0f00 	cmp.w	r8, #0
 8107ff2:	dd9c      	ble.n	8107f2e <__sflush_r+0x1a>
 8107ff4:	6a21      	ldr	r1, [r4, #32]
 8107ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8107ff8:	4643      	mov	r3, r8
 8107ffa:	463a      	mov	r2, r7
 8107ffc:	4628      	mov	r0, r5
 8107ffe:	47b0      	blx	r6
 8108000:	2800      	cmp	r0, #0
 8108002:	dc06      	bgt.n	8108012 <__sflush_r+0xfe>
 8108004:	89a3      	ldrh	r3, [r4, #12]
 8108006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810800a:	81a3      	strh	r3, [r4, #12]
 810800c:	f04f 30ff 	mov.w	r0, #4294967295
 8108010:	e78e      	b.n	8107f30 <__sflush_r+0x1c>
 8108012:	4407      	add	r7, r0
 8108014:	eba8 0800 	sub.w	r8, r8, r0
 8108018:	e7e9      	b.n	8107fee <__sflush_r+0xda>
 810801a:	bf00      	nop
 810801c:	20400001 	.word	0x20400001

08108020 <_fflush_r>:
 8108020:	b538      	push	{r3, r4, r5, lr}
 8108022:	690b      	ldr	r3, [r1, #16]
 8108024:	4605      	mov	r5, r0
 8108026:	460c      	mov	r4, r1
 8108028:	b913      	cbnz	r3, 8108030 <_fflush_r+0x10>
 810802a:	2500      	movs	r5, #0
 810802c:	4628      	mov	r0, r5
 810802e:	bd38      	pop	{r3, r4, r5, pc}
 8108030:	b118      	cbz	r0, 810803a <_fflush_r+0x1a>
 8108032:	6983      	ldr	r3, [r0, #24]
 8108034:	b90b      	cbnz	r3, 810803a <_fflush_r+0x1a>
 8108036:	f7fe ff89 	bl	8106f4c <__sinit>
 810803a:	4b14      	ldr	r3, [pc, #80]	; (810808c <_fflush_r+0x6c>)
 810803c:	429c      	cmp	r4, r3
 810803e:	d11b      	bne.n	8108078 <_fflush_r+0x58>
 8108040:	686c      	ldr	r4, [r5, #4]
 8108042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108046:	2b00      	cmp	r3, #0
 8108048:	d0ef      	beq.n	810802a <_fflush_r+0xa>
 810804a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810804c:	07d0      	lsls	r0, r2, #31
 810804e:	d404      	bmi.n	810805a <_fflush_r+0x3a>
 8108050:	0599      	lsls	r1, r3, #22
 8108052:	d402      	bmi.n	810805a <_fflush_r+0x3a>
 8108054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108056:	f7ff f81c 	bl	8107092 <__retarget_lock_acquire_recursive>
 810805a:	4628      	mov	r0, r5
 810805c:	4621      	mov	r1, r4
 810805e:	f7ff ff59 	bl	8107f14 <__sflush_r>
 8108062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8108064:	07da      	lsls	r2, r3, #31
 8108066:	4605      	mov	r5, r0
 8108068:	d4e0      	bmi.n	810802c <_fflush_r+0xc>
 810806a:	89a3      	ldrh	r3, [r4, #12]
 810806c:	059b      	lsls	r3, r3, #22
 810806e:	d4dd      	bmi.n	810802c <_fflush_r+0xc>
 8108070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108072:	f7ff f80f 	bl	8107094 <__retarget_lock_release_recursive>
 8108076:	e7d9      	b.n	810802c <_fflush_r+0xc>
 8108078:	4b05      	ldr	r3, [pc, #20]	; (8108090 <_fflush_r+0x70>)
 810807a:	429c      	cmp	r4, r3
 810807c:	d101      	bne.n	8108082 <_fflush_r+0x62>
 810807e:	68ac      	ldr	r4, [r5, #8]
 8108080:	e7df      	b.n	8108042 <_fflush_r+0x22>
 8108082:	4b04      	ldr	r3, [pc, #16]	; (8108094 <_fflush_r+0x74>)
 8108084:	429c      	cmp	r4, r3
 8108086:	bf08      	it	eq
 8108088:	68ec      	ldreq	r4, [r5, #12]
 810808a:	e7da      	b.n	8108042 <_fflush_r+0x22>
 810808c:	08108444 	.word	0x08108444
 8108090:	08108464 	.word	0x08108464
 8108094:	08108424 	.word	0x08108424

08108098 <fiprintf>:
 8108098:	b40e      	push	{r1, r2, r3}
 810809a:	b503      	push	{r0, r1, lr}
 810809c:	4601      	mov	r1, r0
 810809e:	ab03      	add	r3, sp, #12
 81080a0:	4805      	ldr	r0, [pc, #20]	; (81080b8 <fiprintf+0x20>)
 81080a2:	f853 2b04 	ldr.w	r2, [r3], #4
 81080a6:	6800      	ldr	r0, [r0, #0]
 81080a8:	9301      	str	r3, [sp, #4]
 81080aa:	f7ff fcaf 	bl	8107a0c <_vfiprintf_r>
 81080ae:	b002      	add	sp, #8
 81080b0:	f85d eb04 	ldr.w	lr, [sp], #4
 81080b4:	b003      	add	sp, #12
 81080b6:	4770      	bx	lr
 81080b8:	10000028 	.word	0x10000028

081080bc <_lseek_r>:
 81080bc:	b538      	push	{r3, r4, r5, lr}
 81080be:	4d07      	ldr	r5, [pc, #28]	; (81080dc <_lseek_r+0x20>)
 81080c0:	4604      	mov	r4, r0
 81080c2:	4608      	mov	r0, r1
 81080c4:	4611      	mov	r1, r2
 81080c6:	2200      	movs	r2, #0
 81080c8:	602a      	str	r2, [r5, #0]
 81080ca:	461a      	mov	r2, r3
 81080cc:	f7f9 fc06 	bl	81018dc <_lseek>
 81080d0:	1c43      	adds	r3, r0, #1
 81080d2:	d102      	bne.n	81080da <_lseek_r+0x1e>
 81080d4:	682b      	ldr	r3, [r5, #0]
 81080d6:	b103      	cbz	r3, 81080da <_lseek_r+0x1e>
 81080d8:	6023      	str	r3, [r4, #0]
 81080da:	bd38      	pop	{r3, r4, r5, pc}
 81080dc:	10000380 	.word	0x10000380

081080e0 <__swhatbuf_r>:
 81080e0:	b570      	push	{r4, r5, r6, lr}
 81080e2:	460e      	mov	r6, r1
 81080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81080e8:	2900      	cmp	r1, #0
 81080ea:	b096      	sub	sp, #88	; 0x58
 81080ec:	4614      	mov	r4, r2
 81080ee:	461d      	mov	r5, r3
 81080f0:	da08      	bge.n	8108104 <__swhatbuf_r+0x24>
 81080f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 81080f6:	2200      	movs	r2, #0
 81080f8:	602a      	str	r2, [r5, #0]
 81080fa:	061a      	lsls	r2, r3, #24
 81080fc:	d410      	bmi.n	8108120 <__swhatbuf_r+0x40>
 81080fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8108102:	e00e      	b.n	8108122 <__swhatbuf_r+0x42>
 8108104:	466a      	mov	r2, sp
 8108106:	f000 f895 	bl	8108234 <_fstat_r>
 810810a:	2800      	cmp	r0, #0
 810810c:	dbf1      	blt.n	81080f2 <__swhatbuf_r+0x12>
 810810e:	9a01      	ldr	r2, [sp, #4]
 8108110:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8108114:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8108118:	425a      	negs	r2, r3
 810811a:	415a      	adcs	r2, r3
 810811c:	602a      	str	r2, [r5, #0]
 810811e:	e7ee      	b.n	81080fe <__swhatbuf_r+0x1e>
 8108120:	2340      	movs	r3, #64	; 0x40
 8108122:	2000      	movs	r0, #0
 8108124:	6023      	str	r3, [r4, #0]
 8108126:	b016      	add	sp, #88	; 0x58
 8108128:	bd70      	pop	{r4, r5, r6, pc}
	...

0810812c <__smakebuf_r>:
 810812c:	898b      	ldrh	r3, [r1, #12]
 810812e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8108130:	079d      	lsls	r5, r3, #30
 8108132:	4606      	mov	r6, r0
 8108134:	460c      	mov	r4, r1
 8108136:	d507      	bpl.n	8108148 <__smakebuf_r+0x1c>
 8108138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810813c:	6023      	str	r3, [r4, #0]
 810813e:	6123      	str	r3, [r4, #16]
 8108140:	2301      	movs	r3, #1
 8108142:	6163      	str	r3, [r4, #20]
 8108144:	b002      	add	sp, #8
 8108146:	bd70      	pop	{r4, r5, r6, pc}
 8108148:	ab01      	add	r3, sp, #4
 810814a:	466a      	mov	r2, sp
 810814c:	f7ff ffc8 	bl	81080e0 <__swhatbuf_r>
 8108150:	9900      	ldr	r1, [sp, #0]
 8108152:	4605      	mov	r5, r0
 8108154:	4630      	mov	r0, r6
 8108156:	f7ff fbbb 	bl	81078d0 <_malloc_r>
 810815a:	b948      	cbnz	r0, 8108170 <__smakebuf_r+0x44>
 810815c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108160:	059a      	lsls	r2, r3, #22
 8108162:	d4ef      	bmi.n	8108144 <__smakebuf_r+0x18>
 8108164:	f023 0303 	bic.w	r3, r3, #3
 8108168:	f043 0302 	orr.w	r3, r3, #2
 810816c:	81a3      	strh	r3, [r4, #12]
 810816e:	e7e3      	b.n	8108138 <__smakebuf_r+0xc>
 8108170:	4b0d      	ldr	r3, [pc, #52]	; (81081a8 <__smakebuf_r+0x7c>)
 8108172:	62b3      	str	r3, [r6, #40]	; 0x28
 8108174:	89a3      	ldrh	r3, [r4, #12]
 8108176:	6020      	str	r0, [r4, #0]
 8108178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810817c:	81a3      	strh	r3, [r4, #12]
 810817e:	9b00      	ldr	r3, [sp, #0]
 8108180:	6163      	str	r3, [r4, #20]
 8108182:	9b01      	ldr	r3, [sp, #4]
 8108184:	6120      	str	r0, [r4, #16]
 8108186:	b15b      	cbz	r3, 81081a0 <__smakebuf_r+0x74>
 8108188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810818c:	4630      	mov	r0, r6
 810818e:	f000 f863 	bl	8108258 <_isatty_r>
 8108192:	b128      	cbz	r0, 81081a0 <__smakebuf_r+0x74>
 8108194:	89a3      	ldrh	r3, [r4, #12]
 8108196:	f023 0303 	bic.w	r3, r3, #3
 810819a:	f043 0301 	orr.w	r3, r3, #1
 810819e:	81a3      	strh	r3, [r4, #12]
 81081a0:	89a0      	ldrh	r0, [r4, #12]
 81081a2:	4305      	orrs	r5, r0
 81081a4:	81a5      	strh	r5, [r4, #12]
 81081a6:	e7cd      	b.n	8108144 <__smakebuf_r+0x18>
 81081a8:	08106ee5 	.word	0x08106ee5

081081ac <__ascii_mbtowc>:
 81081ac:	b082      	sub	sp, #8
 81081ae:	b901      	cbnz	r1, 81081b2 <__ascii_mbtowc+0x6>
 81081b0:	a901      	add	r1, sp, #4
 81081b2:	b142      	cbz	r2, 81081c6 <__ascii_mbtowc+0x1a>
 81081b4:	b14b      	cbz	r3, 81081ca <__ascii_mbtowc+0x1e>
 81081b6:	7813      	ldrb	r3, [r2, #0]
 81081b8:	600b      	str	r3, [r1, #0]
 81081ba:	7812      	ldrb	r2, [r2, #0]
 81081bc:	1e10      	subs	r0, r2, #0
 81081be:	bf18      	it	ne
 81081c0:	2001      	movne	r0, #1
 81081c2:	b002      	add	sp, #8
 81081c4:	4770      	bx	lr
 81081c6:	4610      	mov	r0, r2
 81081c8:	e7fb      	b.n	81081c2 <__ascii_mbtowc+0x16>
 81081ca:	f06f 0001 	mvn.w	r0, #1
 81081ce:	e7f8      	b.n	81081c2 <__ascii_mbtowc+0x16>

081081d0 <__malloc_lock>:
 81081d0:	4801      	ldr	r0, [pc, #4]	; (81081d8 <__malloc_lock+0x8>)
 81081d2:	f7fe bf5e 	b.w	8107092 <__retarget_lock_acquire_recursive>
 81081d6:	bf00      	nop
 81081d8:	10000374 	.word	0x10000374

081081dc <__malloc_unlock>:
 81081dc:	4801      	ldr	r0, [pc, #4]	; (81081e4 <__malloc_unlock+0x8>)
 81081de:	f7fe bf59 	b.w	8107094 <__retarget_lock_release_recursive>
 81081e2:	bf00      	nop
 81081e4:	10000374 	.word	0x10000374

081081e8 <_read_r>:
 81081e8:	b538      	push	{r3, r4, r5, lr}
 81081ea:	4d07      	ldr	r5, [pc, #28]	; (8108208 <_read_r+0x20>)
 81081ec:	4604      	mov	r4, r0
 81081ee:	4608      	mov	r0, r1
 81081f0:	4611      	mov	r1, r2
 81081f2:	2200      	movs	r2, #0
 81081f4:	602a      	str	r2, [r5, #0]
 81081f6:	461a      	mov	r2, r3
 81081f8:	f7f9 fb10 	bl	810181c <_read>
 81081fc:	1c43      	adds	r3, r0, #1
 81081fe:	d102      	bne.n	8108206 <_read_r+0x1e>
 8108200:	682b      	ldr	r3, [r5, #0]
 8108202:	b103      	cbz	r3, 8108206 <_read_r+0x1e>
 8108204:	6023      	str	r3, [r4, #0]
 8108206:	bd38      	pop	{r3, r4, r5, pc}
 8108208:	10000380 	.word	0x10000380

0810820c <__ascii_wctomb>:
 810820c:	b149      	cbz	r1, 8108222 <__ascii_wctomb+0x16>
 810820e:	2aff      	cmp	r2, #255	; 0xff
 8108210:	bf85      	ittet	hi
 8108212:	238a      	movhi	r3, #138	; 0x8a
 8108214:	6003      	strhi	r3, [r0, #0]
 8108216:	700a      	strbls	r2, [r1, #0]
 8108218:	f04f 30ff 	movhi.w	r0, #4294967295
 810821c:	bf98      	it	ls
 810821e:	2001      	movls	r0, #1
 8108220:	4770      	bx	lr
 8108222:	4608      	mov	r0, r1
 8108224:	4770      	bx	lr

08108226 <abort>:
 8108226:	b508      	push	{r3, lr}
 8108228:	2006      	movs	r0, #6
 810822a:	f000 f84d 	bl	81082c8 <raise>
 810822e:	2001      	movs	r0, #1
 8108230:	f7f9 faea 	bl	8101808 <_exit>

08108234 <_fstat_r>:
 8108234:	b538      	push	{r3, r4, r5, lr}
 8108236:	4d07      	ldr	r5, [pc, #28]	; (8108254 <_fstat_r+0x20>)
 8108238:	2300      	movs	r3, #0
 810823a:	4604      	mov	r4, r0
 810823c:	4608      	mov	r0, r1
 810823e:	4611      	mov	r1, r2
 8108240:	602b      	str	r3, [r5, #0]
 8108242:	f7f9 fb30 	bl	81018a6 <_fstat>
 8108246:	1c43      	adds	r3, r0, #1
 8108248:	d102      	bne.n	8108250 <_fstat_r+0x1c>
 810824a:	682b      	ldr	r3, [r5, #0]
 810824c:	b103      	cbz	r3, 8108250 <_fstat_r+0x1c>
 810824e:	6023      	str	r3, [r4, #0]
 8108250:	bd38      	pop	{r3, r4, r5, pc}
 8108252:	bf00      	nop
 8108254:	10000380 	.word	0x10000380

08108258 <_isatty_r>:
 8108258:	b538      	push	{r3, r4, r5, lr}
 810825a:	4d06      	ldr	r5, [pc, #24]	; (8108274 <_isatty_r+0x1c>)
 810825c:	2300      	movs	r3, #0
 810825e:	4604      	mov	r4, r0
 8108260:	4608      	mov	r0, r1
 8108262:	602b      	str	r3, [r5, #0]
 8108264:	f7f9 fb2f 	bl	81018c6 <_isatty>
 8108268:	1c43      	adds	r3, r0, #1
 810826a:	d102      	bne.n	8108272 <_isatty_r+0x1a>
 810826c:	682b      	ldr	r3, [r5, #0]
 810826e:	b103      	cbz	r3, 8108272 <_isatty_r+0x1a>
 8108270:	6023      	str	r3, [r4, #0]
 8108272:	bd38      	pop	{r3, r4, r5, pc}
 8108274:	10000380 	.word	0x10000380

08108278 <_raise_r>:
 8108278:	291f      	cmp	r1, #31
 810827a:	b538      	push	{r3, r4, r5, lr}
 810827c:	4604      	mov	r4, r0
 810827e:	460d      	mov	r5, r1
 8108280:	d904      	bls.n	810828c <_raise_r+0x14>
 8108282:	2316      	movs	r3, #22
 8108284:	6003      	str	r3, [r0, #0]
 8108286:	f04f 30ff 	mov.w	r0, #4294967295
 810828a:	bd38      	pop	{r3, r4, r5, pc}
 810828c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810828e:	b112      	cbz	r2, 8108296 <_raise_r+0x1e>
 8108290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8108294:	b94b      	cbnz	r3, 81082aa <_raise_r+0x32>
 8108296:	4620      	mov	r0, r4
 8108298:	f000 f830 	bl	81082fc <_getpid_r>
 810829c:	462a      	mov	r2, r5
 810829e:	4601      	mov	r1, r0
 81082a0:	4620      	mov	r0, r4
 81082a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81082a6:	f000 b817 	b.w	81082d8 <_kill_r>
 81082aa:	2b01      	cmp	r3, #1
 81082ac:	d00a      	beq.n	81082c4 <_raise_r+0x4c>
 81082ae:	1c59      	adds	r1, r3, #1
 81082b0:	d103      	bne.n	81082ba <_raise_r+0x42>
 81082b2:	2316      	movs	r3, #22
 81082b4:	6003      	str	r3, [r0, #0]
 81082b6:	2001      	movs	r0, #1
 81082b8:	e7e7      	b.n	810828a <_raise_r+0x12>
 81082ba:	2400      	movs	r4, #0
 81082bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 81082c0:	4628      	mov	r0, r5
 81082c2:	4798      	blx	r3
 81082c4:	2000      	movs	r0, #0
 81082c6:	e7e0      	b.n	810828a <_raise_r+0x12>

081082c8 <raise>:
 81082c8:	4b02      	ldr	r3, [pc, #8]	; (81082d4 <raise+0xc>)
 81082ca:	4601      	mov	r1, r0
 81082cc:	6818      	ldr	r0, [r3, #0]
 81082ce:	f7ff bfd3 	b.w	8108278 <_raise_r>
 81082d2:	bf00      	nop
 81082d4:	10000028 	.word	0x10000028

081082d8 <_kill_r>:
 81082d8:	b538      	push	{r3, r4, r5, lr}
 81082da:	4d07      	ldr	r5, [pc, #28]	; (81082f8 <_kill_r+0x20>)
 81082dc:	2300      	movs	r3, #0
 81082de:	4604      	mov	r4, r0
 81082e0:	4608      	mov	r0, r1
 81082e2:	4611      	mov	r1, r2
 81082e4:	602b      	str	r3, [r5, #0]
 81082e6:	f7f9 fa7f 	bl	81017e8 <_kill>
 81082ea:	1c43      	adds	r3, r0, #1
 81082ec:	d102      	bne.n	81082f4 <_kill_r+0x1c>
 81082ee:	682b      	ldr	r3, [r5, #0]
 81082f0:	b103      	cbz	r3, 81082f4 <_kill_r+0x1c>
 81082f2:	6023      	str	r3, [r4, #0]
 81082f4:	bd38      	pop	{r3, r4, r5, pc}
 81082f6:	bf00      	nop
 81082f8:	10000380 	.word	0x10000380

081082fc <_getpid_r>:
 81082fc:	f7f9 ba6c 	b.w	81017d8 <_getpid>

08108300 <_init>:
 8108300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108302:	bf00      	nop
 8108304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108306:	bc08      	pop	{r3}
 8108308:	469e      	mov	lr, r3
 810830a:	4770      	bx	lr

0810830c <_fini>:
 810830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810830e:	bf00      	nop
 8108310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108312:	bc08      	pop	{r3}
 8108314:	469e      	mov	lr, r3
 8108316:	4770      	bx	lr
