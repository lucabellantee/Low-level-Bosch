
ProvaPwmLaboratorio_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a48  08003a48  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003a48  08003a48  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a48  08003a48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  24000010  08003a60  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400053c  08003a60  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea1c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdf  00000000  00000000  0002ea5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00030a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038c2e  00000000  00000000  00032008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da5b  00000000  00000000  0006ac36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017844a  00000000  00000000  00078691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f0adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  001f0b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003a20 	.word	0x08003a20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003a20 	.word	0x08003a20

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#ifdef DEBUG
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET));
 800040a:	bf00      	nop
 800040c:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <main+0x7c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000414:	2b00      	cmp	r3, #0
 8000416:	d1f9      	bne.n	800040c <main+0x8>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f000 fa8e 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 f832 	bl	8000484 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <main+0x7c>)
 8000422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000426:	4a16      	ldr	r2, [pc, #88]	; (8000480 <main+0x7c>)
 8000428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <main+0x7c>)
 8000432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800043e:	2000      	movs	r0, #0
 8000440:	f000 fdd0 	bl	8000fe4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000444:	2100      	movs	r1, #0
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fde6 	bl	8001018 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800044c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000450:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000452:	bf00      	nop
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <main+0x7c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800045c:	2b00      	cmp	r3, #0
 800045e:	d104      	bne.n	800046a <main+0x66>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	dcf4      	bgt.n	8000454 <main+0x50>
if ( timeout < 0 )
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	da01      	bge.n	8000474 <main+0x70>
{
Error_Handler();
 8000470:	f000 f964 	bl	800073c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f8bc 	bl	80005f0 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000478:	f000 f888 	bl	800058c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047c:	e7fe      	b.n	800047c <main+0x78>
 800047e:	bf00      	nop
 8000480:	58024400 	.word	0x58024400

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09c      	sub	sp, #112	; 0x70
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048e:	224c      	movs	r2, #76	; 0x4c
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f003 fabc 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2220      	movs	r2, #32
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fab6 	bl	8003a10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004a4:	2004      	movs	r0, #4
 80004a6:	f000 ff13 	bl	80012d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <SystemClock_Config+0xfc>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a33      	ldr	r2, [pc, #204]	; (8000580 <SystemClock_Config+0xfc>)
 80004b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b31      	ldr	r3, [pc, #196]	; (8000580 <SystemClock_Config+0xfc>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <SystemClock_Config+0x100>)
 80004c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c8:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <SystemClock_Config+0x100>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <SystemClock_Config+0x100>)
 80004d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004dc:	bf00      	nop
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <SystemClock_Config+0xfc>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ea:	d1f8      	bne.n	80004de <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <SystemClock_Config+0x104>)
 80004ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f0:	f023 0303 	bic.w	r3, r3, #3
 80004f4:	4a24      	ldr	r2, [pc, #144]	; (8000588 <SystemClock_Config+0x104>)
 80004f6:	f043 0302 	orr.w	r3, r3, #2
 80004fa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000500:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000504:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	2302      	movs	r3, #2
 8000508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050a:	2302      	movs	r3, #2
 800050c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800050e:	2301      	movs	r3, #1
 8000510:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000512:	2378      	movs	r3, #120	; 0x78
 8000514:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000516:	2302      	movs	r3, #2
 8000518:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800051a:	2302      	movs	r3, #2
 800051c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800051e:	2302      	movs	r3, #2
 8000520:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000522:	230c      	movs	r3, #12
 8000524:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000526:	2300      	movs	r3, #0
 8000528:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000532:	4618      	mov	r0, r3
 8000534:	f000 ff36 	bl	80013a4 <HAL_RCC_OscConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800053e:	f000 f8fd 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	233f      	movs	r3, #63	; 0x3f
 8000544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	2303      	movs	r3, #3
 8000548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800054e:	2308      	movs	r3, #8
 8000550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000552:	2340      	movs	r3, #64	; 0x40
 8000554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800055a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2104      	movs	r1, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fb49 	bl	8001c00 <HAL_RCC_ClockConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000574:	f000 f8e2 	bl	800073c <Error_Handler>
  }
}
 8000578:	bf00      	nop
 800057a:	3770      	adds	r7, #112	; 0x70
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	58024800 	.word	0x58024800
 8000584:	58000400 	.word	0x58000400
 8000588:	58024400 	.word	0x58024400

0800058c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000594:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000598:	2209      	movs	r2, #9
 800059a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800059e:	2202      	movs	r2, #2
 80005a0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80005d4:	f000 fd34 	bl	8001040 <HAL_PCD_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80005de:	f000 f8ad 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2400002c 	.word	0x2400002c
 80005ec:	40080000 	.word	0x40080000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b48      	ldr	r3, [pc, #288]	; (8000728 <MX_GPIO_Init+0x138>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	4a46      	ldr	r2, [pc, #280]	; (8000728 <MX_GPIO_Init+0x138>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <MX_GPIO_Init+0x138>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000624:	4b40      	ldr	r3, [pc, #256]	; (8000728 <MX_GPIO_Init+0x138>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062a:	4a3f      	ldr	r2, [pc, #252]	; (8000728 <MX_GPIO_Init+0x138>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000634:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <MX_GPIO_Init+0x138>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <MX_GPIO_Init+0x138>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	4a37      	ldr	r2, [pc, #220]	; (8000728 <MX_GPIO_Init+0x138>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <MX_GPIO_Init+0x138>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_GPIO_Init+0x138>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	4a30      	ldr	r2, [pc, #192]	; (8000728 <MX_GPIO_Init+0x138>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_GPIO_Init+0x138>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_GPIO_Init+0x138>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <MX_GPIO_Init+0x138>)
 8000686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_GPIO_Init+0x138>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800069c:	2332      	movs	r3, #50	; 0x32
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ac:	230b      	movs	r3, #11
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	481d      	ldr	r0, [pc, #116]	; (800072c <MX_GPIO_Init+0x13c>)
 80006b8:	f000 fae4 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80006bc:	2384      	movs	r3, #132	; 0x84
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006cc:	230b      	movs	r3, #11
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	4816      	ldr	r0, [pc, #88]	; (8000730 <MX_GPIO_Init+0x140>)
 80006d8:	f000 fad4 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_GPIO_Init+0x144>)
 80006fa:	f000 fac3 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80006fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000710:	230b      	movs	r3, #11
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_GPIO_Init+0x148>)
 800071c:	f000 fab2 	bl	8000c84 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58024400 	.word	0x58024400
 800072c:	58020800 	.word	0x58020800
 8000730:	58020000 	.word	0x58020000
 8000734:	58020400 	.word	0x58020400
 8000738:	58021800 	.word	0x58021800

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_MspInit+0x30>)
 8000750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000754:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x30>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x30>)
 8000760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	58024400 	.word	0x58024400

0800077c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0b8      	sub	sp, #224	; 0xe0
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	22bc      	movs	r2, #188	; 0xbc
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f937 	bl	8003a10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <HAL_PCD_MspInit+0x108>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d166      	bne.n	800087a <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80007b6:	2312      	movs	r3, #18
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80007be:	2303      	movs	r3, #3
 80007c0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80007c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80007cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80007d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fd3e 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80007ea:	f7ff ffa7 	bl	800073c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80007ee:	f000 fdc9 	bl	8001384 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <HAL_PCD_MspInit+0x10c>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a23      	ldr	r2, [pc, #140]	; (8000888 <HAL_PCD_MspInit+0x10c>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <HAL_PCD_MspInit+0x10c>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000810:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000814:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800082a:	230a      	movs	r3, #10
 800082c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000834:	4619      	mov	r1, r3
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <HAL_PCD_MspInit+0x110>)
 8000838:	f000 fa24 	bl	8000c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800083c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <HAL_PCD_MspInit+0x110>)
 8000858:	f000 fa14 	bl	8000c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_PCD_MspInit+0x10c>)
 800085e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <HAL_PCD_MspInit+0x10c>)
 8000864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000868:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_PCD_MspInit+0x10c>)
 800086e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800087a:	bf00      	nop
 800087c:	37e0      	adds	r7, #224	; 0xe0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40080000 	.word	0x40080000
 8000888:	58024400 	.word	0x58024400
 800088c:	58020000 	.word	0x58020000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f89e 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800091c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e8:	f7ff fcf6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	; (8000924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	; (8000930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000912:	f003 f859 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000916:	f7ff fd75 	bl	8000404 <main>
  bx  lr
 800091a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800091c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000924:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000928:	08003a50 	.word	0x08003a50
  ldr r2, =_sbss
 800092c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000930:	2400053c 	.word	0x2400053c

08000934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC3_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093e:	2003      	movs	r0, #3
 8000940:	f000 f96e 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000944:	f001 fb12 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8000948:	4602      	mov	r2, r0
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_Init+0x68>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	4913      	ldr	r1, [pc, #76]	; (80009a4 <HAL_Init+0x6c>)
 8000956:	5ccb      	ldrb	r3, [r1, r3]
 8000958:	f003 031f 	and.w	r3, r3, #31
 800095c:	fa22 f303 	lsr.w	r3, r2, r3
 8000960:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_Init+0x68>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_Init+0x6c>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	fa22 f303 	lsr.w	r3, r2, r3
 8000978:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <HAL_Init+0x70>)
 800097a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <HAL_Init+0x74>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f814 	bl	80009b0 <HAL_InitTick>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e002      	b.n	8000998 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000992:	f7ff fed9 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	58024400 	.word	0x58024400
 80009a4:	08003a38 	.word	0x08003a38
 80009a8:	24000004 	.word	0x24000004
 80009ac:	24000000 	.word	0x24000000

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_InitTick+0x60>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e021      	b.n	8000a08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_InitTick+0x64>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f945 	bl	8000c6a <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f91d 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x68>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2400000c 	.word	0x2400000c
 8000a14:	24000000 	.word	0x24000000
 8000a18:	24000008 	.word	0x24000008

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2400000c 	.word	0x2400000c
 8000a40:	24000538 	.word	0x24000538

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	24000538 	.word	0x24000538

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2400000c 	.word	0x2400000c

08000aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetREVID+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	0c1b      	lsrs	r3, r3, #16
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	5c001000 	.word	0x5c001000

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <__NVIC_SetPriorityGrouping+0x40>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x40>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	05fa0000 	.word	0x05fa0000

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff47 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff5e 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff90 	bl	8000b74 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5f 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffb2 	bl	8000bdc <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c92:	4b89      	ldr	r3, [pc, #548]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c96:	e194      	b.n	8000fc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8186 	beq.w	8000fbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x44>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	69b9      	ldr	r1, [r7, #24]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80e0 	beq.w	8000fbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_GPIO_Init+0x238>)
 8000dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e02:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <HAL_GPIO_Init+0x238>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_GPIO_Init+0x238>)
 8000e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1a:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <HAL_GPIO_Init+0x23c>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <HAL_GPIO_Init+0x240>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d052      	beq.n	8000eec <HAL_GPIO_Init+0x268>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <HAL_GPIO_Init+0x244>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d031      	beq.n	8000eb2 <HAL_GPIO_Init+0x22e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <HAL_GPIO_Init+0x248>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d02b      	beq.n	8000eae <HAL_GPIO_Init+0x22a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_GPIO_Init+0x24c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <HAL_GPIO_Init+0x250>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x222>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <HAL_GPIO_Init+0x254>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x21e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x258>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x21a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_GPIO_Init+0x25c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x216>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <HAL_GPIO_Init+0x260>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x212>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_GPIO_Init+0x264>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x20e>
 8000e8e:	2309      	movs	r3, #9
 8000e90:	e02d      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e92:	230a      	movs	r3, #10
 8000e94:	e02b      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e96:	2308      	movs	r3, #8
 8000e98:	e029      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e027      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e025      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e023      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e021      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e01f      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e01d      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e01b      	b.n	8000eee <HAL_GPIO_Init+0x26a>
 8000eb6:	bf00      	nop
 8000eb8:	58000080 	.word	0x58000080
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58000400 	.word	0x58000400
 8000ec4:	58020000 	.word	0x58020000
 8000ec8:	58020400 	.word	0x58020400
 8000ecc:	58020800 	.word	0x58020800
 8000ed0:	58020c00 	.word	0x58020c00
 8000ed4:	58021000 	.word	0x58021000
 8000ed8:	58021400 	.word	0x58021400
 8000edc:	58021800 	.word	0x58021800
 8000ee0:	58021c00 	.word	0x58021c00
 8000ee4:	58022000 	.word	0x58022000
 8000ee8:	58022400 	.word	0x58022400
 8000eec:	2300      	movs	r3, #0
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efe:	4938      	ldr	r1, [pc, #224]	; (8000fe0 <HAL_GPIO_Init+0x35c>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f ae63 	bne.w	8000c98 <HAL_GPIO_Init+0x14>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3724      	adds	r7, #36	; 0x24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58000400 	.word	0x58000400

08000fe4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_HSEM_FastTake+0x2c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3320      	adds	r3, #32
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_HSEM_FastTake+0x30>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e000      	b.n	8001002 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	58026400 	.word	0x58026400
 8001014:	80000300 	.word	0x80000300

08001018 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001022:	4906      	ldr	r1, [pc, #24]	; (800103c <HAL_HSEM_Release+0x24>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	58026400 	.word	0x58026400

08001040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b08f      	sub	sp, #60	; 0x3c
 8001044:	af0a      	add	r7, sp, #40	; 0x28
 8001046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e116      	b.n	8001280 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d106      	bne.n	8001072 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fb85 	bl	800077c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f9fd 	bl	8003490 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	687e      	ldr	r6, [r7, #4]
 800109e:	466d      	mov	r5, sp
 80010a0:	f106 0410 	add.w	r4, r6, #16
 80010a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010b4:	1d33      	adds	r3, r6, #4
 80010b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f002 f97b 	bl	80033b4 <USB_CoreInit>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0d7      	b.n	8001280 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f9eb 	bl	80034b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e04a      	b.n	8001178 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	333d      	adds	r3, #61	; 0x3d
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	333c      	adds	r3, #60	; 0x3c
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	b298      	uxth	r0, r3
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3344      	adds	r3, #68	; 0x44
 800111e:	4602      	mov	r2, r0
 8001120:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3340      	adds	r3, #64	; 0x40
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3348      	adds	r3, #72	; 0x48
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	334c      	adds	r3, #76	; 0x4c
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	3354      	adds	r3, #84	; 0x54
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	3301      	adds	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3af      	bcc.n	80010e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e044      	b.n	8001212 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3b5      	bcc.n	8001188 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	687e      	ldr	r6, [r7, #4]
 8001224:	466d      	mov	r5, sp
 8001226:	f106 0410 	add.w	r4, r6, #16
 800122a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001236:	e885 0003 	stmia.w	r5, {r0, r1}
 800123a:	1d33      	adds	r3, r6, #4
 800123c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f002 f984 	bl	800354c <USB_DevInit>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2202      	movs	r2, #2
 800124e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e014      	b.n	8001280 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f80a 	bl	8001288 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fb42 	bl	8003902 <USB_DevDisconnect>

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001288 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_PCDEx_ActivateLPM+0x44>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	10000003 	.word	0x10000003

080012d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d00a      	beq.n	80012fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e040      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e03e      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001302:	491f      	ldr	r1, [pc, #124]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800130a:	f7ff fb9b 	bl	8000a44 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001310:	e009      	b.n	8001326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001312:	f7ff fb97 	bl	8000a44 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001320:	d901      	bls.n	8001326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e028      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001332:	d1ee      	bne.n	8001312 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b1e      	cmp	r3, #30
 8001338:	d008      	beq.n	800134c <HAL_PWREx_ConfigSupply+0x7c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b2e      	cmp	r3, #46	; 0x2e
 800133e:	d005      	beq.n	800134c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b1d      	cmp	r3, #29
 8001344:	d002      	beq.n	800134c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b2d      	cmp	r3, #45	; 0x2d
 800134a:	d114      	bne.n	8001376 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800134c:	f7ff fb7a 	bl	8000a44 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001352:	e009      	b.n	8001368 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001354:	f7ff fb76 	bl	8000a44 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001362:	d901      	bls.n	8001368 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e007      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d1ee      	bne.n	8001354 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58024800 	.word	0x58024800

08001384 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	58024800 	.word	0x58024800

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f000 bc1d 	b.w	8001bf2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8087 	beq.w	80014d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c6:	4b99      	ldr	r3, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013d0:	4b96      	ldr	r3, [pc, #600]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d007      	beq.n	80013ec <HAL_RCC_OscConfig+0x48>
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	2b18      	cmp	r3, #24
 80013e0:	d110      	bne.n	8001404 <HAL_RCC_OscConfig+0x60>
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b8f      	ldr	r3, [pc, #572]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d06c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x12e>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d168      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e3f6      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x78>
 800140e:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a86      	ldr	r2, [pc, #536]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e02e      	b.n	800147a <HAL_RCC_OscConfig+0xd6>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x9a>
 8001424:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b7e      	ldr	r3, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7d      	ldr	r2, [pc, #500]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e01d      	b.n	800147a <HAL_RCC_OscConfig+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0xbe>
 8001448:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a77      	ldr	r2, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800144e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b75      	ldr	r3, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a74      	ldr	r2, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800145a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0xd6>
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d013      	beq.n	80014aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fadf 	bl	8000a44 <HAL_GetTick>
 8001486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148a:	f7ff fadb 	bl	8000a44 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e3aa      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0xe6>
 80014a8:	e014      	b.n	80014d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff facb 	bl	8000a44 <HAL_GetTick>
 80014ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fac7 	bl	8000a44 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	; 0x64
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e396      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x10e>
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80cb 	beq.w	8001678 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e2:	4b52      	ldr	r3, [pc, #328]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ec:	4b4f      	ldr	r3, [pc, #316]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_RCC_OscConfig+0x164>
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	2b18      	cmp	r3, #24
 80014fc:	d156      	bne.n	80015ac <HAL_RCC_OscConfig+0x208>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d151      	bne.n	80015ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x17c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e368      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 0219 	bic.w	r2, r3, #25
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	493f      	ldr	r1, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001532:	f7ff fa87 	bl	8000a44 <HAL_GetTick>
 8001536:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fa83 	bl	8000a44 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e352      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	f7ff faa4 	bl	8000aa4 <HAL_GetREVID>
 800155c:	4603      	mov	r3, r0
 800155e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001562:	4293      	cmp	r3, r2
 8001564:	d817      	bhi.n	8001596 <HAL_RCC_OscConfig+0x1f2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b40      	cmp	r3, #64	; 0x40
 800156c:	d108      	bne.n	8001580 <HAL_RCC_OscConfig+0x1dc>
 800156e:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001576:	4a2d      	ldr	r2, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157e:	e07b      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	031b      	lsls	r3, r3, #12
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	e070      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	061b      	lsls	r3, r3, #24
 80015a4:	4921      	ldr	r1, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015aa:	e065      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d048      	beq.n	8001646 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f023 0219 	bic.w	r2, r3, #25
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa3d 	bl	8000a44 <HAL_GetTick>
 80015ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fa39 	bl	8000a44 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e308      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	f7ff fa5a 	bl	8000aa4 <HAL_GetREVID>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d81a      	bhi.n	8001630 <HAL_RCC_OscConfig+0x28c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d108      	bne.n	8001614 <HAL_RCC_OscConfig+0x270>
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	6053      	str	r3, [r2, #4]
 8001612:	e031      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	031b      	lsls	r3, r3, #12
 8001622:	4902      	ldr	r1, [pc, #8]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e026      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
 800162a:	bf00      	nop
 800162c:	58024400 	.word	0x58024400
 8001630:	4b9a      	ldr	r3, [pc, #616]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4997      	ldr	r1, [pc, #604]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a94      	ldr	r2, [pc, #592]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff f9f7 	bl	8000a44 <HAL_GetTick>
 8001656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff f9f3 	bl	8000a44 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e2c2      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800166c:	4b8b      	ldr	r3, [pc, #556]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a9 	beq.w	80017d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001686:	4b85      	ldr	r3, [pc, #532]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800168e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001690:	4b82      	ldr	r3, [pc, #520]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d007      	beq.n	80016ac <HAL_RCC_OscConfig+0x308>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b18      	cmp	r3, #24
 80016a0:	d13a      	bne.n	8001718 <HAL_RCC_OscConfig+0x374>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d135      	bne.n	8001718 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ac:	4b7b      	ldr	r3, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x320>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b80      	cmp	r3, #128	; 0x80
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e296      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c4:	f7ff f9ee 	bl	8000aa4 <HAL_GetREVID>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d817      	bhi.n	8001702 <HAL_RCC_OscConfig+0x35e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_OscConfig+0x348>
 80016da:	4b70      	ldr	r3, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016e2:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ea:	e075      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ec:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	069b      	lsls	r3, r3, #26
 80016fa:	4968      	ldr	r1, [pc, #416]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001700:	e06a      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	061b      	lsls	r3, r3, #24
 8001710:	4962      	ldr	r1, [pc, #392]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001712:	4313      	orrs	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001716:	e05f      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d042      	beq.n	80017a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a5d      	ldr	r2, [pc, #372]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f98a 	bl	8000a44 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001734:	f7ff f986 	bl	8000a44 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e255      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001752:	f7ff f9a7 	bl	8000aa4 <HAL_GetREVID>
 8001756:	4603      	mov	r3, r0
 8001758:	f241 0203 	movw	r2, #4099	; 0x1003
 800175c:	4293      	cmp	r3, r2
 800175e:	d817      	bhi.n	8001790 <HAL_RCC_OscConfig+0x3ec>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d108      	bne.n	800177a <HAL_RCC_OscConfig+0x3d6>
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001770:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001776:	6053      	str	r3, [r2, #4]
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
 800177a:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	069b      	lsls	r3, r3, #26
 8001788:	4944      	ldr	r1, [pc, #272]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
 800178e:	e023      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	493f      	ldr	r1, [pc, #252]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e018      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a3c      	ldr	r2, [pc, #240]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff f947 	bl	8000a44 <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017ba:	f7ff f943 	bl	8000a44 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e212      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d036      	beq.n	8001852 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d019      	beq.n	8001820 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff f924 	bl	8000a44 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff f920 	bl	8000a44 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1ef      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x45c>
 800181e:	e018      	b.n	8001852 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff f90a 	bl	8000a44 <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff f906 	bl	8000a44 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1d5      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d039      	beq.n	80018d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800186c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001872:	f7ff f8e7 	bl	8000a44 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800187a:	f7ff f8e3 	bl	8000a44 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1b2      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x4d6>
 8001898:	e01b      	b.n	80018d2 <HAL_RCC_OscConfig+0x52e>
 800189a:	bf00      	nop
 800189c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a0:	4b9b      	ldr	r3, [pc, #620]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a9a      	ldr	r2, [pc, #616]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80018a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018ac:	f7ff f8ca 	bl	8000a44 <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018b4:	f7ff f8c6 	bl	8000a44 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e195      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018c6:	4b92      	ldr	r3, [pc, #584]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8081 	beq.w	80019e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018e0:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <HAL_RCC_OscConfig+0x770>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a8b      	ldr	r2, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x770>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ec:	f7ff f8aa 	bl	8000a44 <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff f8a6 	bl	8000a44 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e175      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001906:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_RCC_OscConfig+0x770>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x584>
 800191a:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a7c      	ldr	r2, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	e02d      	b.n	8001984 <HAL_RCC_OscConfig+0x5e0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x5a6>
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a73      	ldr	r2, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001942:	f023 0304 	bic.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x5e0>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x5c8>
 8001952:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0x5e0>
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a67      	ldr	r2, [pc, #412]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a64      	ldr	r2, [pc, #400]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800197e:	f023 0304 	bic.w	r3, r3, #4
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d015      	beq.n	80019b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff f85a 	bl	8000a44 <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff f856 	bl	8000a44 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e123      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0ee      	beq.n	8001994 <HAL_RCC_OscConfig+0x5f0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f844 	bl	8000a44 <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f840 	bl	8000a44 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e10d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ee      	bne.n	80019c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8102 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019ec:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019f4:	2b18      	cmp	r3, #24
 80019f6:	f000 80bd 	beq.w	8001b74 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f040 809e 	bne.w	8001b40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a41      	ldr	r2, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f818 	bl	8000a44 <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f814 	bl	8000a44 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0e3      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_RCC_OscConfig+0x774>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4931      	ldr	r1, [pc, #196]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	628b      	str	r3, [r1, #40]	; 0x28
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	3b01      	subs	r3, #1
 8001a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a80:	4923      	ldr	r1, [pc, #140]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x778>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a9e:	00d2      	lsls	r2, r2, #3
 8001aa0:	491b      	ldr	r1, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f023 020c 	bic.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4917      	ldr	r1, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f023 0202 	bic.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	4912      	ldr	r1, [pc, #72]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7fe ff9d 	bl	8000a44 <HAL_GetTick>
 8001b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b0c:	e011      	b.n	8001b32 <HAL_RCC_OscConfig+0x78e>
 8001b0e:	bf00      	nop
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58024800 	.word	0x58024800
 8001b18:	fffffc0c 	.word	0xfffffc0c
 8001b1c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff90 	bl	8000a44 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e05f      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x858>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x77c>
 8001b3e:	e057      	b.n	8001bf0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCC_OscConfig+0x858>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x858>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ff7a 	bl	8000a44 <HAL_GetTick>
 8001b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7fe ff76 	bl	8000a44 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e045      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_OscConfig+0x858>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x7b0>
 8001b72:	e03d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x858>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x858>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d031      	beq.n	8001bec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0203 	and.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d12a      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d122      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	0a5b      	lsrs	r3, r3, #9
 8001bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0e1b      	lsrs	r3, r3, #24
 8001bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3730      	adds	r7, #48	; 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	58024400 	.word	0x58024400

08001c00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e19c      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b87      	ldr	r3, [pc, #540]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 020f 	bic.w	r2, r3, #15
 8001c2a:	4985      	ldr	r1, [pc, #532]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b83      	ldr	r3, [pc, #524]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e184      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d010      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d908      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4975      	ldr	r1, [pc, #468]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	4b70      	ldr	r3, [pc, #448]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d908      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	496a      	ldr	r1, [pc, #424]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d908      	bls.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	495e      	ldr	r1, [pc, #376]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d010      	beq.n	8001cfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d908      	bls.n	8001cfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cea:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4953      	ldr	r1, [pc, #332]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d908      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f023 020f 	bic.w	r2, r3, #15
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4947      	ldr	r1, [pc, #284]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d055      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4940      	ldr	r1, [pc, #256]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d121      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0f6      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d115      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0ea      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0de      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d6      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f023 0207 	bic.w	r2, r3, #7
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4925      	ldr	r1, [pc, #148]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7fe fe47 	bl	8000a44 <HAL_GetTick>
 8001db6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dba:	f7fe fe43 	bl	8000a44 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0be      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d1eb      	bne.n	8001dba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d208      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f023 020f 	bic.w	r2, r3, #15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d214      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 020f 	bic.w	r2, r3, #15
 8001e26:	4906      	ldr	r1, [pc, #24]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_RCC_ClockConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e086      	b.n	8001f4e <HAL_RCC_ClockConfig+0x34e>
 8001e40:	52002000 	.word	0x52002000
 8001e44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d208      	bcs.n	8001e76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	4939      	ldr	r1, [pc, #228]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d208      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	492e      	ldr	r1, [pc, #184]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d208      	bcs.n	8001ed2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d208      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4917      	ldr	r1, [pc, #92]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f00:	f000 f834 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	4912      	ldr	r1, [pc, #72]	; (8001f5c <HAL_RCC_ClockConfig+0x35c>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x358>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_RCC_ClockConfig+0x35c>)
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_RCC_ClockConfig+0x360>)
 8001f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_RCC_ClockConfig+0x364>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x368>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fd34 	bl	80009b0 <HAL_InitTick>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	08003a38 	.word	0x08003a38
 8001f60:	24000004 	.word	0x24000004
 8001f64:	24000000 	.word	0x24000000
 8001f68:	24000008 	.word	0x24000008

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f72:	4bb3      	ldr	r3, [pc, #716]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f7a:	2b18      	cmp	r3, #24
 8001f7c:	f200 8155 	bhi.w	800222a <HAL_RCC_GetSysClockFreq+0x2be>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	08001fed 	.word	0x08001fed
 8001f8c:	0800222b 	.word	0x0800222b
 8001f90:	0800222b 	.word	0x0800222b
 8001f94:	0800222b 	.word	0x0800222b
 8001f98:	0800222b 	.word	0x0800222b
 8001f9c:	0800222b 	.word	0x0800222b
 8001fa0:	0800222b 	.word	0x0800222b
 8001fa4:	0800222b 	.word	0x0800222b
 8001fa8:	08002013 	.word	0x08002013
 8001fac:	0800222b 	.word	0x0800222b
 8001fb0:	0800222b 	.word	0x0800222b
 8001fb4:	0800222b 	.word	0x0800222b
 8001fb8:	0800222b 	.word	0x0800222b
 8001fbc:	0800222b 	.word	0x0800222b
 8001fc0:	0800222b 	.word	0x0800222b
 8001fc4:	0800222b 	.word	0x0800222b
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	0800222b 	.word	0x0800222b
 8001fd0:	0800222b 	.word	0x0800222b
 8001fd4:	0800222b 	.word	0x0800222b
 8001fd8:	0800222b 	.word	0x0800222b
 8001fdc:	0800222b 	.word	0x0800222b
 8001fe0:	0800222b 	.word	0x0800222b
 8001fe4:	0800222b 	.word	0x0800222b
 8001fe8:	0800201f 	.word	0x0800201f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fec:	4b94      	ldr	r3, [pc, #592]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d009      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ff8:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	4a90      	ldr	r2, [pc, #576]	; (8002244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800200a:	e111      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800200c:	4b8d      	ldr	r3, [pc, #564]	; (8002244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800200e:	61bb      	str	r3, [r7, #24]
    break;
 8002010:	e10e      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002012:	4b8d      	ldr	r3, [pc, #564]	; (8002248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002014:	61bb      	str	r3, [r7, #24]
    break;
 8002016:	e10b      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002018:	4b8c      	ldr	r3, [pc, #560]	; (800224c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800201a:	61bb      	str	r3, [r7, #24]
    break;
 800201c:	e108      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002028:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002032:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002034:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800203e:	4b80      	ldr	r3, [pc, #512]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	08db      	lsrs	r3, r3, #3
 8002044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002056:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80e1 	beq.w	8002224 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b02      	cmp	r3, #2
 8002066:	f000 8083 	beq.w	8002170 <HAL_RCC_GetSysClockFreq+0x204>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b02      	cmp	r3, #2
 800206e:	f200 80a1 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x114>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d056      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x1c0>
 800207e:	e099      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002080:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02d      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800208c:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	4a6b      	ldr	r2, [pc, #428]	; (8002244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020e6:	e087      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002254 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800210a:	ed97 6a02 	vldr	s12, [r7, #8]
 800210e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800211a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800211e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800212a:	e065      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002136:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002258 <HAL_RCC_GetSysClockFreq+0x2ec>
 800213a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800214e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002152:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800215a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800215e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800216e:	e043      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800225c <HAL_RCC_GetSysClockFreq+0x2f0>
 800217e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002192:	ed97 6a02 	vldr	s12, [r7, #8]
 8002196:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800219a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021b2:	e021      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002258 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	0a5b      	lsrs	r3, r3, #9
 80021fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002202:	3301      	adds	r3, #1
 8002204:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002210:	edd7 6a07 	vldr	s13, [r7, #28]
 8002214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    break;
 8002228:	e002      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800222c:	61bb      	str	r3, [r7, #24]
    break;
 800222e:	bf00      	nop
  }

  return sysclockfreq;
 8002230:	69bb      	ldr	r3, [r7, #24]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400
 8002244:	03d09000 	.word	0x03d09000
 8002248:	003d0900 	.word	0x003d0900
 800224c:	007a1200 	.word	0x007a1200
 8002250:	46000000 	.word	0x46000000
 8002254:	4c742400 	.word	0x4c742400
 8002258:	4a742400 	.word	0x4a742400
 800225c:	4af42400 	.word	0x4af42400

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800226c:	2300      	movs	r3, #0
 800226e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03f      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002280:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002284:	d02a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800228a:	d824      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800228c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002290:	d018      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002296:	d81e      	bhi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800229c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a0:	d007      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022a2:	e018      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022a4:	4ba3      	ldr	r3, [pc, #652]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	4aa2      	ldr	r2, [pc, #648]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022b0:	e015      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2102      	movs	r1, #2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 ff17 	bl	80030ec <RCCEx_PLL2_Config>
 80022be:	4603      	mov	r3, r0
 80022c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022c2:	e00c      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3324      	adds	r3, #36	; 0x24
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 ffc0 	bl	8003250 <RCCEx_PLL3_Config>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022d4:	e003      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
      break;
 80022da:	e000      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022de:	7dfb      	ldrb	r3, [r7, #23]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022e4:	4b93      	ldr	r3, [pc, #588]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f0:	4990      	ldr	r1, [pc, #576]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	650b      	str	r3, [r1, #80]	; 0x50
 80022f6:	e001      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d03d      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	2b04      	cmp	r3, #4
 800230e:	d826      	bhi.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	0800232d 	.word	0x0800232d
 800231c:	0800233b 	.word	0x0800233b
 8002320:	0800234d 	.word	0x0800234d
 8002324:	08002365 	.word	0x08002365
 8002328:	08002365 	.word	0x08002365
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	4a80      	ldr	r2, [pc, #512]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002338:	e015      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fed3 	bl	80030ec <RCCEx_PLL2_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800234a:	e00c      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3324      	adds	r3, #36	; 0x24
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f000 ff7c 	bl	8003250 <RCCEx_PLL3_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800235c:	e003      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
      break;
 8002362:	e000      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800236c:	4b71      	ldr	r3, [pc, #452]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	f023 0207 	bic.w	r2, r3, #7
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	496e      	ldr	r1, [pc, #440]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	650b      	str	r3, [r1, #80]	; 0x50
 800237e:	e001      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238c:	2b00      	cmp	r3, #0
 800238e:	d042      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d02b      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800239a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239e:	d825      	bhi.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023a0:	2bc0      	cmp	r3, #192	; 0xc0
 80023a2:	d028      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80023a4:	2bc0      	cmp	r3, #192	; 0xc0
 80023a6:	d821      	bhi.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d016      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d81d      	bhi.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d007      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80023b8:	e018      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ba:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023c6:	e017      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fe8c 	bl	80030ec <RCCEx_PLL2_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023d8:	e00e      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3324      	adds	r3, #36	; 0x24
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 ff35 	bl	8003250 <RCCEx_PLL3_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023ea:	e005      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
      break;
 80023f0:	e002      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80023f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80023fe:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	494a      	ldr	r1, [pc, #296]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	650b      	str	r3, [r1, #80]	; 0x50
 8002410:	e001      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d049      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800242c:	d030      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800242e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002432:	d82a      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002434:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002438:	d02c      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800243a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800243e:	d824      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002444:	d018      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244a:	d81e      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002454:	d007      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002456:	e018      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4a35      	ldr	r2, [pc, #212]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800245e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002464:	e017      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fe3d 	bl	80030ec <RCCEx_PLL2_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002476:	e00e      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3324      	adds	r3, #36	; 0x24
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fee6 	bl	8003250 <RCCEx_PLL3_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002488:	e005      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024aa:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	658b      	str	r3, [r1, #88]	; 0x58
 80024b0:	e001      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d04b      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024cc:	d030      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80024ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d2:	d82a      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024d8:	d02e      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80024da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024de:	d824      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e4:	d018      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80024e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ea:	d81e      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d007      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80024f6:	e018      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002504:	e019      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fded 	bl	80030ec <RCCEx_PLL2_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002516:	e010      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3324      	adds	r3, #36	; 0x24
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fe96 	bl	8003250 <RCCEx_PLL3_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002528:	e007      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
      break;
 800252e:	e004      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002530:	bf00      	nop
 8002532:	e002      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002534:	58024400 	.word	0x58024400
      break;
 8002538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002540:	4b99      	ldr	r3, [pc, #612]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800254e:	4996      	ldr	r1, [pc, #600]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002550:	4313      	orrs	r3, r2
 8002552:	658b      	str	r3, [r1, #88]	; 0x58
 8002554:	e001      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d032      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256a:	2b30      	cmp	r3, #48	; 0x30
 800256c:	d01c      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800256e:	2b30      	cmp	r3, #48	; 0x30
 8002570:	d817      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002572:	2b20      	cmp	r3, #32
 8002574:	d00c      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002576:	2b20      	cmp	r3, #32
 8002578:	d813      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800257e:	2b10      	cmp	r3, #16
 8002580:	d10f      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002582:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	4a88      	ldr	r2, [pc, #544]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800258e:	e00e      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fda8 	bl	80030ec <RCCEx_PLL2_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80025a0:	e005      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80025ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d109      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80025b4:	4b7c      	ldr	r3, [pc, #496]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c0:	4979      	ldr	r1, [pc, #484]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025c6:	e001      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d047      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e0:	d030      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e6:	d82a      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025ec:	d02c      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80025ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025f2:	d824      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f8:	d018      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fe:	d81e      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d007      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800260a:	e018      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002618:	e017      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fd63 	bl	80030ec <RCCEx_PLL2_Config>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800262a:	e00e      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3324      	adds	r3, #36	; 0x24
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fe0c 	bl	8003250 <RCCEx_PLL3_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800263c:	e005      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002644:	bf00      	nop
 8002646:	e000      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002654:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	4952      	ldr	r1, [pc, #328]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800265e:	4313      	orrs	r3, r2
 8002660:	650b      	str	r3, [r1, #80]	; 0x50
 8002662:	e001      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d049      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d02e      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800267e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002682:	d828      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002684:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002688:	d02a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800268a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800268e:	d822      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002694:	d026      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800269a:	d81c      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800269c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026a0:	d010      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80026a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026a6:	d816      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01d      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d111      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fd17 	bl	80030ec <RCCEx_PLL2_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026c2:	e012      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fdc0 	bl	8003250 <RCCEx_PLL3_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026d4:	e009      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
      break;
 80026da:	e006      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026dc:	bf00      	nop
 80026de:	e004      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026e0:	bf00      	nop
 80026e2:	e002      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026e4:	bf00      	nop
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fc:	492a      	ldr	r1, [pc, #168]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	650b      	str	r3, [r1, #80]	; 0x50
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d04d      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271e:	d02e      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002724:	d828      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d02a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002730:	d822      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002732:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002736:	d026      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800273c:	d81c      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800273e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002742:	d010      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002748:	d816      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01d      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800274e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002752:	d111      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fcc6 	bl	80030ec <RCCEx_PLL2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002764:	e012      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3324      	adds	r3, #36	; 0x24
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fd6f 	bl	8003250 <RCCEx_PLL3_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002776:	e009      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
      break;
 800277c:	e006      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800277e:	bf00      	nop
 8002780:	e004      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002782:	bf00      	nop
 8002784:	e002      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002786:	bf00      	nop
 8002788:	e000      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800278a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027a0:	4901      	ldr	r1, [pc, #4]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	658b      	str	r3, [r1, #88]	; 0x58
 80027a6:	e003      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80027a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02f      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c4:	d00e      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80027c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ca:	d814      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80027d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d4:	d10f      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d6:	4baf      	ldr	r3, [pc, #700]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	4aae      	ldr	r2, [pc, #696]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027e2:	e00c      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fc7e 	bl	80030ec <RCCEx_PLL2_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
      break;
 80027fa:	e000      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80027fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002804:	4ba3      	ldr	r3, [pc, #652]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002810:	49a0      	ldr	r1, [pc, #640]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002812:	4313      	orrs	r3, r2
 8002814:	650b      	str	r3, [r1, #80]	; 0x50
 8002816:	e001      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d032      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	2b03      	cmp	r3, #3
 800282e:	d81b      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800286f 	.word	0x0800286f
 800283c:	08002849 	.word	0x08002849
 8002840:	08002857 	.word	0x08002857
 8002844:	0800286f 	.word	0x0800286f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4a91      	ldr	r2, [pc, #580]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002854:	e00c      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fc45 	bl	80030ec <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002866:	e003      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
      break;
 800286c:	e000      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800286e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002876:	4b87      	ldr	r3, [pc, #540]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4984      	ldr	r1, [pc, #528]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002884:	4313      	orrs	r3, r2
 8002886:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002888:	e001      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8086 	beq.w	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289c:	4b7e      	ldr	r3, [pc, #504]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7d      	ldr	r2, [pc, #500]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a8:	f7fe f8cc 	bl	8000a44 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ae:	e009      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7fe f8c8 	bl	8000a44 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d902      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	75fb      	strb	r3, [r7, #23]
        break;
 80028c2:	e005      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d166      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028d6:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028e0:	4053      	eors	r3, r2
 80028e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d013      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ea:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028f4:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002900:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800290c:	4a61      	ldr	r2, [pc, #388]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291c:	d115      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe f891 	bl	8000a44 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002924:	e00b      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe f88d 	bl	8000a44 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d902      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	75fb      	strb	r3, [r7, #23]
            break;
 800293c:	e005      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293e:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ed      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d126      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295e:	d10d      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800296e:	0919      	lsrs	r1, r3, #4
 8002970:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002972:	400b      	ands	r3, r1
 8002974:	4947      	ldr	r1, [pc, #284]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002976:	4313      	orrs	r3, r2
 8002978:	610b      	str	r3, [r1, #16]
 800297a:	e005      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800297c:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002982:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002986:	6113      	str	r3, [r2, #16]
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800298a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	493f      	ldr	r1, [pc, #252]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002998:	4313      	orrs	r3, r2
 800299a:	670b      	str	r3, [r1, #112]	; 0x70
 800299c:	e004      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	75bb      	strb	r3, [r7, #22]
 80029a2:	e001      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8085 	beq.w	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	2b28      	cmp	r3, #40	; 0x28
 80029bc:	d866      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	08002aa1 	.word	0x08002aa1
 80029c8:	08002a8d 	.word	0x08002a8d
 80029cc:	08002a8d 	.word	0x08002a8d
 80029d0:	08002a8d 	.word	0x08002a8d
 80029d4:	08002a8d 	.word	0x08002a8d
 80029d8:	08002a8d 	.word	0x08002a8d
 80029dc:	08002a8d 	.word	0x08002a8d
 80029e0:	08002a8d 	.word	0x08002a8d
 80029e4:	08002a69 	.word	0x08002a69
 80029e8:	08002a8d 	.word	0x08002a8d
 80029ec:	08002a8d 	.word	0x08002a8d
 80029f0:	08002a8d 	.word	0x08002a8d
 80029f4:	08002a8d 	.word	0x08002a8d
 80029f8:	08002a8d 	.word	0x08002a8d
 80029fc:	08002a8d 	.word	0x08002a8d
 8002a00:	08002a8d 	.word	0x08002a8d
 8002a04:	08002a7b 	.word	0x08002a7b
 8002a08:	08002a8d 	.word	0x08002a8d
 8002a0c:	08002a8d 	.word	0x08002a8d
 8002a10:	08002a8d 	.word	0x08002a8d
 8002a14:	08002a8d 	.word	0x08002a8d
 8002a18:	08002a8d 	.word	0x08002a8d
 8002a1c:	08002a8d 	.word	0x08002a8d
 8002a20:	08002a8d 	.word	0x08002a8d
 8002a24:	08002aa1 	.word	0x08002aa1
 8002a28:	08002a8d 	.word	0x08002a8d
 8002a2c:	08002a8d 	.word	0x08002a8d
 8002a30:	08002a8d 	.word	0x08002a8d
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a8d 	.word	0x08002a8d
 8002a44:	08002aa1 	.word	0x08002aa1
 8002a48:	08002a8d 	.word	0x08002a8d
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002a8d 	.word	0x08002a8d
 8002a64:	08002aa1 	.word	0x08002aa1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb3c 	bl	80030ec <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a78:	e013      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3324      	adds	r3, #36	; 0x24
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fbe5 	bl	8003250 <RCCEx_PLL3_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	e007      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
 8002a98:	58024800 	.word	0x58024800
 8002a9c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002aa8:	4b96      	ldr	r3, [pc, #600]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab4:	4993      	ldr	r1, [pc, #588]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	654b      	str	r3, [r1, #84]	; 0x54
 8002aba:	e001      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d038      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d821      	bhi.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b1f 	.word	0x08002b1f
 8002ae0:	08002af5 	.word	0x08002af5
 8002ae4:	08002b07 	.word	0x08002b07
 8002ae8:	08002b1f 	.word	0x08002b1f
 8002aec:	08002b1f 	.word	0x08002b1f
 8002af0:	08002b1f 	.word	0x08002b1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 faf6 	bl	80030ec <RCCEx_PLL2_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b04:	e00c      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3324      	adds	r3, #36	; 0x24
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fb9f 	bl	8003250 <RCCEx_PLL3_Config>
 8002b12:	4603      	mov	r3, r0
 8002b14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b16:	e003      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1c:	e000      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b26:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	4974      	ldr	r1, [pc, #464]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	654b      	str	r3, [r1, #84]	; 0x54
 8002b38:	e001      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d821      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b9f 	.word	0x08002b9f
 8002b60:	08002b75 	.word	0x08002b75
 8002b64:	08002b87 	.word	0x08002b87
 8002b68:	08002b9f 	.word	0x08002b9f
 8002b6c:	08002b9f 	.word	0x08002b9f
 8002b70:	08002b9f 	.word	0x08002b9f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fab6 	bl	80030ec <RCCEx_PLL2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3324      	adds	r3, #36	; 0x24
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fb5f 	bl	8003250 <RCCEx_PLL3_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b96:	e003      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	f023 0207 	bic.w	r2, r3, #7
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	4953      	ldr	r1, [pc, #332]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8002bba:	e001      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d04b      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd6:	d02e      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bdc:	d828      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d02a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d822      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bee:	d026      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002bf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf4:	d81c      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c00:	d816      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01d      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fa6a 	bl	80030ec <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c1c:	e012      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fb13 	bl	8003250 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e009      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c36:	bf00      	nop
 8002c38:	e004      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c58:	492a      	ldr	r1, [pc, #168]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	654b      	str	r3, [r1, #84]	; 0x54
 8002c5e:	e001      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04d      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c7a:	d02e      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002c7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c80:	d828      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d02a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d822      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c92:	d026      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c98:	d81c      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca4:	d816      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa18 	bl	80030ec <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cc0:	e012      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fac1 	bl	8003250 <RCCEx_PLL3_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cfc:	4901      	ldr	r1, [pc, #4]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	658b      	str	r3, [r1, #88]	; 0x58
 8002d02:	e003      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d04b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d22:	d02e      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002d24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d28:	d828      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2e:	d02a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d34:	d822      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d3a:	d026      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002d3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d40:	d81c      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d46:	d010      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4c:	d816      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01d      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	d111      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f9c4 	bl	80030ec <RCCEx_PLL2_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d68:	e012      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3324      	adds	r3, #36	; 0x24
 8002d6e:	2102      	movs	r1, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fa6d 	bl	8003250 <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d7a:	e009      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	e006      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d96:	4b9d      	ldr	r3, [pc, #628]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da4:	4999      	ldr	r1, [pc, #612]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	658b      	str	r3, [r1, #88]	; 0x58
 8002daa:	e001      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc6:	d10a      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fa3e 	bl	8003250 <RCCEx_PLL3_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002dde:	4b8b      	ldr	r3, [pc, #556]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dec:	4987      	ldr	r1, [pc, #540]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d10a      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3324      	adds	r3, #36	; 0x24
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fa1d 	bl	8003250 <RCCEx_PLL3_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e20:	4b7a      	ldr	r3, [pc, #488]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	4977      	ldr	r1, [pc, #476]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d034      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e4a:	d01d      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e50:	d817      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002e5c:	e011      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f941 	bl	80030ec <RCCEx_PLL2_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e6e:	e00c      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f9ea 	bl	8003250 <RCCEx_PLL3_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
      break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e90:	4b5e      	ldr	r3, [pc, #376]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e9e:	495b      	ldr	r1, [pc, #364]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	658b      	str	r3, [r1, #88]	; 0x58
 8002ea4:	e001      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d033      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ebc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ec0:	d01c      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002ec2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ec6:	d816      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed2:	d007      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002ed4:	e00f      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	4a4c      	ldr	r2, [pc, #304]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ee2:	e00c      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3324      	adds	r3, #36	; 0x24
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f9b0 	bl	8003250 <RCCEx_PLL3_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f12:	493e      	ldr	r1, [pc, #248]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	654b      	str	r3, [r1, #84]	; 0x54
 8002f18:	e001      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d029      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d007      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002f38:	e00f      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f3a:	4b34      	ldr	r3, [pc, #208]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	4a33      	ldr	r2, [pc, #204]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f46:	e00b      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f8cc 	bl	80030ec <RCCEx_PLL2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f58:	e002      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	4926      	ldr	r1, [pc, #152]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f78:	e001      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3324      	adds	r3, #36	; 0x24
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f95d 	bl	8003250 <RCCEx_PLL3_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d033      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fb4:	d017      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fba:	d811      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc0:	d013      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	d80b      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd0:	d106      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002fde:	e007      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003002:	4902      	ldr	r1, [pc, #8]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003004:	4313      	orrs	r3, r2
 8003006:	654b      	str	r3, [r1, #84]	; 0x54
 8003008:	e004      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	492e      	ldr	r1, [pc, #184]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800302e:	4313      	orrs	r3, r2
 8003030:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800304c:	4926      	ldr	r1, [pc, #152]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306a:	491f      	ldr	r1, [pc, #124]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800306c:	4313      	orrs	r3, r2
 800306e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003086:	6113      	str	r3, [r2, #16]
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003092:	4915      	ldr	r1, [pc, #84]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003094:	4313      	orrs	r3, r2
 8003096:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da08      	bge.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	4906      	ldr	r1, [pc, #24]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80030d2:	7dbb      	ldrb	r3, [r7, #22]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	58024400 	.word	0x58024400

080030ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d101      	bne.n	800310a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e099      	b.n	800323e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800310a:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4e      	ldr	r2, [pc, #312]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003110:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003116:	f7fd fc95 	bl	8000a44 <HAL_GetTick>
 800311a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800311c:	e008      	b.n	8003130 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800311e:	f7fd fc91 	bl	8000a44 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e086      	b.n	800323e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003130:	4b45      	ldr	r3, [pc, #276]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	031b      	lsls	r3, r3, #12
 800314a:	493f      	ldr	r1, [pc, #252]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	628b      	str	r3, [r1, #40]	; 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	3b01      	subs	r3, #1
 8003156:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	025b      	lsls	r3, r3, #9
 8003162:	b29b      	uxth	r3, r3
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	3b01      	subs	r3, #1
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003180:	4931      	ldr	r1, [pc, #196]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003186:	4b30      	ldr	r3, [pc, #192]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	492d      	ldr	r1, [pc, #180]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f023 0220 	bic.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4928      	ldr	r1, [pc, #160]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	4a26      	ldr	r2, [pc, #152]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031b0:	f023 0310 	bic.w	r3, r3, #16
 80031b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <RCCEx_PLL2_Config+0x160>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	69d2      	ldr	r2, [r2, #28]
 80031c2:	00d2      	lsls	r2, r2, #3
 80031c4:	4920      	ldr	r1, [pc, #128]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80031ca:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031d0:	f043 0310 	orr.w	r3, r3, #16
 80031d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031e8:	e00f      	b.n	800320a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031fc:	e005      	b.n	800320a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	4a11      	ldr	r2, [pc, #68]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003208:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003210:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003216:	f7fd fc15 	bl	8000a44 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800321c:	e008      	b.n	8003230 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800321e:	f7fd fc11 	bl	8000a44 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e006      	b.n	800323e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <RCCEx_PLL2_Config+0x15c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
 800324c:	ffff0007 	.word	0xffff0007

08003250 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800325e:	4b53      	ldr	r3, [pc, #332]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b03      	cmp	r3, #3
 8003268:	d101      	bne.n	800326e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e099      	b.n	80033a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4e      	ldr	r2, [pc, #312]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327a:	f7fd fbe3 	bl	8000a44 <HAL_GetTick>
 800327e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003280:	e008      	b.n	8003294 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003282:	f7fd fbdf 	bl	8000a44 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e086      	b.n	80033a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003294:	4b45      	ldr	r3, [pc, #276]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	051b      	lsls	r3, r3, #20
 80032ae:	493f      	ldr	r1, [pc, #252]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	628b      	str	r3, [r1, #40]	; 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	025b      	lsls	r3, r3, #9
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	3b01      	subs	r3, #1
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032e4:	4931      	ldr	r1, [pc, #196]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	492d      	ldr	r1, [pc, #180]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4928      	ldr	r1, [pc, #160]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	4a26      	ldr	r2, [pc, #152]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 800331c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <RCCEx_PLL3_Config+0x160>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	69d2      	ldr	r2, [r2, #28]
 8003326:	00d2      	lsls	r2, r2, #3
 8003328:	4920      	ldr	r1, [pc, #128]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003346:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800334a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800334c:	e00f      	b.n	800336e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d106      	bne.n	8003362 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 800335a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800335e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003360:	e005      	b.n	800336e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	4a11      	ldr	r2, [pc, #68]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fd fb63 	bl	8000a44 <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003380:	e008      	b.n	8003394 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003382:	f7fd fb5f 	bl	8000a44 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e006      	b.n	80033a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <RCCEx_PLL3_Config+0x15c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400
 80033b0:	ffff0007 	.word	0xffff0007

080033b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033b4:	b084      	sub	sp, #16
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	f107 001c 	add.w	r0, r7, #28
 80033c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d120      	bne.n	800340e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <USB_CoreInit+0xd4>)
 80033de:	4013      	ands	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 faac 	bl	8003960 <USB_CoreReset>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	e01a      	b.n	8003444 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 faa0 	bl	8003960 <USB_CoreReset>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
 8003436:	e005      	b.n	8003444 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	2b01      	cmp	r3, #1
 8003448:	d116      	bne.n	8003478 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <USB_CoreInit+0xd8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f043 0206 	orr.w	r2, r3, #6
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003484:	b004      	add	sp, #16
 8003486:	4770      	bx	lr
 8003488:	ffbdffbf 	.word	0xffbdffbf
 800348c:	03ee0000 	.word	0x03ee0000

08003490 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 0201 	bic.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d115      	bne.n	8003500 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fd fabb 	bl	8000a5c <HAL_Delay>
      ms++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa29 	bl	8003944 <USB_GetMode>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d01e      	beq.n	8003536 <USB_SetCurrentMode+0x84>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b31      	cmp	r3, #49	; 0x31
 80034fc:	d9f0      	bls.n	80034e0 <USB_SetCurrentMode+0x2e>
 80034fe:	e01a      	b.n	8003536 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003512:	2001      	movs	r0, #1
 8003514:	f7fd faa2 	bl	8000a5c <HAL_Delay>
      ms++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa10 	bl	8003944 <USB_GetMode>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <USB_SetCurrentMode+0x84>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b31      	cmp	r3, #49	; 0x31
 800352e:	d9f0      	bls.n	8003512 <USB_SetCurrentMode+0x60>
 8003530:	e001      	b.n	8003536 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e005      	b.n	8003542 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b32      	cmp	r3, #50	; 0x32
 800353a:	d101      	bne.n	8003540 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800354c:	b084      	sub	sp, #16
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800355a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e009      	b.n	8003580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3340      	adds	r3, #64	; 0x40
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3301      	adds	r3, #1
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0e      	cmp	r3, #14
 8003584:	d9f2      	bls.n	800356c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11c      	bne.n	80035c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e005      	b.n	80035d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035d8:	461a      	mov	r2, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e4:	4619      	mov	r1, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ec:	461a      	mov	r2, r3
 80035ee:	680b      	ldr	r3, [r1, #0]
 80035f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10c      	bne.n	8003612 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f965 	bl	80038d0 <USB_SetDevSpeed>
 8003606:	e008      	b.n	800361a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003608:	2101      	movs	r1, #1
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f960 	bl	80038d0 <USB_SetDevSpeed>
 8003610:	e003      	b.n	800361a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003612:	2103      	movs	r1, #3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f95b 	bl	80038d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800361a:	2110      	movs	r1, #16
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8f3 	bl	8003808 <USB_FlushTxFifo>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f91f 	bl	8003870 <USB_FlushRxFifo>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	461a      	mov	r2, r3
 8003650:	2300      	movs	r3, #0
 8003652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e043      	b.n	80036ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367c:	d118      	bne.n	80036b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e013      	b.n	80036c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	461a      	mov	r2, r3
 80036a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e008      	b.n	80036c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	461a      	mov	r2, r3
 80036be:	2300      	movs	r3, #0
 80036c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3301      	adds	r3, #1
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d3b7      	bcc.n	8003666 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	e043      	b.n	8003784 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800370e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003712:	d118      	bne.n	8003746 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	461a      	mov	r2, r3
 8003728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e013      	b.n	8003758 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	461a      	mov	r2, r3
 800373e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e008      	b.n	8003758 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	461a      	mov	r2, r3
 8003754:	2300      	movs	r3, #0
 8003756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	461a      	mov	r2, r3
 8003766:	2300      	movs	r3, #0
 8003768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	461a      	mov	r2, r3
 8003778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800377c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	d3b7      	bcc.n	80036fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80037ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f043 0210 	orr.w	r2, r3, #16
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699a      	ldr	r2, [r3, #24]
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <USB_DevInit+0x2b4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <USB_DevInit+0x2b8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037fc:	b004      	add	sp, #16
 80037fe:	4770      	bx	lr
 8003800:	803c3800 	.word	0x803c3800
 8003804:	40000004 	.word	0x40000004

08003808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3301      	adds	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a13      	ldr	r2, [pc, #76]	; (800386c <USB_FlushTxFifo+0x64>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e01b      	b.n	8003860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	daf2      	bge.n	8003816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	019b      	lsls	r3, r3, #6
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <USB_FlushTxFifo+0x64>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e006      	b.n	8003860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d0f0      	beq.n	8003840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	00030d40 	.word	0x00030d40

08003870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a11      	ldr	r2, [pc, #68]	; (80038cc <USB_FlushRxFifo+0x5c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e018      	b.n	80038c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	daf2      	bge.n	800387c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2210      	movs	r2, #16
 800389e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <USB_FlushRxFifo+0x5c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e006      	b.n	80038c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d0f0      	beq.n	80038a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	00030d40 	.word	0x00030d40

080038d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800391c:	f023 0303 	bic.w	r3, r3, #3
 8003920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0301 	and.w	r3, r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <USB_CoreReset+0x64>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e01b      	b.n	80039b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	daf2      	bge.n	800396c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <USB_CoreReset+0x64>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e006      	b.n	80039b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d0f0      	beq.n	8003996 <USB_CoreReset+0x36>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	00030d40 	.word	0x00030d40

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	; (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	; (8003a0c <__libc_init_array+0x44>)
 80039dc:	f000 f820 	bl	8003a20 <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08003a48 	.word	0x08003a48
 8003a04:	08003a48 	.word	0x08003a48
 8003a08:	08003a48 	.word	0x08003a48
 8003a0c:	08003a4c 	.word	0x08003a4c

08003a10 <memset>:
 8003a10:	4402      	add	r2, r0
 8003a12:	4603      	mov	r3, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <_init>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr

08003a2c <_fini>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr
