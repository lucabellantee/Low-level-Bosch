
ProvaPwmLaboratorio_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b410  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0810b6b0  0810b6b0  0001b6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810bba4  0810bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810bbac  0810bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810bbb0  0810bbb0  0001bbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  10000000  0810bbb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  10000200  0810bdb0  00020200  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10000400  0810bdb0  00020400  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016943  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002969  00000000  00000000  00036b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011d8  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010d0  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad78  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000167a0  00000000  00000000  000764f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018465a  00000000  00000000  0008cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002112f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000613c  00000000  00000000  00211344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000200 	.word	0x10000200
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b698 	.word	0x0810b698

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000204 	.word	0x10000204
 81002dc:	0810b698 	.word	0x0810b698

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <Voltage2Duty>:
float DegreeSec2RPM(float speed_degsec){
	float speed_rpm = speed_degsec * 60/360;
	return speed_rpm;
}

float Voltage2Duty(float u){
 8101138:	b580      	push	{r7, lr}
 810113a:	b084      	sub	sp, #16
 810113c:	af00      	add	r7, sp, #0
 810113e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(u<=0){
 8101142:	edd7 7a01 	vldr	s15, [r7, #4]
 8101146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810114e:	d805      	bhi.n	810115c <Voltage2Duty+0x24>
		u=-u;
 8101150:	edd7 7a01 	vldr	s15, [r7, #4]
 8101154:	eef1 7a67 	vneg.f32	s15, s15
 8101158:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	float duty = 100*u/V_MAX;
 810115c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101160:	ed9f 7a21 	vldr	s14, [pc, #132]	; 81011e8 <Voltage2Duty+0xb0>
 8101164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101168:	eef1 6a0e 	vmov.f32	s13, #30	; 0x40f00000  7.5
 810116c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101170:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty>100){
 8101174:	edd7 7a03 	vldr	s15, [r7, #12]
 8101178:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81011e8 <Voltage2Duty+0xb0>
 810117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101184:	dd02      	ble.n	810118c <Voltage2Duty+0x54>
		duty=100;
 8101186:	4b19      	ldr	r3, [pc, #100]	; (81011ec <Voltage2Duty+0xb4>)
 8101188:	60fb      	str	r3, [r7, #12]
 810118a:	e01e      	b.n	81011ca <Voltage2Duty+0x92>
	} else if(duty<7.2 && duty > 0){
 810118c:	68f8      	ldr	r0, [r7, #12]
 810118e:	f7ff fa63 	bl	8100658 <__aeabi_f2d>
 8101192:	a313      	add	r3, pc, #76	; (adr r3, 81011e0 <Voltage2Duty+0xa8>)
 8101194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101198:	f7ff fd28 	bl	8100bec <__aeabi_dcmplt>
 810119c:	4603      	mov	r3, r0
 810119e:	2b00      	cmp	r3, #0
 81011a0:	d009      	beq.n	81011b6 <Voltage2Duty+0x7e>
 81011a2:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011ae:	dd02      	ble.n	81011b6 <Voltage2Duty+0x7e>
		duty = 7.5;
 81011b0:	4b0f      	ldr	r3, [pc, #60]	; (81011f0 <Voltage2Duty+0xb8>)
 81011b2:	60fb      	str	r3, [r7, #12]
 81011b4:	e009      	b.n	81011ca <Voltage2Duty+0x92>
	} else if(duty<0){
 81011b6:	edd7 7a03 	vldr	s15, [r7, #12]
 81011ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c2:	d502      	bpl.n	81011ca <Voltage2Duty+0x92>
		duty = 0;
 81011c4:	f04f 0300 	mov.w	r3, #0
 81011c8:	60fb      	str	r3, [r7, #12]
	}

	return duty;
 81011ca:	68fb      	ldr	r3, [r7, #12]
 81011cc:	ee07 3a90 	vmov	s15, r3
}
 81011d0:	eeb0 0a67 	vmov.f32	s0, s15
 81011d4:	3710      	adds	r7, #16
 81011d6:	46bd      	mov	sp, r7
 81011d8:	bd80      	pop	{r7, pc}
 81011da:	bf00      	nop
 81011dc:	f3af 8000 	nop.w
 81011e0:	cccccccd 	.word	0xcccccccd
 81011e4:	401ccccc 	.word	0x401ccccc
 81011e8:	42c80000 	.word	0x42c80000
 81011ec:	42c80000 	.word	0x42c80000
 81011f0:	40f00000 	.word	0x40f00000

081011f4 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011f4:	b480      	push	{r7}
 81011f6:	b085      	sub	sp, #20
 81011f8:	af00      	add	r7, sp, #0
 81011fa:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;

	if(y_ref>=0){
 81011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8101202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810120a:	db02      	blt.n	8101212 <Ref2Direction+0x1e>
		dir = 0; //Senso orario
 810120c:	2300      	movs	r3, #0
 810120e:	73fb      	strb	r3, [r7, #15]
 8101210:	e001      	b.n	8101216 <Ref2Direction+0x22>
		//dir = 1;
	} else {
		dir = 1; //Senso antiorario
 8101212:	2301      	movs	r3, #1
 8101214:	73fb      	strb	r3, [r7, #15]
		//dir = 0;
	}
	return dir;
 8101216:	7bfb      	ldrb	r3, [r7, #15]
}
 8101218:	4618      	mov	r0, r3
 810121a:	3714      	adds	r7, #20
 810121c:	46bd      	mov	sp, r7
 810121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101222:	4770      	bx	lr

08101224 <set_PWM_and_dir>:

void set_PWM_and_dir(uint32_t duty, uint8_t dir){
 8101224:	b580      	push	{r7, lr}
 8101226:	b082      	sub	sp, #8
 8101228:	af00      	add	r7, sp, #0
 810122a:	6078      	str	r0, [r7, #4]
 810122c:	460b      	mov	r3, r1
 810122e:	70fb      	strb	r3, [r7, #3]

	TIM2->CCR1 = ((float)duty/100)*TIM2->ARR;
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	ee07 3a90 	vmov	s15, r3
 8101236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810123a:	eddf 6a14 	vldr	s13, [pc, #80]	; 810128c <set_PWM_and_dir+0x68>
 810123e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8101246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101248:	ee07 3a90 	vmov	s15, r3
 810124c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8101258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810125c:	ee17 2a90 	vmov	r2, s15
 8101260:	635a      	str	r2, [r3, #52]	; 0x34
	/*uint8_t current_dir = (TIM4->CR1 & 0x0010);
	printf("%d\r\n",current_dir);
	if(dir != current_dir){
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_0);
	}*/
	if( dir == 0){
 8101262:	78fb      	ldrb	r3, [r7, #3]
 8101264:	2b00      	cmp	r3, #0
 8101266:	d105      	bne.n	8101274 <set_PWM_and_dir+0x50>
		//TIM2->CR1 = dir;
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8101268:	2200      	movs	r2, #0
 810126a:	2101      	movs	r1, #1
 810126c:	4808      	ldr	r0, [pc, #32]	; (8101290 <set_PWM_and_dir+0x6c>)
 810126e:	f001 fa79 	bl	8102764 <HAL_GPIO_WritePin>
	}else if ( dir == 1){
		//TIM2->CR1 = dir;
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
	}
}
 8101272:	e007      	b.n	8101284 <set_PWM_and_dir+0x60>
	}else if ( dir == 1){
 8101274:	78fb      	ldrb	r3, [r7, #3]
 8101276:	2b01      	cmp	r3, #1
 8101278:	d104      	bne.n	8101284 <set_PWM_and_dir+0x60>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 810127a:	2201      	movs	r2, #1
 810127c:	2101      	movs	r1, #1
 810127e:	4804      	ldr	r0, [pc, #16]	; (8101290 <set_PWM_and_dir+0x6c>)
 8101280:	f001 fa70 	bl	8102764 <HAL_GPIO_WritePin>
}
 8101284:	bf00      	nop
 8101286:	3708      	adds	r7, #8
 8101288:	46bd      	mov	sp, r7
 810128a:	bd80      	pop	{r7, pc}
 810128c:	42c80000 	.word	0x42c80000
 8101290:	58020800 	.word	0x58020800

08101294 <init_PID>:
#include "PID.h"

//Questa funziona setta i prametri principali
void init_PID(PID* p, float Tc, float u_max, float u_min){
 8101294:	b480      	push	{r7}
 8101296:	b085      	sub	sp, #20
 8101298:	af00      	add	r7, sp, #0
 810129a:	60f8      	str	r0, [r7, #12]
 810129c:	ed87 0a02 	vstr	s0, [r7, #8]
 81012a0:	edc7 0a01 	vstr	s1, [r7, #4]
 81012a4:	ed87 1a00 	vstr	s2, [r7]
	p->Tc = Tc;
 81012a8:	68fb      	ldr	r3, [r7, #12]
 81012aa:	68ba      	ldr	r2, [r7, #8]
 81012ac:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 81012ae:	68fb      	ldr	r3, [r7, #12]
 81012b0:	687a      	ldr	r2, [r7, #4]
 81012b2:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 81012b4:	68fb      	ldr	r3, [r7, #12]
 81012b6:	683a      	ldr	r2, [r7, #0]
 81012b8:	615a      	str	r2, [r3, #20]
}
 81012ba:	bf00      	nop
 81012bc:	3714      	adds	r7, #20
 81012be:	46bd      	mov	sp, r7
 81012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c4:	4770      	bx	lr

081012c6 <tune_PID>:

void tune_PID(PID*p, float Kp, float Ki, float Kd){
 81012c6:	b480      	push	{r7}
 81012c8:	b085      	sub	sp, #20
 81012ca:	af00      	add	r7, sp, #0
 81012cc:	60f8      	str	r0, [r7, #12]
 81012ce:	ed87 0a02 	vstr	s0, [r7, #8]
 81012d2:	edc7 0a01 	vstr	s1, [r7, #4]
 81012d6:	ed87 1a00 	vstr	s2, [r7]
	p->Kp = Kp;
 81012da:	68fb      	ldr	r3, [r7, #12]
 81012dc:	68ba      	ldr	r2, [r7, #8]
 81012de:	601a      	str	r2, [r3, #0]
	p->Ki = Ki;
 81012e0:	68fb      	ldr	r3, [r7, #12]
 81012e2:	687a      	ldr	r2, [r7, #4]
 81012e4:	605a      	str	r2, [r3, #4]
	p->Kd = Kd;
 81012e6:	68fb      	ldr	r3, [r7, #12]
 81012e8:	683a      	ldr	r2, [r7, #0]
 81012ea:	609a      	str	r2, [r3, #8]
}
 81012ec:	bf00      	nop
 81012ee:	3714      	adds	r7, #20
 81012f0:	46bd      	mov	sp, r7
 81012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012f6:	4770      	bx	lr

081012f8 <PID_controller>:

float PID_controller(PID* p , float y, float r){
 81012f8:	b480      	push	{r7}
 81012fa:	b08b      	sub	sp, #44	; 0x2c
 81012fc:	af00      	add	r7, sp, #0
 81012fe:	60f8      	str	r0, [r7, #12]
 8101300:	ed87 0a02 	vstr	s0, [r7, #8]
 8101304:	edc7 0a01 	vstr	s1, [r7, #4]
	//printf("------------\r\n");
	static float e_old=0, Iterm=0;
	float u;
	float newIterm;

	float e = r-y;
 8101308:	ed97 7a01 	vldr	s14, [r7, #4]
 810130c:	edd7 7a02 	vldr	s15, [r7, #8]
 8101310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101314:	edc7 7a08 	vstr	s15, [r7, #32]
	//printf("--------------------------------------\r\n");
	//printf("err: %f\r\n", e);
	//printf("|||||||||||||||||||||||||||||||||||||||||||\r\n");
	//printf("-------------------\r\n");

	float Pterm = p->Kp*e;
 8101318:	68fb      	ldr	r3, [r7, #12]
 810131a:	edd3 7a00 	vldr	s15, [r3]
 810131e:	ed97 7a08 	vldr	s14, [r7, #32]
 8101322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101326:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm = Iterm + (p->Ki)*p->Tc*e_old;
 810132a:	68fb      	ldr	r3, [r7, #12]
 810132c:	ed93 7a01 	vldr	s14, [r3, #4]
 8101330:	68fb      	ldr	r3, [r7, #12]
 8101332:	edd3 7a03 	vldr	s15, [r3, #12]
 8101336:	ee27 7a27 	vmul.f32	s14, s14, s15
 810133a:	4b2b      	ldr	r3, [pc, #172]	; (81013e8 <PID_controller+0xf0>)
 810133c:	edd3 7a00 	vldr	s15, [r3]
 8101340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101344:	4b29      	ldr	r3, [pc, #164]	; (81013ec <PID_controller+0xf4>)
 8101346:	edd3 7a00 	vldr	s15, [r3]
 810134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810134e:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm = (p->Kd/p->Tc)*(e - e_old);
 8101352:	68fb      	ldr	r3, [r7, #12]
 8101354:	edd3 6a02 	vldr	s13, [r3, #8]
 8101358:	68fb      	ldr	r3, [r7, #12]
 810135a:	edd3 7a03 	vldr	s15, [r3, #12]
 810135e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101362:	4b21      	ldr	r3, [pc, #132]	; (81013e8 <PID_controller+0xf0>)
 8101364:	edd3 7a00 	vldr	s15, [r3]
 8101368:	edd7 6a08 	vldr	s13, [r7, #32]
 810136c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101374:	edc7 7a05 	vstr	s15, [r7, #20]

	e_old = e;
 8101378:	4a1b      	ldr	r2, [pc, #108]	; (81013e8 <PID_controller+0xf0>)
 810137a:	6a3b      	ldr	r3, [r7, #32]
 810137c:	6013      	str	r3, [r2, #0]

	u = Pterm + newIterm + Dterm;
 810137e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101382:	edd7 7a06 	vldr	s15, [r7, #24]
 8101386:	ee77 7a27 	vadd.f32	s15, s14, s15
 810138a:	ed97 7a05 	vldr	s14, [r7, #20]
 810138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101392:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	//printf("uuuuuuuuuuuuuu: %f \r\n", u);
	//printf("*********************************\r\n");
	if(u > p->u_max){
 8101396:	68fb      	ldr	r3, [r7, #12]
 8101398:	edd3 7a04 	vldr	s15, [r3, #16]
 810139c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 81013a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013a8:	dd03      	ble.n	81013b2 <PID_controller+0xba>
		u = p->u_max; //limite massimo
 81013aa:	68fb      	ldr	r3, [r7, #12]
 81013ac:	691b      	ldr	r3, [r3, #16]
 81013ae:	627b      	str	r3, [r7, #36]	; 0x24
 81013b0:	e010      	b.n	81013d4 <PID_controller+0xdc>
	} else if(u < p->u_min){
 81013b2:	68fb      	ldr	r3, [r7, #12]
 81013b4:	edd3 7a05 	vldr	s15, [r3, #20]
 81013b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 81013bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013c4:	d503      	bpl.n	81013ce <PID_controller+0xd6>
		u = p->u_min; //limite minimo
 81013c6:	68fb      	ldr	r3, [r7, #12]
 81013c8:	695b      	ldr	r3, [r3, #20]
 81013ca:	627b      	str	r3, [r7, #36]	; 0x24
 81013cc:	e002      	b.n	81013d4 <PID_controller+0xdc>
	} else {
		Iterm = newIterm;
 81013ce:	4a07      	ldr	r2, [pc, #28]	; (81013ec <PID_controller+0xf4>)
 81013d0:	69bb      	ldr	r3, [r7, #24]
 81013d2:	6013      	str	r3, [r2, #0]
	}


	//printf("-----------------\r\n");
	return u;
 81013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013d6:	ee07 3a90 	vmov	s15, r3
}
 81013da:	eeb0 0a67 	vmov.f32	s0, s15
 81013de:	372c      	adds	r7, #44	; 0x2c
 81013e0:	46bd      	mov	sp, r7
 81013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e6:	4770      	bx	lr
 81013e8:	1000021c 	.word	0x1000021c
 81013ec:	10000220 	.word	0x10000220

081013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81013f0:	b5b0      	push	{r4, r5, r7, lr}
 81013f2:	b086      	sub	sp, #24
 81013f4:	af04      	add	r7, sp, #16
 //  void set_vel_neutra(float);
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81013f6:	4b91      	ldr	r3, [pc, #580]	; (810163c <main+0x24c>)
 81013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013fc:	4a8f      	ldr	r2, [pc, #572]	; (810163c <main+0x24c>)
 81013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101406:	4b8d      	ldr	r3, [pc, #564]	; (810163c <main+0x24c>)
 8101408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101410:	607b      	str	r3, [r7, #4]
 8101412:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101414:	2001      	movs	r0, #1
 8101416:	f001 f9fd 	bl	8102814 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810141a:	f001 fa87 	bl	810292c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810141e:	2201      	movs	r2, #1
 8101420:	2102      	movs	r1, #2
 8101422:	2000      	movs	r0, #0
 8101424:	f001 fa08 	bl	8102838 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101428:	4b85      	ldr	r3, [pc, #532]	; (8101640 <main+0x250>)
 810142a:	681b      	ldr	r3, [r3, #0]
 810142c:	091b      	lsrs	r3, r3, #4
 810142e:	f003 030f 	and.w	r3, r3, #15
 8101432:	2b07      	cmp	r3, #7
 8101434:	d108      	bne.n	8101448 <main+0x58>
 8101436:	4b83      	ldr	r3, [pc, #524]	; (8101644 <main+0x254>)
 8101438:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810143c:	4a81      	ldr	r2, [pc, #516]	; (8101644 <main+0x254>)
 810143e:	f043 0301 	orr.w	r3, r3, #1
 8101442:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101446:	e007      	b.n	8101458 <main+0x68>
 8101448:	4b7e      	ldr	r3, [pc, #504]	; (8101644 <main+0x254>)
 810144a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810144e:	4a7d      	ldr	r2, [pc, #500]	; (8101644 <main+0x254>)
 8101450:	f043 0301 	orr.w	r3, r3, #1
 8101454:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101458:	f000 fdfc 	bl	8102054 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810145c:	f000 fa8c 	bl	8101978 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101460:	f000 fa3e 	bl	81018e0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8101464:	f000 f922 	bl	81016ac <MX_TIM2_Init>
  MX_TIM4_Init();
 8101468:	f000 f9e4 	bl	8101834 <MX_TIM4_Init>
  MX_TIM3_Init();
 810146c:	f000 f994 	bl	8101798 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8101470:	2100      	movs	r1, #0
 8101472:	4875      	ldr	r0, [pc, #468]	; (8101648 <main+0x258>)
 8101474:	f003 f8da 	bl	810462c <HAL_TIM_PWM_Start>
	//int percentuale = 20;
	//int minPot = 0;


  //HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_1);
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8101478:	213c      	movs	r1, #60	; 0x3c
 810147a:	4874      	ldr	r0, [pc, #464]	; (810164c <main+0x25c>)
 810147c:	f003 fa8a 	bl	8104994 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8101480:	4873      	ldr	r0, [pc, #460]	; (8101650 <main+0x260>)
 8101482:	f002 fff9 	bl	8104478 <HAL_TIM_Base_Start_IT>
  init_PID(&pid, dt, V_MAX, -V_MAX);
 8101486:	4b73      	ldr	r3, [pc, #460]	; (8101654 <main+0x264>)
 8101488:	e9d3 2300 	ldrd	r2, r3, [r3]
 810148c:	4610      	mov	r0, r2
 810148e:	4619      	mov	r1, r3
 8101490:	f7ff fc32 	bl	8100cf8 <__aeabi_d2f>
 8101494:	4603      	mov	r3, r0
 8101496:	eeb9 1a0e 	vmov.f32	s2, #158	; 0xc0f00000 -7.5
 810149a:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 810149e:	ee00 3a10 	vmov	s0, r3
 81014a2:	486d      	ldr	r0, [pc, #436]	; (8101658 <main+0x268>)
 81014a4:	f7ff fef6 	bl	8101294 <init_PID>
  tune_PID(&pid, 0.004, 0.0076, 0);  // Pi vecchio : 0.017  //0.0012
 81014a8:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 810165c <main+0x26c>
 81014ac:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8101660 <main+0x270>
 81014b0:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8101664 <main+0x274>
 81014b4:	4868      	ldr	r0, [pc, #416]	; (8101658 <main+0x268>)
 81014b6:	f7ff ff06 	bl	81012c6 <tune_PID>
	   */
	  //TODO LUCA: ANTIORARIO --> 1 , ORARIO --> 0 ||  MA ALLE VOLTE LA DIR ME LAMETTE A 0 E A 1
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
	  //TIM2->CCR1=100;	//min duty = 72

     if(flag_Tc == 1)
 81014ba:	4b6b      	ldr	r3, [pc, #428]	; (8101668 <main+0x278>)
 81014bc:	681b      	ldr	r3, [r3, #0]
 81014be:	2b01      	cmp	r3, #1
 81014c0:	d1fb      	bne.n	81014ba <main+0xca>
     {
    	 //flag_100ms = 0;
    	// printf("\n Flag: %d\r\n",flag20_ms);
    	 flag20_ms++;
 81014c2:	4b6a      	ldr	r3, [pc, #424]	; (810166c <main+0x27c>)
 81014c4:	681b      	ldr	r3, [r3, #0]
 81014c6:	3301      	adds	r3, #1
 81014c8:	4a68      	ldr	r2, [pc, #416]	; (810166c <main+0x27c>)
 81014ca:	6013      	str	r3, [r2, #0]
    	 flag_Tc = 0;
 81014cc:	4b66      	ldr	r3, [pc, #408]	; (8101668 <main+0x278>)
 81014ce:	2200      	movs	r2, #0
 81014d0:	601a      	str	r2, [r3, #0]
    	 counts = TIM4->CNT; //Prendo il valore
 81014d2:	4b67      	ldr	r3, [pc, #412]	; (8101670 <main+0x280>)
 81014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81014d6:	461a      	mov	r2, r3
 81014d8:	4b66      	ldr	r3, [pc, #408]	; (8101674 <main+0x284>)
 81014da:	601a      	str	r2, [r3, #0]
    	 //printf("%d\r\n", counts);
    	 //printf("------------\r\n");

    	 //Angolo
    	 diff_angle = (double)(counts-(TIM4->ARR/2))*360 / (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO);
 81014dc:	4b65      	ldr	r3, [pc, #404]	; (8101674 <main+0x284>)
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	461a      	mov	r2, r3
 81014e2:	4b63      	ldr	r3, [pc, #396]	; (8101670 <main+0x280>)
 81014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81014e6:	085b      	lsrs	r3, r3, #1
 81014e8:	1ad3      	subs	r3, r2, r3
 81014ea:	4618      	mov	r0, r3
 81014ec:	f7ff f892 	bl	8100614 <__aeabi_ui2d>
 81014f0:	f04f 0200 	mov.w	r2, #0
 81014f4:	4b60      	ldr	r3, [pc, #384]	; (8101678 <main+0x288>)
 81014f6:	f7ff f907 	bl	8100708 <__aeabi_dmul>
 81014fa:	4602      	mov	r2, r0
 81014fc:	460b      	mov	r3, r1
 81014fe:	4614      	mov	r4, r2
 8101500:	461d      	mov	r5, r3
 8101502:	4b5e      	ldr	r3, [pc, #376]	; (810167c <main+0x28c>)
 8101504:	681b      	ldr	r3, [r3, #0]
 8101506:	4a5e      	ldr	r2, [pc, #376]	; (8101680 <main+0x290>)
 8101508:	6812      	ldr	r2, [r2, #0]
 810150a:	fb02 f303 	mul.w	r3, r2, r3
 810150e:	4a5d      	ldr	r2, [pc, #372]	; (8101684 <main+0x294>)
 8101510:	6812      	ldr	r2, [r2, #0]
 8101512:	fb02 f303 	mul.w	r3, r2, r3
 8101516:	4618      	mov	r0, r3
 8101518:	f7ff f88c 	bl	8100634 <__aeabi_i2d>
 810151c:	4602      	mov	r2, r0
 810151e:	460b      	mov	r3, r1
 8101520:	4620      	mov	r0, r4
 8101522:	4629      	mov	r1, r5
 8101524:	f7ff fa1a 	bl	810095c <__aeabi_ddiv>
 8101528:	4602      	mov	r2, r0
 810152a:	460b      	mov	r3, r1
 810152c:	4956      	ldr	r1, [pc, #344]	; (8101688 <main+0x298>)
 810152e:	e9c1 2300 	strd	r2, r3, [r1]
    	 speed = diff_angle/dt;
 8101532:	4b55      	ldr	r3, [pc, #340]	; (8101688 <main+0x298>)
 8101534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101538:	4b46      	ldr	r3, [pc, #280]	; (8101654 <main+0x264>)
 810153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810153e:	f7ff fa0d 	bl	810095c <__aeabi_ddiv>
 8101542:	4602      	mov	r2, r0
 8101544:	460b      	mov	r3, r1
 8101546:	4610      	mov	r0, r2
 8101548:	4619      	mov	r1, r3
 810154a:	f7ff fbd5 	bl	8100cf8 <__aeabi_d2f>
 810154e:	4603      	mov	r3, r0
 8101550:	4a4e      	ldr	r2, [pc, #312]	; (810168c <main+0x29c>)
 8101552:	6013      	str	r3, [r2, #0]
    	 } else {
    		 y_ref = 60;
    	 }*/

    	 //u = PID_controller(&pid, speed_rpm, y_ref);
    	 u = PID_controller(&pid, speed*60/360, y_ref);
 8101554:	4b4d      	ldr	r3, [pc, #308]	; (810168c <main+0x29c>)
 8101556:	edd3 7a00 	vldr	s15, [r3]
 810155a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8101690 <main+0x2a0>
 810155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101562:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8101694 <main+0x2a4>
 8101566:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 810156a:	4b4b      	ldr	r3, [pc, #300]	; (8101698 <main+0x2a8>)
 810156c:	edd3 7a00 	vldr	s15, [r3]
 8101570:	eef0 0a67 	vmov.f32	s1, s15
 8101574:	eeb0 0a47 	vmov.f32	s0, s14
 8101578:	4837      	ldr	r0, [pc, #220]	; (8101658 <main+0x268>)
 810157a:	f7ff febd 	bl	81012f8 <PID_controller>
 810157e:	ee10 3a10 	vmov	r3, s0
 8101582:	4618      	mov	r0, r3
 8101584:	f7ff f868 	bl	8100658 <__aeabi_f2d>
 8101588:	4602      	mov	r2, r0
 810158a:	460b      	mov	r3, r1
 810158c:	4943      	ldr	r1, [pc, #268]	; (810169c <main+0x2ac>)
 810158e:	e9c1 2300 	strd	r2, r3, [r1]
    	 duty = Voltage2Duty(u);
 8101592:	4b42      	ldr	r3, [pc, #264]	; (810169c <main+0x2ac>)
 8101594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101598:	4610      	mov	r0, r2
 810159a:	4619      	mov	r1, r3
 810159c:	f7ff fbac 	bl	8100cf8 <__aeabi_d2f>
 81015a0:	4603      	mov	r3, r0
 81015a2:	ee00 3a10 	vmov	s0, r3
 81015a6:	f7ff fdc7 	bl	8101138 <Voltage2Duty>
 81015aa:	ee10 3a10 	vmov	r3, s0
 81015ae:	4618      	mov	r0, r3
 81015b0:	f7ff f852 	bl	8100658 <__aeabi_f2d>
 81015b4:	4602      	mov	r2, r0
 81015b6:	460b      	mov	r3, r1
 81015b8:	4939      	ldr	r1, [pc, #228]	; (81016a0 <main+0x2b0>)
 81015ba:	e9c1 2300 	strd	r2, r3, [r1]
    	 //printf("%f,%f\n",u,y_ref);
    	 direction = Ref2Direction(y_ref);
 81015be:	4b36      	ldr	r3, [pc, #216]	; (8101698 <main+0x2a8>)
 81015c0:	edd3 7a00 	vldr	s15, [r3]
 81015c4:	eeb0 0a67 	vmov.f32	s0, s15
 81015c8:	f7ff fe14 	bl	81011f4 <Ref2Direction>
 81015cc:	4603      	mov	r3, r0
 81015ce:	461a      	mov	r2, r3
 81015d0:	4b34      	ldr	r3, [pc, #208]	; (81016a4 <main+0x2b4>)
 81015d2:	701a      	strb	r2, [r3, #0]
    	 //printf("%f\r\n",(float)direction);
    	 set_PWM_and_dir((uint32_t)duty, direction);
 81015d4:	4b32      	ldr	r3, [pc, #200]	; (81016a0 <main+0x2b0>)
 81015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81015da:	4610      	mov	r0, r2
 81015dc:	4619      	mov	r1, r3
 81015de:	f7ff fb6b 	bl	8100cb8 <__aeabi_d2uiz>
 81015e2:	4602      	mov	r2, r0
 81015e4:	4b2f      	ldr	r3, [pc, #188]	; (81016a4 <main+0x2b4>)
 81015e6:	781b      	ldrb	r3, [r3, #0]
 81015e8:	4619      	mov	r1, r3
 81015ea:	4610      	mov	r0, r2
 81015ec:	f7ff fe1a 	bl	8101224 <set_PWM_and_dir>
    	 //set_PWM_and_dir(50, direction);
    	 printf("%f;%d;%f\r\n", speed*60/360, (uint32_t)duty, u);
 81015f0:	4b26      	ldr	r3, [pc, #152]	; (810168c <main+0x29c>)
 81015f2:	edd3 7a00 	vldr	s15, [r3]
 81015f6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8101690 <main+0x2a0>
 81015fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 81015fe:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8101694 <main+0x2a4>
 8101602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101606:	ee16 0a90 	vmov	r0, s13
 810160a:	f7ff f825 	bl	8100658 <__aeabi_f2d>
 810160e:	4604      	mov	r4, r0
 8101610:	460d      	mov	r5, r1
 8101612:	4b23      	ldr	r3, [pc, #140]	; (81016a0 <main+0x2b0>)
 8101614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101618:	4610      	mov	r0, r2
 810161a:	4619      	mov	r1, r3
 810161c:	f7ff fb4c 	bl	8100cb8 <__aeabi_d2uiz>
 8101620:	4601      	mov	r1, r0
 8101622:	4b1e      	ldr	r3, [pc, #120]	; (810169c <main+0x2ac>)
 8101624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810162c:	9100      	str	r1, [sp, #0]
 810162e:	4622      	mov	r2, r4
 8101630:	462b      	mov	r3, r5
 8101632:	481d      	ldr	r0, [pc, #116]	; (81016a8 <main+0x2b8>)
 8101634:	f006 fa20 	bl	8107a78 <iprintf>
     if(flag_Tc == 1)
 8101638:	e73f      	b.n	81014ba <main+0xca>
 810163a:	bf00      	nop
 810163c:	58024400 	.word	0x58024400
 8101640:	e000ed00 	.word	0xe000ed00
 8101644:	58026400 	.word	0x58026400
 8101648:	10000224 	.word	0x10000224
 810164c:	100002bc 	.word	0x100002bc
 8101650:	10000270 	.word	0x10000270
 8101654:	10000018 	.word	0x10000018
 8101658:	10000398 	.word	0x10000398
 810165c:	00000000 	.word	0x00000000
 8101660:	3bf9096c 	.word	0x3bf9096c
 8101664:	3b83126f 	.word	0x3b83126f
 8101668:	100003c8 	.word	0x100003c8
 810166c:	100003e4 	.word	0x100003e4
 8101670:	40000800 	.word	0x40000800
 8101674:	100003d0 	.word	0x100003d0
 8101678:	40768000 	.word	0x40768000
 810167c:	1000000c 	.word	0x1000000c
 8101680:	10000014 	.word	0x10000014
 8101684:	10000010 	.word	0x10000010
 8101688:	100003d8 	.word	0x100003d8
 810168c:	100003e0 	.word	0x100003e0
 8101690:	42700000 	.word	0x42700000
 8101694:	43b40000 	.word	0x43b40000
 8101698:	10000008 	.word	0x10000008
 810169c:	100003b0 	.word	0x100003b0
 81016a0:	100003c0 	.word	0x100003c0
 81016a4:	100003b8 	.word	0x100003b8
 81016a8:	0810b6b0 	.word	0x0810b6b0

081016ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81016ac:	b580      	push	{r7, lr}
 81016ae:	b08e      	sub	sp, #56	; 0x38
 81016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81016b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81016b6:	2200      	movs	r2, #0
 81016b8:	601a      	str	r2, [r3, #0]
 81016ba:	605a      	str	r2, [r3, #4]
 81016bc:	609a      	str	r2, [r3, #8]
 81016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81016c0:	f107 031c 	add.w	r3, r7, #28
 81016c4:	2200      	movs	r2, #0
 81016c6:	601a      	str	r2, [r3, #0]
 81016c8:	605a      	str	r2, [r3, #4]
 81016ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81016cc:	463b      	mov	r3, r7
 81016ce:	2200      	movs	r2, #0
 81016d0:	601a      	str	r2, [r3, #0]
 81016d2:	605a      	str	r2, [r3, #4]
 81016d4:	609a      	str	r2, [r3, #8]
 81016d6:	60da      	str	r2, [r3, #12]
 81016d8:	611a      	str	r2, [r3, #16]
 81016da:	615a      	str	r2, [r3, #20]
 81016dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81016de:	4b2d      	ldr	r3, [pc, #180]	; (8101794 <MX_TIM2_Init+0xe8>)
 81016e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81016e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 81016e6:	4b2b      	ldr	r3, [pc, #172]	; (8101794 <MX_TIM2_Init+0xe8>)
 81016e8:	22ef      	movs	r2, #239	; 0xef
 81016ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81016ec:	4b29      	ldr	r3, [pc, #164]	; (8101794 <MX_TIM2_Init+0xe8>)
 81016ee:	2200      	movs	r2, #0
 81016f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 81016f2:	4b28      	ldr	r3, [pc, #160]	; (8101794 <MX_TIM2_Init+0xe8>)
 81016f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 81016f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81016fa:	4b26      	ldr	r3, [pc, #152]	; (8101794 <MX_TIM2_Init+0xe8>)
 81016fc:	2200      	movs	r2, #0
 81016fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101700:	4b24      	ldr	r3, [pc, #144]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101702:	2200      	movs	r2, #0
 8101704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8101706:	4823      	ldr	r0, [pc, #140]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101708:	f002 fe5e 	bl	81043c8 <HAL_TIM_Base_Init>
 810170c:	4603      	mov	r3, r0
 810170e:	2b00      	cmp	r3, #0
 8101710:	d001      	beq.n	8101716 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8101712:	f000 fa03 	bl	8101b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810171a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 810171c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101720:	4619      	mov	r1, r3
 8101722:	481c      	ldr	r0, [pc, #112]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101724:	f003 fbf8 	bl	8104f18 <HAL_TIM_ConfigClockSource>
 8101728:	4603      	mov	r3, r0
 810172a:	2b00      	cmp	r3, #0
 810172c:	d001      	beq.n	8101732 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 810172e:	f000 f9f5 	bl	8101b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8101732:	4818      	ldr	r0, [pc, #96]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101734:	f002 ff18 	bl	8104568 <HAL_TIM_PWM_Init>
 8101738:	4603      	mov	r3, r0
 810173a:	2b00      	cmp	r3, #0
 810173c:	d001      	beq.n	8101742 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 810173e:	f000 f9ed 	bl	8101b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101742:	2300      	movs	r3, #0
 8101744:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101746:	2300      	movs	r3, #0
 8101748:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810174a:	f107 031c 	add.w	r3, r7, #28
 810174e:	4619      	mov	r1, r3
 8101750:	4810      	ldr	r0, [pc, #64]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101752:	f004 f933 	bl	81059bc <HAL_TIMEx_MasterConfigSynchronization>
 8101756:	4603      	mov	r3, r0
 8101758:	2b00      	cmp	r3, #0
 810175a:	d001      	beq.n	8101760 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 810175c:	f000 f9de 	bl	8101b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101760:	2360      	movs	r3, #96	; 0x60
 8101762:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101764:	2300      	movs	r3, #0
 8101766:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101768:	2300      	movs	r3, #0
 810176a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810176c:	2300      	movs	r3, #0
 810176e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101770:	463b      	mov	r3, r7
 8101772:	2200      	movs	r2, #0
 8101774:	4619      	mov	r1, r3
 8101776:	4807      	ldr	r0, [pc, #28]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101778:	f003 faba 	bl	8104cf0 <HAL_TIM_PWM_ConfigChannel>
 810177c:	4603      	mov	r3, r0
 810177e:	2b00      	cmp	r3, #0
 8101780:	d001      	beq.n	8101786 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8101782:	f000 f9cb 	bl	8101b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8101786:	4803      	ldr	r0, [pc, #12]	; (8101794 <MX_TIM2_Init+0xe8>)
 8101788:	f000 fa98 	bl	8101cbc <HAL_TIM_MspPostInit>

}
 810178c:	bf00      	nop
 810178e:	3738      	adds	r7, #56	; 0x38
 8101790:	46bd      	mov	sp, r7
 8101792:	bd80      	pop	{r7, pc}
 8101794:	10000224 	.word	0x10000224

08101798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8101798:	b580      	push	{r7, lr}
 810179a:	b088      	sub	sp, #32
 810179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810179e:	f107 0310 	add.w	r3, r7, #16
 81017a2:	2200      	movs	r2, #0
 81017a4:	601a      	str	r2, [r3, #0]
 81017a6:	605a      	str	r2, [r3, #4]
 81017a8:	609a      	str	r2, [r3, #8]
 81017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81017ac:	1d3b      	adds	r3, r7, #4
 81017ae:	2200      	movs	r2, #0
 81017b0:	601a      	str	r2, [r3, #0]
 81017b2:	605a      	str	r2, [r3, #4]
 81017b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81017b6:	4b1d      	ldr	r3, [pc, #116]	; (810182c <MX_TIM3_Init+0x94>)
 81017b8:	4a1d      	ldr	r2, [pc, #116]	; (8101830 <MX_TIM3_Init+0x98>)
 81017ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 81017bc:	4b1b      	ldr	r3, [pc, #108]	; (810182c <MX_TIM3_Init+0x94>)
 81017be:	220b      	movs	r2, #11
 81017c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81017c2:	4b1a      	ldr	r3, [pc, #104]	; (810182c <MX_TIM3_Init+0x94>)
 81017c4:	2200      	movs	r2, #0
 81017c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81017c8:	4b18      	ldr	r3, [pc, #96]	; (810182c <MX_TIM3_Init+0x94>)
 81017ca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81017ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81017d0:	4b16      	ldr	r3, [pc, #88]	; (810182c <MX_TIM3_Init+0x94>)
 81017d2:	2200      	movs	r2, #0
 81017d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81017d6:	4b15      	ldr	r3, [pc, #84]	; (810182c <MX_TIM3_Init+0x94>)
 81017d8:	2200      	movs	r2, #0
 81017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81017dc:	4813      	ldr	r0, [pc, #76]	; (810182c <MX_TIM3_Init+0x94>)
 81017de:	f002 fdf3 	bl	81043c8 <HAL_TIM_Base_Init>
 81017e2:	4603      	mov	r3, r0
 81017e4:	2b00      	cmp	r3, #0
 81017e6:	d001      	beq.n	81017ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 81017e8:	f000 f998 	bl	8101b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81017f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81017f2:	f107 0310 	add.w	r3, r7, #16
 81017f6:	4619      	mov	r1, r3
 81017f8:	480c      	ldr	r0, [pc, #48]	; (810182c <MX_TIM3_Init+0x94>)
 81017fa:	f003 fb8d 	bl	8104f18 <HAL_TIM_ConfigClockSource>
 81017fe:	4603      	mov	r3, r0
 8101800:	2b00      	cmp	r3, #0
 8101802:	d001      	beq.n	8101808 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8101804:	f000 f98a 	bl	8101b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101808:	2300      	movs	r3, #0
 810180a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810180c:	2300      	movs	r3, #0
 810180e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101810:	1d3b      	adds	r3, r7, #4
 8101812:	4619      	mov	r1, r3
 8101814:	4805      	ldr	r0, [pc, #20]	; (810182c <MX_TIM3_Init+0x94>)
 8101816:	f004 f8d1 	bl	81059bc <HAL_TIMEx_MasterConfigSynchronization>
 810181a:	4603      	mov	r3, r0
 810181c:	2b00      	cmp	r3, #0
 810181e:	d001      	beq.n	8101824 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8101820:	f000 f97c 	bl	8101b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8101824:	bf00      	nop
 8101826:	3720      	adds	r7, #32
 8101828:	46bd      	mov	sp, r7
 810182a:	bd80      	pop	{r7, pc}
 810182c:	10000270 	.word	0x10000270
 8101830:	40000400 	.word	0x40000400

08101834 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8101834:	b580      	push	{r7, lr}
 8101836:	b08c      	sub	sp, #48	; 0x30
 8101838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810183a:	f107 030c 	add.w	r3, r7, #12
 810183e:	2224      	movs	r2, #36	; 0x24
 8101840:	2100      	movs	r1, #0
 8101842:	4618      	mov	r0, r3
 8101844:	f005 fa96 	bl	8106d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101848:	463b      	mov	r3, r7
 810184a:	2200      	movs	r2, #0
 810184c:	601a      	str	r2, [r3, #0]
 810184e:	605a      	str	r2, [r3, #4]
 8101850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101852:	4b21      	ldr	r3, [pc, #132]	; (81018d8 <MX_TIM4_Init+0xa4>)
 8101854:	4a21      	ldr	r2, [pc, #132]	; (81018dc <MX_TIM4_Init+0xa8>)
 8101856:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8101858:	4b1f      	ldr	r3, [pc, #124]	; (81018d8 <MX_TIM4_Init+0xa4>)
 810185a:	2200      	movs	r2, #0
 810185c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 810185e:	4b1e      	ldr	r3, [pc, #120]	; (81018d8 <MX_TIM4_Init+0xa4>)
 8101860:	2200      	movs	r2, #0
 8101862:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8101864:	4b1c      	ldr	r3, [pc, #112]	; (81018d8 <MX_TIM4_Init+0xa4>)
 8101866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810186a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810186c:	4b1a      	ldr	r3, [pc, #104]	; (81018d8 <MX_TIM4_Init+0xa4>)
 810186e:	2200      	movs	r2, #0
 8101870:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101872:	4b19      	ldr	r3, [pc, #100]	; (81018d8 <MX_TIM4_Init+0xa4>)
 8101874:	2200      	movs	r2, #0
 8101876:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101878:	2303      	movs	r3, #3
 810187a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810187c:	2300      	movs	r3, #0
 810187e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101880:	2301      	movs	r3, #1
 8101882:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101884:	2300      	movs	r3, #0
 8101886:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101888:	230a      	movs	r3, #10
 810188a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810188c:	2300      	movs	r3, #0
 810188e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101890:	2301      	movs	r3, #1
 8101892:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101894:	2300      	movs	r3, #0
 8101896:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8101898:	230a      	movs	r3, #10
 810189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 810189c:	f107 030c 	add.w	r3, r7, #12
 81018a0:	4619      	mov	r1, r3
 81018a2:	480d      	ldr	r0, [pc, #52]	; (81018d8 <MX_TIM4_Init+0xa4>)
 81018a4:	f002 ffd0 	bl	8104848 <HAL_TIM_Encoder_Init>
 81018a8:	4603      	mov	r3, r0
 81018aa:	2b00      	cmp	r3, #0
 81018ac:	d001      	beq.n	81018b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 81018ae:	f000 f935 	bl	8101b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81018b2:	2300      	movs	r3, #0
 81018b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81018b6:	2300      	movs	r3, #0
 81018b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81018ba:	463b      	mov	r3, r7
 81018bc:	4619      	mov	r1, r3
 81018be:	4806      	ldr	r0, [pc, #24]	; (81018d8 <MX_TIM4_Init+0xa4>)
 81018c0:	f004 f87c 	bl	81059bc <HAL_TIMEx_MasterConfigSynchronization>
 81018c4:	4603      	mov	r3, r0
 81018c6:	2b00      	cmp	r3, #0
 81018c8:	d001      	beq.n	81018ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 81018ca:	f000 f927 	bl	8101b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 81018ce:	bf00      	nop
 81018d0:	3730      	adds	r7, #48	; 0x30
 81018d2:	46bd      	mov	sp, r7
 81018d4:	bd80      	pop	{r7, pc}
 81018d6:	bf00      	nop
 81018d8:	100002bc 	.word	0x100002bc
 81018dc:	40000800 	.word	0x40000800

081018e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81018e0:	b580      	push	{r7, lr}
 81018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81018e4:	4b22      	ldr	r3, [pc, #136]	; (8101970 <MX_USART3_UART_Init+0x90>)
 81018e6:	4a23      	ldr	r2, [pc, #140]	; (8101974 <MX_USART3_UART_Init+0x94>)
 81018e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81018ea:	4b21      	ldr	r3, [pc, #132]	; (8101970 <MX_USART3_UART_Init+0x90>)
 81018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81018f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81018f2:	4b1f      	ldr	r3, [pc, #124]	; (8101970 <MX_USART3_UART_Init+0x90>)
 81018f4:	2200      	movs	r2, #0
 81018f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81018f8:	4b1d      	ldr	r3, [pc, #116]	; (8101970 <MX_USART3_UART_Init+0x90>)
 81018fa:	2200      	movs	r2, #0
 81018fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81018fe:	4b1c      	ldr	r3, [pc, #112]	; (8101970 <MX_USART3_UART_Init+0x90>)
 8101900:	2200      	movs	r2, #0
 8101902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101904:	4b1a      	ldr	r3, [pc, #104]	; (8101970 <MX_USART3_UART_Init+0x90>)
 8101906:	220c      	movs	r2, #12
 8101908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810190a:	4b19      	ldr	r3, [pc, #100]	; (8101970 <MX_USART3_UART_Init+0x90>)
 810190c:	2200      	movs	r2, #0
 810190e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101910:	4b17      	ldr	r3, [pc, #92]	; (8101970 <MX_USART3_UART_Init+0x90>)
 8101912:	2200      	movs	r2, #0
 8101914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101916:	4b16      	ldr	r3, [pc, #88]	; (8101970 <MX_USART3_UART_Init+0x90>)
 8101918:	2200      	movs	r2, #0
 810191a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810191c:	4b14      	ldr	r3, [pc, #80]	; (8101970 <MX_USART3_UART_Init+0x90>)
 810191e:	2200      	movs	r2, #0
 8101920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101922:	4b13      	ldr	r3, [pc, #76]	; (8101970 <MX_USART3_UART_Init+0x90>)
 8101924:	2200      	movs	r2, #0
 8101926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101928:	4811      	ldr	r0, [pc, #68]	; (8101970 <MX_USART3_UART_Init+0x90>)
 810192a:	f004 f8f3 	bl	8105b14 <HAL_UART_Init>
 810192e:	4603      	mov	r3, r0
 8101930:	2b00      	cmp	r3, #0
 8101932:	d001      	beq.n	8101938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101934:	f000 f8f2 	bl	8101b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101938:	2100      	movs	r1, #0
 810193a:	480d      	ldr	r0, [pc, #52]	; (8101970 <MX_USART3_UART_Init+0x90>)
 810193c:	f005 f926 	bl	8106b8c <HAL_UARTEx_SetTxFifoThreshold>
 8101940:	4603      	mov	r3, r0
 8101942:	2b00      	cmp	r3, #0
 8101944:	d001      	beq.n	810194a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101946:	f000 f8e9 	bl	8101b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810194a:	2100      	movs	r1, #0
 810194c:	4808      	ldr	r0, [pc, #32]	; (8101970 <MX_USART3_UART_Init+0x90>)
 810194e:	f005 f95b 	bl	8106c08 <HAL_UARTEx_SetRxFifoThreshold>
 8101952:	4603      	mov	r3, r0
 8101954:	2b00      	cmp	r3, #0
 8101956:	d001      	beq.n	810195c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101958:	f000 f8e0 	bl	8101b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810195c:	4804      	ldr	r0, [pc, #16]	; (8101970 <MX_USART3_UART_Init+0x90>)
 810195e:	f005 f8dc 	bl	8106b1a <HAL_UARTEx_DisableFifoMode>
 8101962:	4603      	mov	r3, r0
 8101964:	2b00      	cmp	r3, #0
 8101966:	d001      	beq.n	810196c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101968:	f000 f8d8 	bl	8101b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810196c:	bf00      	nop
 810196e:	bd80      	pop	{r7, pc}
 8101970:	10000308 	.word	0x10000308
 8101974:	40004800 	.word	0x40004800

08101978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101978:	b580      	push	{r7, lr}
 810197a:	b08a      	sub	sp, #40	; 0x28
 810197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810197e:	f107 0314 	add.w	r3, r7, #20
 8101982:	2200      	movs	r2, #0
 8101984:	601a      	str	r2, [r3, #0]
 8101986:	605a      	str	r2, [r3, #4]
 8101988:	609a      	str	r2, [r3, #8]
 810198a:	60da      	str	r2, [r3, #12]
 810198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810198e:	4b3f      	ldr	r3, [pc, #252]	; (8101a8c <MX_GPIO_Init+0x114>)
 8101990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101994:	4a3d      	ldr	r2, [pc, #244]	; (8101a8c <MX_GPIO_Init+0x114>)
 8101996:	f043 0304 	orr.w	r3, r3, #4
 810199a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810199e:	4b3b      	ldr	r3, [pc, #236]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019a4:	f003 0304 	and.w	r3, r3, #4
 81019a8:	613b      	str	r3, [r7, #16]
 81019aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81019ac:	4b37      	ldr	r3, [pc, #220]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019b2:	4a36      	ldr	r2, [pc, #216]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019b4:	f043 0301 	orr.w	r3, r3, #1
 81019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019bc:	4b33      	ldr	r3, [pc, #204]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019c2:	f003 0301 	and.w	r3, r3, #1
 81019c6:	60fb      	str	r3, [r7, #12]
 81019c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81019ca:	4b30      	ldr	r3, [pc, #192]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019d0:	4a2e      	ldr	r2, [pc, #184]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019d2:	f043 0302 	orr.w	r3, r3, #2
 81019d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019da:	4b2c      	ldr	r3, [pc, #176]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019e0:	f003 0302 	and.w	r3, r3, #2
 81019e4:	60bb      	str	r3, [r7, #8]
 81019e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81019e8:	4b28      	ldr	r3, [pc, #160]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ee:	4a27      	ldr	r2, [pc, #156]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019f0:	f043 0308 	orr.w	r3, r3, #8
 81019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019f8:	4b24      	ldr	r3, [pc, #144]	; (8101a8c <MX_GPIO_Init+0x114>)
 81019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019fe:	f003 0308 	and.w	r3, r3, #8
 8101a02:	607b      	str	r3, [r7, #4]
 8101a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, GPIO_PIN_RESET);
 8101a06:	2200      	movs	r2, #0
 8101a08:	2101      	movs	r1, #1
 8101a0a:	4821      	ldr	r0, [pc, #132]	; (8101a90 <MX_GPIO_Init+0x118>)
 8101a0c:	f000 feaa 	bl	8102764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8101a10:	2200      	movs	r2, #0
 8101a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101a16:	481f      	ldr	r0, [pc, #124]	; (8101a94 <MX_GPIO_Init+0x11c>)
 8101a18:	f000 fea4 	bl	8102764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8101a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a28:	2300      	movs	r3, #0
 8101a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101a2c:	f107 0314 	add.w	r3, r7, #20
 8101a30:	4619      	mov	r1, r3
 8101a32:	4817      	ldr	r0, [pc, #92]	; (8101a90 <MX_GPIO_Init+0x118>)
 8101a34:	f000 fce6 	bl	8102404 <HAL_GPIO_Init>

  /*Configure GPIO pin : dir_Pin */
  GPIO_InitStruct.Pin = dir_Pin;
 8101a38:	2301      	movs	r3, #1
 8101a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101a3c:	2301      	movs	r3, #1
 8101a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a40:	2300      	movs	r3, #0
 8101a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a44:	2300      	movs	r3, #0
 8101a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(dir_GPIO_Port, &GPIO_InitStruct);
 8101a48:	f107 0314 	add.w	r3, r7, #20
 8101a4c:	4619      	mov	r1, r3
 8101a4e:	4810      	ldr	r0, [pc, #64]	; (8101a90 <MX_GPIO_Init+0x118>)
 8101a50:	f000 fcd8 	bl	8102404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8101a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101a5a:	2301      	movs	r3, #1
 8101a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a5e:	2300      	movs	r3, #0
 8101a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a62:	2300      	movs	r3, #0
 8101a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8101a66:	f107 0314 	add.w	r3, r7, #20
 8101a6a:	4619      	mov	r1, r3
 8101a6c:	4809      	ldr	r0, [pc, #36]	; (8101a94 <MX_GPIO_Init+0x11c>)
 8101a6e:	f000 fcc9 	bl	8102404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8101a72:	2200      	movs	r2, #0
 8101a74:	2100      	movs	r1, #0
 8101a76:	2028      	movs	r0, #40	; 0x28
 8101a78:	f000 fc7b 	bl	8102372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101a7c:	2028      	movs	r0, #40	; 0x28
 8101a7e:	f000 fc92 	bl	81023a6 <HAL_NVIC_EnableIRQ>

}
 8101a82:	bf00      	nop
 8101a84:	3728      	adds	r7, #40	; 0x28
 8101a86:	46bd      	mov	sp, r7
 8101a88:	bd80      	pop	{r7, pc}
 8101a8a:	bf00      	nop
 8101a8c:	58024400 	.word	0x58024400
 8101a90:	58020800 	.word	0x58020800
 8101a94:	58020400 	.word	0x58020400

08101a98 <__io_putchar>:

/* USER CODE BEGIN 4 */

  int __io_putchar(int ch)
    {
 8101a98:	b580      	push	{r7, lr}
 8101a9a:	b082      	sub	sp, #8
 8101a9c:	af00      	add	r7, sp, #0
 8101a9e:	6078      	str	r0, [r7, #4]
       HAL_UART_Transmit(&huart3, (uint8_t *)&ch , 1 , 0xFFFF);
 8101aa0:	1d39      	adds	r1, r7, #4
 8101aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101aa6:	2201      	movs	r2, #1
 8101aa8:	4803      	ldr	r0, [pc, #12]	; (8101ab8 <__io_putchar+0x20>)
 8101aaa:	f004 f883 	bl	8105bb4 <HAL_UART_Transmit>
       return ch;
 8101aae:	687b      	ldr	r3, [r7, #4]
    }
 8101ab0:	4618      	mov	r0, r3
 8101ab2:	3708      	adds	r7, #8
 8101ab4:	46bd      	mov	sp, r7
 8101ab6:	bd80      	pop	{r7, pc}
 8101ab8:	10000308 	.word	0x10000308

08101abc <HAL_TIM_PeriodElapsedCallback>:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
		}
     }*/

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8101abc:	b580      	push	{r7, lr}
 8101abe:	b082      	sub	sp, #8
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	6078      	str	r0, [r7, #4]
		if(htim == &htim3){
 8101ac4:	687b      	ldr	r3, [r7, #4]
 8101ac6:	4a0f      	ldr	r2, [pc, #60]	; (8101b04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8101ac8:	4293      	cmp	r3, r2
 8101aca:	d116      	bne.n	8101afa <HAL_TIM_PeriodElapsedCallback+0x3e>
			//flag_100ms = 1;
			counts = TIM4->CNT;
 8101acc:	4b0e      	ldr	r3, [pc, #56]	; (8101b08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8101ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ad0:	461a      	mov	r2, r3
 8101ad2:	4b0e      	ldr	r3, [pc, #56]	; (8101b0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8101ad4:	601a      	str	r2, [r3, #0]
			TIM4->CNT = TIM4->ARR / 2;
 8101ad6:	4b0c      	ldr	r3, [pc, #48]	; (8101b08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8101ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ada:	4a0b      	ldr	r2, [pc, #44]	; (8101b08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8101adc:	085b      	lsrs	r3, r3, #1
 8101ade:	6253      	str	r3, [r2, #36]	; 0x24
			HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8101ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101ae4:	480a      	ldr	r0, [pc, #40]	; (8101b10 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8101ae6:	f000 fe56 	bl	8102796 <HAL_GPIO_TogglePin>
			flag_Tc = 1;
 8101aea:	4b0a      	ldr	r3, [pc, #40]	; (8101b14 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8101aec:	2201      	movs	r2, #1
 8101aee:	601a      	str	r2, [r3, #0]
			n_ref++;
 8101af0:	4b09      	ldr	r3, [pc, #36]	; (8101b18 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	3301      	adds	r3, #1
 8101af6:	4a08      	ldr	r2, [pc, #32]	; (8101b18 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8101af8:	6013      	str	r3, [r2, #0]
		}
	}
 8101afa:	bf00      	nop
 8101afc:	3708      	adds	r7, #8
 8101afe:	46bd      	mov	sp, r7
 8101b00:	bd80      	pop	{r7, pc}
 8101b02:	bf00      	nop
 8101b04:	10000270 	.word	0x10000270
 8101b08:	40000800 	.word	0x40000800
 8101b0c:	100003d0 	.word	0x100003d0
 8101b10:	58020400 	.word	0x58020400
 8101b14:	100003c8 	.word	0x100003c8
 8101b18:	100003cc 	.word	0x100003cc

08101b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101b1c:	b480      	push	{r7}
 8101b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101b20:	b672      	cpsid	i
}
 8101b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101b24:	e7fe      	b.n	8101b24 <Error_Handler+0x8>
	...

08101b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101b28:	b480      	push	{r7}
 8101b2a:	b083      	sub	sp, #12
 8101b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101b2e:	4b0a      	ldr	r3, [pc, #40]	; (8101b58 <HAL_MspInit+0x30>)
 8101b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b34:	4a08      	ldr	r2, [pc, #32]	; (8101b58 <HAL_MspInit+0x30>)
 8101b36:	f043 0302 	orr.w	r3, r3, #2
 8101b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101b3e:	4b06      	ldr	r3, [pc, #24]	; (8101b58 <HAL_MspInit+0x30>)
 8101b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b44:	f003 0302 	and.w	r3, r3, #2
 8101b48:	607b      	str	r3, [r7, #4]
 8101b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101b4c:	bf00      	nop
 8101b4e:	370c      	adds	r7, #12
 8101b50:	46bd      	mov	sp, r7
 8101b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b56:	4770      	bx	lr
 8101b58:	58024400 	.word	0x58024400

08101b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101b5c:	b580      	push	{r7, lr}
 8101b5e:	b08a      	sub	sp, #40	; 0x28
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b64:	f107 0314 	add.w	r3, r7, #20
 8101b68:	2200      	movs	r2, #0
 8101b6a:	601a      	str	r2, [r3, #0]
 8101b6c:	605a      	str	r2, [r3, #4]
 8101b6e:	609a      	str	r2, [r3, #8]
 8101b70:	60da      	str	r2, [r3, #12]
 8101b72:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8101b74:	687b      	ldr	r3, [r7, #4]
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b7c:	d12e      	bne.n	8101bdc <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101b7e:	4b27      	ldr	r3, [pc, #156]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b84:	4a25      	ldr	r2, [pc, #148]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101b86:	f043 0301 	orr.w	r3, r3, #1
 8101b8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b8e:	4b23      	ldr	r3, [pc, #140]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b94:	f003 0301 	and.w	r3, r3, #1
 8101b98:	613b      	str	r3, [r7, #16]
 8101b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b9c:	4b1f      	ldr	r3, [pc, #124]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ba2:	4a1e      	ldr	r2, [pc, #120]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101ba4:	f043 0301 	orr.w	r3, r3, #1
 8101ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bac:	4b1b      	ldr	r3, [pc, #108]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb2:	f003 0301 	and.w	r3, r3, #1
 8101bb6:	60fb      	str	r3, [r7, #12]
 8101bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8101bba:	2302      	movs	r3, #2
 8101bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bbe:	2302      	movs	r3, #2
 8101bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc2:	2300      	movs	r3, #0
 8101bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bc6:	2300      	movs	r3, #0
 8101bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101bca:	2301      	movs	r3, #1
 8101bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101bce:	f107 0314 	add.w	r3, r7, #20
 8101bd2:	4619      	mov	r1, r3
 8101bd4:	4812      	ldr	r0, [pc, #72]	; (8101c20 <HAL_TIM_Base_MspInit+0xc4>)
 8101bd6:	f000 fc15 	bl	8102404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8101bda:	e01b      	b.n	8101c14 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	4a10      	ldr	r2, [pc, #64]	; (8101c24 <HAL_TIM_Base_MspInit+0xc8>)
 8101be2:	4293      	cmp	r3, r2
 8101be4:	d116      	bne.n	8101c14 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101be6:	4b0d      	ldr	r3, [pc, #52]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bec:	4a0b      	ldr	r2, [pc, #44]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101bee:	f043 0302 	orr.w	r3, r3, #2
 8101bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101bf6:	4b09      	ldr	r3, [pc, #36]	; (8101c1c <HAL_TIM_Base_MspInit+0xc0>)
 8101bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bfc:	f003 0302 	and.w	r3, r3, #2
 8101c00:	60bb      	str	r3, [r7, #8]
 8101c02:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8101c04:	2200      	movs	r2, #0
 8101c06:	2100      	movs	r1, #0
 8101c08:	201d      	movs	r0, #29
 8101c0a:	f000 fbb2 	bl	8102372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8101c0e:	201d      	movs	r0, #29
 8101c10:	f000 fbc9 	bl	81023a6 <HAL_NVIC_EnableIRQ>
}
 8101c14:	bf00      	nop
 8101c16:	3728      	adds	r7, #40	; 0x28
 8101c18:	46bd      	mov	sp, r7
 8101c1a:	bd80      	pop	{r7, pc}
 8101c1c:	58024400 	.word	0x58024400
 8101c20:	58020000 	.word	0x58020000
 8101c24:	40000400 	.word	0x40000400

08101c28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b08a      	sub	sp, #40	; 0x28
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c30:	f107 0314 	add.w	r3, r7, #20
 8101c34:	2200      	movs	r2, #0
 8101c36:	601a      	str	r2, [r3, #0]
 8101c38:	605a      	str	r2, [r3, #4]
 8101c3a:	609a      	str	r2, [r3, #8]
 8101c3c:	60da      	str	r2, [r3, #12]
 8101c3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	4a1a      	ldr	r2, [pc, #104]	; (8101cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8101c46:	4293      	cmp	r3, r2
 8101c48:	d12e      	bne.n	8101ca8 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8101c4a:	4b1a      	ldr	r3, [pc, #104]	; (8101cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c50:	4a18      	ldr	r2, [pc, #96]	; (8101cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101c52:	f043 0304 	orr.w	r3, r3, #4
 8101c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c5a:	4b16      	ldr	r3, [pc, #88]	; (8101cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c60:	f003 0304 	and.w	r3, r3, #4
 8101c64:	613b      	str	r3, [r7, #16]
 8101c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c68:	4b12      	ldr	r3, [pc, #72]	; (8101cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6e:	4a11      	ldr	r2, [pc, #68]	; (8101cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101c70:	f043 0308 	orr.w	r3, r3, #8
 8101c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c78:	4b0e      	ldr	r3, [pc, #56]	; (8101cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8101c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c7e:	f003 0308 	and.w	r3, r3, #8
 8101c82:	60fb      	str	r3, [r7, #12]
 8101c84:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8101c86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8101c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c8c:	2302      	movs	r3, #2
 8101c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c90:	2300      	movs	r3, #0
 8101c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c94:	2300      	movs	r3, #0
 8101c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101c98:	2302      	movs	r3, #2
 8101c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101c9c:	f107 0314 	add.w	r3, r7, #20
 8101ca0:	4619      	mov	r1, r3
 8101ca2:	4805      	ldr	r0, [pc, #20]	; (8101cb8 <HAL_TIM_Encoder_MspInit+0x90>)
 8101ca4:	f000 fbae 	bl	8102404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8101ca8:	bf00      	nop
 8101caa:	3728      	adds	r7, #40	; 0x28
 8101cac:	46bd      	mov	sp, r7
 8101cae:	bd80      	pop	{r7, pc}
 8101cb0:	40000800 	.word	0x40000800
 8101cb4:	58024400 	.word	0x58024400
 8101cb8:	58020c00 	.word	0x58020c00

08101cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101cbc:	b580      	push	{r7, lr}
 8101cbe:	b088      	sub	sp, #32
 8101cc0:	af00      	add	r7, sp, #0
 8101cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cc4:	f107 030c 	add.w	r3, r7, #12
 8101cc8:	2200      	movs	r2, #0
 8101cca:	601a      	str	r2, [r3, #0]
 8101ccc:	605a      	str	r2, [r3, #4]
 8101cce:	609a      	str	r2, [r3, #8]
 8101cd0:	60da      	str	r2, [r3, #12]
 8101cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101cdc:	d11e      	bne.n	8101d1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101cde:	4b11      	ldr	r3, [pc, #68]	; (8101d24 <HAL_TIM_MspPostInit+0x68>)
 8101ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ce4:	4a0f      	ldr	r2, [pc, #60]	; (8101d24 <HAL_TIM_MspPostInit+0x68>)
 8101ce6:	f043 0301 	orr.w	r3, r3, #1
 8101cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cee:	4b0d      	ldr	r3, [pc, #52]	; (8101d24 <HAL_TIM_MspPostInit+0x68>)
 8101cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cf4:	f003 0301 	and.w	r3, r3, #1
 8101cf8:	60bb      	str	r3, [r7, #8]
 8101cfa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101cfc:	2301      	movs	r3, #1
 8101cfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d00:	2302      	movs	r3, #2
 8101d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d04:	2300      	movs	r3, #0
 8101d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d08:	2300      	movs	r3, #0
 8101d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101d0c:	2301      	movs	r3, #1
 8101d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101d10:	f107 030c 	add.w	r3, r7, #12
 8101d14:	4619      	mov	r1, r3
 8101d16:	4804      	ldr	r0, [pc, #16]	; (8101d28 <HAL_TIM_MspPostInit+0x6c>)
 8101d18:	f000 fb74 	bl	8102404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8101d1c:	bf00      	nop
 8101d1e:	3720      	adds	r7, #32
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bd80      	pop	{r7, pc}
 8101d24:	58024400 	.word	0x58024400
 8101d28:	58020000 	.word	0x58020000

08101d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101d2c:	b580      	push	{r7, lr}
 8101d2e:	b0b8      	sub	sp, #224	; 0xe0
 8101d30:	af00      	add	r7, sp, #0
 8101d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d38:	2200      	movs	r2, #0
 8101d3a:	601a      	str	r2, [r3, #0]
 8101d3c:	605a      	str	r2, [r3, #4]
 8101d3e:	609a      	str	r2, [r3, #8]
 8101d40:	60da      	str	r2, [r3, #12]
 8101d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d44:	f107 0310 	add.w	r3, r7, #16
 8101d48:	22bc      	movs	r2, #188	; 0xbc
 8101d4a:	2100      	movs	r1, #0
 8101d4c:	4618      	mov	r0, r3
 8101d4e:	f005 f811 	bl	8106d74 <memset>
  if(huart->Instance==USART3)
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	4a25      	ldr	r2, [pc, #148]	; (8101dec <HAL_UART_MspInit+0xc0>)
 8101d58:	4293      	cmp	r3, r2
 8101d5a:	d142      	bne.n	8101de2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101d5c:	2302      	movs	r3, #2
 8101d5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101d60:	2300      	movs	r3, #0
 8101d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d66:	f107 0310 	add.w	r3, r7, #16
 8101d6a:	4618      	mov	r0, r3
 8101d6c:	f000 ffc4 	bl	8102cf8 <HAL_RCCEx_PeriphCLKConfig>
 8101d70:	4603      	mov	r3, r0
 8101d72:	2b00      	cmp	r3, #0
 8101d74:	d001      	beq.n	8101d7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101d76:	f7ff fed1 	bl	8101b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101d7a:	4b1d      	ldr	r3, [pc, #116]	; (8101df0 <HAL_UART_MspInit+0xc4>)
 8101d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d80:	4a1b      	ldr	r2, [pc, #108]	; (8101df0 <HAL_UART_MspInit+0xc4>)
 8101d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101d86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d8a:	4b19      	ldr	r3, [pc, #100]	; (8101df0 <HAL_UART_MspInit+0xc4>)
 8101d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101d94:	60fb      	str	r3, [r7, #12]
 8101d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d98:	4b15      	ldr	r3, [pc, #84]	; (8101df0 <HAL_UART_MspInit+0xc4>)
 8101d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d9e:	4a14      	ldr	r2, [pc, #80]	; (8101df0 <HAL_UART_MspInit+0xc4>)
 8101da0:	f043 0308 	orr.w	r3, r3, #8
 8101da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101da8:	4b11      	ldr	r3, [pc, #68]	; (8101df0 <HAL_UART_MspInit+0xc4>)
 8101daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dae:	f003 0308 	and.w	r3, r3, #8
 8101db2:	60bb      	str	r3, [r7, #8]
 8101db4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101dba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dbe:	2302      	movs	r3, #2
 8101dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dc4:	2300      	movs	r3, #0
 8101dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dca:	2300      	movs	r3, #0
 8101dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101dd0:	2307      	movs	r3, #7
 8101dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101dd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101dda:	4619      	mov	r1, r3
 8101ddc:	4805      	ldr	r0, [pc, #20]	; (8101df4 <HAL_UART_MspInit+0xc8>)
 8101dde:	f000 fb11 	bl	8102404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101de2:	bf00      	nop
 8101de4:	37e0      	adds	r7, #224	; 0xe0
 8101de6:	46bd      	mov	sp, r7
 8101de8:	bd80      	pop	{r7, pc}
 8101dea:	bf00      	nop
 8101dec:	40004800 	.word	0x40004800
 8101df0:	58024400 	.word	0x58024400
 8101df4:	58020c00 	.word	0x58020c00

08101df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101df8:	b480      	push	{r7}
 8101dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101dfc:	e7fe      	b.n	8101dfc <NMI_Handler+0x4>

08101dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101dfe:	b480      	push	{r7}
 8101e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101e02:	e7fe      	b.n	8101e02 <HardFault_Handler+0x4>

08101e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101e04:	b480      	push	{r7}
 8101e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101e08:	e7fe      	b.n	8101e08 <MemManage_Handler+0x4>

08101e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101e0a:	b480      	push	{r7}
 8101e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101e0e:	e7fe      	b.n	8101e0e <BusFault_Handler+0x4>

08101e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101e10:	b480      	push	{r7}
 8101e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101e14:	e7fe      	b.n	8101e14 <UsageFault_Handler+0x4>

08101e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101e16:	b480      	push	{r7}
 8101e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101e1a:	bf00      	nop
 8101e1c:	46bd      	mov	sp, r7
 8101e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e22:	4770      	bx	lr

08101e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101e24:	b480      	push	{r7}
 8101e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101e28:	bf00      	nop
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e30:	4770      	bx	lr

08101e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101e32:	b480      	push	{r7}
 8101e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101e36:	bf00      	nop
 8101e38:	46bd      	mov	sp, r7
 8101e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3e:	4770      	bx	lr

08101e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101e40:	b580      	push	{r7, lr}
 8101e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101e44:	f000 f99a 	bl	810217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101e48:	bf00      	nop
 8101e4a:	bd80      	pop	{r7, pc}

08101e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8101e4c:	b580      	push	{r7, lr}
 8101e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8101e50:	4802      	ldr	r0, [pc, #8]	; (8101e5c <TIM3_IRQHandler+0x10>)
 8101e52:	f002 fe2d 	bl	8104ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8101e56:	bf00      	nop
 8101e58:	bd80      	pop	{r7, pc}
 8101e5a:	bf00      	nop
 8101e5c:	10000270 	.word	0x10000270

08101e60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101e60:	b580      	push	{r7, lr}
 8101e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101e64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101e68:	f000 fcaf 	bl	81027ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101e6c:	bf00      	nop
 8101e6e:	bd80      	pop	{r7, pc}

08101e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e70:	b480      	push	{r7}
 8101e72:	af00      	add	r7, sp, #0
	return 1;
 8101e74:	2301      	movs	r3, #1
}
 8101e76:	4618      	mov	r0, r3
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7e:	4770      	bx	lr

08101e80 <_kill>:

int _kill(int pid, int sig)
{
 8101e80:	b580      	push	{r7, lr}
 8101e82:	b082      	sub	sp, #8
 8101e84:	af00      	add	r7, sp, #0
 8101e86:	6078      	str	r0, [r7, #4]
 8101e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101e8a:	f004 ff49 	bl	8106d20 <__errno>
 8101e8e:	4603      	mov	r3, r0
 8101e90:	2216      	movs	r2, #22
 8101e92:	601a      	str	r2, [r3, #0]
	return -1;
 8101e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e98:	4618      	mov	r0, r3
 8101e9a:	3708      	adds	r7, #8
 8101e9c:	46bd      	mov	sp, r7
 8101e9e:	bd80      	pop	{r7, pc}

08101ea0 <_exit>:

void _exit (int status)
{
 8101ea0:	b580      	push	{r7, lr}
 8101ea2:	b082      	sub	sp, #8
 8101ea4:	af00      	add	r7, sp, #0
 8101ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8101eac:	6878      	ldr	r0, [r7, #4]
 8101eae:	f7ff ffe7 	bl	8101e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101eb2:	e7fe      	b.n	8101eb2 <_exit+0x12>

08101eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101eb4:	b580      	push	{r7, lr}
 8101eb6:	b086      	sub	sp, #24
 8101eb8:	af00      	add	r7, sp, #0
 8101eba:	60f8      	str	r0, [r7, #12]
 8101ebc:	60b9      	str	r1, [r7, #8]
 8101ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	len = 1;
 8101ec0:	2301      	movs	r3, #1
 8101ec2:	607b      	str	r3, [r7, #4]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ec4:	2300      	movs	r3, #0
 8101ec6:	617b      	str	r3, [r7, #20]
 8101ec8:	e00a      	b.n	8101ee0 <_read+0x2c>
	{
		*ptr++ = __io_getchar();
 8101eca:	f3af 8000 	nop.w
 8101ece:	4601      	mov	r1, r0
 8101ed0:	68bb      	ldr	r3, [r7, #8]
 8101ed2:	1c5a      	adds	r2, r3, #1
 8101ed4:	60ba      	str	r2, [r7, #8]
 8101ed6:	b2ca      	uxtb	r2, r1
 8101ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101eda:	697b      	ldr	r3, [r7, #20]
 8101edc:	3301      	adds	r3, #1
 8101ede:	617b      	str	r3, [r7, #20]
 8101ee0:	697a      	ldr	r2, [r7, #20]
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	429a      	cmp	r2, r3
 8101ee6:	dbf0      	blt.n	8101eca <_read+0x16>
	}

return len;
 8101ee8:	687b      	ldr	r3, [r7, #4]
}
 8101eea:	4618      	mov	r0, r3
 8101eec:	3718      	adds	r7, #24
 8101eee:	46bd      	mov	sp, r7
 8101ef0:	bd80      	pop	{r7, pc}

08101ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101ef2:	b580      	push	{r7, lr}
 8101ef4:	b086      	sub	sp, #24
 8101ef6:	af00      	add	r7, sp, #0
 8101ef8:	60f8      	str	r0, [r7, #12]
 8101efa:	60b9      	str	r1, [r7, #8]
 8101efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101efe:	2300      	movs	r3, #0
 8101f00:	617b      	str	r3, [r7, #20]
 8101f02:	e009      	b.n	8101f18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101f04:	68bb      	ldr	r3, [r7, #8]
 8101f06:	1c5a      	adds	r2, r3, #1
 8101f08:	60ba      	str	r2, [r7, #8]
 8101f0a:	781b      	ldrb	r3, [r3, #0]
 8101f0c:	4618      	mov	r0, r3
 8101f0e:	f7ff fdc3 	bl	8101a98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f12:	697b      	ldr	r3, [r7, #20]
 8101f14:	3301      	adds	r3, #1
 8101f16:	617b      	str	r3, [r7, #20]
 8101f18:	697a      	ldr	r2, [r7, #20]
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	429a      	cmp	r2, r3
 8101f1e:	dbf1      	blt.n	8101f04 <_write+0x12>
	}
	return len;
 8101f20:	687b      	ldr	r3, [r7, #4]
}
 8101f22:	4618      	mov	r0, r3
 8101f24:	3718      	adds	r7, #24
 8101f26:	46bd      	mov	sp, r7
 8101f28:	bd80      	pop	{r7, pc}

08101f2a <_close>:

int _close(int file)
{
 8101f2a:	b480      	push	{r7}
 8101f2c:	b083      	sub	sp, #12
 8101f2e:	af00      	add	r7, sp, #0
 8101f30:	6078      	str	r0, [r7, #4]
	return -1;
 8101f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101f36:	4618      	mov	r0, r3
 8101f38:	370c      	adds	r7, #12
 8101f3a:	46bd      	mov	sp, r7
 8101f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f40:	4770      	bx	lr

08101f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101f42:	b480      	push	{r7}
 8101f44:	b083      	sub	sp, #12
 8101f46:	af00      	add	r7, sp, #0
 8101f48:	6078      	str	r0, [r7, #4]
 8101f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101f4c:	683b      	ldr	r3, [r7, #0]
 8101f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101f52:	605a      	str	r2, [r3, #4]
	return 0;
 8101f54:	2300      	movs	r3, #0
}
 8101f56:	4618      	mov	r0, r3
 8101f58:	370c      	adds	r7, #12
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr

08101f62 <_isatty>:

int _isatty(int file)
{
 8101f62:	b480      	push	{r7}
 8101f64:	b083      	sub	sp, #12
 8101f66:	af00      	add	r7, sp, #0
 8101f68:	6078      	str	r0, [r7, #4]
	return 1;
 8101f6a:	2301      	movs	r3, #1
}
 8101f6c:	4618      	mov	r0, r3
 8101f6e:	370c      	adds	r7, #12
 8101f70:	46bd      	mov	sp, r7
 8101f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f76:	4770      	bx	lr

08101f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f78:	b480      	push	{r7}
 8101f7a:	b085      	sub	sp, #20
 8101f7c:	af00      	add	r7, sp, #0
 8101f7e:	60f8      	str	r0, [r7, #12]
 8101f80:	60b9      	str	r1, [r7, #8]
 8101f82:	607a      	str	r2, [r7, #4]
	return 0;
 8101f84:	2300      	movs	r3, #0
}
 8101f86:	4618      	mov	r0, r3
 8101f88:	3714      	adds	r7, #20
 8101f8a:	46bd      	mov	sp, r7
 8101f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f90:	4770      	bx	lr
	...

08101f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101f94:	b580      	push	{r7, lr}
 8101f96:	b086      	sub	sp, #24
 8101f98:	af00      	add	r7, sp, #0
 8101f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f9c:	4a14      	ldr	r2, [pc, #80]	; (8101ff0 <_sbrk+0x5c>)
 8101f9e:	4b15      	ldr	r3, [pc, #84]	; (8101ff4 <_sbrk+0x60>)
 8101fa0:	1ad3      	subs	r3, r2, r3
 8101fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101fa4:	697b      	ldr	r3, [r7, #20]
 8101fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101fa8:	4b13      	ldr	r3, [pc, #76]	; (8101ff8 <_sbrk+0x64>)
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	2b00      	cmp	r3, #0
 8101fae:	d102      	bne.n	8101fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101fb0:	4b11      	ldr	r3, [pc, #68]	; (8101ff8 <_sbrk+0x64>)
 8101fb2:	4a12      	ldr	r2, [pc, #72]	; (8101ffc <_sbrk+0x68>)
 8101fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101fb6:	4b10      	ldr	r3, [pc, #64]	; (8101ff8 <_sbrk+0x64>)
 8101fb8:	681a      	ldr	r2, [r3, #0]
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	4413      	add	r3, r2
 8101fbe:	693a      	ldr	r2, [r7, #16]
 8101fc0:	429a      	cmp	r2, r3
 8101fc2:	d207      	bcs.n	8101fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101fc4:	f004 feac 	bl	8106d20 <__errno>
 8101fc8:	4603      	mov	r3, r0
 8101fca:	220c      	movs	r2, #12
 8101fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101fce:	f04f 33ff 	mov.w	r3, #4294967295
 8101fd2:	e009      	b.n	8101fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101fd4:	4b08      	ldr	r3, [pc, #32]	; (8101ff8 <_sbrk+0x64>)
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101fda:	4b07      	ldr	r3, [pc, #28]	; (8101ff8 <_sbrk+0x64>)
 8101fdc:	681a      	ldr	r2, [r3, #0]
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	4413      	add	r3, r2
 8101fe2:	4a05      	ldr	r2, [pc, #20]	; (8101ff8 <_sbrk+0x64>)
 8101fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101fe6:	68fb      	ldr	r3, [r7, #12]
}
 8101fe8:	4618      	mov	r0, r3
 8101fea:	3718      	adds	r7, #24
 8101fec:	46bd      	mov	sp, r7
 8101fee:	bd80      	pop	{r7, pc}
 8101ff0:	10048000 	.word	0x10048000
 8101ff4:	00000400 	.word	0x00000400
 8101ff8:	100003e8 	.word	0x100003e8
 8101ffc:	10000400 	.word	0x10000400

08102000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102038 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102004:	f7ff f880 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102008:	480c      	ldr	r0, [pc, #48]	; (810203c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810200a:	490d      	ldr	r1, [pc, #52]	; (8102040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810200c:	4a0d      	ldr	r2, [pc, #52]	; (8102044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102010:	e002      	b.n	8102018 <LoopCopyDataInit>

08102012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102016:	3304      	adds	r3, #4

08102018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810201c:	d3f9      	bcc.n	8102012 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810201e:	4a0a      	ldr	r2, [pc, #40]	; (8102048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102020:	4c0a      	ldr	r4, [pc, #40]	; (810204c <LoopFillZerobss+0x22>)
  movs r3, #0
 8102022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102024:	e001      	b.n	810202a <LoopFillZerobss>

08102026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102028:	3204      	adds	r2, #4

0810202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810202c:	d3fb      	bcc.n	8102026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810202e:	f004 fe7d 	bl	8106d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102032:	f7ff f9dd 	bl	81013f0 <main>
  bx  lr
 8102036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102038:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810203c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102040:	100001fc 	.word	0x100001fc
  ldr r2, =_sidata
 8102044:	0810bbb4 	.word	0x0810bbb4
  ldr r2, =_sbss
 8102048:	10000200 	.word	0x10000200
  ldr r4, =_ebss
 810204c:	10000400 	.word	0x10000400

08102050 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102050:	e7fe      	b.n	8102050 <ADC3_IRQHandler>
	...

08102054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102054:	b580      	push	{r7, lr}
 8102056:	b082      	sub	sp, #8
 8102058:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810205a:	4b28      	ldr	r3, [pc, #160]	; (81020fc <HAL_Init+0xa8>)
 810205c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102060:	4a26      	ldr	r2, [pc, #152]	; (81020fc <HAL_Init+0xa8>)
 8102062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102066:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810206a:	4b24      	ldr	r3, [pc, #144]	; (81020fc <HAL_Init+0xa8>)
 810206c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102074:	603b      	str	r3, [r7, #0]
 8102076:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102078:	4b21      	ldr	r3, [pc, #132]	; (8102100 <HAL_Init+0xac>)
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102084:	4a1e      	ldr	r2, [pc, #120]	; (8102100 <HAL_Init+0xac>)
 8102086:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810208a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810208c:	4b1c      	ldr	r3, [pc, #112]	; (8102100 <HAL_Init+0xac>)
 810208e:	681b      	ldr	r3, [r3, #0]
 8102090:	4a1b      	ldr	r2, [pc, #108]	; (8102100 <HAL_Init+0xac>)
 8102092:	f043 0301 	orr.w	r3, r3, #1
 8102096:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102098:	2003      	movs	r0, #3
 810209a:	f000 f95f 	bl	810235c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810209e:	f000 fc53 	bl	8102948 <HAL_RCC_GetSysClockFreq>
 81020a2:	4602      	mov	r2, r0
 81020a4:	4b15      	ldr	r3, [pc, #84]	; (81020fc <HAL_Init+0xa8>)
 81020a6:	699b      	ldr	r3, [r3, #24]
 81020a8:	0a1b      	lsrs	r3, r3, #8
 81020aa:	f003 030f 	and.w	r3, r3, #15
 81020ae:	4915      	ldr	r1, [pc, #84]	; (8102104 <HAL_Init+0xb0>)
 81020b0:	5ccb      	ldrb	r3, [r1, r3]
 81020b2:	f003 031f 	and.w	r3, r3, #31
 81020b6:	fa22 f303 	lsr.w	r3, r2, r3
 81020ba:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81020bc:	4b0f      	ldr	r3, [pc, #60]	; (81020fc <HAL_Init+0xa8>)
 81020be:	699b      	ldr	r3, [r3, #24]
 81020c0:	f003 030f 	and.w	r3, r3, #15
 81020c4:	4a0f      	ldr	r2, [pc, #60]	; (8102104 <HAL_Init+0xb0>)
 81020c6:	5cd3      	ldrb	r3, [r2, r3]
 81020c8:	f003 031f 	and.w	r3, r3, #31
 81020cc:	687a      	ldr	r2, [r7, #4]
 81020ce:	fa22 f303 	lsr.w	r3, r2, r3
 81020d2:	4a0d      	ldr	r2, [pc, #52]	; (8102108 <HAL_Init+0xb4>)
 81020d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81020d6:	4b0c      	ldr	r3, [pc, #48]	; (8102108 <HAL_Init+0xb4>)
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	4a0c      	ldr	r2, [pc, #48]	; (810210c <HAL_Init+0xb8>)
 81020dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81020de:	2000      	movs	r0, #0
 81020e0:	f000 f816 	bl	8102110 <HAL_InitTick>
 81020e4:	4603      	mov	r3, r0
 81020e6:	2b00      	cmp	r3, #0
 81020e8:	d001      	beq.n	81020ee <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81020ea:	2301      	movs	r3, #1
 81020ec:	e002      	b.n	81020f4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81020ee:	f7ff fd1b 	bl	8101b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81020f2:	2300      	movs	r3, #0
}
 81020f4:	4618      	mov	r0, r3
 81020f6:	3708      	adds	r7, #8
 81020f8:	46bd      	mov	sp, r7
 81020fa:	bd80      	pop	{r7, pc}
 81020fc:	58024400 	.word	0x58024400
 8102100:	40024400 	.word	0x40024400
 8102104:	0810b6bc 	.word	0x0810b6bc
 8102108:	10000004 	.word	0x10000004
 810210c:	10000000 	.word	0x10000000

08102110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102110:	b580      	push	{r7, lr}
 8102112:	b082      	sub	sp, #8
 8102114:	af00      	add	r7, sp, #0
 8102116:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102118:	4b15      	ldr	r3, [pc, #84]	; (8102170 <HAL_InitTick+0x60>)
 810211a:	781b      	ldrb	r3, [r3, #0]
 810211c:	2b00      	cmp	r3, #0
 810211e:	d101      	bne.n	8102124 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102120:	2301      	movs	r3, #1
 8102122:	e021      	b.n	8102168 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102124:	4b13      	ldr	r3, [pc, #76]	; (8102174 <HAL_InitTick+0x64>)
 8102126:	681a      	ldr	r2, [r3, #0]
 8102128:	4b11      	ldr	r3, [pc, #68]	; (8102170 <HAL_InitTick+0x60>)
 810212a:	781b      	ldrb	r3, [r3, #0]
 810212c:	4619      	mov	r1, r3
 810212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102132:	fbb3 f3f1 	udiv	r3, r3, r1
 8102136:	fbb2 f3f3 	udiv	r3, r2, r3
 810213a:	4618      	mov	r0, r3
 810213c:	f000 f941 	bl	81023c2 <HAL_SYSTICK_Config>
 8102140:	4603      	mov	r3, r0
 8102142:	2b00      	cmp	r3, #0
 8102144:	d001      	beq.n	810214a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102146:	2301      	movs	r3, #1
 8102148:	e00e      	b.n	8102168 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	2b0f      	cmp	r3, #15
 810214e:	d80a      	bhi.n	8102166 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102150:	2200      	movs	r2, #0
 8102152:	6879      	ldr	r1, [r7, #4]
 8102154:	f04f 30ff 	mov.w	r0, #4294967295
 8102158:	f000 f90b 	bl	8102372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810215c:	4a06      	ldr	r2, [pc, #24]	; (8102178 <HAL_InitTick+0x68>)
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102162:	2300      	movs	r3, #0
 8102164:	e000      	b.n	8102168 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102166:	2301      	movs	r3, #1
}
 8102168:	4618      	mov	r0, r3
 810216a:	3708      	adds	r7, #8
 810216c:	46bd      	mov	sp, r7
 810216e:	bd80      	pop	{r7, pc}
 8102170:	10000024 	.word	0x10000024
 8102174:	10000000 	.word	0x10000000
 8102178:	10000020 	.word	0x10000020

0810217c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810217c:	b480      	push	{r7}
 810217e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102180:	4b06      	ldr	r3, [pc, #24]	; (810219c <HAL_IncTick+0x20>)
 8102182:	781b      	ldrb	r3, [r3, #0]
 8102184:	461a      	mov	r2, r3
 8102186:	4b06      	ldr	r3, [pc, #24]	; (81021a0 <HAL_IncTick+0x24>)
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	4413      	add	r3, r2
 810218c:	4a04      	ldr	r2, [pc, #16]	; (81021a0 <HAL_IncTick+0x24>)
 810218e:	6013      	str	r3, [r2, #0]
}
 8102190:	bf00      	nop
 8102192:	46bd      	mov	sp, r7
 8102194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102198:	4770      	bx	lr
 810219a:	bf00      	nop
 810219c:	10000024 	.word	0x10000024
 81021a0:	100003ec 	.word	0x100003ec

081021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81021a4:	b480      	push	{r7}
 81021a6:	af00      	add	r7, sp, #0
  return uwTick;
 81021a8:	4b03      	ldr	r3, [pc, #12]	; (81021b8 <HAL_GetTick+0x14>)
 81021aa:	681b      	ldr	r3, [r3, #0]
}
 81021ac:	4618      	mov	r0, r3
 81021ae:	46bd      	mov	sp, r7
 81021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b4:	4770      	bx	lr
 81021b6:	bf00      	nop
 81021b8:	100003ec 	.word	0x100003ec

081021bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81021bc:	b480      	push	{r7}
 81021be:	b085      	sub	sp, #20
 81021c0:	af00      	add	r7, sp, #0
 81021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	f003 0307 	and.w	r3, r3, #7
 81021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81021cc:	4b0c      	ldr	r3, [pc, #48]	; (8102200 <__NVIC_SetPriorityGrouping+0x44>)
 81021ce:	68db      	ldr	r3, [r3, #12]
 81021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81021d2:	68ba      	ldr	r2, [r7, #8]
 81021d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81021d8:	4013      	ands	r3, r2
 81021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81021dc:	68fb      	ldr	r3, [r7, #12]
 81021de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81021e0:	68bb      	ldr	r3, [r7, #8]
 81021e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81021e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81021ee:	4a04      	ldr	r2, [pc, #16]	; (8102200 <__NVIC_SetPriorityGrouping+0x44>)
 81021f0:	68bb      	ldr	r3, [r7, #8]
 81021f2:	60d3      	str	r3, [r2, #12]
}
 81021f4:	bf00      	nop
 81021f6:	3714      	adds	r7, #20
 81021f8:	46bd      	mov	sp, r7
 81021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021fe:	4770      	bx	lr
 8102200:	e000ed00 	.word	0xe000ed00

08102204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102204:	b480      	push	{r7}
 8102206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102208:	4b04      	ldr	r3, [pc, #16]	; (810221c <__NVIC_GetPriorityGrouping+0x18>)
 810220a:	68db      	ldr	r3, [r3, #12]
 810220c:	0a1b      	lsrs	r3, r3, #8
 810220e:	f003 0307 	and.w	r3, r3, #7
}
 8102212:	4618      	mov	r0, r3
 8102214:	46bd      	mov	sp, r7
 8102216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810221a:	4770      	bx	lr
 810221c:	e000ed00 	.word	0xe000ed00

08102220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102220:	b480      	push	{r7}
 8102222:	b083      	sub	sp, #12
 8102224:	af00      	add	r7, sp, #0
 8102226:	4603      	mov	r3, r0
 8102228:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810222a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810222e:	2b00      	cmp	r3, #0
 8102230:	db0b      	blt.n	810224a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102232:	88fb      	ldrh	r3, [r7, #6]
 8102234:	f003 021f 	and.w	r2, r3, #31
 8102238:	4907      	ldr	r1, [pc, #28]	; (8102258 <__NVIC_EnableIRQ+0x38>)
 810223a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810223e:	095b      	lsrs	r3, r3, #5
 8102240:	2001      	movs	r0, #1
 8102242:	fa00 f202 	lsl.w	r2, r0, r2
 8102246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810224a:	bf00      	nop
 810224c:	370c      	adds	r7, #12
 810224e:	46bd      	mov	sp, r7
 8102250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102254:	4770      	bx	lr
 8102256:	bf00      	nop
 8102258:	e000e100 	.word	0xe000e100

0810225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810225c:	b480      	push	{r7}
 810225e:	b083      	sub	sp, #12
 8102260:	af00      	add	r7, sp, #0
 8102262:	4603      	mov	r3, r0
 8102264:	6039      	str	r1, [r7, #0]
 8102266:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810226c:	2b00      	cmp	r3, #0
 810226e:	db0a      	blt.n	8102286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102270:	683b      	ldr	r3, [r7, #0]
 8102272:	b2da      	uxtb	r2, r3
 8102274:	490c      	ldr	r1, [pc, #48]	; (81022a8 <__NVIC_SetPriority+0x4c>)
 8102276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810227a:	0112      	lsls	r2, r2, #4
 810227c:	b2d2      	uxtb	r2, r2
 810227e:	440b      	add	r3, r1
 8102280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102284:	e00a      	b.n	810229c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102286:	683b      	ldr	r3, [r7, #0]
 8102288:	b2da      	uxtb	r2, r3
 810228a:	4908      	ldr	r1, [pc, #32]	; (81022ac <__NVIC_SetPriority+0x50>)
 810228c:	88fb      	ldrh	r3, [r7, #6]
 810228e:	f003 030f 	and.w	r3, r3, #15
 8102292:	3b04      	subs	r3, #4
 8102294:	0112      	lsls	r2, r2, #4
 8102296:	b2d2      	uxtb	r2, r2
 8102298:	440b      	add	r3, r1
 810229a:	761a      	strb	r2, [r3, #24]
}
 810229c:	bf00      	nop
 810229e:	370c      	adds	r7, #12
 81022a0:	46bd      	mov	sp, r7
 81022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a6:	4770      	bx	lr
 81022a8:	e000e100 	.word	0xe000e100
 81022ac:	e000ed00 	.word	0xe000ed00

081022b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81022b0:	b480      	push	{r7}
 81022b2:	b089      	sub	sp, #36	; 0x24
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	60f8      	str	r0, [r7, #12]
 81022b8:	60b9      	str	r1, [r7, #8]
 81022ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81022bc:	68fb      	ldr	r3, [r7, #12]
 81022be:	f003 0307 	and.w	r3, r3, #7
 81022c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81022c4:	69fb      	ldr	r3, [r7, #28]
 81022c6:	f1c3 0307 	rsb	r3, r3, #7
 81022ca:	2b04      	cmp	r3, #4
 81022cc:	bf28      	it	cs
 81022ce:	2304      	movcs	r3, #4
 81022d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81022d2:	69fb      	ldr	r3, [r7, #28]
 81022d4:	3304      	adds	r3, #4
 81022d6:	2b06      	cmp	r3, #6
 81022d8:	d902      	bls.n	81022e0 <NVIC_EncodePriority+0x30>
 81022da:	69fb      	ldr	r3, [r7, #28]
 81022dc:	3b03      	subs	r3, #3
 81022de:	e000      	b.n	81022e2 <NVIC_EncodePriority+0x32>
 81022e0:	2300      	movs	r3, #0
 81022e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81022e4:	f04f 32ff 	mov.w	r2, #4294967295
 81022e8:	69bb      	ldr	r3, [r7, #24]
 81022ea:	fa02 f303 	lsl.w	r3, r2, r3
 81022ee:	43da      	mvns	r2, r3
 81022f0:	68bb      	ldr	r3, [r7, #8]
 81022f2:	401a      	ands	r2, r3
 81022f4:	697b      	ldr	r3, [r7, #20]
 81022f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81022f8:	f04f 31ff 	mov.w	r1, #4294967295
 81022fc:	697b      	ldr	r3, [r7, #20]
 81022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8102302:	43d9      	mvns	r1, r3
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102308:	4313      	orrs	r3, r2
         );
}
 810230a:	4618      	mov	r0, r3
 810230c:	3724      	adds	r7, #36	; 0x24
 810230e:	46bd      	mov	sp, r7
 8102310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102314:	4770      	bx	lr
	...

08102318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102318:	b580      	push	{r7, lr}
 810231a:	b082      	sub	sp, #8
 810231c:	af00      	add	r7, sp, #0
 810231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	3b01      	subs	r3, #1
 8102324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102328:	d301      	bcc.n	810232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810232a:	2301      	movs	r3, #1
 810232c:	e00f      	b.n	810234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810232e:	4a0a      	ldr	r2, [pc, #40]	; (8102358 <SysTick_Config+0x40>)
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	3b01      	subs	r3, #1
 8102334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102336:	210f      	movs	r1, #15
 8102338:	f04f 30ff 	mov.w	r0, #4294967295
 810233c:	f7ff ff8e 	bl	810225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102340:	4b05      	ldr	r3, [pc, #20]	; (8102358 <SysTick_Config+0x40>)
 8102342:	2200      	movs	r2, #0
 8102344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102346:	4b04      	ldr	r3, [pc, #16]	; (8102358 <SysTick_Config+0x40>)
 8102348:	2207      	movs	r2, #7
 810234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810234c:	2300      	movs	r3, #0
}
 810234e:	4618      	mov	r0, r3
 8102350:	3708      	adds	r7, #8
 8102352:	46bd      	mov	sp, r7
 8102354:	bd80      	pop	{r7, pc}
 8102356:	bf00      	nop
 8102358:	e000e010 	.word	0xe000e010

0810235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810235c:	b580      	push	{r7, lr}
 810235e:	b082      	sub	sp, #8
 8102360:	af00      	add	r7, sp, #0
 8102362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102364:	6878      	ldr	r0, [r7, #4]
 8102366:	f7ff ff29 	bl	81021bc <__NVIC_SetPriorityGrouping>
}
 810236a:	bf00      	nop
 810236c:	3708      	adds	r7, #8
 810236e:	46bd      	mov	sp, r7
 8102370:	bd80      	pop	{r7, pc}

08102372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102372:	b580      	push	{r7, lr}
 8102374:	b086      	sub	sp, #24
 8102376:	af00      	add	r7, sp, #0
 8102378:	4603      	mov	r3, r0
 810237a:	60b9      	str	r1, [r7, #8]
 810237c:	607a      	str	r2, [r7, #4]
 810237e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102380:	f7ff ff40 	bl	8102204 <__NVIC_GetPriorityGrouping>
 8102384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102386:	687a      	ldr	r2, [r7, #4]
 8102388:	68b9      	ldr	r1, [r7, #8]
 810238a:	6978      	ldr	r0, [r7, #20]
 810238c:	f7ff ff90 	bl	81022b0 <NVIC_EncodePriority>
 8102390:	4602      	mov	r2, r0
 8102392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102396:	4611      	mov	r1, r2
 8102398:	4618      	mov	r0, r3
 810239a:	f7ff ff5f 	bl	810225c <__NVIC_SetPriority>
}
 810239e:	bf00      	nop
 81023a0:	3718      	adds	r7, #24
 81023a2:	46bd      	mov	sp, r7
 81023a4:	bd80      	pop	{r7, pc}

081023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81023a6:	b580      	push	{r7, lr}
 81023a8:	b082      	sub	sp, #8
 81023aa:	af00      	add	r7, sp, #0
 81023ac:	4603      	mov	r3, r0
 81023ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81023b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023b4:	4618      	mov	r0, r3
 81023b6:	f7ff ff33 	bl	8102220 <__NVIC_EnableIRQ>
}
 81023ba:	bf00      	nop
 81023bc:	3708      	adds	r7, #8
 81023be:	46bd      	mov	sp, r7
 81023c0:	bd80      	pop	{r7, pc}

081023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81023c2:	b580      	push	{r7, lr}
 81023c4:	b082      	sub	sp, #8
 81023c6:	af00      	add	r7, sp, #0
 81023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81023ca:	6878      	ldr	r0, [r7, #4]
 81023cc:	f7ff ffa4 	bl	8102318 <SysTick_Config>
 81023d0:	4603      	mov	r3, r0
}
 81023d2:	4618      	mov	r0, r3
 81023d4:	3708      	adds	r7, #8
 81023d6:	46bd      	mov	sp, r7
 81023d8:	bd80      	pop	{r7, pc}
	...

081023dc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81023dc:	b480      	push	{r7}
 81023de:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81023e0:	4b07      	ldr	r3, [pc, #28]	; (8102400 <HAL_GetCurrentCPUID+0x24>)
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	091b      	lsrs	r3, r3, #4
 81023e6:	f003 030f 	and.w	r3, r3, #15
 81023ea:	2b07      	cmp	r3, #7
 81023ec:	d101      	bne.n	81023f2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81023ee:	2303      	movs	r3, #3
 81023f0:	e000      	b.n	81023f4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81023f2:	2301      	movs	r3, #1
  }
}
 81023f4:	4618      	mov	r0, r3
 81023f6:	46bd      	mov	sp, r7
 81023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023fc:	4770      	bx	lr
 81023fe:	bf00      	nop
 8102400:	e000ed00 	.word	0xe000ed00

08102404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102404:	b480      	push	{r7}
 8102406:	b089      	sub	sp, #36	; 0x24
 8102408:	af00      	add	r7, sp, #0
 810240a:	6078      	str	r0, [r7, #4]
 810240c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810240e:	2300      	movs	r3, #0
 8102410:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102412:	4b89      	ldr	r3, [pc, #548]	; (8102638 <HAL_GPIO_Init+0x234>)
 8102414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102416:	e194      	b.n	8102742 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102418:	683b      	ldr	r3, [r7, #0]
 810241a:	681a      	ldr	r2, [r3, #0]
 810241c:	2101      	movs	r1, #1
 810241e:	69fb      	ldr	r3, [r7, #28]
 8102420:	fa01 f303 	lsl.w	r3, r1, r3
 8102424:	4013      	ands	r3, r2
 8102426:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102428:	693b      	ldr	r3, [r7, #16]
 810242a:	2b00      	cmp	r3, #0
 810242c:	f000 8186 	beq.w	810273c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102430:	683b      	ldr	r3, [r7, #0]
 8102432:	685b      	ldr	r3, [r3, #4]
 8102434:	f003 0303 	and.w	r3, r3, #3
 8102438:	2b01      	cmp	r3, #1
 810243a:	d005      	beq.n	8102448 <HAL_GPIO_Init+0x44>
 810243c:	683b      	ldr	r3, [r7, #0]
 810243e:	685b      	ldr	r3, [r3, #4]
 8102440:	f003 0303 	and.w	r3, r3, #3
 8102444:	2b02      	cmp	r3, #2
 8102446:	d130      	bne.n	81024aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	689b      	ldr	r3, [r3, #8]
 810244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810244e:	69fb      	ldr	r3, [r7, #28]
 8102450:	005b      	lsls	r3, r3, #1
 8102452:	2203      	movs	r2, #3
 8102454:	fa02 f303 	lsl.w	r3, r2, r3
 8102458:	43db      	mvns	r3, r3
 810245a:	69ba      	ldr	r2, [r7, #24]
 810245c:	4013      	ands	r3, r2
 810245e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102460:	683b      	ldr	r3, [r7, #0]
 8102462:	68da      	ldr	r2, [r3, #12]
 8102464:	69fb      	ldr	r3, [r7, #28]
 8102466:	005b      	lsls	r3, r3, #1
 8102468:	fa02 f303 	lsl.w	r3, r2, r3
 810246c:	69ba      	ldr	r2, [r7, #24]
 810246e:	4313      	orrs	r3, r2
 8102470:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	69ba      	ldr	r2, [r7, #24]
 8102476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	685b      	ldr	r3, [r3, #4]
 810247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810247e:	2201      	movs	r2, #1
 8102480:	69fb      	ldr	r3, [r7, #28]
 8102482:	fa02 f303 	lsl.w	r3, r2, r3
 8102486:	43db      	mvns	r3, r3
 8102488:	69ba      	ldr	r2, [r7, #24]
 810248a:	4013      	ands	r3, r2
 810248c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810248e:	683b      	ldr	r3, [r7, #0]
 8102490:	685b      	ldr	r3, [r3, #4]
 8102492:	091b      	lsrs	r3, r3, #4
 8102494:	f003 0201 	and.w	r2, r3, #1
 8102498:	69fb      	ldr	r3, [r7, #28]
 810249a:	fa02 f303 	lsl.w	r3, r2, r3
 810249e:	69ba      	ldr	r2, [r7, #24]
 81024a0:	4313      	orrs	r3, r2
 81024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	69ba      	ldr	r2, [r7, #24]
 81024a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81024aa:	683b      	ldr	r3, [r7, #0]
 81024ac:	685b      	ldr	r3, [r3, #4]
 81024ae:	f003 0303 	and.w	r3, r3, #3
 81024b2:	2b03      	cmp	r3, #3
 81024b4:	d017      	beq.n	81024e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	68db      	ldr	r3, [r3, #12]
 81024ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81024bc:	69fb      	ldr	r3, [r7, #28]
 81024be:	005b      	lsls	r3, r3, #1
 81024c0:	2203      	movs	r2, #3
 81024c2:	fa02 f303 	lsl.w	r3, r2, r3
 81024c6:	43db      	mvns	r3, r3
 81024c8:	69ba      	ldr	r2, [r7, #24]
 81024ca:	4013      	ands	r3, r2
 81024cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81024ce:	683b      	ldr	r3, [r7, #0]
 81024d0:	689a      	ldr	r2, [r3, #8]
 81024d2:	69fb      	ldr	r3, [r7, #28]
 81024d4:	005b      	lsls	r3, r3, #1
 81024d6:	fa02 f303 	lsl.w	r3, r2, r3
 81024da:	69ba      	ldr	r2, [r7, #24]
 81024dc:	4313      	orrs	r3, r2
 81024de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	69ba      	ldr	r2, [r7, #24]
 81024e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81024e6:	683b      	ldr	r3, [r7, #0]
 81024e8:	685b      	ldr	r3, [r3, #4]
 81024ea:	f003 0303 	and.w	r3, r3, #3
 81024ee:	2b02      	cmp	r3, #2
 81024f0:	d123      	bne.n	810253a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81024f2:	69fb      	ldr	r3, [r7, #28]
 81024f4:	08da      	lsrs	r2, r3, #3
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	3208      	adds	r2, #8
 81024fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102500:	69fb      	ldr	r3, [r7, #28]
 8102502:	f003 0307 	and.w	r3, r3, #7
 8102506:	009b      	lsls	r3, r3, #2
 8102508:	220f      	movs	r2, #15
 810250a:	fa02 f303 	lsl.w	r3, r2, r3
 810250e:	43db      	mvns	r3, r3
 8102510:	69ba      	ldr	r2, [r7, #24]
 8102512:	4013      	ands	r3, r2
 8102514:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102516:	683b      	ldr	r3, [r7, #0]
 8102518:	691a      	ldr	r2, [r3, #16]
 810251a:	69fb      	ldr	r3, [r7, #28]
 810251c:	f003 0307 	and.w	r3, r3, #7
 8102520:	009b      	lsls	r3, r3, #2
 8102522:	fa02 f303 	lsl.w	r3, r2, r3
 8102526:	69ba      	ldr	r2, [r7, #24]
 8102528:	4313      	orrs	r3, r2
 810252a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810252c:	69fb      	ldr	r3, [r7, #28]
 810252e:	08da      	lsrs	r2, r3, #3
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	3208      	adds	r2, #8
 8102534:	69b9      	ldr	r1, [r7, #24]
 8102536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102540:	69fb      	ldr	r3, [r7, #28]
 8102542:	005b      	lsls	r3, r3, #1
 8102544:	2203      	movs	r2, #3
 8102546:	fa02 f303 	lsl.w	r3, r2, r3
 810254a:	43db      	mvns	r3, r3
 810254c:	69ba      	ldr	r2, [r7, #24]
 810254e:	4013      	ands	r3, r2
 8102550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102552:	683b      	ldr	r3, [r7, #0]
 8102554:	685b      	ldr	r3, [r3, #4]
 8102556:	f003 0203 	and.w	r2, r3, #3
 810255a:	69fb      	ldr	r3, [r7, #28]
 810255c:	005b      	lsls	r3, r3, #1
 810255e:	fa02 f303 	lsl.w	r3, r2, r3
 8102562:	69ba      	ldr	r2, [r7, #24]
 8102564:	4313      	orrs	r3, r2
 8102566:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	69ba      	ldr	r2, [r7, #24]
 810256c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810256e:	683b      	ldr	r3, [r7, #0]
 8102570:	685b      	ldr	r3, [r3, #4]
 8102572:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102576:	2b00      	cmp	r3, #0
 8102578:	f000 80e0 	beq.w	810273c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810257c:	4b2f      	ldr	r3, [pc, #188]	; (810263c <HAL_GPIO_Init+0x238>)
 810257e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102582:	4a2e      	ldr	r2, [pc, #184]	; (810263c <HAL_GPIO_Init+0x238>)
 8102584:	f043 0302 	orr.w	r3, r3, #2
 8102588:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810258c:	4b2b      	ldr	r3, [pc, #172]	; (810263c <HAL_GPIO_Init+0x238>)
 810258e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102592:	f003 0302 	and.w	r3, r3, #2
 8102596:	60fb      	str	r3, [r7, #12]
 8102598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810259a:	4a29      	ldr	r2, [pc, #164]	; (8102640 <HAL_GPIO_Init+0x23c>)
 810259c:	69fb      	ldr	r3, [r7, #28]
 810259e:	089b      	lsrs	r3, r3, #2
 81025a0:	3302      	adds	r3, #2
 81025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81025a8:	69fb      	ldr	r3, [r7, #28]
 81025aa:	f003 0303 	and.w	r3, r3, #3
 81025ae:	009b      	lsls	r3, r3, #2
 81025b0:	220f      	movs	r2, #15
 81025b2:	fa02 f303 	lsl.w	r3, r2, r3
 81025b6:	43db      	mvns	r3, r3
 81025b8:	69ba      	ldr	r2, [r7, #24]
 81025ba:	4013      	ands	r3, r2
 81025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	4a20      	ldr	r2, [pc, #128]	; (8102644 <HAL_GPIO_Init+0x240>)
 81025c2:	4293      	cmp	r3, r2
 81025c4:	d052      	beq.n	810266c <HAL_GPIO_Init+0x268>
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	4a1f      	ldr	r2, [pc, #124]	; (8102648 <HAL_GPIO_Init+0x244>)
 81025ca:	4293      	cmp	r3, r2
 81025cc:	d031      	beq.n	8102632 <HAL_GPIO_Init+0x22e>
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	4a1e      	ldr	r2, [pc, #120]	; (810264c <HAL_GPIO_Init+0x248>)
 81025d2:	4293      	cmp	r3, r2
 81025d4:	d02b      	beq.n	810262e <HAL_GPIO_Init+0x22a>
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	4a1d      	ldr	r2, [pc, #116]	; (8102650 <HAL_GPIO_Init+0x24c>)
 81025da:	4293      	cmp	r3, r2
 81025dc:	d025      	beq.n	810262a <HAL_GPIO_Init+0x226>
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	4a1c      	ldr	r2, [pc, #112]	; (8102654 <HAL_GPIO_Init+0x250>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d01f      	beq.n	8102626 <HAL_GPIO_Init+0x222>
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	4a1b      	ldr	r2, [pc, #108]	; (8102658 <HAL_GPIO_Init+0x254>)
 81025ea:	4293      	cmp	r3, r2
 81025ec:	d019      	beq.n	8102622 <HAL_GPIO_Init+0x21e>
 81025ee:	687b      	ldr	r3, [r7, #4]
 81025f0:	4a1a      	ldr	r2, [pc, #104]	; (810265c <HAL_GPIO_Init+0x258>)
 81025f2:	4293      	cmp	r3, r2
 81025f4:	d013      	beq.n	810261e <HAL_GPIO_Init+0x21a>
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	4a19      	ldr	r2, [pc, #100]	; (8102660 <HAL_GPIO_Init+0x25c>)
 81025fa:	4293      	cmp	r3, r2
 81025fc:	d00d      	beq.n	810261a <HAL_GPIO_Init+0x216>
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	4a18      	ldr	r2, [pc, #96]	; (8102664 <HAL_GPIO_Init+0x260>)
 8102602:	4293      	cmp	r3, r2
 8102604:	d007      	beq.n	8102616 <HAL_GPIO_Init+0x212>
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	4a17      	ldr	r2, [pc, #92]	; (8102668 <HAL_GPIO_Init+0x264>)
 810260a:	4293      	cmp	r3, r2
 810260c:	d101      	bne.n	8102612 <HAL_GPIO_Init+0x20e>
 810260e:	2309      	movs	r3, #9
 8102610:	e02d      	b.n	810266e <HAL_GPIO_Init+0x26a>
 8102612:	230a      	movs	r3, #10
 8102614:	e02b      	b.n	810266e <HAL_GPIO_Init+0x26a>
 8102616:	2308      	movs	r3, #8
 8102618:	e029      	b.n	810266e <HAL_GPIO_Init+0x26a>
 810261a:	2307      	movs	r3, #7
 810261c:	e027      	b.n	810266e <HAL_GPIO_Init+0x26a>
 810261e:	2306      	movs	r3, #6
 8102620:	e025      	b.n	810266e <HAL_GPIO_Init+0x26a>
 8102622:	2305      	movs	r3, #5
 8102624:	e023      	b.n	810266e <HAL_GPIO_Init+0x26a>
 8102626:	2304      	movs	r3, #4
 8102628:	e021      	b.n	810266e <HAL_GPIO_Init+0x26a>
 810262a:	2303      	movs	r3, #3
 810262c:	e01f      	b.n	810266e <HAL_GPIO_Init+0x26a>
 810262e:	2302      	movs	r3, #2
 8102630:	e01d      	b.n	810266e <HAL_GPIO_Init+0x26a>
 8102632:	2301      	movs	r3, #1
 8102634:	e01b      	b.n	810266e <HAL_GPIO_Init+0x26a>
 8102636:	bf00      	nop
 8102638:	580000c0 	.word	0x580000c0
 810263c:	58024400 	.word	0x58024400
 8102640:	58000400 	.word	0x58000400
 8102644:	58020000 	.word	0x58020000
 8102648:	58020400 	.word	0x58020400
 810264c:	58020800 	.word	0x58020800
 8102650:	58020c00 	.word	0x58020c00
 8102654:	58021000 	.word	0x58021000
 8102658:	58021400 	.word	0x58021400
 810265c:	58021800 	.word	0x58021800
 8102660:	58021c00 	.word	0x58021c00
 8102664:	58022000 	.word	0x58022000
 8102668:	58022400 	.word	0x58022400
 810266c:	2300      	movs	r3, #0
 810266e:	69fa      	ldr	r2, [r7, #28]
 8102670:	f002 0203 	and.w	r2, r2, #3
 8102674:	0092      	lsls	r2, r2, #2
 8102676:	4093      	lsls	r3, r2
 8102678:	69ba      	ldr	r2, [r7, #24]
 810267a:	4313      	orrs	r3, r2
 810267c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810267e:	4938      	ldr	r1, [pc, #224]	; (8102760 <HAL_GPIO_Init+0x35c>)
 8102680:	69fb      	ldr	r3, [r7, #28]
 8102682:	089b      	lsrs	r3, r3, #2
 8102684:	3302      	adds	r3, #2
 8102686:	69ba      	ldr	r2, [r7, #24]
 8102688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102694:	693b      	ldr	r3, [r7, #16]
 8102696:	43db      	mvns	r3, r3
 8102698:	69ba      	ldr	r2, [r7, #24]
 810269a:	4013      	ands	r3, r2
 810269c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810269e:	683b      	ldr	r3, [r7, #0]
 81026a0:	685b      	ldr	r3, [r3, #4]
 81026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81026a6:	2b00      	cmp	r3, #0
 81026a8:	d003      	beq.n	81026b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81026aa:	69ba      	ldr	r2, [r7, #24]
 81026ac:	693b      	ldr	r3, [r7, #16]
 81026ae:	4313      	orrs	r3, r2
 81026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81026b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026b6:	69bb      	ldr	r3, [r7, #24]
 81026b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81026be:	685b      	ldr	r3, [r3, #4]
 81026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026c2:	693b      	ldr	r3, [r7, #16]
 81026c4:	43db      	mvns	r3, r3
 81026c6:	69ba      	ldr	r2, [r7, #24]
 81026c8:	4013      	ands	r3, r2
 81026ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81026cc:	683b      	ldr	r3, [r7, #0]
 81026ce:	685b      	ldr	r3, [r3, #4]
 81026d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d003      	beq.n	81026e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81026d8:	69ba      	ldr	r2, [r7, #24]
 81026da:	693b      	ldr	r3, [r7, #16]
 81026dc:	4313      	orrs	r3, r2
 81026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81026e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026e4:	69bb      	ldr	r3, [r7, #24]
 81026e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81026e8:	697b      	ldr	r3, [r7, #20]
 81026ea:	685b      	ldr	r3, [r3, #4]
 81026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026ee:	693b      	ldr	r3, [r7, #16]
 81026f0:	43db      	mvns	r3, r3
 81026f2:	69ba      	ldr	r2, [r7, #24]
 81026f4:	4013      	ands	r3, r2
 81026f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81026f8:	683b      	ldr	r3, [r7, #0]
 81026fa:	685b      	ldr	r3, [r3, #4]
 81026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102700:	2b00      	cmp	r3, #0
 8102702:	d003      	beq.n	810270c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102704:	69ba      	ldr	r2, [r7, #24]
 8102706:	693b      	ldr	r3, [r7, #16]
 8102708:	4313      	orrs	r3, r2
 810270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810270c:	697b      	ldr	r3, [r7, #20]
 810270e:	69ba      	ldr	r2, [r7, #24]
 8102710:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102712:	697b      	ldr	r3, [r7, #20]
 8102714:	681b      	ldr	r3, [r3, #0]
 8102716:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102718:	693b      	ldr	r3, [r7, #16]
 810271a:	43db      	mvns	r3, r3
 810271c:	69ba      	ldr	r2, [r7, #24]
 810271e:	4013      	ands	r3, r2
 8102720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102722:	683b      	ldr	r3, [r7, #0]
 8102724:	685b      	ldr	r3, [r3, #4]
 8102726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810272a:	2b00      	cmp	r3, #0
 810272c:	d003      	beq.n	8102736 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810272e:	69ba      	ldr	r2, [r7, #24]
 8102730:	693b      	ldr	r3, [r7, #16]
 8102732:	4313      	orrs	r3, r2
 8102734:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102736:	697b      	ldr	r3, [r7, #20]
 8102738:	69ba      	ldr	r2, [r7, #24]
 810273a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810273c:	69fb      	ldr	r3, [r7, #28]
 810273e:	3301      	adds	r3, #1
 8102740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102742:	683b      	ldr	r3, [r7, #0]
 8102744:	681a      	ldr	r2, [r3, #0]
 8102746:	69fb      	ldr	r3, [r7, #28]
 8102748:	fa22 f303 	lsr.w	r3, r2, r3
 810274c:	2b00      	cmp	r3, #0
 810274e:	f47f ae63 	bne.w	8102418 <HAL_GPIO_Init+0x14>
  }
}
 8102752:	bf00      	nop
 8102754:	bf00      	nop
 8102756:	3724      	adds	r7, #36	; 0x24
 8102758:	46bd      	mov	sp, r7
 810275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275e:	4770      	bx	lr
 8102760:	58000400 	.word	0x58000400

08102764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102764:	b480      	push	{r7}
 8102766:	b083      	sub	sp, #12
 8102768:	af00      	add	r7, sp, #0
 810276a:	6078      	str	r0, [r7, #4]
 810276c:	460b      	mov	r3, r1
 810276e:	807b      	strh	r3, [r7, #2]
 8102770:	4613      	mov	r3, r2
 8102772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102774:	787b      	ldrb	r3, [r7, #1]
 8102776:	2b00      	cmp	r3, #0
 8102778:	d003      	beq.n	8102782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810277a:	887a      	ldrh	r2, [r7, #2]
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102780:	e003      	b.n	810278a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102782:	887b      	ldrh	r3, [r7, #2]
 8102784:	041a      	lsls	r2, r3, #16
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	619a      	str	r2, [r3, #24]
}
 810278a:	bf00      	nop
 810278c:	370c      	adds	r7, #12
 810278e:	46bd      	mov	sp, r7
 8102790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102794:	4770      	bx	lr

08102796 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102796:	b480      	push	{r7}
 8102798:	b085      	sub	sp, #20
 810279a:	af00      	add	r7, sp, #0
 810279c:	6078      	str	r0, [r7, #4]
 810279e:	460b      	mov	r3, r1
 81027a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	695b      	ldr	r3, [r3, #20]
 81027a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81027a8:	887a      	ldrh	r2, [r7, #2]
 81027aa:	68fb      	ldr	r3, [r7, #12]
 81027ac:	4013      	ands	r3, r2
 81027ae:	041a      	lsls	r2, r3, #16
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	43d9      	mvns	r1, r3
 81027b4:	887b      	ldrh	r3, [r7, #2]
 81027b6:	400b      	ands	r3, r1
 81027b8:	431a      	orrs	r2, r3
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	619a      	str	r2, [r3, #24]
}
 81027be:	bf00      	nop
 81027c0:	3714      	adds	r7, #20
 81027c2:	46bd      	mov	sp, r7
 81027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c8:	4770      	bx	lr

081027ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81027ca:	b580      	push	{r7, lr}
 81027cc:	b082      	sub	sp, #8
 81027ce:	af00      	add	r7, sp, #0
 81027d0:	4603      	mov	r3, r0
 81027d2:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81027d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81027dc:	88fb      	ldrh	r3, [r7, #6]
 81027de:	4013      	ands	r3, r2
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d008      	beq.n	81027f6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81027e8:	88fb      	ldrh	r3, [r7, #6]
 81027ea:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81027ee:	88fb      	ldrh	r3, [r7, #6]
 81027f0:	4618      	mov	r0, r3
 81027f2:	f000 f804 	bl	81027fe <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81027f6:	bf00      	nop
 81027f8:	3708      	adds	r7, #8
 81027fa:	46bd      	mov	sp, r7
 81027fc:	bd80      	pop	{r7, pc}

081027fe <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 81027fe:	b480      	push	{r7}
 8102800:	b083      	sub	sp, #12
 8102802:	af00      	add	r7, sp, #0
 8102804:	4603      	mov	r3, r0
 8102806:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8102808:	bf00      	nop
 810280a:	370c      	adds	r7, #12
 810280c:	46bd      	mov	sp, r7
 810280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102812:	4770      	bx	lr

08102814 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102814:	b480      	push	{r7}
 8102816:	b083      	sub	sp, #12
 8102818:	af00      	add	r7, sp, #0
 810281a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810281c:	4b05      	ldr	r3, [pc, #20]	; (8102834 <HAL_HSEM_ActivateNotification+0x20>)
 810281e:	681a      	ldr	r2, [r3, #0]
 8102820:	4904      	ldr	r1, [pc, #16]	; (8102834 <HAL_HSEM_ActivateNotification+0x20>)
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	4313      	orrs	r3, r2
 8102826:	600b      	str	r3, [r1, #0]
#endif
}
 8102828:	bf00      	nop
 810282a:	370c      	adds	r7, #12
 810282c:	46bd      	mov	sp, r7
 810282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102832:	4770      	bx	lr
 8102834:	58026510 	.word	0x58026510

08102838 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102838:	b580      	push	{r7, lr}
 810283a:	b084      	sub	sp, #16
 810283c:	af00      	add	r7, sp, #0
 810283e:	60f8      	str	r0, [r7, #12]
 8102840:	460b      	mov	r3, r1
 8102842:	607a      	str	r2, [r7, #4]
 8102844:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102846:	4b37      	ldr	r3, [pc, #220]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	f023 0201 	bic.w	r2, r3, #1
 810284e:	4935      	ldr	r1, [pc, #212]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102850:	68fb      	ldr	r3, [r7, #12]
 8102852:	4313      	orrs	r3, r2
 8102854:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	2b00      	cmp	r3, #0
 810285a:	d123      	bne.n	81028a4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810285c:	f7ff fdbe 	bl	81023dc <HAL_GetCurrentCPUID>
 8102860:	4603      	mov	r3, r0
 8102862:	2b03      	cmp	r3, #3
 8102864:	d158      	bne.n	8102918 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102866:	4b2f      	ldr	r3, [pc, #188]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102868:	691b      	ldr	r3, [r3, #16]
 810286a:	4a2e      	ldr	r2, [pc, #184]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 810286c:	f023 0301 	bic.w	r3, r3, #1
 8102870:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102872:	4b2d      	ldr	r3, [pc, #180]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102874:	691b      	ldr	r3, [r3, #16]
 8102876:	4a2c      	ldr	r2, [pc, #176]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102878:	f043 0304 	orr.w	r3, r3, #4
 810287c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810287e:	f3bf 8f4f 	dsb	sy
}
 8102882:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102884:	f3bf 8f6f 	isb	sy
}
 8102888:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810288a:	7afb      	ldrb	r3, [r7, #11]
 810288c:	2b01      	cmp	r3, #1
 810288e:	d101      	bne.n	8102894 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102890:	bf30      	wfi
 8102892:	e000      	b.n	8102896 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102894:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102896:	4b24      	ldr	r3, [pc, #144]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102898:	691b      	ldr	r3, [r3, #16]
 810289a:	4a23      	ldr	r2, [pc, #140]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810289c:	f023 0304 	bic.w	r3, r3, #4
 81028a0:	6113      	str	r3, [r2, #16]
 81028a2:	e03c      	b.n	810291e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	2b01      	cmp	r3, #1
 81028a8:	d123      	bne.n	81028f2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81028aa:	f7ff fd97 	bl	81023dc <HAL_GetCurrentCPUID>
 81028ae:	4603      	mov	r3, r0
 81028b0:	2b01      	cmp	r3, #1
 81028b2:	d133      	bne.n	810291c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81028b4:	4b1b      	ldr	r3, [pc, #108]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028b6:	695b      	ldr	r3, [r3, #20]
 81028b8:	4a1a      	ldr	r2, [pc, #104]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028ba:	f023 0302 	bic.w	r3, r3, #2
 81028be:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028c0:	4b19      	ldr	r3, [pc, #100]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028c2:	691b      	ldr	r3, [r3, #16]
 81028c4:	4a18      	ldr	r2, [pc, #96]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028c6:	f043 0304 	orr.w	r3, r3, #4
 81028ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81028cc:	f3bf 8f4f 	dsb	sy
}
 81028d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81028d2:	f3bf 8f6f 	isb	sy
}
 81028d6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81028d8:	7afb      	ldrb	r3, [r7, #11]
 81028da:	2b01      	cmp	r3, #1
 81028dc:	d101      	bne.n	81028e2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81028de:	bf30      	wfi
 81028e0:	e000      	b.n	81028e4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81028e2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028e4:	4b10      	ldr	r3, [pc, #64]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028e6:	691b      	ldr	r3, [r3, #16]
 81028e8:	4a0f      	ldr	r2, [pc, #60]	; (8102928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028ea:	f023 0304 	bic.w	r3, r3, #4
 81028ee:	6113      	str	r3, [r2, #16]
 81028f0:	e015      	b.n	810291e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81028f2:	f7ff fd73 	bl	81023dc <HAL_GetCurrentCPUID>
 81028f6:	4603      	mov	r3, r0
 81028f8:	2b03      	cmp	r3, #3
 81028fa:	d106      	bne.n	810290a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81028fc:	4b09      	ldr	r3, [pc, #36]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028fe:	691b      	ldr	r3, [r3, #16]
 8102900:	4a08      	ldr	r2, [pc, #32]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102902:	f023 0304 	bic.w	r3, r3, #4
 8102906:	6113      	str	r3, [r2, #16]
 8102908:	e009      	b.n	810291e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810290a:	4b06      	ldr	r3, [pc, #24]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 810290c:	695b      	ldr	r3, [r3, #20]
 810290e:	4a05      	ldr	r2, [pc, #20]	; (8102924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102910:	f023 0304 	bic.w	r3, r3, #4
 8102914:	6153      	str	r3, [r2, #20]
 8102916:	e002      	b.n	810291e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102918:	bf00      	nop
 810291a:	e000      	b.n	810291e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810291c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810291e:	3710      	adds	r7, #16
 8102920:	46bd      	mov	sp, r7
 8102922:	bd80      	pop	{r7, pc}
 8102924:	58024800 	.word	0x58024800
 8102928:	e000ed00 	.word	0xe000ed00

0810292c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810292c:	b580      	push	{r7, lr}
 810292e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102930:	f7ff fd54 	bl	81023dc <HAL_GetCurrentCPUID>
 8102934:	4603      	mov	r3, r0
 8102936:	2b03      	cmp	r3, #3
 8102938:	d101      	bne.n	810293e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810293a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810293c:	e001      	b.n	8102942 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810293e:	bf40      	sev
    __WFE ();
 8102940:	bf20      	wfe
}
 8102942:	bf00      	nop
 8102944:	bd80      	pop	{r7, pc}
	...

08102948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102948:	b480      	push	{r7}
 810294a:	b089      	sub	sp, #36	; 0x24
 810294c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810294e:	4bb3      	ldr	r3, [pc, #716]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102950:	691b      	ldr	r3, [r3, #16]
 8102952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102956:	2b18      	cmp	r3, #24
 8102958:	f200 8155 	bhi.w	8102c06 <HAL_RCC_GetSysClockFreq+0x2be>
 810295c:	a201      	add	r2, pc, #4	; (adr r2, 8102964 <HAL_RCC_GetSysClockFreq+0x1c>)
 810295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102962:	bf00      	nop
 8102964:	081029c9 	.word	0x081029c9
 8102968:	08102c07 	.word	0x08102c07
 810296c:	08102c07 	.word	0x08102c07
 8102970:	08102c07 	.word	0x08102c07
 8102974:	08102c07 	.word	0x08102c07
 8102978:	08102c07 	.word	0x08102c07
 810297c:	08102c07 	.word	0x08102c07
 8102980:	08102c07 	.word	0x08102c07
 8102984:	081029ef 	.word	0x081029ef
 8102988:	08102c07 	.word	0x08102c07
 810298c:	08102c07 	.word	0x08102c07
 8102990:	08102c07 	.word	0x08102c07
 8102994:	08102c07 	.word	0x08102c07
 8102998:	08102c07 	.word	0x08102c07
 810299c:	08102c07 	.word	0x08102c07
 81029a0:	08102c07 	.word	0x08102c07
 81029a4:	081029f5 	.word	0x081029f5
 81029a8:	08102c07 	.word	0x08102c07
 81029ac:	08102c07 	.word	0x08102c07
 81029b0:	08102c07 	.word	0x08102c07
 81029b4:	08102c07 	.word	0x08102c07
 81029b8:	08102c07 	.word	0x08102c07
 81029bc:	08102c07 	.word	0x08102c07
 81029c0:	08102c07 	.word	0x08102c07
 81029c4:	081029fb 	.word	0x081029fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81029c8:	4b94      	ldr	r3, [pc, #592]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	f003 0320 	and.w	r3, r3, #32
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d009      	beq.n	81029e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81029d4:	4b91      	ldr	r3, [pc, #580]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	08db      	lsrs	r3, r3, #3
 81029da:	f003 0303 	and.w	r3, r3, #3
 81029de:	4a90      	ldr	r2, [pc, #576]	; (8102c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81029e0:	fa22 f303 	lsr.w	r3, r2, r3
 81029e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81029e6:	e111      	b.n	8102c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81029e8:	4b8d      	ldr	r3, [pc, #564]	; (8102c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81029ea:	61bb      	str	r3, [r7, #24]
    break;
 81029ec:	e10e      	b.n	8102c0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81029ee:	4b8d      	ldr	r3, [pc, #564]	; (8102c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81029f0:	61bb      	str	r3, [r7, #24]
    break;
 81029f2:	e10b      	b.n	8102c0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81029f4:	4b8c      	ldr	r3, [pc, #560]	; (8102c28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81029f6:	61bb      	str	r3, [r7, #24]
    break;
 81029f8:	e108      	b.n	8102c0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81029fa:	4b88      	ldr	r3, [pc, #544]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029fe:	f003 0303 	and.w	r3, r3, #3
 8102a02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102a04:	4b85      	ldr	r3, [pc, #532]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a08:	091b      	lsrs	r3, r3, #4
 8102a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102a0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102a10:	4b82      	ldr	r3, [pc, #520]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a14:	f003 0301 	and.w	r3, r3, #1
 8102a18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102a1a:	4b80      	ldr	r3, [pc, #512]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102a1e:	08db      	lsrs	r3, r3, #3
 8102a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102a24:	68fa      	ldr	r2, [r7, #12]
 8102a26:	fb02 f303 	mul.w	r3, r2, r3
 8102a2a:	ee07 3a90 	vmov	s15, r3
 8102a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102a36:	693b      	ldr	r3, [r7, #16]
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	f000 80e1 	beq.w	8102c00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102a3e:	697b      	ldr	r3, [r7, #20]
 8102a40:	2b02      	cmp	r3, #2
 8102a42:	f000 8083 	beq.w	8102b4c <HAL_RCC_GetSysClockFreq+0x204>
 8102a46:	697b      	ldr	r3, [r7, #20]
 8102a48:	2b02      	cmp	r3, #2
 8102a4a:	f200 80a1 	bhi.w	8102b90 <HAL_RCC_GetSysClockFreq+0x248>
 8102a4e:	697b      	ldr	r3, [r7, #20]
 8102a50:	2b00      	cmp	r3, #0
 8102a52:	d003      	beq.n	8102a5c <HAL_RCC_GetSysClockFreq+0x114>
 8102a54:	697b      	ldr	r3, [r7, #20]
 8102a56:	2b01      	cmp	r3, #1
 8102a58:	d056      	beq.n	8102b08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102a5a:	e099      	b.n	8102b90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a5c:	4b6f      	ldr	r3, [pc, #444]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	f003 0320 	and.w	r3, r3, #32
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d02d      	beq.n	8102ac4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102a68:	4b6c      	ldr	r3, [pc, #432]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	08db      	lsrs	r3, r3, #3
 8102a6e:	f003 0303 	and.w	r3, r3, #3
 8102a72:	4a6b      	ldr	r2, [pc, #428]	; (8102c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a74:	fa22 f303 	lsr.w	r3, r2, r3
 8102a78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	ee07 3a90 	vmov	s15, r3
 8102a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a84:	693b      	ldr	r3, [r7, #16]
 8102a86:	ee07 3a90 	vmov	s15, r3
 8102a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a92:	4b62      	ldr	r3, [pc, #392]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a9a:	ee07 3a90 	vmov	s15, r3
 8102a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102aa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102abe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102ac2:	e087      	b.n	8102bd4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102ac4:	693b      	ldr	r3, [r7, #16]
 8102ac6:	ee07 3a90 	vmov	s15, r3
 8102aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ace:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102c30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ad6:	4b51      	ldr	r3, [pc, #324]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ade:	ee07 3a90 	vmov	s15, r3
 8102ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102aea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b06:	e065      	b.n	8102bd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b08:	693b      	ldr	r3, [r7, #16]
 8102b0a:	ee07 3a90 	vmov	s15, r3
 8102b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b1a:	4b40      	ldr	r3, [pc, #256]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b22:	ee07 3a90 	vmov	s15, r3
 8102b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b4a:	e043      	b.n	8102bd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b4c:	693b      	ldr	r3, [r7, #16]
 8102b4e:	ee07 3a90 	vmov	s15, r3
 8102b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102c38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b5e:	4b2f      	ldr	r3, [pc, #188]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b66:	ee07 3a90 	vmov	s15, r3
 8102b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b8e:	e021      	b.n	8102bd4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b90:	693b      	ldr	r3, [r7, #16]
 8102b92:	ee07 3a90 	vmov	s15, r3
 8102b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ba2:	4b1e      	ldr	r3, [pc, #120]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102baa:	ee07 3a90 	vmov	s15, r3
 8102bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102bb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102bd2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102bd4:	4b11      	ldr	r3, [pc, #68]	; (8102c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102bd8:	0a5b      	lsrs	r3, r3, #9
 8102bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102bde:	3301      	adds	r3, #1
 8102be0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102be2:	683b      	ldr	r3, [r7, #0]
 8102be4:	ee07 3a90 	vmov	s15, r3
 8102be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bf8:	ee17 3a90 	vmov	r3, s15
 8102bfc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102bfe:	e005      	b.n	8102c0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102c00:	2300      	movs	r3, #0
 8102c02:	61bb      	str	r3, [r7, #24]
    break;
 8102c04:	e002      	b.n	8102c0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102c06:	4b07      	ldr	r3, [pc, #28]	; (8102c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c08:	61bb      	str	r3, [r7, #24]
    break;
 8102c0a:	bf00      	nop
  }

  return sysclockfreq;
 8102c0c:	69bb      	ldr	r3, [r7, #24]
}
 8102c0e:	4618      	mov	r0, r3
 8102c10:	3724      	adds	r7, #36	; 0x24
 8102c12:	46bd      	mov	sp, r7
 8102c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c18:	4770      	bx	lr
 8102c1a:	bf00      	nop
 8102c1c:	58024400 	.word	0x58024400
 8102c20:	03d09000 	.word	0x03d09000
 8102c24:	003d0900 	.word	0x003d0900
 8102c28:	007a1200 	.word	0x007a1200
 8102c2c:	46000000 	.word	0x46000000
 8102c30:	4c742400 	.word	0x4c742400
 8102c34:	4a742400 	.word	0x4a742400
 8102c38:	4af42400 	.word	0x4af42400

08102c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102c3c:	b580      	push	{r7, lr}
 8102c3e:	b082      	sub	sp, #8
 8102c40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102c42:	f7ff fe81 	bl	8102948 <HAL_RCC_GetSysClockFreq>
 8102c46:	4602      	mov	r2, r0
 8102c48:	4b11      	ldr	r3, [pc, #68]	; (8102c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8102c4a:	699b      	ldr	r3, [r3, #24]
 8102c4c:	0a1b      	lsrs	r3, r3, #8
 8102c4e:	f003 030f 	and.w	r3, r3, #15
 8102c52:	4910      	ldr	r1, [pc, #64]	; (8102c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8102c54:	5ccb      	ldrb	r3, [r1, r3]
 8102c56:	f003 031f 	and.w	r3, r3, #31
 8102c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8102c5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c60:	4b0b      	ldr	r3, [pc, #44]	; (8102c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8102c62:	699b      	ldr	r3, [r3, #24]
 8102c64:	f003 030f 	and.w	r3, r3, #15
 8102c68:	4a0a      	ldr	r2, [pc, #40]	; (8102c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8102c6a:	5cd3      	ldrb	r3, [r2, r3]
 8102c6c:	f003 031f 	and.w	r3, r3, #31
 8102c70:	687a      	ldr	r2, [r7, #4]
 8102c72:	fa22 f303 	lsr.w	r3, r2, r3
 8102c76:	4a08      	ldr	r2, [pc, #32]	; (8102c98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c78:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102c7a:	4b07      	ldr	r3, [pc, #28]	; (8102c98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c7c:	681b      	ldr	r3, [r3, #0]
 8102c7e:	4a07      	ldr	r2, [pc, #28]	; (8102c9c <HAL_RCC_GetHCLKFreq+0x60>)
 8102c80:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102c82:	4b05      	ldr	r3, [pc, #20]	; (8102c98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c84:	681b      	ldr	r3, [r3, #0]
}
 8102c86:	4618      	mov	r0, r3
 8102c88:	3708      	adds	r7, #8
 8102c8a:	46bd      	mov	sp, r7
 8102c8c:	bd80      	pop	{r7, pc}
 8102c8e:	bf00      	nop
 8102c90:	58024400 	.word	0x58024400
 8102c94:	0810b6bc 	.word	0x0810b6bc
 8102c98:	10000004 	.word	0x10000004
 8102c9c:	10000000 	.word	0x10000000

08102ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102ca0:	b580      	push	{r7, lr}
 8102ca2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102ca4:	f7ff ffca 	bl	8102c3c <HAL_RCC_GetHCLKFreq>
 8102ca8:	4602      	mov	r2, r0
 8102caa:	4b06      	ldr	r3, [pc, #24]	; (8102cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102cac:	69db      	ldr	r3, [r3, #28]
 8102cae:	091b      	lsrs	r3, r3, #4
 8102cb0:	f003 0307 	and.w	r3, r3, #7
 8102cb4:	4904      	ldr	r1, [pc, #16]	; (8102cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102cb6:	5ccb      	ldrb	r3, [r1, r3]
 8102cb8:	f003 031f 	and.w	r3, r3, #31
 8102cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102cc0:	4618      	mov	r0, r3
 8102cc2:	bd80      	pop	{r7, pc}
 8102cc4:	58024400 	.word	0x58024400
 8102cc8:	0810b6bc 	.word	0x0810b6bc

08102ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102ccc:	b580      	push	{r7, lr}
 8102cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102cd0:	f7ff ffb4 	bl	8102c3c <HAL_RCC_GetHCLKFreq>
 8102cd4:	4602      	mov	r2, r0
 8102cd6:	4b06      	ldr	r3, [pc, #24]	; (8102cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102cd8:	69db      	ldr	r3, [r3, #28]
 8102cda:	0a1b      	lsrs	r3, r3, #8
 8102cdc:	f003 0307 	and.w	r3, r3, #7
 8102ce0:	4904      	ldr	r1, [pc, #16]	; (8102cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8102ce2:	5ccb      	ldrb	r3, [r1, r3]
 8102ce4:	f003 031f 	and.w	r3, r3, #31
 8102ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102cec:	4618      	mov	r0, r3
 8102cee:	bd80      	pop	{r7, pc}
 8102cf0:	58024400 	.word	0x58024400
 8102cf4:	0810b6bc 	.word	0x0810b6bc

08102cf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102cf8:	b580      	push	{r7, lr}
 8102cfa:	b086      	sub	sp, #24
 8102cfc:	af00      	add	r7, sp, #0
 8102cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102d00:	2300      	movs	r3, #0
 8102d02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102d04:	2300      	movs	r3, #0
 8102d06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d03f      	beq.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102d18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d1c:	d02a      	beq.n	8102d74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102d1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d22:	d824      	bhi.n	8102d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d28:	d018      	beq.n	8102d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d2e:	d81e      	bhi.n	8102d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102d30:	2b00      	cmp	r3, #0
 8102d32:	d003      	beq.n	8102d3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102d38:	d007      	beq.n	8102d4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102d3a:	e018      	b.n	8102d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d3c:	4ba3      	ldr	r3, [pc, #652]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d40:	4aa2      	ldr	r2, [pc, #648]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d48:	e015      	b.n	8102d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	3304      	adds	r3, #4
 8102d4e:	2102      	movs	r1, #2
 8102d50:	4618      	mov	r0, r3
 8102d52:	f001 f9d5 	bl	8104100 <RCCEx_PLL2_Config>
 8102d56:	4603      	mov	r3, r0
 8102d58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d5a:	e00c      	b.n	8102d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	3324      	adds	r3, #36	; 0x24
 8102d60:	2102      	movs	r1, #2
 8102d62:	4618      	mov	r0, r3
 8102d64:	f001 fa7e 	bl	8104264 <RCCEx_PLL3_Config>
 8102d68:	4603      	mov	r3, r0
 8102d6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d6c:	e003      	b.n	8102d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d6e:	2301      	movs	r3, #1
 8102d70:	75fb      	strb	r3, [r7, #23]
      break;
 8102d72:	e000      	b.n	8102d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d76:	7dfb      	ldrb	r3, [r7, #23]
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d109      	bne.n	8102d90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102d7c:	4b93      	ldr	r3, [pc, #588]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102d88:	4990      	ldr	r1, [pc, #576]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d8a:	4313      	orrs	r3, r2
 8102d8c:	650b      	str	r3, [r1, #80]	; 0x50
 8102d8e:	e001      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d90:	7dfb      	ldrb	r3, [r7, #23]
 8102d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d03d      	beq.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102da4:	2b04      	cmp	r3, #4
 8102da6:	d826      	bhi.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102da8:	a201      	add	r2, pc, #4	; (adr r2, 8102db0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102dae:	bf00      	nop
 8102db0:	08102dc5 	.word	0x08102dc5
 8102db4:	08102dd3 	.word	0x08102dd3
 8102db8:	08102de5 	.word	0x08102de5
 8102dbc:	08102dfd 	.word	0x08102dfd
 8102dc0:	08102dfd 	.word	0x08102dfd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102dc4:	4b81      	ldr	r3, [pc, #516]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102dc8:	4a80      	ldr	r2, [pc, #512]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102dd0:	e015      	b.n	8102dfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	3304      	adds	r3, #4
 8102dd6:	2100      	movs	r1, #0
 8102dd8:	4618      	mov	r0, r3
 8102dda:	f001 f991 	bl	8104100 <RCCEx_PLL2_Config>
 8102dde:	4603      	mov	r3, r0
 8102de0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102de2:	e00c      	b.n	8102dfe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	3324      	adds	r3, #36	; 0x24
 8102de8:	2100      	movs	r1, #0
 8102dea:	4618      	mov	r0, r3
 8102dec:	f001 fa3a 	bl	8104264 <RCCEx_PLL3_Config>
 8102df0:	4603      	mov	r3, r0
 8102df2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102df4:	e003      	b.n	8102dfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102df6:	2301      	movs	r3, #1
 8102df8:	75fb      	strb	r3, [r7, #23]
      break;
 8102dfa:	e000      	b.n	8102dfe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dfe:	7dfb      	ldrb	r3, [r7, #23]
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d109      	bne.n	8102e18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102e04:	4b71      	ldr	r3, [pc, #452]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e08:	f023 0207 	bic.w	r2, r3, #7
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e10:	496e      	ldr	r1, [pc, #440]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e12:	4313      	orrs	r3, r2
 8102e14:	650b      	str	r3, [r1, #80]	; 0x50
 8102e16:	e001      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e18:	7dfb      	ldrb	r3, [r7, #23]
 8102e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102e24:	2b00      	cmp	r3, #0
 8102e26:	d042      	beq.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102e30:	d02b      	beq.n	8102e8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102e36:	d825      	bhi.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e38:	2bc0      	cmp	r3, #192	; 0xc0
 8102e3a:	d028      	beq.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102e3c:	2bc0      	cmp	r3, #192	; 0xc0
 8102e3e:	d821      	bhi.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e40:	2b80      	cmp	r3, #128	; 0x80
 8102e42:	d016      	beq.n	8102e72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102e44:	2b80      	cmp	r3, #128	; 0x80
 8102e46:	d81d      	bhi.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	d002      	beq.n	8102e52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102e4c:	2b40      	cmp	r3, #64	; 0x40
 8102e4e:	d007      	beq.n	8102e60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102e50:	e018      	b.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e52:	4b5e      	ldr	r3, [pc, #376]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e56:	4a5d      	ldr	r2, [pc, #372]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e5e:	e017      	b.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	3304      	adds	r3, #4
 8102e64:	2100      	movs	r1, #0
 8102e66:	4618      	mov	r0, r3
 8102e68:	f001 f94a 	bl	8104100 <RCCEx_PLL2_Config>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e70:	e00e      	b.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	3324      	adds	r3, #36	; 0x24
 8102e76:	2100      	movs	r1, #0
 8102e78:	4618      	mov	r0, r3
 8102e7a:	f001 f9f3 	bl	8104264 <RCCEx_PLL3_Config>
 8102e7e:	4603      	mov	r3, r0
 8102e80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e82:	e005      	b.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e84:	2301      	movs	r3, #1
 8102e86:	75fb      	strb	r3, [r7, #23]
      break;
 8102e88:	e002      	b.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e8a:	bf00      	nop
 8102e8c:	e000      	b.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e90:	7dfb      	ldrb	r3, [r7, #23]
 8102e92:	2b00      	cmp	r3, #0
 8102e94:	d109      	bne.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102e96:	4b4d      	ldr	r3, [pc, #308]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ea2:	494a      	ldr	r1, [pc, #296]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ea4:	4313      	orrs	r3, r2
 8102ea6:	650b      	str	r3, [r1, #80]	; 0x50
 8102ea8:	e001      	b.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eaa:	7dfb      	ldrb	r3, [r7, #23]
 8102eac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d049      	beq.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102ec4:	d030      	beq.n	8102f28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102eca:	d82a      	bhi.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ecc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102ed0:	d02c      	beq.n	8102f2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102ed2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102ed6:	d824      	bhi.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102edc:	d018      	beq.n	8102f10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102ee2:	d81e      	bhi.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d003      	beq.n	8102ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102eec:	d007      	beq.n	8102efe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102eee:	e018      	b.n	8102f22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ef0:	4b36      	ldr	r3, [pc, #216]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ef4:	4a35      	ldr	r2, [pc, #212]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102efc:	e017      	b.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	3304      	adds	r3, #4
 8102f02:	2100      	movs	r1, #0
 8102f04:	4618      	mov	r0, r3
 8102f06:	f001 f8fb 	bl	8104100 <RCCEx_PLL2_Config>
 8102f0a:	4603      	mov	r3, r0
 8102f0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102f0e:	e00e      	b.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	3324      	adds	r3, #36	; 0x24
 8102f14:	2100      	movs	r1, #0
 8102f16:	4618      	mov	r0, r3
 8102f18:	f001 f9a4 	bl	8104264 <RCCEx_PLL3_Config>
 8102f1c:	4603      	mov	r3, r0
 8102f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f20:	e005      	b.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102f22:	2301      	movs	r3, #1
 8102f24:	75fb      	strb	r3, [r7, #23]
      break;
 8102f26:	e002      	b.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102f28:	bf00      	nop
 8102f2a:	e000      	b.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f2e:	7dfb      	ldrb	r3, [r7, #23]
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d10a      	bne.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102f34:	4b25      	ldr	r3, [pc, #148]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102f42:	4922      	ldr	r1, [pc, #136]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f44:	4313      	orrs	r3, r2
 8102f46:	658b      	str	r3, [r1, #88]	; 0x58
 8102f48:	e001      	b.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f4a:	7dfb      	ldrb	r3, [r7, #23]
 8102f4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102f56:	2b00      	cmp	r3, #0
 8102f58:	d04b      	beq.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102f64:	d030      	beq.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102f6a:	d82a      	bhi.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f70:	d02e      	beq.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8102f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f76:	d824      	bhi.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f7c:	d018      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f82:	d81e      	bhi.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f84:	2b00      	cmp	r3, #0
 8102f86:	d003      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f8c:	d007      	beq.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102f8e:	e018      	b.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f90:	4b0e      	ldr	r3, [pc, #56]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f94:	4a0d      	ldr	r2, [pc, #52]	; (8102fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f9c:	e019      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	3304      	adds	r3, #4
 8102fa2:	2100      	movs	r1, #0
 8102fa4:	4618      	mov	r0, r3
 8102fa6:	f001 f8ab 	bl	8104100 <RCCEx_PLL2_Config>
 8102faa:	4603      	mov	r3, r0
 8102fac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102fae:	e010      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	3324      	adds	r3, #36	; 0x24
 8102fb4:	2100      	movs	r1, #0
 8102fb6:	4618      	mov	r0, r3
 8102fb8:	f001 f954 	bl	8104264 <RCCEx_PLL3_Config>
 8102fbc:	4603      	mov	r3, r0
 8102fbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fc0:	e007      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102fc2:	2301      	movs	r3, #1
 8102fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8102fc6:	e004      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102fc8:	bf00      	nop
 8102fca:	e002      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102fcc:	58024400 	.word	0x58024400
      break;
 8102fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fd2:	7dfb      	ldrb	r3, [r7, #23]
 8102fd4:	2b00      	cmp	r3, #0
 8102fd6:	d10a      	bne.n	8102fee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102fd8:	4b99      	ldr	r3, [pc, #612]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102fdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102fe6:	4996      	ldr	r1, [pc, #600]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102fe8:	4313      	orrs	r3, r2
 8102fea:	658b      	str	r3, [r1, #88]	; 0x58
 8102fec:	e001      	b.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fee:	7dfb      	ldrb	r3, [r7, #23]
 8102ff0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102ffa:	2b00      	cmp	r3, #0
 8102ffc:	d032      	beq.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103002:	2b30      	cmp	r3, #48	; 0x30
 8103004:	d01c      	beq.n	8103040 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103006:	2b30      	cmp	r3, #48	; 0x30
 8103008:	d817      	bhi.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x342>
 810300a:	2b20      	cmp	r3, #32
 810300c:	d00c      	beq.n	8103028 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810300e:	2b20      	cmp	r3, #32
 8103010:	d813      	bhi.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103012:	2b00      	cmp	r3, #0
 8103014:	d016      	beq.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103016:	2b10      	cmp	r3, #16
 8103018:	d10f      	bne.n	810303a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810301a:	4b89      	ldr	r3, [pc, #548]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810301e:	4a88      	ldr	r2, [pc, #544]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103026:	e00e      	b.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	3304      	adds	r3, #4
 810302c:	2102      	movs	r1, #2
 810302e:	4618      	mov	r0, r3
 8103030:	f001 f866 	bl	8104100 <RCCEx_PLL2_Config>
 8103034:	4603      	mov	r3, r0
 8103036:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103038:	e005      	b.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810303a:	2301      	movs	r3, #1
 810303c:	75fb      	strb	r3, [r7, #23]
      break;
 810303e:	e002      	b.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103040:	bf00      	nop
 8103042:	e000      	b.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103046:	7dfb      	ldrb	r3, [r7, #23]
 8103048:	2b00      	cmp	r3, #0
 810304a:	d109      	bne.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810304c:	4b7c      	ldr	r3, [pc, #496]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103058:	4979      	ldr	r1, [pc, #484]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810305a:	4313      	orrs	r3, r2
 810305c:	64cb      	str	r3, [r1, #76]	; 0x4c
 810305e:	e001      	b.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103060:	7dfb      	ldrb	r3, [r7, #23]
 8103062:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810306c:	2b00      	cmp	r3, #0
 810306e:	d047      	beq.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103078:	d030      	beq.n	81030dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 810307a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810307e:	d82a      	bhi.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103084:	d02c      	beq.n	81030e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103086:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810308a:	d824      	bhi.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810308c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103090:	d018      	beq.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103096:	d81e      	bhi.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103098:	2b00      	cmp	r3, #0
 810309a:	d003      	beq.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 810309c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81030a0:	d007      	beq.n	81030b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81030a2:	e018      	b.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030a4:	4b66      	ldr	r3, [pc, #408]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030a8:	4a65      	ldr	r2, [pc, #404]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81030aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030b0:	e017      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	3304      	adds	r3, #4
 81030b6:	2100      	movs	r1, #0
 81030b8:	4618      	mov	r0, r3
 81030ba:	f001 f821 	bl	8104100 <RCCEx_PLL2_Config>
 81030be:	4603      	mov	r3, r0
 81030c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030c2:	e00e      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	3324      	adds	r3, #36	; 0x24
 81030c8:	2100      	movs	r1, #0
 81030ca:	4618      	mov	r0, r3
 81030cc:	f001 f8ca 	bl	8104264 <RCCEx_PLL3_Config>
 81030d0:	4603      	mov	r3, r0
 81030d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030d4:	e005      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030d6:	2301      	movs	r3, #1
 81030d8:	75fb      	strb	r3, [r7, #23]
      break;
 81030da:	e002      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81030dc:	bf00      	nop
 81030de:	e000      	b.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030e2:	7dfb      	ldrb	r3, [r7, #23]
 81030e4:	2b00      	cmp	r3, #0
 81030e6:	d109      	bne.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81030e8:	4b55      	ldr	r3, [pc, #340]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030f4:	4952      	ldr	r1, [pc, #328]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81030f6:	4313      	orrs	r3, r2
 81030f8:	650b      	str	r3, [r1, #80]	; 0x50
 81030fa:	e001      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030fc:	7dfb      	ldrb	r3, [r7, #23]
 81030fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103108:	2b00      	cmp	r3, #0
 810310a:	d049      	beq.n	81031a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103114:	d02e      	beq.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810311a:	d828      	bhi.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x476>
 810311c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103120:	d02a      	beq.n	8103178 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103126:	d822      	bhi.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103128:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810312c:	d026      	beq.n	810317c <HAL_RCCEx_PeriphCLKConfig+0x484>
 810312e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103132:	d81c      	bhi.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103138:	d010      	beq.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x464>
 810313a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810313e:	d816      	bhi.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103140:	2b00      	cmp	r3, #0
 8103142:	d01d      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103148:	d111      	bne.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	3304      	adds	r3, #4
 810314e:	2101      	movs	r1, #1
 8103150:	4618      	mov	r0, r3
 8103152:	f000 ffd5 	bl	8104100 <RCCEx_PLL2_Config>
 8103156:	4603      	mov	r3, r0
 8103158:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810315a:	e012      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	3324      	adds	r3, #36	; 0x24
 8103160:	2101      	movs	r1, #1
 8103162:	4618      	mov	r0, r3
 8103164:	f001 f87e 	bl	8104264 <RCCEx_PLL3_Config>
 8103168:	4603      	mov	r3, r0
 810316a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810316c:	e009      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810316e:	2301      	movs	r3, #1
 8103170:	75fb      	strb	r3, [r7, #23]
      break;
 8103172:	e006      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103174:	bf00      	nop
 8103176:	e004      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103178:	bf00      	nop
 810317a:	e002      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810317c:	bf00      	nop
 810317e:	e000      	b.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103182:	7dfb      	ldrb	r3, [r7, #23]
 8103184:	2b00      	cmp	r3, #0
 8103186:	d109      	bne.n	810319c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103188:	4b2d      	ldr	r3, [pc, #180]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810318c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103194:	492a      	ldr	r1, [pc, #168]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103196:	4313      	orrs	r3, r2
 8103198:	650b      	str	r3, [r1, #80]	; 0x50
 810319a:	e001      	b.n	81031a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810319c:	7dfb      	ldrb	r3, [r7, #23]
 810319e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81031a8:	2b00      	cmp	r3, #0
 81031aa:	d04d      	beq.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81031b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81031b6:	d02e      	beq.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81031bc:	d828      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81031c2:	d02a      	beq.n	810321a <HAL_RCCEx_PeriphCLKConfig+0x522>
 81031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81031c8:	d822      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81031ce:	d026      	beq.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x526>
 81031d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81031d4:	d81c      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031da:	d010      	beq.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 81031dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031e0:	d816      	bhi.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031e2:	2b00      	cmp	r3, #0
 81031e4:	d01d      	beq.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81031e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81031ea:	d111      	bne.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	3304      	adds	r3, #4
 81031f0:	2101      	movs	r1, #1
 81031f2:	4618      	mov	r0, r3
 81031f4:	f000 ff84 	bl	8104100 <RCCEx_PLL2_Config>
 81031f8:	4603      	mov	r3, r0
 81031fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81031fc:	e012      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	3324      	adds	r3, #36	; 0x24
 8103202:	2101      	movs	r1, #1
 8103204:	4618      	mov	r0, r3
 8103206:	f001 f82d 	bl	8104264 <RCCEx_PLL3_Config>
 810320a:	4603      	mov	r3, r0
 810320c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810320e:	e009      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103210:	2301      	movs	r3, #1
 8103212:	75fb      	strb	r3, [r7, #23]
      break;
 8103214:	e006      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103216:	bf00      	nop
 8103218:	e004      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810321a:	bf00      	nop
 810321c:	e002      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810321e:	bf00      	nop
 8103220:	e000      	b.n	8103224 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103224:	7dfb      	ldrb	r3, [r7, #23]
 8103226:	2b00      	cmp	r3, #0
 8103228:	d10c      	bne.n	8103244 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810322a:	4b05      	ldr	r3, [pc, #20]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810322e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103238:	4901      	ldr	r1, [pc, #4]	; (8103240 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810323a:	4313      	orrs	r3, r2
 810323c:	658b      	str	r3, [r1, #88]	; 0x58
 810323e:	e003      	b.n	8103248 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103244:	7dfb      	ldrb	r3, [r7, #23]
 8103246:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103250:	2b00      	cmp	r3, #0
 8103252:	d02f      	beq.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810325c:	d00e      	beq.n	810327c <HAL_RCCEx_PeriphCLKConfig+0x584>
 810325e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103262:	d814      	bhi.n	810328e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103264:	2b00      	cmp	r3, #0
 8103266:	d015      	beq.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810326c:	d10f      	bne.n	810328e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810326e:	4bb0      	ldr	r3, [pc, #704]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103272:	4aaf      	ldr	r2, [pc, #700]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810327a:	e00c      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	3304      	adds	r3, #4
 8103280:	2101      	movs	r1, #1
 8103282:	4618      	mov	r0, r3
 8103284:	f000 ff3c 	bl	8104100 <RCCEx_PLL2_Config>
 8103288:	4603      	mov	r3, r0
 810328a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810328c:	e003      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810328e:	2301      	movs	r3, #1
 8103290:	75fb      	strb	r3, [r7, #23]
      break;
 8103292:	e000      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103296:	7dfb      	ldrb	r3, [r7, #23]
 8103298:	2b00      	cmp	r3, #0
 810329a:	d109      	bne.n	81032b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810329c:	4ba4      	ldr	r3, [pc, #656]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81032a8:	49a1      	ldr	r1, [pc, #644]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032aa:	4313      	orrs	r3, r2
 81032ac:	650b      	str	r3, [r1, #80]	; 0x50
 81032ae:	e001      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032b0:	7dfb      	ldrb	r3, [r7, #23]
 81032b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d032      	beq.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032c4:	2b03      	cmp	r3, #3
 81032c6:	d81b      	bhi.n	8103300 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81032c8:	a201      	add	r2, pc, #4	; (adr r2, 81032d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032ce:	bf00      	nop
 81032d0:	08103307 	.word	0x08103307
 81032d4:	081032e1 	.word	0x081032e1
 81032d8:	081032ef 	.word	0x081032ef
 81032dc:	08103307 	.word	0x08103307
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032e0:	4b93      	ldr	r3, [pc, #588]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032e4:	4a92      	ldr	r2, [pc, #584]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81032ec:	e00c      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	3304      	adds	r3, #4
 81032f2:	2102      	movs	r1, #2
 81032f4:	4618      	mov	r0, r3
 81032f6:	f000 ff03 	bl	8104100 <RCCEx_PLL2_Config>
 81032fa:	4603      	mov	r3, r0
 81032fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81032fe:	e003      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103300:	2301      	movs	r3, #1
 8103302:	75fb      	strb	r3, [r7, #23]
      break;
 8103304:	e000      	b.n	8103308 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103308:	7dfb      	ldrb	r3, [r7, #23]
 810330a:	2b00      	cmp	r3, #0
 810330c:	d109      	bne.n	8103322 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810330e:	4b88      	ldr	r3, [pc, #544]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103312:	f023 0203 	bic.w	r2, r3, #3
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810331a:	4985      	ldr	r1, [pc, #532]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810331c:	4313      	orrs	r3, r2
 810331e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103320:	e001      	b.n	8103326 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103322:	7dfb      	ldrb	r3, [r7, #23]
 8103324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810332e:	2b00      	cmp	r3, #0
 8103330:	f000 8088 	beq.w	8103444 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103334:	4b7f      	ldr	r3, [pc, #508]	; (8103534 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	4a7e      	ldr	r2, [pc, #504]	; (8103534 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810333a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810333e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103340:	f7fe ff30 	bl	81021a4 <HAL_GetTick>
 8103344:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103346:	e009      	b.n	810335c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103348:	f7fe ff2c 	bl	81021a4 <HAL_GetTick>
 810334c:	4602      	mov	r2, r0
 810334e:	693b      	ldr	r3, [r7, #16]
 8103350:	1ad3      	subs	r3, r2, r3
 8103352:	2b64      	cmp	r3, #100	; 0x64
 8103354:	d902      	bls.n	810335c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103356:	2303      	movs	r3, #3
 8103358:	75fb      	strb	r3, [r7, #23]
        break;
 810335a:	e005      	b.n	8103368 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810335c:	4b75      	ldr	r3, [pc, #468]	; (8103534 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810335e:	681b      	ldr	r3, [r3, #0]
 8103360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103364:	2b00      	cmp	r3, #0
 8103366:	d0ef      	beq.n	8103348 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103368:	7dfb      	ldrb	r3, [r7, #23]
 810336a:	2b00      	cmp	r3, #0
 810336c:	d168      	bne.n	8103440 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810336e:	4b70      	ldr	r3, [pc, #448]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103370:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103378:	4053      	eors	r3, r2
 810337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810337e:	2b00      	cmp	r3, #0
 8103380:	d013      	beq.n	81033aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103382:	4b6b      	ldr	r3, [pc, #428]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810338a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810338c:	4b68      	ldr	r3, [pc, #416]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103390:	4a67      	ldr	r2, [pc, #412]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103396:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103398:	4b65      	ldr	r3, [pc, #404]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810339c:	4a64      	ldr	r2, [pc, #400]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81033a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81033a4:	4a62      	ldr	r2, [pc, #392]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81033a6:	68fb      	ldr	r3, [r7, #12]
 81033a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81033b4:	d115      	bne.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81033b6:	f7fe fef5 	bl	81021a4 <HAL_GetTick>
 81033ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033bc:	e00b      	b.n	81033d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81033be:	f7fe fef1 	bl	81021a4 <HAL_GetTick>
 81033c2:	4602      	mov	r2, r0
 81033c4:	693b      	ldr	r3, [r7, #16]
 81033c6:	1ad3      	subs	r3, r2, r3
 81033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 81033cc:	4293      	cmp	r3, r2
 81033ce:	d902      	bls.n	81033d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81033d0:	2303      	movs	r3, #3
 81033d2:	75fb      	strb	r3, [r7, #23]
            break;
 81033d4:	e005      	b.n	81033e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033d6:	4b56      	ldr	r3, [pc, #344]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81033da:	f003 0302 	and.w	r3, r3, #2
 81033de:	2b00      	cmp	r3, #0
 81033e0:	d0ed      	beq.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81033e2:	7dfb      	ldrb	r3, [r7, #23]
 81033e4:	2b00      	cmp	r3, #0
 81033e6:	d128      	bne.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81033f6:	d10f      	bne.n	8103418 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81033f8:	4b4d      	ldr	r3, [pc, #308]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81033fa:	691b      	ldr	r3, [r3, #16]
 81033fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103406:	091b      	lsrs	r3, r3, #4
 8103408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810340c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103410:	4947      	ldr	r1, [pc, #284]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103412:	4313      	orrs	r3, r2
 8103414:	610b      	str	r3, [r1, #16]
 8103416:	e005      	b.n	8103424 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103418:	4b45      	ldr	r3, [pc, #276]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810341a:	691b      	ldr	r3, [r3, #16]
 810341c:	4a44      	ldr	r2, [pc, #272]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810341e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103422:	6113      	str	r3, [r2, #16]
 8103424:	4b42      	ldr	r3, [pc, #264]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810342e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103432:	493f      	ldr	r1, [pc, #252]	; (8103530 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103434:	4313      	orrs	r3, r2
 8103436:	670b      	str	r3, [r1, #112]	; 0x70
 8103438:	e004      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810343a:	7dfb      	ldrb	r3, [r7, #23]
 810343c:	75bb      	strb	r3, [r7, #22]
 810343e:	e001      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103440:	7dfb      	ldrb	r3, [r7, #23]
 8103442:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	f003 0301 	and.w	r3, r3, #1
 810344c:	2b00      	cmp	r3, #0
 810344e:	f000 8083 	beq.w	8103558 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103456:	2b28      	cmp	r3, #40	; 0x28
 8103458:	d866      	bhi.n	8103528 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810345a:	a201      	add	r2, pc, #4	; (adr r2, 8103460 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103460:	08103539 	.word	0x08103539
 8103464:	08103529 	.word	0x08103529
 8103468:	08103529 	.word	0x08103529
 810346c:	08103529 	.word	0x08103529
 8103470:	08103529 	.word	0x08103529
 8103474:	08103529 	.word	0x08103529
 8103478:	08103529 	.word	0x08103529
 810347c:	08103529 	.word	0x08103529
 8103480:	08103505 	.word	0x08103505
 8103484:	08103529 	.word	0x08103529
 8103488:	08103529 	.word	0x08103529
 810348c:	08103529 	.word	0x08103529
 8103490:	08103529 	.word	0x08103529
 8103494:	08103529 	.word	0x08103529
 8103498:	08103529 	.word	0x08103529
 810349c:	08103529 	.word	0x08103529
 81034a0:	08103517 	.word	0x08103517
 81034a4:	08103529 	.word	0x08103529
 81034a8:	08103529 	.word	0x08103529
 81034ac:	08103529 	.word	0x08103529
 81034b0:	08103529 	.word	0x08103529
 81034b4:	08103529 	.word	0x08103529
 81034b8:	08103529 	.word	0x08103529
 81034bc:	08103529 	.word	0x08103529
 81034c0:	08103539 	.word	0x08103539
 81034c4:	08103529 	.word	0x08103529
 81034c8:	08103529 	.word	0x08103529
 81034cc:	08103529 	.word	0x08103529
 81034d0:	08103529 	.word	0x08103529
 81034d4:	08103529 	.word	0x08103529
 81034d8:	08103529 	.word	0x08103529
 81034dc:	08103529 	.word	0x08103529
 81034e0:	08103539 	.word	0x08103539
 81034e4:	08103529 	.word	0x08103529
 81034e8:	08103529 	.word	0x08103529
 81034ec:	08103529 	.word	0x08103529
 81034f0:	08103529 	.word	0x08103529
 81034f4:	08103529 	.word	0x08103529
 81034f8:	08103529 	.word	0x08103529
 81034fc:	08103529 	.word	0x08103529
 8103500:	08103539 	.word	0x08103539
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	3304      	adds	r3, #4
 8103508:	2101      	movs	r1, #1
 810350a:	4618      	mov	r0, r3
 810350c:	f000 fdf8 	bl	8104100 <RCCEx_PLL2_Config>
 8103510:	4603      	mov	r3, r0
 8103512:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103514:	e011      	b.n	810353a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	3324      	adds	r3, #36	; 0x24
 810351a:	2101      	movs	r1, #1
 810351c:	4618      	mov	r0, r3
 810351e:	f000 fea1 	bl	8104264 <RCCEx_PLL3_Config>
 8103522:	4603      	mov	r3, r0
 8103524:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103526:	e008      	b.n	810353a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103528:	2301      	movs	r3, #1
 810352a:	75fb      	strb	r3, [r7, #23]
      break;
 810352c:	e005      	b.n	810353a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810352e:	bf00      	nop
 8103530:	58024400 	.word	0x58024400
 8103534:	58024800 	.word	0x58024800
      break;
 8103538:	bf00      	nop
    }

    if(ret == HAL_OK)
 810353a:	7dfb      	ldrb	r3, [r7, #23]
 810353c:	2b00      	cmp	r3, #0
 810353e:	d109      	bne.n	8103554 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103540:	4b96      	ldr	r3, [pc, #600]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103544:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810354c:	4993      	ldr	r1, [pc, #588]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810354e:	4313      	orrs	r3, r2
 8103550:	654b      	str	r3, [r1, #84]	; 0x54
 8103552:	e001      	b.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103554:	7dfb      	ldrb	r3, [r7, #23]
 8103556:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	f003 0302 	and.w	r3, r3, #2
 8103560:	2b00      	cmp	r3, #0
 8103562:	d038      	beq.n	81035d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103568:	2b05      	cmp	r3, #5
 810356a:	d821      	bhi.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810356c:	a201      	add	r2, pc, #4	; (adr r2, 8103574 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103572:	bf00      	nop
 8103574:	081035b7 	.word	0x081035b7
 8103578:	0810358d 	.word	0x0810358d
 810357c:	0810359f 	.word	0x0810359f
 8103580:	081035b7 	.word	0x081035b7
 8103584:	081035b7 	.word	0x081035b7
 8103588:	081035b7 	.word	0x081035b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	3304      	adds	r3, #4
 8103590:	2101      	movs	r1, #1
 8103592:	4618      	mov	r0, r3
 8103594:	f000 fdb4 	bl	8104100 <RCCEx_PLL2_Config>
 8103598:	4603      	mov	r3, r0
 810359a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810359c:	e00c      	b.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	3324      	adds	r3, #36	; 0x24
 81035a2:	2101      	movs	r1, #1
 81035a4:	4618      	mov	r0, r3
 81035a6:	f000 fe5d 	bl	8104264 <RCCEx_PLL3_Config>
 81035aa:	4603      	mov	r3, r0
 81035ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81035ae:	e003      	b.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81035b0:	2301      	movs	r3, #1
 81035b2:	75fb      	strb	r3, [r7, #23]
      break;
 81035b4:	e000      	b.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81035b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81035b8:	7dfb      	ldrb	r3, [r7, #23]
 81035ba:	2b00      	cmp	r3, #0
 81035bc:	d109      	bne.n	81035d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81035be:	4b77      	ldr	r3, [pc, #476]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035c2:	f023 0207 	bic.w	r2, r3, #7
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81035ca:	4974      	ldr	r1, [pc, #464]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81035cc:	4313      	orrs	r3, r2
 81035ce:	654b      	str	r3, [r1, #84]	; 0x54
 81035d0:	e001      	b.n	81035d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035d2:	7dfb      	ldrb	r3, [r7, #23]
 81035d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	f003 0304 	and.w	r3, r3, #4
 81035de:	2b00      	cmp	r3, #0
 81035e0:	d03a      	beq.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035e8:	2b05      	cmp	r3, #5
 81035ea:	d821      	bhi.n	8103630 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81035ec:	a201      	add	r2, pc, #4	; (adr r2, 81035f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035f2:	bf00      	nop
 81035f4:	08103637 	.word	0x08103637
 81035f8:	0810360d 	.word	0x0810360d
 81035fc:	0810361f 	.word	0x0810361f
 8103600:	08103637 	.word	0x08103637
 8103604:	08103637 	.word	0x08103637
 8103608:	08103637 	.word	0x08103637
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	3304      	adds	r3, #4
 8103610:	2101      	movs	r1, #1
 8103612:	4618      	mov	r0, r3
 8103614:	f000 fd74 	bl	8104100 <RCCEx_PLL2_Config>
 8103618:	4603      	mov	r3, r0
 810361a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810361c:	e00c      	b.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	3324      	adds	r3, #36	; 0x24
 8103622:	2101      	movs	r1, #1
 8103624:	4618      	mov	r0, r3
 8103626:	f000 fe1d 	bl	8104264 <RCCEx_PLL3_Config>
 810362a:	4603      	mov	r3, r0
 810362c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810362e:	e003      	b.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103630:	2301      	movs	r3, #1
 8103632:	75fb      	strb	r3, [r7, #23]
      break;
 8103634:	e000      	b.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8103636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103638:	7dfb      	ldrb	r3, [r7, #23]
 810363a:	2b00      	cmp	r3, #0
 810363c:	d10a      	bne.n	8103654 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810363e:	4b57      	ldr	r3, [pc, #348]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103642:	f023 0207 	bic.w	r2, r3, #7
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810364c:	4953      	ldr	r1, [pc, #332]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810364e:	4313      	orrs	r3, r2
 8103650:	658b      	str	r3, [r1, #88]	; 0x58
 8103652:	e001      	b.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103654:	7dfb      	ldrb	r3, [r7, #23]
 8103656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	f003 0320 	and.w	r3, r3, #32
 8103660:	2b00      	cmp	r3, #0
 8103662:	d04b      	beq.n	81036fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810366a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810366e:	d02e      	beq.n	81036ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103674:	d828      	bhi.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810367a:	d02a      	beq.n	81036d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103680:	d822      	bhi.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103682:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103686:	d026      	beq.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103688:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810368c:	d81c      	bhi.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810368e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103692:	d010      	beq.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8103694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103698:	d816      	bhi.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810369a:	2b00      	cmp	r3, #0
 810369c:	d01d      	beq.n	81036da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810369e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81036a2:	d111      	bne.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	3304      	adds	r3, #4
 81036a8:	2100      	movs	r1, #0
 81036aa:	4618      	mov	r0, r3
 81036ac:	f000 fd28 	bl	8104100 <RCCEx_PLL2_Config>
 81036b0:	4603      	mov	r3, r0
 81036b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81036b4:	e012      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	3324      	adds	r3, #36	; 0x24
 81036ba:	2102      	movs	r1, #2
 81036bc:	4618      	mov	r0, r3
 81036be:	f000 fdd1 	bl	8104264 <RCCEx_PLL3_Config>
 81036c2:	4603      	mov	r3, r0
 81036c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81036c6:	e009      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036c8:	2301      	movs	r3, #1
 81036ca:	75fb      	strb	r3, [r7, #23]
      break;
 81036cc:	e006      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036ce:	bf00      	nop
 81036d0:	e004      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036d2:	bf00      	nop
 81036d4:	e002      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036d6:	bf00      	nop
 81036d8:	e000      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036da:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036dc:	7dfb      	ldrb	r3, [r7, #23]
 81036de:	2b00      	cmp	r3, #0
 81036e0:	d10a      	bne.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81036e2:	4b2e      	ldr	r3, [pc, #184]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81036ea:	687b      	ldr	r3, [r7, #4]
 81036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81036f0:	492a      	ldr	r1, [pc, #168]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81036f2:	4313      	orrs	r3, r2
 81036f4:	654b      	str	r3, [r1, #84]	; 0x54
 81036f6:	e001      	b.n	81036fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036f8:	7dfb      	ldrb	r3, [r7, #23]
 81036fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103704:	2b00      	cmp	r3, #0
 8103706:	d04d      	beq.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810370e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103712:	d02e      	beq.n	8103772 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103718:	d828      	bhi.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810371e:	d02a      	beq.n	8103776 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103724:	d822      	bhi.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810372a:	d026      	beq.n	810377a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810372c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103730:	d81c      	bhi.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103736:	d010      	beq.n	810375a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8103738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810373c:	d816      	bhi.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810373e:	2b00      	cmp	r3, #0
 8103740:	d01d      	beq.n	810377e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8103742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103746:	d111      	bne.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	3304      	adds	r3, #4
 810374c:	2100      	movs	r1, #0
 810374e:	4618      	mov	r0, r3
 8103750:	f000 fcd6 	bl	8104100 <RCCEx_PLL2_Config>
 8103754:	4603      	mov	r3, r0
 8103756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103758:	e012      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	3324      	adds	r3, #36	; 0x24
 810375e:	2102      	movs	r1, #2
 8103760:	4618      	mov	r0, r3
 8103762:	f000 fd7f 	bl	8104264 <RCCEx_PLL3_Config>
 8103766:	4603      	mov	r3, r0
 8103768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810376a:	e009      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810376c:	2301      	movs	r3, #1
 810376e:	75fb      	strb	r3, [r7, #23]
      break;
 8103770:	e006      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103772:	bf00      	nop
 8103774:	e004      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103776:	bf00      	nop
 8103778:	e002      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810377a:	bf00      	nop
 810377c:	e000      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810377e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103780:	7dfb      	ldrb	r3, [r7, #23]
 8103782:	2b00      	cmp	r3, #0
 8103784:	d10c      	bne.n	81037a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103786:	4b05      	ldr	r3, [pc, #20]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810378a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103794:	4901      	ldr	r1, [pc, #4]	; (810379c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103796:	4313      	orrs	r3, r2
 8103798:	658b      	str	r3, [r1, #88]	; 0x58
 810379a:	e003      	b.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810379c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037a0:	7dfb      	ldrb	r3, [r7, #23]
 81037a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d04b      	beq.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81037b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81037ba:	d02e      	beq.n	810381a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81037bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81037c0:	d828      	bhi.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81037c6:	d02a      	beq.n	810381e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81037c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81037cc:	d822      	bhi.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81037d2:	d026      	beq.n	8103822 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81037d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81037d8:	d81c      	bhi.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81037de:	d010      	beq.n	8103802 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81037e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81037e4:	d816      	bhi.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d01d      	beq.n	8103826 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81037ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81037ee:	d111      	bne.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	3304      	adds	r3, #4
 81037f4:	2100      	movs	r1, #0
 81037f6:	4618      	mov	r0, r3
 81037f8:	f000 fc82 	bl	8104100 <RCCEx_PLL2_Config>
 81037fc:	4603      	mov	r3, r0
 81037fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103800:	e012      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	3324      	adds	r3, #36	; 0x24
 8103806:	2102      	movs	r1, #2
 8103808:	4618      	mov	r0, r3
 810380a:	f000 fd2b 	bl	8104264 <RCCEx_PLL3_Config>
 810380e:	4603      	mov	r3, r0
 8103810:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103812:	e009      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103814:	2301      	movs	r3, #1
 8103816:	75fb      	strb	r3, [r7, #23]
      break;
 8103818:	e006      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810381a:	bf00      	nop
 810381c:	e004      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810381e:	bf00      	nop
 8103820:	e002      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103822:	bf00      	nop
 8103824:	e000      	b.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103828:	7dfb      	ldrb	r3, [r7, #23]
 810382a:	2b00      	cmp	r3, #0
 810382c:	d10a      	bne.n	8103844 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810382e:	4b9d      	ldr	r3, [pc, #628]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810383c:	4999      	ldr	r1, [pc, #612]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810383e:	4313      	orrs	r3, r2
 8103840:	658b      	str	r3, [r1, #88]	; 0x58
 8103842:	e001      	b.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103844:	7dfb      	ldrb	r3, [r7, #23]
 8103846:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	f003 0308 	and.w	r3, r3, #8
 8103850:	2b00      	cmp	r3, #0
 8103852:	d01a      	beq.n	810388a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810385e:	d10a      	bne.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	3324      	adds	r3, #36	; 0x24
 8103864:	2102      	movs	r1, #2
 8103866:	4618      	mov	r0, r3
 8103868:	f000 fcfc 	bl	8104264 <RCCEx_PLL3_Config>
 810386c:	4603      	mov	r3, r0
 810386e:	2b00      	cmp	r3, #0
 8103870:	d001      	beq.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8103872:	2301      	movs	r3, #1
 8103874:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103876:	4b8b      	ldr	r3, [pc, #556]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810387a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103884:	4987      	ldr	r1, [pc, #540]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103886:	4313      	orrs	r3, r2
 8103888:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	f003 0310 	and.w	r3, r3, #16
 8103892:	2b00      	cmp	r3, #0
 8103894:	d01a      	beq.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810389c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81038a0:	d10a      	bne.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	3324      	adds	r3, #36	; 0x24
 81038a6:	2102      	movs	r1, #2
 81038a8:	4618      	mov	r0, r3
 81038aa:	f000 fcdb 	bl	8104264 <RCCEx_PLL3_Config>
 81038ae:	4603      	mov	r3, r0
 81038b0:	2b00      	cmp	r3, #0
 81038b2:	d001      	beq.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81038b4:	2301      	movs	r3, #1
 81038b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81038b8:	4b7a      	ldr	r3, [pc, #488]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81038c6:	4977      	ldr	r1, [pc, #476]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038c8:	4313      	orrs	r3, r2
 81038ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81038d4:	2b00      	cmp	r3, #0
 81038d6:	d034      	beq.n	8103942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81038de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81038e2:	d01d      	beq.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81038e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81038e8:	d817      	bhi.n	810391a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81038ea:	2b00      	cmp	r3, #0
 81038ec:	d003      	beq.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81038f2:	d009      	beq.n	8103908 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81038f4:	e011      	b.n	810391a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	3304      	adds	r3, #4
 81038fa:	2100      	movs	r1, #0
 81038fc:	4618      	mov	r0, r3
 81038fe:	f000 fbff 	bl	8104100 <RCCEx_PLL2_Config>
 8103902:	4603      	mov	r3, r0
 8103904:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103906:	e00c      	b.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	3324      	adds	r3, #36	; 0x24
 810390c:	2102      	movs	r1, #2
 810390e:	4618      	mov	r0, r3
 8103910:	f000 fca8 	bl	8104264 <RCCEx_PLL3_Config>
 8103914:	4603      	mov	r3, r0
 8103916:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103918:	e003      	b.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810391a:	2301      	movs	r3, #1
 810391c:	75fb      	strb	r3, [r7, #23]
      break;
 810391e:	e000      	b.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8103920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103922:	7dfb      	ldrb	r3, [r7, #23]
 8103924:	2b00      	cmp	r3, #0
 8103926:	d10a      	bne.n	810393e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103928:	4b5e      	ldr	r3, [pc, #376]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810392c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103936:	495b      	ldr	r1, [pc, #364]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103938:	4313      	orrs	r3, r2
 810393a:	658b      	str	r3, [r1, #88]	; 0x58
 810393c:	e001      	b.n	8103942 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810393e:	7dfb      	ldrb	r3, [r7, #23]
 8103940:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810394a:	2b00      	cmp	r3, #0
 810394c:	d033      	beq.n	81039b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103958:	d01c      	beq.n	8103994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810395a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810395e:	d816      	bhi.n	810398e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8103960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103964:	d003      	beq.n	810396e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8103966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810396a:	d007      	beq.n	810397c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810396c:	e00f      	b.n	810398e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810396e:	4b4d      	ldr	r3, [pc, #308]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103972:	4a4c      	ldr	r2, [pc, #304]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810397a:	e00c      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	3324      	adds	r3, #36	; 0x24
 8103980:	2101      	movs	r1, #1
 8103982:	4618      	mov	r0, r3
 8103984:	f000 fc6e 	bl	8104264 <RCCEx_PLL3_Config>
 8103988:	4603      	mov	r3, r0
 810398a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810398c:	e003      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810398e:	2301      	movs	r3, #1
 8103990:	75fb      	strb	r3, [r7, #23]
      break;
 8103992:	e000      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8103994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103996:	7dfb      	ldrb	r3, [r7, #23]
 8103998:	2b00      	cmp	r3, #0
 810399a:	d10a      	bne.n	81039b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810399c:	4b41      	ldr	r3, [pc, #260]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81039aa:	493e      	ldr	r1, [pc, #248]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039ac:	4313      	orrs	r3, r2
 81039ae:	654b      	str	r3, [r1, #84]	; 0x54
 81039b0:	e001      	b.n	81039b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039b2:	7dfb      	ldrb	r3, [r7, #23]
 81039b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81039be:	2b00      	cmp	r3, #0
 81039c0:	d029      	beq.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039c6:	2b00      	cmp	r3, #0
 81039c8:	d003      	beq.n	81039d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81039ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81039ce:	d007      	beq.n	81039e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81039d0:	e00f      	b.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039d2:	4b34      	ldr	r3, [pc, #208]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039d6:	4a33      	ldr	r2, [pc, #204]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81039de:	e00b      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	3304      	adds	r3, #4
 81039e4:	2102      	movs	r1, #2
 81039e6:	4618      	mov	r0, r3
 81039e8:	f000 fb8a 	bl	8104100 <RCCEx_PLL2_Config>
 81039ec:	4603      	mov	r3, r0
 81039ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81039f0:	e002      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81039f2:	2301      	movs	r3, #1
 81039f4:	75fb      	strb	r3, [r7, #23]
      break;
 81039f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039f8:	7dfb      	ldrb	r3, [r7, #23]
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d109      	bne.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81039fe:	4b29      	ldr	r3, [pc, #164]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a0a:	4926      	ldr	r1, [pc, #152]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a0c:	4313      	orrs	r3, r2
 8103a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103a10:	e001      	b.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a12:	7dfb      	ldrb	r3, [r7, #23]
 8103a14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103a1e:	2b00      	cmp	r3, #0
 8103a20:	d00a      	beq.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	3324      	adds	r3, #36	; 0x24
 8103a26:	2102      	movs	r1, #2
 8103a28:	4618      	mov	r0, r3
 8103a2a:	f000 fc1b 	bl	8104264 <RCCEx_PLL3_Config>
 8103a2e:	4603      	mov	r3, r0
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d001      	beq.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103a34:	2301      	movs	r3, #1
 8103a36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	681b      	ldr	r3, [r3, #0]
 8103a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d033      	beq.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a4c:	d017      	beq.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a52:	d811      	bhi.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a58:	d013      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a5e:	d80b      	bhi.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d010      	beq.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8103a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a68:	d106      	bne.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a6a:	4b0e      	ldr	r3, [pc, #56]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a6e:	4a0d      	ldr	r2, [pc, #52]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103a76:	e007      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a78:	2301      	movs	r3, #1
 8103a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8103a7c:	e004      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103a7e:	bf00      	nop
 8103a80:	e002      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103a82:	bf00      	nop
 8103a84:	e000      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a88:	7dfb      	ldrb	r3, [r7, #23]
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d10c      	bne.n	8103aa8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103a8e:	4b05      	ldr	r3, [pc, #20]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a9a:	4902      	ldr	r1, [pc, #8]	; (8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a9c:	4313      	orrs	r3, r2
 8103a9e:	654b      	str	r3, [r1, #84]	; 0x54
 8103aa0:	e004      	b.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8103aa2:	bf00      	nop
 8103aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aa8:	7dfb      	ldrb	r3, [r7, #23]
 8103aaa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103ab4:	2b00      	cmp	r3, #0
 8103ab6:	d008      	beq.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103ab8:	4b31      	ldr	r3, [pc, #196]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103abc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ac4:	492e      	ldr	r1, [pc, #184]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ac6:	4313      	orrs	r3, r2
 8103ac8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	d009      	beq.n	8103aea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103ad6:	4b2a      	ldr	r3, [pc, #168]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ad8:	691b      	ldr	r3, [r3, #16]
 8103ada:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103ae4:	4926      	ldr	r1, [pc, #152]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ae6:	4313      	orrs	r3, r2
 8103ae8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d008      	beq.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103af6:	4b22      	ldr	r3, [pc, #136]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103afa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103b02:	491f      	ldr	r1, [pc, #124]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b04:	4313      	orrs	r3, r2
 8103b06:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	681b      	ldr	r3, [r3, #0]
 8103b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103b10:	2b00      	cmp	r3, #0
 8103b12:	d00d      	beq.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103b14:	4b1a      	ldr	r3, [pc, #104]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b16:	691b      	ldr	r3, [r3, #16]
 8103b18:	4a19      	ldr	r2, [pc, #100]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103b1e:	6113      	str	r3, [r2, #16]
 8103b20:	4b17      	ldr	r3, [pc, #92]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b22:	691a      	ldr	r2, [r3, #16]
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b2a:	4915      	ldr	r1, [pc, #84]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b2c:	4313      	orrs	r3, r2
 8103b2e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	2b00      	cmp	r3, #0
 8103b36:	da08      	bge.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103b38:	4b11      	ldr	r3, [pc, #68]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b44:	490e      	ldr	r1, [pc, #56]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b46:	4313      	orrs	r3, r2
 8103b48:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103b52:	2b00      	cmp	r3, #0
 8103b54:	d009      	beq.n	8103b6a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103b56:	4b0a      	ldr	r3, [pc, #40]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103b64:	4906      	ldr	r1, [pc, #24]	; (8103b80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b66:	4313      	orrs	r3, r2
 8103b68:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103b6a:	7dbb      	ldrb	r3, [r7, #22]
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	d101      	bne.n	8103b74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8103b70:	2300      	movs	r3, #0
 8103b72:	e000      	b.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8103b74:	2301      	movs	r3, #1
}
 8103b76:	4618      	mov	r0, r3
 8103b78:	3718      	adds	r7, #24
 8103b7a:	46bd      	mov	sp, r7
 8103b7c:	bd80      	pop	{r7, pc}
 8103b7e:	bf00      	nop
 8103b80:	58024400 	.word	0x58024400

08103b84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103b84:	b580      	push	{r7, lr}
 8103b86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103b88:	f7ff f858 	bl	8102c3c <HAL_RCC_GetHCLKFreq>
 8103b8c:	4602      	mov	r2, r0
 8103b8e:	4b06      	ldr	r3, [pc, #24]	; (8103ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103b90:	6a1b      	ldr	r3, [r3, #32]
 8103b92:	091b      	lsrs	r3, r3, #4
 8103b94:	f003 0307 	and.w	r3, r3, #7
 8103b98:	4904      	ldr	r1, [pc, #16]	; (8103bac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103b9a:	5ccb      	ldrb	r3, [r1, r3]
 8103b9c:	f003 031f 	and.w	r3, r3, #31
 8103ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103ba4:	4618      	mov	r0, r3
 8103ba6:	bd80      	pop	{r7, pc}
 8103ba8:	58024400 	.word	0x58024400
 8103bac:	0810b6bc 	.word	0x0810b6bc

08103bb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103bb0:	b480      	push	{r7}
 8103bb2:	b089      	sub	sp, #36	; 0x24
 8103bb4:	af00      	add	r7, sp, #0
 8103bb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103bb8:	4ba1      	ldr	r3, [pc, #644]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bbc:	f003 0303 	and.w	r3, r3, #3
 8103bc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103bc2:	4b9f      	ldr	r3, [pc, #636]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bc6:	0b1b      	lsrs	r3, r3, #12
 8103bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103bcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103bce:	4b9c      	ldr	r3, [pc, #624]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bd2:	091b      	lsrs	r3, r3, #4
 8103bd4:	f003 0301 	and.w	r3, r3, #1
 8103bd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103bda:	4b99      	ldr	r3, [pc, #612]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bde:	08db      	lsrs	r3, r3, #3
 8103be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103be4:	693a      	ldr	r2, [r7, #16]
 8103be6:	fb02 f303 	mul.w	r3, r2, r3
 8103bea:	ee07 3a90 	vmov	s15, r3
 8103bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103bf6:	697b      	ldr	r3, [r7, #20]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	f000 8111 	beq.w	8103e20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103bfe:	69bb      	ldr	r3, [r7, #24]
 8103c00:	2b02      	cmp	r3, #2
 8103c02:	f000 8083 	beq.w	8103d0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103c06:	69bb      	ldr	r3, [r7, #24]
 8103c08:	2b02      	cmp	r3, #2
 8103c0a:	f200 80a1 	bhi.w	8103d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103c0e:	69bb      	ldr	r3, [r7, #24]
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d003      	beq.n	8103c1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103c14:	69bb      	ldr	r3, [r7, #24]
 8103c16:	2b01      	cmp	r3, #1
 8103c18:	d056      	beq.n	8103cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103c1a:	e099      	b.n	8103d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c1c:	4b88      	ldr	r3, [pc, #544]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	f003 0320 	and.w	r3, r3, #32
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	d02d      	beq.n	8103c84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103c28:	4b85      	ldr	r3, [pc, #532]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	08db      	lsrs	r3, r3, #3
 8103c2e:	f003 0303 	and.w	r3, r3, #3
 8103c32:	4a84      	ldr	r2, [pc, #528]	; (8103e44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103c34:	fa22 f303 	lsr.w	r3, r2, r3
 8103c38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c3a:	68bb      	ldr	r3, [r7, #8]
 8103c3c:	ee07 3a90 	vmov	s15, r3
 8103c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c44:	697b      	ldr	r3, [r7, #20]
 8103c46:	ee07 3a90 	vmov	s15, r3
 8103c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c52:	4b7b      	ldr	r3, [pc, #492]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c5a:	ee07 3a90 	vmov	s15, r3
 8103c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103c82:	e087      	b.n	8103d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c84:	697b      	ldr	r3, [r7, #20]
 8103c86:	ee07 3a90 	vmov	s15, r3
 8103c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103e4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c96:	4b6a      	ldr	r3, [pc, #424]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c9e:	ee07 3a90 	vmov	s15, r3
 8103ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8103caa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103cc6:	e065      	b.n	8103d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103cc8:	697b      	ldr	r3, [r7, #20]
 8103cca:	ee07 3a90 	vmov	s15, r3
 8103cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103cda:	4b59      	ldr	r3, [pc, #356]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ce2:	ee07 3a90 	vmov	s15, r3
 8103ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8103cee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103d0a:	e043      	b.n	8103d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103d0c:	697b      	ldr	r3, [r7, #20]
 8103d0e:	ee07 3a90 	vmov	s15, r3
 8103d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d1e:	4b48      	ldr	r3, [pc, #288]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d26:	ee07 3a90 	vmov	s15, r3
 8103d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103d32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103d4e:	e021      	b.n	8103d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103d50:	697b      	ldr	r3, [r7, #20]
 8103d52:	ee07 3a90 	vmov	s15, r3
 8103d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d62:	4b37      	ldr	r3, [pc, #220]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d6a:	ee07 3a90 	vmov	s15, r3
 8103d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8103d76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103d92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103d94:	4b2a      	ldr	r3, [pc, #168]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d98:	0a5b      	lsrs	r3, r3, #9
 8103d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103d9e:	ee07 3a90 	vmov	s15, r3
 8103da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8103db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103dba:	ee17 2a90 	vmov	r2, s15
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103dc2:	4b1f      	ldr	r3, [pc, #124]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103dc6:	0c1b      	lsrs	r3, r3, #16
 8103dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103dcc:	ee07 3a90 	vmov	s15, r3
 8103dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8103de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103de8:	ee17 2a90 	vmov	r2, s15
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8103df0:	4b13      	ldr	r3, [pc, #76]	; (8103e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103df4:	0e1b      	lsrs	r3, r3, #24
 8103df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103dfa:	ee07 3a90 	vmov	s15, r3
 8103dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8103e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103e16:	ee17 2a90 	vmov	r2, s15
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103e1e:	e008      	b.n	8103e32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	2200      	movs	r2, #0
 8103e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	2200      	movs	r2, #0
 8103e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	2200      	movs	r2, #0
 8103e30:	609a      	str	r2, [r3, #8]
}
 8103e32:	bf00      	nop
 8103e34:	3724      	adds	r7, #36	; 0x24
 8103e36:	46bd      	mov	sp, r7
 8103e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e3c:	4770      	bx	lr
 8103e3e:	bf00      	nop
 8103e40:	58024400 	.word	0x58024400
 8103e44:	03d09000 	.word	0x03d09000
 8103e48:	46000000 	.word	0x46000000
 8103e4c:	4c742400 	.word	0x4c742400
 8103e50:	4a742400 	.word	0x4a742400
 8103e54:	4af42400 	.word	0x4af42400

08103e58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103e58:	b480      	push	{r7}
 8103e5a:	b089      	sub	sp, #36	; 0x24
 8103e5c:	af00      	add	r7, sp, #0
 8103e5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103e60:	4ba1      	ldr	r3, [pc, #644]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e64:	f003 0303 	and.w	r3, r3, #3
 8103e68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8103e6a:	4b9f      	ldr	r3, [pc, #636]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e6e:	0d1b      	lsrs	r3, r3, #20
 8103e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103e74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103e76:	4b9c      	ldr	r3, [pc, #624]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e7a:	0a1b      	lsrs	r3, r3, #8
 8103e7c:	f003 0301 	and.w	r3, r3, #1
 8103e80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8103e82:	4b99      	ldr	r3, [pc, #612]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103e86:	08db      	lsrs	r3, r3, #3
 8103e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103e8c:	693a      	ldr	r2, [r7, #16]
 8103e8e:	fb02 f303 	mul.w	r3, r2, r3
 8103e92:	ee07 3a90 	vmov	s15, r3
 8103e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103e9e:	697b      	ldr	r3, [r7, #20]
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	f000 8111 	beq.w	81040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103ea6:	69bb      	ldr	r3, [r7, #24]
 8103ea8:	2b02      	cmp	r3, #2
 8103eaa:	f000 8083 	beq.w	8103fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103eae:	69bb      	ldr	r3, [r7, #24]
 8103eb0:	2b02      	cmp	r3, #2
 8103eb2:	f200 80a1 	bhi.w	8103ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103eb6:	69bb      	ldr	r3, [r7, #24]
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d003      	beq.n	8103ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103ebc:	69bb      	ldr	r3, [r7, #24]
 8103ebe:	2b01      	cmp	r3, #1
 8103ec0:	d056      	beq.n	8103f70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103ec2:	e099      	b.n	8103ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ec4:	4b88      	ldr	r3, [pc, #544]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	f003 0320 	and.w	r3, r3, #32
 8103ecc:	2b00      	cmp	r3, #0
 8103ece:	d02d      	beq.n	8103f2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103ed0:	4b85      	ldr	r3, [pc, #532]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	08db      	lsrs	r3, r3, #3
 8103ed6:	f003 0303 	and.w	r3, r3, #3
 8103eda:	4a84      	ldr	r2, [pc, #528]	; (81040ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103edc:	fa22 f303 	lsr.w	r3, r2, r3
 8103ee0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103ee2:	68bb      	ldr	r3, [r7, #8]
 8103ee4:	ee07 3a90 	vmov	s15, r3
 8103ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103eec:	697b      	ldr	r3, [r7, #20]
 8103eee:	ee07 3a90 	vmov	s15, r3
 8103ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103efa:	4b7b      	ldr	r3, [pc, #492]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f02:	ee07 3a90 	vmov	s15, r3
 8103f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 81040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103f2a:	e087      	b.n	810403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f2c:	697b      	ldr	r3, [r7, #20]
 8103f2e:	ee07 3a90 	vmov	s15, r3
 8103f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f3e:	4b6a      	ldr	r3, [pc, #424]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f46:	ee07 3a90 	vmov	s15, r3
 8103f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 81040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f6e:	e065      	b.n	810403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f70:	697b      	ldr	r3, [r7, #20]
 8103f72:	ee07 3a90 	vmov	s15, r3
 8103f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f82:	4b59      	ldr	r3, [pc, #356]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f8a:	ee07 3a90 	vmov	s15, r3
 8103f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 81040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103fb2:	e043      	b.n	810403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103fb4:	697b      	ldr	r3, [r7, #20]
 8103fb6:	ee07 3a90 	vmov	s15, r3
 8103fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81040fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103fc6:	4b48      	ldr	r3, [pc, #288]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fce:	ee07 3a90 	vmov	s15, r3
 8103fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8103fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 81040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103ff6:	e021      	b.n	810403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103ff8:	697b      	ldr	r3, [r7, #20]
 8103ffa:	ee07 3a90 	vmov	s15, r3
 8103ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810400a:	4b37      	ldr	r3, [pc, #220]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104012:	ee07 3a90 	vmov	s15, r3
 8104016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810401a:	ed97 6a03 	vldr	s12, [r7, #12]
 810401e:	eddf 5a34 	vldr	s11, [pc, #208]	; 81040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810403a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810403c:	4b2a      	ldr	r3, [pc, #168]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104040:	0a5b      	lsrs	r3, r3, #9
 8104042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104046:	ee07 3a90 	vmov	s15, r3
 810404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810404e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104056:	edd7 6a07 	vldr	s13, [r7, #28]
 810405a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810405e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104062:	ee17 2a90 	vmov	r2, s15
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810406a:	4b1f      	ldr	r3, [pc, #124]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810406e:	0c1b      	lsrs	r3, r3, #16
 8104070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104074:	ee07 3a90 	vmov	s15, r3
 8104078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810407c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104084:	edd7 6a07 	vldr	s13, [r7, #28]
 8104088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810408c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104090:	ee17 2a90 	vmov	r2, s15
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104098:	4b13      	ldr	r3, [pc, #76]	; (81040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810409c:	0e1b      	lsrs	r3, r3, #24
 810409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81040a2:	ee07 3a90 	vmov	s15, r3
 81040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81040b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81040b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81040be:	ee17 2a90 	vmov	r2, s15
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81040c6:	e008      	b.n	81040da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	2200      	movs	r2, #0
 81040cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	2200      	movs	r2, #0
 81040d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	2200      	movs	r2, #0
 81040d8:	609a      	str	r2, [r3, #8]
}
 81040da:	bf00      	nop
 81040dc:	3724      	adds	r7, #36	; 0x24
 81040de:	46bd      	mov	sp, r7
 81040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040e4:	4770      	bx	lr
 81040e6:	bf00      	nop
 81040e8:	58024400 	.word	0x58024400
 81040ec:	03d09000 	.word	0x03d09000
 81040f0:	46000000 	.word	0x46000000
 81040f4:	4c742400 	.word	0x4c742400
 81040f8:	4a742400 	.word	0x4a742400
 81040fc:	4af42400 	.word	0x4af42400

08104100 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104100:	b580      	push	{r7, lr}
 8104102:	b084      	sub	sp, #16
 8104104:	af00      	add	r7, sp, #0
 8104106:	6078      	str	r0, [r7, #4]
 8104108:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810410a:	2300      	movs	r3, #0
 810410c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810410e:	4b54      	ldr	r3, [pc, #336]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104112:	f003 0303 	and.w	r3, r3, #3
 8104116:	2b03      	cmp	r3, #3
 8104118:	d101      	bne.n	810411e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810411a:	2301      	movs	r3, #1
 810411c:	e09b      	b.n	8104256 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810411e:	4b50      	ldr	r3, [pc, #320]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a4f      	ldr	r2, [pc, #316]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104124:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810412a:	f7fe f83b 	bl	81021a4 <HAL_GetTick>
 810412e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104130:	e008      	b.n	8104144 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104132:	f7fe f837 	bl	81021a4 <HAL_GetTick>
 8104136:	4602      	mov	r2, r0
 8104138:	68bb      	ldr	r3, [r7, #8]
 810413a:	1ad3      	subs	r3, r2, r3
 810413c:	2b02      	cmp	r3, #2
 810413e:	d901      	bls.n	8104144 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104140:	2303      	movs	r3, #3
 8104142:	e088      	b.n	8104256 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104144:	4b46      	ldr	r3, [pc, #280]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810414c:	2b00      	cmp	r3, #0
 810414e:	d1f0      	bne.n	8104132 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104150:	4b43      	ldr	r3, [pc, #268]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104154:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104158:	687b      	ldr	r3, [r7, #4]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	031b      	lsls	r3, r3, #12
 810415e:	4940      	ldr	r1, [pc, #256]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104160:	4313      	orrs	r3, r2
 8104162:	628b      	str	r3, [r1, #40]	; 0x28
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	685b      	ldr	r3, [r3, #4]
 8104168:	3b01      	subs	r3, #1
 810416a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	689b      	ldr	r3, [r3, #8]
 8104172:	3b01      	subs	r3, #1
 8104174:	025b      	lsls	r3, r3, #9
 8104176:	b29b      	uxth	r3, r3
 8104178:	431a      	orrs	r2, r3
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	68db      	ldr	r3, [r3, #12]
 810417e:	3b01      	subs	r3, #1
 8104180:	041b      	lsls	r3, r3, #16
 8104182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104186:	431a      	orrs	r2, r3
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	691b      	ldr	r3, [r3, #16]
 810418c:	3b01      	subs	r3, #1
 810418e:	061b      	lsls	r3, r3, #24
 8104190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104194:	4932      	ldr	r1, [pc, #200]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104196:	4313      	orrs	r3, r2
 8104198:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810419a:	4b31      	ldr	r3, [pc, #196]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 810419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810419e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	695b      	ldr	r3, [r3, #20]
 81041a6:	492e      	ldr	r1, [pc, #184]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041a8:	4313      	orrs	r3, r2
 81041aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81041ac:	4b2c      	ldr	r3, [pc, #176]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041b0:	f023 0220 	bic.w	r2, r3, #32
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	699b      	ldr	r3, [r3, #24]
 81041b8:	4929      	ldr	r1, [pc, #164]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041ba:	4313      	orrs	r3, r2
 81041bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81041be:	4b28      	ldr	r3, [pc, #160]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041c2:	4a27      	ldr	r2, [pc, #156]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041c4:	f023 0310 	bic.w	r3, r3, #16
 81041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81041ca:	4b25      	ldr	r3, [pc, #148]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81041ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81041d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81041d6:	687a      	ldr	r2, [r7, #4]
 81041d8:	69d2      	ldr	r2, [r2, #28]
 81041da:	00d2      	lsls	r2, r2, #3
 81041dc:	4920      	ldr	r1, [pc, #128]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041de:	4313      	orrs	r3, r2
 81041e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81041e2:	4b1f      	ldr	r3, [pc, #124]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041e6:	4a1e      	ldr	r2, [pc, #120]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041e8:	f043 0310 	orr.w	r3, r3, #16
 81041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81041ee:	683b      	ldr	r3, [r7, #0]
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d106      	bne.n	8104202 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81041f4:	4b1a      	ldr	r3, [pc, #104]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041f8:	4a19      	ldr	r2, [pc, #100]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 81041fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81041fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104200:	e00f      	b.n	8104222 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104202:	683b      	ldr	r3, [r7, #0]
 8104204:	2b01      	cmp	r3, #1
 8104206:	d106      	bne.n	8104216 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104208:	4b15      	ldr	r3, [pc, #84]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 810420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810420c:	4a14      	ldr	r2, [pc, #80]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 810420e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104212:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104214:	e005      	b.n	8104222 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104216:	4b12      	ldr	r3, [pc, #72]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810421a:	4a11      	ldr	r2, [pc, #68]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 810421c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104222:	4b0f      	ldr	r3, [pc, #60]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4a0e      	ldr	r2, [pc, #56]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 8104228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810422c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810422e:	f7fd ffb9 	bl	81021a4 <HAL_GetTick>
 8104232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104234:	e008      	b.n	8104248 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104236:	f7fd ffb5 	bl	81021a4 <HAL_GetTick>
 810423a:	4602      	mov	r2, r0
 810423c:	68bb      	ldr	r3, [r7, #8]
 810423e:	1ad3      	subs	r3, r2, r3
 8104240:	2b02      	cmp	r3, #2
 8104242:	d901      	bls.n	8104248 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104244:	2303      	movs	r3, #3
 8104246:	e006      	b.n	8104256 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104248:	4b05      	ldr	r3, [pc, #20]	; (8104260 <RCCEx_PLL2_Config+0x160>)
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104250:	2b00      	cmp	r3, #0
 8104252:	d0f0      	beq.n	8104236 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104254:	7bfb      	ldrb	r3, [r7, #15]
}
 8104256:	4618      	mov	r0, r3
 8104258:	3710      	adds	r7, #16
 810425a:	46bd      	mov	sp, r7
 810425c:	bd80      	pop	{r7, pc}
 810425e:	bf00      	nop
 8104260:	58024400 	.word	0x58024400

08104264 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104264:	b580      	push	{r7, lr}
 8104266:	b084      	sub	sp, #16
 8104268:	af00      	add	r7, sp, #0
 810426a:	6078      	str	r0, [r7, #4]
 810426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810426e:	2300      	movs	r3, #0
 8104270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104272:	4b54      	ldr	r3, [pc, #336]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104276:	f003 0303 	and.w	r3, r3, #3
 810427a:	2b03      	cmp	r3, #3
 810427c:	d101      	bne.n	8104282 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810427e:	2301      	movs	r3, #1
 8104280:	e09b      	b.n	81043ba <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104282:	4b50      	ldr	r3, [pc, #320]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	4a4f      	ldr	r2, [pc, #316]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810428c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810428e:	f7fd ff89 	bl	81021a4 <HAL_GetTick>
 8104292:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104294:	e008      	b.n	81042a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104296:	f7fd ff85 	bl	81021a4 <HAL_GetTick>
 810429a:	4602      	mov	r2, r0
 810429c:	68bb      	ldr	r3, [r7, #8]
 810429e:	1ad3      	subs	r3, r2, r3
 81042a0:	2b02      	cmp	r3, #2
 81042a2:	d901      	bls.n	81042a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81042a4:	2303      	movs	r3, #3
 81042a6:	e088      	b.n	81043ba <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81042a8:	4b46      	ldr	r3, [pc, #280]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81042b0:	2b00      	cmp	r3, #0
 81042b2:	d1f0      	bne.n	8104296 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81042b4:	4b43      	ldr	r3, [pc, #268]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 81042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	051b      	lsls	r3, r3, #20
 81042c2:	4940      	ldr	r1, [pc, #256]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 81042c4:	4313      	orrs	r3, r2
 81042c6:	628b      	str	r3, [r1, #40]	; 0x28
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	685b      	ldr	r3, [r3, #4]
 81042cc:	3b01      	subs	r3, #1
 81042ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	689b      	ldr	r3, [r3, #8]
 81042d6:	3b01      	subs	r3, #1
 81042d8:	025b      	lsls	r3, r3, #9
 81042da:	b29b      	uxth	r3, r3
 81042dc:	431a      	orrs	r2, r3
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	68db      	ldr	r3, [r3, #12]
 81042e2:	3b01      	subs	r3, #1
 81042e4:	041b      	lsls	r3, r3, #16
 81042e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81042ea:	431a      	orrs	r2, r3
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	691b      	ldr	r3, [r3, #16]
 81042f0:	3b01      	subs	r3, #1
 81042f2:	061b      	lsls	r3, r3, #24
 81042f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81042f8:	4932      	ldr	r1, [pc, #200]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 81042fa:	4313      	orrs	r3, r2
 81042fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81042fe:	4b31      	ldr	r3, [pc, #196]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104302:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	695b      	ldr	r3, [r3, #20]
 810430a:	492e      	ldr	r1, [pc, #184]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810430c:	4313      	orrs	r3, r2
 810430e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104310:	4b2c      	ldr	r3, [pc, #176]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104314:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	699b      	ldr	r3, [r3, #24]
 810431c:	4929      	ldr	r1, [pc, #164]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810431e:	4313      	orrs	r3, r2
 8104320:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104322:	4b28      	ldr	r3, [pc, #160]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104326:	4a27      	ldr	r2, [pc, #156]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810432c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810432e:	4b25      	ldr	r3, [pc, #148]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104336:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810433a:	687a      	ldr	r2, [r7, #4]
 810433c:	69d2      	ldr	r2, [r2, #28]
 810433e:	00d2      	lsls	r2, r2, #3
 8104340:	4920      	ldr	r1, [pc, #128]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104342:	4313      	orrs	r3, r2
 8104344:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104346:	4b1f      	ldr	r3, [pc, #124]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810434a:	4a1e      	ldr	r2, [pc, #120]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104352:	683b      	ldr	r3, [r7, #0]
 8104354:	2b00      	cmp	r3, #0
 8104356:	d106      	bne.n	8104366 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104358:	4b1a      	ldr	r3, [pc, #104]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810435c:	4a19      	ldr	r2, [pc, #100]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810435e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104362:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104364:	e00f      	b.n	8104386 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104366:	683b      	ldr	r3, [r7, #0]
 8104368:	2b01      	cmp	r3, #1
 810436a:	d106      	bne.n	810437a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810436c:	4b15      	ldr	r3, [pc, #84]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104370:	4a14      	ldr	r2, [pc, #80]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104378:	e005      	b.n	8104386 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810437a:	4b12      	ldr	r3, [pc, #72]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810437e:	4a11      	ldr	r2, [pc, #68]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104384:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104386:	4b0f      	ldr	r3, [pc, #60]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	4a0e      	ldr	r2, [pc, #56]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 810438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104392:	f7fd ff07 	bl	81021a4 <HAL_GetTick>
 8104396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104398:	e008      	b.n	81043ac <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810439a:	f7fd ff03 	bl	81021a4 <HAL_GetTick>
 810439e:	4602      	mov	r2, r0
 81043a0:	68bb      	ldr	r3, [r7, #8]
 81043a2:	1ad3      	subs	r3, r2, r3
 81043a4:	2b02      	cmp	r3, #2
 81043a6:	d901      	bls.n	81043ac <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81043a8:	2303      	movs	r3, #3
 81043aa:	e006      	b.n	81043ba <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81043ac:	4b05      	ldr	r3, [pc, #20]	; (81043c4 <RCCEx_PLL3_Config+0x160>)
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81043b4:	2b00      	cmp	r3, #0
 81043b6:	d0f0      	beq.n	810439a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 81043ba:	4618      	mov	r0, r3
 81043bc:	3710      	adds	r7, #16
 81043be:	46bd      	mov	sp, r7
 81043c0:	bd80      	pop	{r7, pc}
 81043c2:	bf00      	nop
 81043c4:	58024400 	.word	0x58024400

081043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81043c8:	b580      	push	{r7, lr}
 81043ca:	b082      	sub	sp, #8
 81043cc:	af00      	add	r7, sp, #0
 81043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	2b00      	cmp	r3, #0
 81043d4:	d101      	bne.n	81043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81043d6:	2301      	movs	r3, #1
 81043d8:	e049      	b.n	810446e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81043e0:	b2db      	uxtb	r3, r3
 81043e2:	2b00      	cmp	r3, #0
 81043e4:	d106      	bne.n	81043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	2200      	movs	r2, #0
 81043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81043ee:	6878      	ldr	r0, [r7, #4]
 81043f0:	f7fd fbb4 	bl	8101b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	2202      	movs	r2, #2
 81043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681a      	ldr	r2, [r3, #0]
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	3304      	adds	r3, #4
 8104404:	4619      	mov	r1, r3
 8104406:	4610      	mov	r0, r2
 8104408:	f000 fea6 	bl	8105158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	2201      	movs	r2, #1
 8104410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	2201      	movs	r2, #1
 8104418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	2201      	movs	r2, #1
 8104420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	2201      	movs	r2, #1
 8104428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810442c:	687b      	ldr	r3, [r7, #4]
 810442e:	2201      	movs	r2, #1
 8104430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	2201      	movs	r2, #1
 8104438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	2201      	movs	r2, #1
 8104440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	2201      	movs	r2, #1
 8104448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	2201      	movs	r2, #1
 8104450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	2201      	movs	r2, #1
 8104458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	2201      	movs	r2, #1
 8104460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	2201      	movs	r2, #1
 8104468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810446c:	2300      	movs	r3, #0
}
 810446e:	4618      	mov	r0, r3
 8104470:	3708      	adds	r7, #8
 8104472:	46bd      	mov	sp, r7
 8104474:	bd80      	pop	{r7, pc}
	...

08104478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8104478:	b480      	push	{r7}
 810447a:	b085      	sub	sp, #20
 810447c:	af00      	add	r7, sp, #0
 810447e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104486:	b2db      	uxtb	r3, r3
 8104488:	2b01      	cmp	r3, #1
 810448a:	d001      	beq.n	8104490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810448c:	2301      	movs	r3, #1
 810448e:	e054      	b.n	810453a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	2202      	movs	r2, #2
 8104494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	68da      	ldr	r2, [r3, #12]
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	f042 0201 	orr.w	r2, r2, #1
 81044a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	4a26      	ldr	r2, [pc, #152]	; (8104548 <HAL_TIM_Base_Start_IT+0xd0>)
 81044ae:	4293      	cmp	r3, r2
 81044b0:	d022      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044ba:	d01d      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4a22      	ldr	r2, [pc, #136]	; (810454c <HAL_TIM_Base_Start_IT+0xd4>)
 81044c2:	4293      	cmp	r3, r2
 81044c4:	d018      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	4a21      	ldr	r2, [pc, #132]	; (8104550 <HAL_TIM_Base_Start_IT+0xd8>)
 81044cc:	4293      	cmp	r3, r2
 81044ce:	d013      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	4a1f      	ldr	r2, [pc, #124]	; (8104554 <HAL_TIM_Base_Start_IT+0xdc>)
 81044d6:	4293      	cmp	r3, r2
 81044d8:	d00e      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	4a1e      	ldr	r2, [pc, #120]	; (8104558 <HAL_TIM_Base_Start_IT+0xe0>)
 81044e0:	4293      	cmp	r3, r2
 81044e2:	d009      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	4a1c      	ldr	r2, [pc, #112]	; (810455c <HAL_TIM_Base_Start_IT+0xe4>)
 81044ea:	4293      	cmp	r3, r2
 81044ec:	d004      	beq.n	81044f8 <HAL_TIM_Base_Start_IT+0x80>
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a1b      	ldr	r2, [pc, #108]	; (8104560 <HAL_TIM_Base_Start_IT+0xe8>)
 81044f4:	4293      	cmp	r3, r2
 81044f6:	d115      	bne.n	8104524 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	689a      	ldr	r2, [r3, #8]
 81044fe:	4b19      	ldr	r3, [pc, #100]	; (8104564 <HAL_TIM_Base_Start_IT+0xec>)
 8104500:	4013      	ands	r3, r2
 8104502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104504:	68fb      	ldr	r3, [r7, #12]
 8104506:	2b06      	cmp	r3, #6
 8104508:	d015      	beq.n	8104536 <HAL_TIM_Base_Start_IT+0xbe>
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104510:	d011      	beq.n	8104536 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	681a      	ldr	r2, [r3, #0]
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	f042 0201 	orr.w	r2, r2, #1
 8104520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104522:	e008      	b.n	8104536 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	681a      	ldr	r2, [r3, #0]
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	f042 0201 	orr.w	r2, r2, #1
 8104532:	601a      	str	r2, [r3, #0]
 8104534:	e000      	b.n	8104538 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8104538:	2300      	movs	r3, #0
}
 810453a:	4618      	mov	r0, r3
 810453c:	3714      	adds	r7, #20
 810453e:	46bd      	mov	sp, r7
 8104540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104544:	4770      	bx	lr
 8104546:	bf00      	nop
 8104548:	40010000 	.word	0x40010000
 810454c:	40000400 	.word	0x40000400
 8104550:	40000800 	.word	0x40000800
 8104554:	40000c00 	.word	0x40000c00
 8104558:	40010400 	.word	0x40010400
 810455c:	40001800 	.word	0x40001800
 8104560:	40014000 	.word	0x40014000
 8104564:	00010007 	.word	0x00010007

08104568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8104568:	b580      	push	{r7, lr}
 810456a:	b082      	sub	sp, #8
 810456c:	af00      	add	r7, sp, #0
 810456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	2b00      	cmp	r3, #0
 8104574:	d101      	bne.n	810457a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8104576:	2301      	movs	r3, #1
 8104578:	e049      	b.n	810460e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104580:	b2db      	uxtb	r3, r3
 8104582:	2b00      	cmp	r3, #0
 8104584:	d106      	bne.n	8104594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	2200      	movs	r2, #0
 810458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810458e:	6878      	ldr	r0, [r7, #4]
 8104590:	f000 f841 	bl	8104616 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	2202      	movs	r2, #2
 8104598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	681a      	ldr	r2, [r3, #0]
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	3304      	adds	r3, #4
 81045a4:	4619      	mov	r1, r3
 81045a6:	4610      	mov	r0, r2
 81045a8:	f000 fdd6 	bl	8105158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	2201      	movs	r2, #1
 81045b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	2201      	movs	r2, #1
 81045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	2201      	movs	r2, #1
 81045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	2201      	movs	r2, #1
 81045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	2201      	movs	r2, #1
 81045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	2201      	movs	r2, #1
 81045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	2201      	movs	r2, #1
 81045e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	2201      	movs	r2, #1
 81045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	2201      	movs	r2, #1
 81045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	2201      	movs	r2, #1
 81045f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	2201      	movs	r2, #1
 8104600:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	2201      	movs	r2, #1
 8104608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810460c:	2300      	movs	r3, #0
}
 810460e:	4618      	mov	r0, r3
 8104610:	3708      	adds	r7, #8
 8104612:	46bd      	mov	sp, r7
 8104614:	bd80      	pop	{r7, pc}

08104616 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8104616:	b480      	push	{r7}
 8104618:	b083      	sub	sp, #12
 810461a:	af00      	add	r7, sp, #0
 810461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810461e:	bf00      	nop
 8104620:	370c      	adds	r7, #12
 8104622:	46bd      	mov	sp, r7
 8104624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104628:	4770      	bx	lr
	...

0810462c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810462c:	b580      	push	{r7, lr}
 810462e:	b084      	sub	sp, #16
 8104630:	af00      	add	r7, sp, #0
 8104632:	6078      	str	r0, [r7, #4]
 8104634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8104636:	683b      	ldr	r3, [r7, #0]
 8104638:	2b00      	cmp	r3, #0
 810463a:	d109      	bne.n	8104650 <HAL_TIM_PWM_Start+0x24>
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8104642:	b2db      	uxtb	r3, r3
 8104644:	2b01      	cmp	r3, #1
 8104646:	bf14      	ite	ne
 8104648:	2301      	movne	r3, #1
 810464a:	2300      	moveq	r3, #0
 810464c:	b2db      	uxtb	r3, r3
 810464e:	e03c      	b.n	81046ca <HAL_TIM_PWM_Start+0x9e>
 8104650:	683b      	ldr	r3, [r7, #0]
 8104652:	2b04      	cmp	r3, #4
 8104654:	d109      	bne.n	810466a <HAL_TIM_PWM_Start+0x3e>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810465c:	b2db      	uxtb	r3, r3
 810465e:	2b01      	cmp	r3, #1
 8104660:	bf14      	ite	ne
 8104662:	2301      	movne	r3, #1
 8104664:	2300      	moveq	r3, #0
 8104666:	b2db      	uxtb	r3, r3
 8104668:	e02f      	b.n	81046ca <HAL_TIM_PWM_Start+0x9e>
 810466a:	683b      	ldr	r3, [r7, #0]
 810466c:	2b08      	cmp	r3, #8
 810466e:	d109      	bne.n	8104684 <HAL_TIM_PWM_Start+0x58>
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104676:	b2db      	uxtb	r3, r3
 8104678:	2b01      	cmp	r3, #1
 810467a:	bf14      	ite	ne
 810467c:	2301      	movne	r3, #1
 810467e:	2300      	moveq	r3, #0
 8104680:	b2db      	uxtb	r3, r3
 8104682:	e022      	b.n	81046ca <HAL_TIM_PWM_Start+0x9e>
 8104684:	683b      	ldr	r3, [r7, #0]
 8104686:	2b0c      	cmp	r3, #12
 8104688:	d109      	bne.n	810469e <HAL_TIM_PWM_Start+0x72>
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104690:	b2db      	uxtb	r3, r3
 8104692:	2b01      	cmp	r3, #1
 8104694:	bf14      	ite	ne
 8104696:	2301      	movne	r3, #1
 8104698:	2300      	moveq	r3, #0
 810469a:	b2db      	uxtb	r3, r3
 810469c:	e015      	b.n	81046ca <HAL_TIM_PWM_Start+0x9e>
 810469e:	683b      	ldr	r3, [r7, #0]
 81046a0:	2b10      	cmp	r3, #16
 81046a2:	d109      	bne.n	81046b8 <HAL_TIM_PWM_Start+0x8c>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81046aa:	b2db      	uxtb	r3, r3
 81046ac:	2b01      	cmp	r3, #1
 81046ae:	bf14      	ite	ne
 81046b0:	2301      	movne	r3, #1
 81046b2:	2300      	moveq	r3, #0
 81046b4:	b2db      	uxtb	r3, r3
 81046b6:	e008      	b.n	81046ca <HAL_TIM_PWM_Start+0x9e>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81046be:	b2db      	uxtb	r3, r3
 81046c0:	2b01      	cmp	r3, #1
 81046c2:	bf14      	ite	ne
 81046c4:	2301      	movne	r3, #1
 81046c6:	2300      	moveq	r3, #0
 81046c8:	b2db      	uxtb	r3, r3
 81046ca:	2b00      	cmp	r3, #0
 81046cc:	d001      	beq.n	81046d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81046ce:	2301      	movs	r3, #1
 81046d0:	e0a1      	b.n	8104816 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81046d2:	683b      	ldr	r3, [r7, #0]
 81046d4:	2b00      	cmp	r3, #0
 81046d6:	d104      	bne.n	81046e2 <HAL_TIM_PWM_Start+0xb6>
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	2202      	movs	r2, #2
 81046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81046e0:	e023      	b.n	810472a <HAL_TIM_PWM_Start+0xfe>
 81046e2:	683b      	ldr	r3, [r7, #0]
 81046e4:	2b04      	cmp	r3, #4
 81046e6:	d104      	bne.n	81046f2 <HAL_TIM_PWM_Start+0xc6>
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	2202      	movs	r2, #2
 81046ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81046f0:	e01b      	b.n	810472a <HAL_TIM_PWM_Start+0xfe>
 81046f2:	683b      	ldr	r3, [r7, #0]
 81046f4:	2b08      	cmp	r3, #8
 81046f6:	d104      	bne.n	8104702 <HAL_TIM_PWM_Start+0xd6>
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	2202      	movs	r2, #2
 81046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104700:	e013      	b.n	810472a <HAL_TIM_PWM_Start+0xfe>
 8104702:	683b      	ldr	r3, [r7, #0]
 8104704:	2b0c      	cmp	r3, #12
 8104706:	d104      	bne.n	8104712 <HAL_TIM_PWM_Start+0xe6>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	2202      	movs	r2, #2
 810470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104710:	e00b      	b.n	810472a <HAL_TIM_PWM_Start+0xfe>
 8104712:	683b      	ldr	r3, [r7, #0]
 8104714:	2b10      	cmp	r3, #16
 8104716:	d104      	bne.n	8104722 <HAL_TIM_PWM_Start+0xf6>
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	2202      	movs	r2, #2
 810471c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104720:	e003      	b.n	810472a <HAL_TIM_PWM_Start+0xfe>
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	2202      	movs	r2, #2
 8104726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	681b      	ldr	r3, [r3, #0]
 810472e:	2201      	movs	r2, #1
 8104730:	6839      	ldr	r1, [r7, #0]
 8104732:	4618      	mov	r0, r3
 8104734:	f001 f91c 	bl	8105970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	4a38      	ldr	r2, [pc, #224]	; (8104820 <HAL_TIM_PWM_Start+0x1f4>)
 810473e:	4293      	cmp	r3, r2
 8104740:	d013      	beq.n	810476a <HAL_TIM_PWM_Start+0x13e>
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	4a37      	ldr	r2, [pc, #220]	; (8104824 <HAL_TIM_PWM_Start+0x1f8>)
 8104748:	4293      	cmp	r3, r2
 810474a:	d00e      	beq.n	810476a <HAL_TIM_PWM_Start+0x13e>
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	4a35      	ldr	r2, [pc, #212]	; (8104828 <HAL_TIM_PWM_Start+0x1fc>)
 8104752:	4293      	cmp	r3, r2
 8104754:	d009      	beq.n	810476a <HAL_TIM_PWM_Start+0x13e>
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	4a34      	ldr	r2, [pc, #208]	; (810482c <HAL_TIM_PWM_Start+0x200>)
 810475c:	4293      	cmp	r3, r2
 810475e:	d004      	beq.n	810476a <HAL_TIM_PWM_Start+0x13e>
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	681b      	ldr	r3, [r3, #0]
 8104764:	4a32      	ldr	r2, [pc, #200]	; (8104830 <HAL_TIM_PWM_Start+0x204>)
 8104766:	4293      	cmp	r3, r2
 8104768:	d101      	bne.n	810476e <HAL_TIM_PWM_Start+0x142>
 810476a:	2301      	movs	r3, #1
 810476c:	e000      	b.n	8104770 <HAL_TIM_PWM_Start+0x144>
 810476e:	2300      	movs	r3, #0
 8104770:	2b00      	cmp	r3, #0
 8104772:	d007      	beq.n	8104784 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	681b      	ldr	r3, [r3, #0]
 8104778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104782:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	681b      	ldr	r3, [r3, #0]
 8104788:	4a25      	ldr	r2, [pc, #148]	; (8104820 <HAL_TIM_PWM_Start+0x1f4>)
 810478a:	4293      	cmp	r3, r2
 810478c:	d022      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	681b      	ldr	r3, [r3, #0]
 8104792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104796:	d01d      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	4a25      	ldr	r2, [pc, #148]	; (8104834 <HAL_TIM_PWM_Start+0x208>)
 810479e:	4293      	cmp	r3, r2
 81047a0:	d018      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	4a24      	ldr	r2, [pc, #144]	; (8104838 <HAL_TIM_PWM_Start+0x20c>)
 81047a8:	4293      	cmp	r3, r2
 81047aa:	d013      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	4a22      	ldr	r2, [pc, #136]	; (810483c <HAL_TIM_PWM_Start+0x210>)
 81047b2:	4293      	cmp	r3, r2
 81047b4:	d00e      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	681b      	ldr	r3, [r3, #0]
 81047ba:	4a1a      	ldr	r2, [pc, #104]	; (8104824 <HAL_TIM_PWM_Start+0x1f8>)
 81047bc:	4293      	cmp	r3, r2
 81047be:	d009      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	4a1e      	ldr	r2, [pc, #120]	; (8104840 <HAL_TIM_PWM_Start+0x214>)
 81047c6:	4293      	cmp	r3, r2
 81047c8:	d004      	beq.n	81047d4 <HAL_TIM_PWM_Start+0x1a8>
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	4a16      	ldr	r2, [pc, #88]	; (8104828 <HAL_TIM_PWM_Start+0x1fc>)
 81047d0:	4293      	cmp	r3, r2
 81047d2:	d115      	bne.n	8104800 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	689a      	ldr	r2, [r3, #8]
 81047da:	4b1a      	ldr	r3, [pc, #104]	; (8104844 <HAL_TIM_PWM_Start+0x218>)
 81047dc:	4013      	ands	r3, r2
 81047de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	2b06      	cmp	r3, #6
 81047e4:	d015      	beq.n	8104812 <HAL_TIM_PWM_Start+0x1e6>
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81047ec:	d011      	beq.n	8104812 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	681a      	ldr	r2, [r3, #0]
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	681b      	ldr	r3, [r3, #0]
 81047f8:	f042 0201 	orr.w	r2, r2, #1
 81047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81047fe:	e008      	b.n	8104812 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	681a      	ldr	r2, [r3, #0]
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	f042 0201 	orr.w	r2, r2, #1
 810480e:	601a      	str	r2, [r3, #0]
 8104810:	e000      	b.n	8104814 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8104814:	2300      	movs	r3, #0
}
 8104816:	4618      	mov	r0, r3
 8104818:	3710      	adds	r7, #16
 810481a:	46bd      	mov	sp, r7
 810481c:	bd80      	pop	{r7, pc}
 810481e:	bf00      	nop
 8104820:	40010000 	.word	0x40010000
 8104824:	40010400 	.word	0x40010400
 8104828:	40014000 	.word	0x40014000
 810482c:	40014400 	.word	0x40014400
 8104830:	40014800 	.word	0x40014800
 8104834:	40000400 	.word	0x40000400
 8104838:	40000800 	.word	0x40000800
 810483c:	40000c00 	.word	0x40000c00
 8104840:	40001800 	.word	0x40001800
 8104844:	00010007 	.word	0x00010007

08104848 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8104848:	b580      	push	{r7, lr}
 810484a:	b086      	sub	sp, #24
 810484c:	af00      	add	r7, sp, #0
 810484e:	6078      	str	r0, [r7, #4]
 8104850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	2b00      	cmp	r3, #0
 8104856:	d101      	bne.n	810485c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8104858:	2301      	movs	r3, #1
 810485a:	e097      	b.n	810498c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104862:	b2db      	uxtb	r3, r3
 8104864:	2b00      	cmp	r3, #0
 8104866:	d106      	bne.n	8104876 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	2200      	movs	r2, #0
 810486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8104870:	6878      	ldr	r0, [r7, #4]
 8104872:	f7fd f9d9 	bl	8101c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	2202      	movs	r2, #2
 810487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	689b      	ldr	r3, [r3, #8]
 8104884:	687a      	ldr	r2, [r7, #4]
 8104886:	6812      	ldr	r2, [r2, #0]
 8104888:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 810488c:	f023 0307 	bic.w	r3, r3, #7
 8104890:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	681a      	ldr	r2, [r3, #0]
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	3304      	adds	r3, #4
 810489a:	4619      	mov	r1, r3
 810489c:	4610      	mov	r0, r2
 810489e:	f000 fc5b 	bl	8105158 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	681b      	ldr	r3, [r3, #0]
 81048a6:	689b      	ldr	r3, [r3, #8]
 81048a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	699b      	ldr	r3, [r3, #24]
 81048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	6a1b      	ldr	r3, [r3, #32]
 81048b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 81048ba:	683b      	ldr	r3, [r7, #0]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	697a      	ldr	r2, [r7, #20]
 81048c0:	4313      	orrs	r3, r2
 81048c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81048c4:	693b      	ldr	r3, [r7, #16]
 81048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81048ca:	f023 0303 	bic.w	r3, r3, #3
 81048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 81048d0:	683b      	ldr	r3, [r7, #0]
 81048d2:	689a      	ldr	r2, [r3, #8]
 81048d4:	683b      	ldr	r3, [r7, #0]
 81048d6:	699b      	ldr	r3, [r3, #24]
 81048d8:	021b      	lsls	r3, r3, #8
 81048da:	4313      	orrs	r3, r2
 81048dc:	693a      	ldr	r2, [r7, #16]
 81048de:	4313      	orrs	r3, r2
 81048e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 81048e2:	693b      	ldr	r3, [r7, #16]
 81048e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 81048e8:	f023 030c 	bic.w	r3, r3, #12
 81048ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 81048ee:	693b      	ldr	r3, [r7, #16]
 81048f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81048f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81048f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81048fa:	683b      	ldr	r3, [r7, #0]
 81048fc:	68da      	ldr	r2, [r3, #12]
 81048fe:	683b      	ldr	r3, [r7, #0]
 8104900:	69db      	ldr	r3, [r3, #28]
 8104902:	021b      	lsls	r3, r3, #8
 8104904:	4313      	orrs	r3, r2
 8104906:	693a      	ldr	r2, [r7, #16]
 8104908:	4313      	orrs	r3, r2
 810490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810490c:	683b      	ldr	r3, [r7, #0]
 810490e:	691b      	ldr	r3, [r3, #16]
 8104910:	011a      	lsls	r2, r3, #4
 8104912:	683b      	ldr	r3, [r7, #0]
 8104914:	6a1b      	ldr	r3, [r3, #32]
 8104916:	031b      	lsls	r3, r3, #12
 8104918:	4313      	orrs	r3, r2
 810491a:	693a      	ldr	r2, [r7, #16]
 810491c:	4313      	orrs	r3, r2
 810491e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8104926:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 810492e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8104930:	683b      	ldr	r3, [r7, #0]
 8104932:	685a      	ldr	r2, [r3, #4]
 8104934:	683b      	ldr	r3, [r7, #0]
 8104936:	695b      	ldr	r3, [r3, #20]
 8104938:	011b      	lsls	r3, r3, #4
 810493a:	4313      	orrs	r3, r2
 810493c:	68fa      	ldr	r2, [r7, #12]
 810493e:	4313      	orrs	r3, r2
 8104940:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	697a      	ldr	r2, [r7, #20]
 8104948:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	693a      	ldr	r2, [r7, #16]
 8104950:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	68fa      	ldr	r2, [r7, #12]
 8104958:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	2201      	movs	r2, #1
 810495e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	2201      	movs	r2, #1
 8104966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810496a:	687b      	ldr	r3, [r7, #4]
 810496c:	2201      	movs	r2, #1
 810496e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	2201      	movs	r2, #1
 8104976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	2201      	movs	r2, #1
 810497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	2201      	movs	r2, #1
 8104986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810498a:	2300      	movs	r3, #0
}
 810498c:	4618      	mov	r0, r3
 810498e:	3718      	adds	r7, #24
 8104990:	46bd      	mov	sp, r7
 8104992:	bd80      	pop	{r7, pc}

08104994 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8104994:	b580      	push	{r7, lr}
 8104996:	b084      	sub	sp, #16
 8104998:	af00      	add	r7, sp, #0
 810499a:	6078      	str	r0, [r7, #4]
 810499c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81049a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81049ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81049b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81049bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 81049be:	683b      	ldr	r3, [r7, #0]
 81049c0:	2b00      	cmp	r3, #0
 81049c2:	d110      	bne.n	81049e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81049c4:	7bfb      	ldrb	r3, [r7, #15]
 81049c6:	2b01      	cmp	r3, #1
 81049c8:	d102      	bne.n	81049d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 81049ca:	7b7b      	ldrb	r3, [r7, #13]
 81049cc:	2b01      	cmp	r3, #1
 81049ce:	d001      	beq.n	81049d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 81049d0:	2301      	movs	r3, #1
 81049d2:	e069      	b.n	8104aa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	2202      	movs	r2, #2
 81049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	2202      	movs	r2, #2
 81049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81049e4:	e031      	b.n	8104a4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 81049e6:	683b      	ldr	r3, [r7, #0]
 81049e8:	2b04      	cmp	r3, #4
 81049ea:	d110      	bne.n	8104a0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 81049ec:	7bbb      	ldrb	r3, [r7, #14]
 81049ee:	2b01      	cmp	r3, #1
 81049f0:	d102      	bne.n	81049f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 81049f2:	7b3b      	ldrb	r3, [r7, #12]
 81049f4:	2b01      	cmp	r3, #1
 81049f6:	d001      	beq.n	81049fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 81049f8:	2301      	movs	r3, #1
 81049fa:	e055      	b.n	8104aa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	2202      	movs	r2, #2
 8104a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	2202      	movs	r2, #2
 8104a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104a0c:	e01d      	b.n	8104a4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104a0e:	7bfb      	ldrb	r3, [r7, #15]
 8104a10:	2b01      	cmp	r3, #1
 8104a12:	d108      	bne.n	8104a26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104a14:	7bbb      	ldrb	r3, [r7, #14]
 8104a16:	2b01      	cmp	r3, #1
 8104a18:	d105      	bne.n	8104a26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104a1a:	7b7b      	ldrb	r3, [r7, #13]
 8104a1c:	2b01      	cmp	r3, #1
 8104a1e:	d102      	bne.n	8104a26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8104a20:	7b3b      	ldrb	r3, [r7, #12]
 8104a22:	2b01      	cmp	r3, #1
 8104a24:	d001      	beq.n	8104a2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8104a26:	2301      	movs	r3, #1
 8104a28:	e03e      	b.n	8104aa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	2202      	movs	r2, #2
 8104a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	2202      	movs	r2, #2
 8104a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	2202      	movs	r2, #2
 8104a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	2202      	movs	r2, #2
 8104a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8104a4a:	683b      	ldr	r3, [r7, #0]
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d003      	beq.n	8104a58 <HAL_TIM_Encoder_Start+0xc4>
 8104a50:	683b      	ldr	r3, [r7, #0]
 8104a52:	2b04      	cmp	r3, #4
 8104a54:	d008      	beq.n	8104a68 <HAL_TIM_Encoder_Start+0xd4>
 8104a56:	e00f      	b.n	8104a78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	2201      	movs	r2, #1
 8104a5e:	2100      	movs	r1, #0
 8104a60:	4618      	mov	r0, r3
 8104a62:	f000 ff85 	bl	8105970 <TIM_CCxChannelCmd>
      break;
 8104a66:	e016      	b.n	8104a96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	2201      	movs	r2, #1
 8104a6e:	2104      	movs	r1, #4
 8104a70:	4618      	mov	r0, r3
 8104a72:	f000 ff7d 	bl	8105970 <TIM_CCxChannelCmd>
      break;
 8104a76:	e00e      	b.n	8104a96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	2201      	movs	r2, #1
 8104a7e:	2100      	movs	r1, #0
 8104a80:	4618      	mov	r0, r3
 8104a82:	f000 ff75 	bl	8105970 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104a86:	687b      	ldr	r3, [r7, #4]
 8104a88:	681b      	ldr	r3, [r3, #0]
 8104a8a:	2201      	movs	r2, #1
 8104a8c:	2104      	movs	r1, #4
 8104a8e:	4618      	mov	r0, r3
 8104a90:	f000 ff6e 	bl	8105970 <TIM_CCxChannelCmd>
      break;
 8104a94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	681a      	ldr	r2, [r3, #0]
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	f042 0201 	orr.w	r2, r2, #1
 8104aa4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8104aa6:	2300      	movs	r3, #0
}
 8104aa8:	4618      	mov	r0, r3
 8104aaa:	3710      	adds	r7, #16
 8104aac:	46bd      	mov	sp, r7
 8104aae:	bd80      	pop	{r7, pc}

08104ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104ab0:	b580      	push	{r7, lr}
 8104ab2:	b082      	sub	sp, #8
 8104ab4:	af00      	add	r7, sp, #0
 8104ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	691b      	ldr	r3, [r3, #16]
 8104abe:	f003 0302 	and.w	r3, r3, #2
 8104ac2:	2b02      	cmp	r3, #2
 8104ac4:	d122      	bne.n	8104b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	68db      	ldr	r3, [r3, #12]
 8104acc:	f003 0302 	and.w	r3, r3, #2
 8104ad0:	2b02      	cmp	r3, #2
 8104ad2:	d11b      	bne.n	8104b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	f06f 0202 	mvn.w	r2, #2
 8104adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104ade:	687b      	ldr	r3, [r7, #4]
 8104ae0:	2201      	movs	r2, #1
 8104ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	699b      	ldr	r3, [r3, #24]
 8104aea:	f003 0303 	and.w	r3, r3, #3
 8104aee:	2b00      	cmp	r3, #0
 8104af0:	d003      	beq.n	8104afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8104af2:	6878      	ldr	r0, [r7, #4]
 8104af4:	f000 fb12 	bl	810511c <HAL_TIM_IC_CaptureCallback>
 8104af8:	e005      	b.n	8104b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104afa:	6878      	ldr	r0, [r7, #4]
 8104afc:	f000 fb04 	bl	8105108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104b00:	6878      	ldr	r0, [r7, #4]
 8104b02:	f000 fb15 	bl	8105130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	2200      	movs	r2, #0
 8104b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	691b      	ldr	r3, [r3, #16]
 8104b12:	f003 0304 	and.w	r3, r3, #4
 8104b16:	2b04      	cmp	r3, #4
 8104b18:	d122      	bne.n	8104b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	68db      	ldr	r3, [r3, #12]
 8104b20:	f003 0304 	and.w	r3, r3, #4
 8104b24:	2b04      	cmp	r3, #4
 8104b26:	d11b      	bne.n	8104b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	f06f 0204 	mvn.w	r2, #4
 8104b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	2202      	movs	r2, #2
 8104b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	699b      	ldr	r3, [r3, #24]
 8104b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d003      	beq.n	8104b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104b46:	6878      	ldr	r0, [r7, #4]
 8104b48:	f000 fae8 	bl	810511c <HAL_TIM_IC_CaptureCallback>
 8104b4c:	e005      	b.n	8104b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104b4e:	6878      	ldr	r0, [r7, #4]
 8104b50:	f000 fada 	bl	8105108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104b54:	6878      	ldr	r0, [r7, #4]
 8104b56:	f000 faeb 	bl	8105130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	2200      	movs	r2, #0
 8104b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	691b      	ldr	r3, [r3, #16]
 8104b66:	f003 0308 	and.w	r3, r3, #8
 8104b6a:	2b08      	cmp	r3, #8
 8104b6c:	d122      	bne.n	8104bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	681b      	ldr	r3, [r3, #0]
 8104b72:	68db      	ldr	r3, [r3, #12]
 8104b74:	f003 0308 	and.w	r3, r3, #8
 8104b78:	2b08      	cmp	r3, #8
 8104b7a:	d11b      	bne.n	8104bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	f06f 0208 	mvn.w	r2, #8
 8104b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	2204      	movs	r2, #4
 8104b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	69db      	ldr	r3, [r3, #28]
 8104b92:	f003 0303 	and.w	r3, r3, #3
 8104b96:	2b00      	cmp	r3, #0
 8104b98:	d003      	beq.n	8104ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104b9a:	6878      	ldr	r0, [r7, #4]
 8104b9c:	f000 fabe 	bl	810511c <HAL_TIM_IC_CaptureCallback>
 8104ba0:	e005      	b.n	8104bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104ba2:	6878      	ldr	r0, [r7, #4]
 8104ba4:	f000 fab0 	bl	8105108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104ba8:	6878      	ldr	r0, [r7, #4]
 8104baa:	f000 fac1 	bl	8105130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	2200      	movs	r2, #0
 8104bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	681b      	ldr	r3, [r3, #0]
 8104bb8:	691b      	ldr	r3, [r3, #16]
 8104bba:	f003 0310 	and.w	r3, r3, #16
 8104bbe:	2b10      	cmp	r3, #16
 8104bc0:	d122      	bne.n	8104c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	68db      	ldr	r3, [r3, #12]
 8104bc8:	f003 0310 	and.w	r3, r3, #16
 8104bcc:	2b10      	cmp	r3, #16
 8104bce:	d11b      	bne.n	8104c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	f06f 0210 	mvn.w	r2, #16
 8104bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104bda:	687b      	ldr	r3, [r7, #4]
 8104bdc:	2208      	movs	r2, #8
 8104bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	69db      	ldr	r3, [r3, #28]
 8104be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104bea:	2b00      	cmp	r3, #0
 8104bec:	d003      	beq.n	8104bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104bee:	6878      	ldr	r0, [r7, #4]
 8104bf0:	f000 fa94 	bl	810511c <HAL_TIM_IC_CaptureCallback>
 8104bf4:	e005      	b.n	8104c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104bf6:	6878      	ldr	r0, [r7, #4]
 8104bf8:	f000 fa86 	bl	8105108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104bfc:	6878      	ldr	r0, [r7, #4]
 8104bfe:	f000 fa97 	bl	8105130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	2200      	movs	r2, #0
 8104c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	691b      	ldr	r3, [r3, #16]
 8104c0e:	f003 0301 	and.w	r3, r3, #1
 8104c12:	2b01      	cmp	r3, #1
 8104c14:	d10e      	bne.n	8104c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	68db      	ldr	r3, [r3, #12]
 8104c1c:	f003 0301 	and.w	r3, r3, #1
 8104c20:	2b01      	cmp	r3, #1
 8104c22:	d107      	bne.n	8104c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	f06f 0201 	mvn.w	r2, #1
 8104c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104c2e:	6878      	ldr	r0, [r7, #4]
 8104c30:	f7fc ff44 	bl	8101abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	691b      	ldr	r3, [r3, #16]
 8104c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104c3e:	2b80      	cmp	r3, #128	; 0x80
 8104c40:	d10e      	bne.n	8104c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	68db      	ldr	r3, [r3, #12]
 8104c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104c4c:	2b80      	cmp	r3, #128	; 0x80
 8104c4e:	d107      	bne.n	8104c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8104c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104c5a:	6878      	ldr	r0, [r7, #4]
 8104c5c:	f000 ff46 	bl	8105aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	691b      	ldr	r3, [r3, #16]
 8104c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c6e:	d10e      	bne.n	8104c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	68db      	ldr	r3, [r3, #12]
 8104c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104c7a:	2b80      	cmp	r3, #128	; 0x80
 8104c7c:	d107      	bne.n	8104c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8104c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104c88:	6878      	ldr	r0, [r7, #4]
 8104c8a:	f000 ff39 	bl	8105b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	691b      	ldr	r3, [r3, #16]
 8104c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104c98:	2b40      	cmp	r3, #64	; 0x40
 8104c9a:	d10e      	bne.n	8104cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	681b      	ldr	r3, [r3, #0]
 8104ca0:	68db      	ldr	r3, [r3, #12]
 8104ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104ca6:	2b40      	cmp	r3, #64	; 0x40
 8104ca8:	d107      	bne.n	8104cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8104cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104cb4:	6878      	ldr	r0, [r7, #4]
 8104cb6:	f000 fa45 	bl	8105144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	691b      	ldr	r3, [r3, #16]
 8104cc0:	f003 0320 	and.w	r3, r3, #32
 8104cc4:	2b20      	cmp	r3, #32
 8104cc6:	d10e      	bne.n	8104ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	68db      	ldr	r3, [r3, #12]
 8104cce:	f003 0320 	and.w	r3, r3, #32
 8104cd2:	2b20      	cmp	r3, #32
 8104cd4:	d107      	bne.n	8104ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	681b      	ldr	r3, [r3, #0]
 8104cda:	f06f 0220 	mvn.w	r2, #32
 8104cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8104ce0:	6878      	ldr	r0, [r7, #4]
 8104ce2:	f000 fef9 	bl	8105ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8104ce6:	bf00      	nop
 8104ce8:	3708      	adds	r7, #8
 8104cea:	46bd      	mov	sp, r7
 8104cec:	bd80      	pop	{r7, pc}
	...

08104cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8104cf0:	b580      	push	{r7, lr}
 8104cf2:	b086      	sub	sp, #24
 8104cf4:	af00      	add	r7, sp, #0
 8104cf6:	60f8      	str	r0, [r7, #12]
 8104cf8:	60b9      	str	r1, [r7, #8]
 8104cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104cfc:	2300      	movs	r3, #0
 8104cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104d06:	2b01      	cmp	r3, #1
 8104d08:	d101      	bne.n	8104d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8104d0a:	2302      	movs	r3, #2
 8104d0c:	e0ff      	b.n	8104f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8104d0e:	68fb      	ldr	r3, [r7, #12]
 8104d10:	2201      	movs	r2, #1
 8104d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	2b14      	cmp	r3, #20
 8104d1a:	f200 80f0 	bhi.w	8104efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8104d1e:	a201      	add	r2, pc, #4	; (adr r2, 8104d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8104d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d24:	08104d79 	.word	0x08104d79
 8104d28:	08104eff 	.word	0x08104eff
 8104d2c:	08104eff 	.word	0x08104eff
 8104d30:	08104eff 	.word	0x08104eff
 8104d34:	08104db9 	.word	0x08104db9
 8104d38:	08104eff 	.word	0x08104eff
 8104d3c:	08104eff 	.word	0x08104eff
 8104d40:	08104eff 	.word	0x08104eff
 8104d44:	08104dfb 	.word	0x08104dfb
 8104d48:	08104eff 	.word	0x08104eff
 8104d4c:	08104eff 	.word	0x08104eff
 8104d50:	08104eff 	.word	0x08104eff
 8104d54:	08104e3b 	.word	0x08104e3b
 8104d58:	08104eff 	.word	0x08104eff
 8104d5c:	08104eff 	.word	0x08104eff
 8104d60:	08104eff 	.word	0x08104eff
 8104d64:	08104e7d 	.word	0x08104e7d
 8104d68:	08104eff 	.word	0x08104eff
 8104d6c:	08104eff 	.word	0x08104eff
 8104d70:	08104eff 	.word	0x08104eff
 8104d74:	08104ebd 	.word	0x08104ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8104d78:	68fb      	ldr	r3, [r7, #12]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	68b9      	ldr	r1, [r7, #8]
 8104d7e:	4618      	mov	r0, r3
 8104d80:	f000 fa84 	bl	810528c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8104d84:	68fb      	ldr	r3, [r7, #12]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	699a      	ldr	r2, [r3, #24]
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	f042 0208 	orr.w	r2, r2, #8
 8104d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104d94:	68fb      	ldr	r3, [r7, #12]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	699a      	ldr	r2, [r3, #24]
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	f022 0204 	bic.w	r2, r2, #4
 8104da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	6999      	ldr	r1, [r3, #24]
 8104daa:	68bb      	ldr	r3, [r7, #8]
 8104dac:	691a      	ldr	r2, [r3, #16]
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	430a      	orrs	r2, r1
 8104db4:	619a      	str	r2, [r3, #24]
      break;
 8104db6:	e0a5      	b.n	8104f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104db8:	68fb      	ldr	r3, [r7, #12]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	68b9      	ldr	r1, [r7, #8]
 8104dbe:	4618      	mov	r0, r3
 8104dc0:	f000 faf4 	bl	81053ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8104dc4:	68fb      	ldr	r3, [r7, #12]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	699a      	ldr	r2, [r3, #24]
 8104dca:	68fb      	ldr	r3, [r7, #12]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8104dd4:	68fb      	ldr	r3, [r7, #12]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	699a      	ldr	r2, [r3, #24]
 8104dda:	68fb      	ldr	r3, [r7, #12]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	681b      	ldr	r3, [r3, #0]
 8104de8:	6999      	ldr	r1, [r3, #24]
 8104dea:	68bb      	ldr	r3, [r7, #8]
 8104dec:	691b      	ldr	r3, [r3, #16]
 8104dee:	021a      	lsls	r2, r3, #8
 8104df0:	68fb      	ldr	r3, [r7, #12]
 8104df2:	681b      	ldr	r3, [r3, #0]
 8104df4:	430a      	orrs	r2, r1
 8104df6:	619a      	str	r2, [r3, #24]
      break;
 8104df8:	e084      	b.n	8104f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8104dfa:	68fb      	ldr	r3, [r7, #12]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	68b9      	ldr	r1, [r7, #8]
 8104e00:	4618      	mov	r0, r3
 8104e02:	f000 fb5d 	bl	81054c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8104e06:	68fb      	ldr	r3, [r7, #12]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	69da      	ldr	r2, [r3, #28]
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	f042 0208 	orr.w	r2, r2, #8
 8104e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8104e16:	68fb      	ldr	r3, [r7, #12]
 8104e18:	681b      	ldr	r3, [r3, #0]
 8104e1a:	69da      	ldr	r2, [r3, #28]
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	681b      	ldr	r3, [r3, #0]
 8104e20:	f022 0204 	bic.w	r2, r2, #4
 8104e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8104e26:	68fb      	ldr	r3, [r7, #12]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	69d9      	ldr	r1, [r3, #28]
 8104e2c:	68bb      	ldr	r3, [r7, #8]
 8104e2e:	691a      	ldr	r2, [r3, #16]
 8104e30:	68fb      	ldr	r3, [r7, #12]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	430a      	orrs	r2, r1
 8104e36:	61da      	str	r2, [r3, #28]
      break;
 8104e38:	e064      	b.n	8104f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8104e3a:	68fb      	ldr	r3, [r7, #12]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	68b9      	ldr	r1, [r7, #8]
 8104e40:	4618      	mov	r0, r3
 8104e42:	f000 fbc5 	bl	81055d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8104e46:	68fb      	ldr	r3, [r7, #12]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	69da      	ldr	r2, [r3, #28]
 8104e4c:	68fb      	ldr	r3, [r7, #12]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8104e56:	68fb      	ldr	r3, [r7, #12]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	69da      	ldr	r2, [r3, #28]
 8104e5c:	68fb      	ldr	r3, [r7, #12]
 8104e5e:	681b      	ldr	r3, [r3, #0]
 8104e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8104e66:	68fb      	ldr	r3, [r7, #12]
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	69d9      	ldr	r1, [r3, #28]
 8104e6c:	68bb      	ldr	r3, [r7, #8]
 8104e6e:	691b      	ldr	r3, [r3, #16]
 8104e70:	021a      	lsls	r2, r3, #8
 8104e72:	68fb      	ldr	r3, [r7, #12]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	430a      	orrs	r2, r1
 8104e78:	61da      	str	r2, [r3, #28]
      break;
 8104e7a:	e043      	b.n	8104f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	68b9      	ldr	r1, [r7, #8]
 8104e82:	4618      	mov	r0, r3
 8104e84:	f000 fc0e 	bl	81056a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104e88:	68fb      	ldr	r3, [r7, #12]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104e8e:	68fb      	ldr	r3, [r7, #12]
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	f042 0208 	orr.w	r2, r2, #8
 8104e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104e98:	68fb      	ldr	r3, [r7, #12]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	f022 0204 	bic.w	r2, r2, #4
 8104ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	681b      	ldr	r3, [r3, #0]
 8104eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104eae:	68bb      	ldr	r3, [r7, #8]
 8104eb0:	691a      	ldr	r2, [r3, #16]
 8104eb2:	68fb      	ldr	r3, [r7, #12]
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	430a      	orrs	r2, r1
 8104eb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104eba:	e023      	b.n	8104f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104ebc:	68fb      	ldr	r3, [r7, #12]
 8104ebe:	681b      	ldr	r3, [r3, #0]
 8104ec0:	68b9      	ldr	r1, [r7, #8]
 8104ec2:	4618      	mov	r0, r3
 8104ec4:	f000 fc52 	bl	810576c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104ece:	68fb      	ldr	r3, [r7, #12]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104ed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8104ed8:	68fb      	ldr	r3, [r7, #12]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104ede:	68fb      	ldr	r3, [r7, #12]
 8104ee0:	681b      	ldr	r3, [r3, #0]
 8104ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104ee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8104ee8:	68fb      	ldr	r3, [r7, #12]
 8104eea:	681b      	ldr	r3, [r3, #0]
 8104eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104eee:	68bb      	ldr	r3, [r7, #8]
 8104ef0:	691b      	ldr	r3, [r3, #16]
 8104ef2:	021a      	lsls	r2, r3, #8
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	430a      	orrs	r2, r1
 8104efa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104efc:	e002      	b.n	8104f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8104efe:	2301      	movs	r3, #1
 8104f00:	75fb      	strb	r3, [r7, #23]
      break;
 8104f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	2200      	movs	r2, #0
 8104f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8104f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8104f0e:	4618      	mov	r0, r3
 8104f10:	3718      	adds	r7, #24
 8104f12:	46bd      	mov	sp, r7
 8104f14:	bd80      	pop	{r7, pc}
 8104f16:	bf00      	nop

08104f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8104f18:	b580      	push	{r7, lr}
 8104f1a:	b084      	sub	sp, #16
 8104f1c:	af00      	add	r7, sp, #0
 8104f1e:	6078      	str	r0, [r7, #4]
 8104f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104f22:	2300      	movs	r3, #0
 8104f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104f2c:	2b01      	cmp	r3, #1
 8104f2e:	d101      	bne.n	8104f34 <HAL_TIM_ConfigClockSource+0x1c>
 8104f30:	2302      	movs	r3, #2
 8104f32:	e0de      	b.n	81050f2 <HAL_TIM_ConfigClockSource+0x1da>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	2201      	movs	r2, #1
 8104f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	2202      	movs	r2, #2
 8104f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	681b      	ldr	r3, [r3, #0]
 8104f48:	689b      	ldr	r3, [r3, #8]
 8104f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8104f4c:	68bb      	ldr	r3, [r7, #8]
 8104f4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8104f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8104f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8104f58:	68bb      	ldr	r3, [r7, #8]
 8104f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	68ba      	ldr	r2, [r7, #8]
 8104f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8104f68:	683b      	ldr	r3, [r7, #0]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	4a63      	ldr	r2, [pc, #396]	; (81050fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8104f6e:	4293      	cmp	r3, r2
 8104f70:	f000 80a9 	beq.w	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8104f74:	4a61      	ldr	r2, [pc, #388]	; (81050fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8104f76:	4293      	cmp	r3, r2
 8104f78:	f200 80ae 	bhi.w	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104f7c:	4a60      	ldr	r2, [pc, #384]	; (8105100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	f000 80a1 	beq.w	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8104f84:	4a5e      	ldr	r2, [pc, #376]	; (8105100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8104f86:	4293      	cmp	r3, r2
 8104f88:	f200 80a6 	bhi.w	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104f8c:	4a5d      	ldr	r2, [pc, #372]	; (8105104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8104f8e:	4293      	cmp	r3, r2
 8104f90:	f000 8099 	beq.w	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8104f94:	4a5b      	ldr	r2, [pc, #364]	; (8105104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8104f96:	4293      	cmp	r3, r2
 8104f98:	f200 809e 	bhi.w	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104f9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8104fa0:	f000 8091 	beq.w	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8104fa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8104fa8:	f200 8096 	bhi.w	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104fb0:	f000 8089 	beq.w	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8104fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104fb8:	f200 808e 	bhi.w	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104fc0:	d03e      	beq.n	8105040 <HAL_TIM_ConfigClockSource+0x128>
 8104fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104fc6:	f200 8087 	bhi.w	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104fce:	f000 8086 	beq.w	81050de <HAL_TIM_ConfigClockSource+0x1c6>
 8104fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104fd6:	d87f      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104fd8:	2b70      	cmp	r3, #112	; 0x70
 8104fda:	d01a      	beq.n	8105012 <HAL_TIM_ConfigClockSource+0xfa>
 8104fdc:	2b70      	cmp	r3, #112	; 0x70
 8104fde:	d87b      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104fe0:	2b60      	cmp	r3, #96	; 0x60
 8104fe2:	d050      	beq.n	8105086 <HAL_TIM_ConfigClockSource+0x16e>
 8104fe4:	2b60      	cmp	r3, #96	; 0x60
 8104fe6:	d877      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104fe8:	2b50      	cmp	r3, #80	; 0x50
 8104fea:	d03c      	beq.n	8105066 <HAL_TIM_ConfigClockSource+0x14e>
 8104fec:	2b50      	cmp	r3, #80	; 0x50
 8104fee:	d873      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104ff0:	2b40      	cmp	r3, #64	; 0x40
 8104ff2:	d058      	beq.n	81050a6 <HAL_TIM_ConfigClockSource+0x18e>
 8104ff4:	2b40      	cmp	r3, #64	; 0x40
 8104ff6:	d86f      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8104ff8:	2b30      	cmp	r3, #48	; 0x30
 8104ffa:	d064      	beq.n	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8104ffc:	2b30      	cmp	r3, #48	; 0x30
 8104ffe:	d86b      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105000:	2b20      	cmp	r3, #32
 8105002:	d060      	beq.n	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105004:	2b20      	cmp	r3, #32
 8105006:	d867      	bhi.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8105008:	2b00      	cmp	r3, #0
 810500a:	d05c      	beq.n	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 810500c:	2b10      	cmp	r3, #16
 810500e:	d05a      	beq.n	81050c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8105010:	e062      	b.n	81050d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105012:	687b      	ldr	r3, [r7, #4]
 8105014:	6818      	ldr	r0, [r3, #0]
 8105016:	683b      	ldr	r3, [r7, #0]
 8105018:	6899      	ldr	r1, [r3, #8]
 810501a:	683b      	ldr	r3, [r7, #0]
 810501c:	685a      	ldr	r2, [r3, #4]
 810501e:	683b      	ldr	r3, [r7, #0]
 8105020:	68db      	ldr	r3, [r3, #12]
 8105022:	f000 fc85 	bl	8105930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	681b      	ldr	r3, [r3, #0]
 810502a:	689b      	ldr	r3, [r3, #8]
 810502c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810502e:	68bb      	ldr	r3, [r7, #8]
 8105030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	681b      	ldr	r3, [r3, #0]
 810503a:	68ba      	ldr	r2, [r7, #8]
 810503c:	609a      	str	r2, [r3, #8]
      break;
 810503e:	e04f      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	6818      	ldr	r0, [r3, #0]
 8105044:	683b      	ldr	r3, [r7, #0]
 8105046:	6899      	ldr	r1, [r3, #8]
 8105048:	683b      	ldr	r3, [r7, #0]
 810504a:	685a      	ldr	r2, [r3, #4]
 810504c:	683b      	ldr	r3, [r7, #0]
 810504e:	68db      	ldr	r3, [r3, #12]
 8105050:	f000 fc6e 	bl	8105930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	689a      	ldr	r2, [r3, #8]
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	681b      	ldr	r3, [r3, #0]
 810505e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105062:	609a      	str	r2, [r3, #8]
      break;
 8105064:	e03c      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	6818      	ldr	r0, [r3, #0]
 810506a:	683b      	ldr	r3, [r7, #0]
 810506c:	6859      	ldr	r1, [r3, #4]
 810506e:	683b      	ldr	r3, [r7, #0]
 8105070:	68db      	ldr	r3, [r3, #12]
 8105072:	461a      	mov	r2, r3
 8105074:	f000 fbe0 	bl	8105838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	681b      	ldr	r3, [r3, #0]
 810507c:	2150      	movs	r1, #80	; 0x50
 810507e:	4618      	mov	r0, r3
 8105080:	f000 fc39 	bl	81058f6 <TIM_ITRx_SetConfig>
      break;
 8105084:	e02c      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	6818      	ldr	r0, [r3, #0]
 810508a:	683b      	ldr	r3, [r7, #0]
 810508c:	6859      	ldr	r1, [r3, #4]
 810508e:	683b      	ldr	r3, [r7, #0]
 8105090:	68db      	ldr	r3, [r3, #12]
 8105092:	461a      	mov	r2, r3
 8105094:	f000 fbff 	bl	8105896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	2160      	movs	r1, #96	; 0x60
 810509e:	4618      	mov	r0, r3
 81050a0:	f000 fc29 	bl	81058f6 <TIM_ITRx_SetConfig>
      break;
 81050a4:	e01c      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	6818      	ldr	r0, [r3, #0]
 81050aa:	683b      	ldr	r3, [r7, #0]
 81050ac:	6859      	ldr	r1, [r3, #4]
 81050ae:	683b      	ldr	r3, [r7, #0]
 81050b0:	68db      	ldr	r3, [r3, #12]
 81050b2:	461a      	mov	r2, r3
 81050b4:	f000 fbc0 	bl	8105838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	681b      	ldr	r3, [r3, #0]
 81050bc:	2140      	movs	r1, #64	; 0x40
 81050be:	4618      	mov	r0, r3
 81050c0:	f000 fc19 	bl	81058f6 <TIM_ITRx_SetConfig>
      break;
 81050c4:	e00c      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681a      	ldr	r2, [r3, #0]
 81050ca:	683b      	ldr	r3, [r7, #0]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	4619      	mov	r1, r3
 81050d0:	4610      	mov	r0, r2
 81050d2:	f000 fc10 	bl	81058f6 <TIM_ITRx_SetConfig>
      break;
 81050d6:	e003      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81050d8:	2301      	movs	r3, #1
 81050da:	73fb      	strb	r3, [r7, #15]
      break;
 81050dc:	e000      	b.n	81050e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81050de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	2201      	movs	r2, #1
 81050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	2200      	movs	r2, #0
 81050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 81050f2:	4618      	mov	r0, r3
 81050f4:	3710      	adds	r7, #16
 81050f6:	46bd      	mov	sp, r7
 81050f8:	bd80      	pop	{r7, pc}
 81050fa:	bf00      	nop
 81050fc:	00100040 	.word	0x00100040
 8105100:	00100030 	.word	0x00100030
 8105104:	00100020 	.word	0x00100020

08105108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105108:	b480      	push	{r7}
 810510a:	b083      	sub	sp, #12
 810510c:	af00      	add	r7, sp, #0
 810510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105110:	bf00      	nop
 8105112:	370c      	adds	r7, #12
 8105114:	46bd      	mov	sp, r7
 8105116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810511a:	4770      	bx	lr

0810511c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810511c:	b480      	push	{r7}
 810511e:	b083      	sub	sp, #12
 8105120:	af00      	add	r7, sp, #0
 8105122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105124:	bf00      	nop
 8105126:	370c      	adds	r7, #12
 8105128:	46bd      	mov	sp, r7
 810512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810512e:	4770      	bx	lr

08105130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105130:	b480      	push	{r7}
 8105132:	b083      	sub	sp, #12
 8105134:	af00      	add	r7, sp, #0
 8105136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105138:	bf00      	nop
 810513a:	370c      	adds	r7, #12
 810513c:	46bd      	mov	sp, r7
 810513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105142:	4770      	bx	lr

08105144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105144:	b480      	push	{r7}
 8105146:	b083      	sub	sp, #12
 8105148:	af00      	add	r7, sp, #0
 810514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810514c:	bf00      	nop
 810514e:	370c      	adds	r7, #12
 8105150:	46bd      	mov	sp, r7
 8105152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105156:	4770      	bx	lr

08105158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105158:	b480      	push	{r7}
 810515a:	b085      	sub	sp, #20
 810515c:	af00      	add	r7, sp, #0
 810515e:	6078      	str	r0, [r7, #4]
 8105160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	4a40      	ldr	r2, [pc, #256]	; (810526c <TIM_Base_SetConfig+0x114>)
 810516c:	4293      	cmp	r3, r2
 810516e:	d013      	beq.n	8105198 <TIM_Base_SetConfig+0x40>
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105176:	d00f      	beq.n	8105198 <TIM_Base_SetConfig+0x40>
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	4a3d      	ldr	r2, [pc, #244]	; (8105270 <TIM_Base_SetConfig+0x118>)
 810517c:	4293      	cmp	r3, r2
 810517e:	d00b      	beq.n	8105198 <TIM_Base_SetConfig+0x40>
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	4a3c      	ldr	r2, [pc, #240]	; (8105274 <TIM_Base_SetConfig+0x11c>)
 8105184:	4293      	cmp	r3, r2
 8105186:	d007      	beq.n	8105198 <TIM_Base_SetConfig+0x40>
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	4a3b      	ldr	r2, [pc, #236]	; (8105278 <TIM_Base_SetConfig+0x120>)
 810518c:	4293      	cmp	r3, r2
 810518e:	d003      	beq.n	8105198 <TIM_Base_SetConfig+0x40>
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	4a3a      	ldr	r2, [pc, #232]	; (810527c <TIM_Base_SetConfig+0x124>)
 8105194:	4293      	cmp	r3, r2
 8105196:	d108      	bne.n	81051aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81051a0:	683b      	ldr	r3, [r7, #0]
 81051a2:	685b      	ldr	r3, [r3, #4]
 81051a4:	68fa      	ldr	r2, [r7, #12]
 81051a6:	4313      	orrs	r3, r2
 81051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	4a2f      	ldr	r2, [pc, #188]	; (810526c <TIM_Base_SetConfig+0x114>)
 81051ae:	4293      	cmp	r3, r2
 81051b0:	d01f      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81051b8:	d01b      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	4a2c      	ldr	r2, [pc, #176]	; (8105270 <TIM_Base_SetConfig+0x118>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d017      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	4a2b      	ldr	r2, [pc, #172]	; (8105274 <TIM_Base_SetConfig+0x11c>)
 81051c6:	4293      	cmp	r3, r2
 81051c8:	d013      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	4a2a      	ldr	r2, [pc, #168]	; (8105278 <TIM_Base_SetConfig+0x120>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d00f      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	4a29      	ldr	r2, [pc, #164]	; (810527c <TIM_Base_SetConfig+0x124>)
 81051d6:	4293      	cmp	r3, r2
 81051d8:	d00b      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	4a28      	ldr	r2, [pc, #160]	; (8105280 <TIM_Base_SetConfig+0x128>)
 81051de:	4293      	cmp	r3, r2
 81051e0:	d007      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	4a27      	ldr	r2, [pc, #156]	; (8105284 <TIM_Base_SetConfig+0x12c>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d003      	beq.n	81051f2 <TIM_Base_SetConfig+0x9a>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	4a26      	ldr	r2, [pc, #152]	; (8105288 <TIM_Base_SetConfig+0x130>)
 81051ee:	4293      	cmp	r3, r2
 81051f0:	d108      	bne.n	8105204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81051fa:	683b      	ldr	r3, [r7, #0]
 81051fc:	68db      	ldr	r3, [r3, #12]
 81051fe:	68fa      	ldr	r2, [r7, #12]
 8105200:	4313      	orrs	r3, r2
 8105202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105204:	68fb      	ldr	r3, [r7, #12]
 8105206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810520a:	683b      	ldr	r3, [r7, #0]
 810520c:	695b      	ldr	r3, [r3, #20]
 810520e:	4313      	orrs	r3, r2
 8105210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	68fa      	ldr	r2, [r7, #12]
 8105216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105218:	683b      	ldr	r3, [r7, #0]
 810521a:	689a      	ldr	r2, [r3, #8]
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105220:	683b      	ldr	r3, [r7, #0]
 8105222:	681a      	ldr	r2, [r3, #0]
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	4a10      	ldr	r2, [pc, #64]	; (810526c <TIM_Base_SetConfig+0x114>)
 810522c:	4293      	cmp	r3, r2
 810522e:	d00f      	beq.n	8105250 <TIM_Base_SetConfig+0xf8>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	4a12      	ldr	r2, [pc, #72]	; (810527c <TIM_Base_SetConfig+0x124>)
 8105234:	4293      	cmp	r3, r2
 8105236:	d00b      	beq.n	8105250 <TIM_Base_SetConfig+0xf8>
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	4a11      	ldr	r2, [pc, #68]	; (8105280 <TIM_Base_SetConfig+0x128>)
 810523c:	4293      	cmp	r3, r2
 810523e:	d007      	beq.n	8105250 <TIM_Base_SetConfig+0xf8>
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	4a10      	ldr	r2, [pc, #64]	; (8105284 <TIM_Base_SetConfig+0x12c>)
 8105244:	4293      	cmp	r3, r2
 8105246:	d003      	beq.n	8105250 <TIM_Base_SetConfig+0xf8>
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	4a0f      	ldr	r2, [pc, #60]	; (8105288 <TIM_Base_SetConfig+0x130>)
 810524c:	4293      	cmp	r3, r2
 810524e:	d103      	bne.n	8105258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105250:	683b      	ldr	r3, [r7, #0]
 8105252:	691a      	ldr	r2, [r3, #16]
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	2201      	movs	r2, #1
 810525c:	615a      	str	r2, [r3, #20]
}
 810525e:	bf00      	nop
 8105260:	3714      	adds	r7, #20
 8105262:	46bd      	mov	sp, r7
 8105264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105268:	4770      	bx	lr
 810526a:	bf00      	nop
 810526c:	40010000 	.word	0x40010000
 8105270:	40000400 	.word	0x40000400
 8105274:	40000800 	.word	0x40000800
 8105278:	40000c00 	.word	0x40000c00
 810527c:	40010400 	.word	0x40010400
 8105280:	40014000 	.word	0x40014000
 8105284:	40014400 	.word	0x40014400
 8105288:	40014800 	.word	0x40014800

0810528c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810528c:	b480      	push	{r7}
 810528e:	b087      	sub	sp, #28
 8105290:	af00      	add	r7, sp, #0
 8105292:	6078      	str	r0, [r7, #4]
 8105294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	6a1b      	ldr	r3, [r3, #32]
 810529a:	f023 0201 	bic.w	r2, r3, #1
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	6a1b      	ldr	r3, [r3, #32]
 81052a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	685b      	ldr	r3, [r3, #4]
 81052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	699b      	ldr	r3, [r3, #24]
 81052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81052b4:	68fb      	ldr	r3, [r7, #12]
 81052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81052be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	f023 0303 	bic.w	r3, r3, #3
 81052c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81052c8:	683b      	ldr	r3, [r7, #0]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	68fa      	ldr	r2, [r7, #12]
 81052ce:	4313      	orrs	r3, r2
 81052d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81052d2:	697b      	ldr	r3, [r7, #20]
 81052d4:	f023 0302 	bic.w	r3, r3, #2
 81052d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81052da:	683b      	ldr	r3, [r7, #0]
 81052dc:	689b      	ldr	r3, [r3, #8]
 81052de:	697a      	ldr	r2, [r7, #20]
 81052e0:	4313      	orrs	r3, r2
 81052e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	4a2c      	ldr	r2, [pc, #176]	; (8105398 <TIM_OC1_SetConfig+0x10c>)
 81052e8:	4293      	cmp	r3, r2
 81052ea:	d00f      	beq.n	810530c <TIM_OC1_SetConfig+0x80>
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	4a2b      	ldr	r2, [pc, #172]	; (810539c <TIM_OC1_SetConfig+0x110>)
 81052f0:	4293      	cmp	r3, r2
 81052f2:	d00b      	beq.n	810530c <TIM_OC1_SetConfig+0x80>
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	4a2a      	ldr	r2, [pc, #168]	; (81053a0 <TIM_OC1_SetConfig+0x114>)
 81052f8:	4293      	cmp	r3, r2
 81052fa:	d007      	beq.n	810530c <TIM_OC1_SetConfig+0x80>
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	4a29      	ldr	r2, [pc, #164]	; (81053a4 <TIM_OC1_SetConfig+0x118>)
 8105300:	4293      	cmp	r3, r2
 8105302:	d003      	beq.n	810530c <TIM_OC1_SetConfig+0x80>
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	4a28      	ldr	r2, [pc, #160]	; (81053a8 <TIM_OC1_SetConfig+0x11c>)
 8105308:	4293      	cmp	r3, r2
 810530a:	d10c      	bne.n	8105326 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810530c:	697b      	ldr	r3, [r7, #20]
 810530e:	f023 0308 	bic.w	r3, r3, #8
 8105312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105314:	683b      	ldr	r3, [r7, #0]
 8105316:	68db      	ldr	r3, [r3, #12]
 8105318:	697a      	ldr	r2, [r7, #20]
 810531a:	4313      	orrs	r3, r2
 810531c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810531e:	697b      	ldr	r3, [r7, #20]
 8105320:	f023 0304 	bic.w	r3, r3, #4
 8105324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	4a1b      	ldr	r2, [pc, #108]	; (8105398 <TIM_OC1_SetConfig+0x10c>)
 810532a:	4293      	cmp	r3, r2
 810532c:	d00f      	beq.n	810534e <TIM_OC1_SetConfig+0xc2>
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	4a1a      	ldr	r2, [pc, #104]	; (810539c <TIM_OC1_SetConfig+0x110>)
 8105332:	4293      	cmp	r3, r2
 8105334:	d00b      	beq.n	810534e <TIM_OC1_SetConfig+0xc2>
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	4a19      	ldr	r2, [pc, #100]	; (81053a0 <TIM_OC1_SetConfig+0x114>)
 810533a:	4293      	cmp	r3, r2
 810533c:	d007      	beq.n	810534e <TIM_OC1_SetConfig+0xc2>
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	4a18      	ldr	r2, [pc, #96]	; (81053a4 <TIM_OC1_SetConfig+0x118>)
 8105342:	4293      	cmp	r3, r2
 8105344:	d003      	beq.n	810534e <TIM_OC1_SetConfig+0xc2>
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	4a17      	ldr	r2, [pc, #92]	; (81053a8 <TIM_OC1_SetConfig+0x11c>)
 810534a:	4293      	cmp	r3, r2
 810534c:	d111      	bne.n	8105372 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810534e:	693b      	ldr	r3, [r7, #16]
 8105350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105356:	693b      	ldr	r3, [r7, #16]
 8105358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810535c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810535e:	683b      	ldr	r3, [r7, #0]
 8105360:	695b      	ldr	r3, [r3, #20]
 8105362:	693a      	ldr	r2, [r7, #16]
 8105364:	4313      	orrs	r3, r2
 8105366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105368:	683b      	ldr	r3, [r7, #0]
 810536a:	699b      	ldr	r3, [r3, #24]
 810536c:	693a      	ldr	r2, [r7, #16]
 810536e:	4313      	orrs	r3, r2
 8105370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	693a      	ldr	r2, [r7, #16]
 8105376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	68fa      	ldr	r2, [r7, #12]
 810537c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810537e:	683b      	ldr	r3, [r7, #0]
 8105380:	685a      	ldr	r2, [r3, #4]
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	697a      	ldr	r2, [r7, #20]
 810538a:	621a      	str	r2, [r3, #32]
}
 810538c:	bf00      	nop
 810538e:	371c      	adds	r7, #28
 8105390:	46bd      	mov	sp, r7
 8105392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105396:	4770      	bx	lr
 8105398:	40010000 	.word	0x40010000
 810539c:	40010400 	.word	0x40010400
 81053a0:	40014000 	.word	0x40014000
 81053a4:	40014400 	.word	0x40014400
 81053a8:	40014800 	.word	0x40014800

081053ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81053ac:	b480      	push	{r7}
 81053ae:	b087      	sub	sp, #28
 81053b0:	af00      	add	r7, sp, #0
 81053b2:	6078      	str	r0, [r7, #4]
 81053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	6a1b      	ldr	r3, [r3, #32]
 81053ba:	f023 0210 	bic.w	r2, r3, #16
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	6a1b      	ldr	r3, [r3, #32]
 81053c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	685b      	ldr	r3, [r3, #4]
 81053cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	699b      	ldr	r3, [r3, #24]
 81053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81053e0:	68fb      	ldr	r3, [r7, #12]
 81053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81053e8:	683b      	ldr	r3, [r7, #0]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	021b      	lsls	r3, r3, #8
 81053ee:	68fa      	ldr	r2, [r7, #12]
 81053f0:	4313      	orrs	r3, r2
 81053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81053f4:	697b      	ldr	r3, [r7, #20]
 81053f6:	f023 0320 	bic.w	r3, r3, #32
 81053fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81053fc:	683b      	ldr	r3, [r7, #0]
 81053fe:	689b      	ldr	r3, [r3, #8]
 8105400:	011b      	lsls	r3, r3, #4
 8105402:	697a      	ldr	r2, [r7, #20]
 8105404:	4313      	orrs	r3, r2
 8105406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105408:	687b      	ldr	r3, [r7, #4]
 810540a:	4a28      	ldr	r2, [pc, #160]	; (81054ac <TIM_OC2_SetConfig+0x100>)
 810540c:	4293      	cmp	r3, r2
 810540e:	d003      	beq.n	8105418 <TIM_OC2_SetConfig+0x6c>
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	4a27      	ldr	r2, [pc, #156]	; (81054b0 <TIM_OC2_SetConfig+0x104>)
 8105414:	4293      	cmp	r3, r2
 8105416:	d10d      	bne.n	8105434 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105418:	697b      	ldr	r3, [r7, #20]
 810541a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810541e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105420:	683b      	ldr	r3, [r7, #0]
 8105422:	68db      	ldr	r3, [r3, #12]
 8105424:	011b      	lsls	r3, r3, #4
 8105426:	697a      	ldr	r2, [r7, #20]
 8105428:	4313      	orrs	r3, r2
 810542a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810542c:	697b      	ldr	r3, [r7, #20]
 810542e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	4a1d      	ldr	r2, [pc, #116]	; (81054ac <TIM_OC2_SetConfig+0x100>)
 8105438:	4293      	cmp	r3, r2
 810543a:	d00f      	beq.n	810545c <TIM_OC2_SetConfig+0xb0>
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	4a1c      	ldr	r2, [pc, #112]	; (81054b0 <TIM_OC2_SetConfig+0x104>)
 8105440:	4293      	cmp	r3, r2
 8105442:	d00b      	beq.n	810545c <TIM_OC2_SetConfig+0xb0>
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	4a1b      	ldr	r2, [pc, #108]	; (81054b4 <TIM_OC2_SetConfig+0x108>)
 8105448:	4293      	cmp	r3, r2
 810544a:	d007      	beq.n	810545c <TIM_OC2_SetConfig+0xb0>
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	4a1a      	ldr	r2, [pc, #104]	; (81054b8 <TIM_OC2_SetConfig+0x10c>)
 8105450:	4293      	cmp	r3, r2
 8105452:	d003      	beq.n	810545c <TIM_OC2_SetConfig+0xb0>
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	4a19      	ldr	r2, [pc, #100]	; (81054bc <TIM_OC2_SetConfig+0x110>)
 8105458:	4293      	cmp	r3, r2
 810545a:	d113      	bne.n	8105484 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810545c:	693b      	ldr	r3, [r7, #16]
 810545e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105464:	693b      	ldr	r3, [r7, #16]
 8105466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810546a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810546c:	683b      	ldr	r3, [r7, #0]
 810546e:	695b      	ldr	r3, [r3, #20]
 8105470:	009b      	lsls	r3, r3, #2
 8105472:	693a      	ldr	r2, [r7, #16]
 8105474:	4313      	orrs	r3, r2
 8105476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105478:	683b      	ldr	r3, [r7, #0]
 810547a:	699b      	ldr	r3, [r3, #24]
 810547c:	009b      	lsls	r3, r3, #2
 810547e:	693a      	ldr	r2, [r7, #16]
 8105480:	4313      	orrs	r3, r2
 8105482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105484:	687b      	ldr	r3, [r7, #4]
 8105486:	693a      	ldr	r2, [r7, #16]
 8105488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	68fa      	ldr	r2, [r7, #12]
 810548e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8105490:	683b      	ldr	r3, [r7, #0]
 8105492:	685a      	ldr	r2, [r3, #4]
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	697a      	ldr	r2, [r7, #20]
 810549c:	621a      	str	r2, [r3, #32]
}
 810549e:	bf00      	nop
 81054a0:	371c      	adds	r7, #28
 81054a2:	46bd      	mov	sp, r7
 81054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054a8:	4770      	bx	lr
 81054aa:	bf00      	nop
 81054ac:	40010000 	.word	0x40010000
 81054b0:	40010400 	.word	0x40010400
 81054b4:	40014000 	.word	0x40014000
 81054b8:	40014400 	.word	0x40014400
 81054bc:	40014800 	.word	0x40014800

081054c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81054c0:	b480      	push	{r7}
 81054c2:	b087      	sub	sp, #28
 81054c4:	af00      	add	r7, sp, #0
 81054c6:	6078      	str	r0, [r7, #4]
 81054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	6a1b      	ldr	r3, [r3, #32]
 81054ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	6a1b      	ldr	r3, [r3, #32]
 81054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	685b      	ldr	r3, [r3, #4]
 81054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	69db      	ldr	r3, [r3, #28]
 81054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81054e8:	68fb      	ldr	r3, [r7, #12]
 81054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81054f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81054f4:	68fb      	ldr	r3, [r7, #12]
 81054f6:	f023 0303 	bic.w	r3, r3, #3
 81054fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81054fc:	683b      	ldr	r3, [r7, #0]
 81054fe:	681b      	ldr	r3, [r3, #0]
 8105500:	68fa      	ldr	r2, [r7, #12]
 8105502:	4313      	orrs	r3, r2
 8105504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8105506:	697b      	ldr	r3, [r7, #20]
 8105508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810550c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810550e:	683b      	ldr	r3, [r7, #0]
 8105510:	689b      	ldr	r3, [r3, #8]
 8105512:	021b      	lsls	r3, r3, #8
 8105514:	697a      	ldr	r2, [r7, #20]
 8105516:	4313      	orrs	r3, r2
 8105518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	4a27      	ldr	r2, [pc, #156]	; (81055bc <TIM_OC3_SetConfig+0xfc>)
 810551e:	4293      	cmp	r3, r2
 8105520:	d003      	beq.n	810552a <TIM_OC3_SetConfig+0x6a>
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	4a26      	ldr	r2, [pc, #152]	; (81055c0 <TIM_OC3_SetConfig+0x100>)
 8105526:	4293      	cmp	r3, r2
 8105528:	d10d      	bne.n	8105546 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810552a:	697b      	ldr	r3, [r7, #20]
 810552c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105532:	683b      	ldr	r3, [r7, #0]
 8105534:	68db      	ldr	r3, [r3, #12]
 8105536:	021b      	lsls	r3, r3, #8
 8105538:	697a      	ldr	r2, [r7, #20]
 810553a:	4313      	orrs	r3, r2
 810553c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810553e:	697b      	ldr	r3, [r7, #20]
 8105540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	4a1c      	ldr	r2, [pc, #112]	; (81055bc <TIM_OC3_SetConfig+0xfc>)
 810554a:	4293      	cmp	r3, r2
 810554c:	d00f      	beq.n	810556e <TIM_OC3_SetConfig+0xae>
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	4a1b      	ldr	r2, [pc, #108]	; (81055c0 <TIM_OC3_SetConfig+0x100>)
 8105552:	4293      	cmp	r3, r2
 8105554:	d00b      	beq.n	810556e <TIM_OC3_SetConfig+0xae>
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	4a1a      	ldr	r2, [pc, #104]	; (81055c4 <TIM_OC3_SetConfig+0x104>)
 810555a:	4293      	cmp	r3, r2
 810555c:	d007      	beq.n	810556e <TIM_OC3_SetConfig+0xae>
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	4a19      	ldr	r2, [pc, #100]	; (81055c8 <TIM_OC3_SetConfig+0x108>)
 8105562:	4293      	cmp	r3, r2
 8105564:	d003      	beq.n	810556e <TIM_OC3_SetConfig+0xae>
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	4a18      	ldr	r2, [pc, #96]	; (81055cc <TIM_OC3_SetConfig+0x10c>)
 810556a:	4293      	cmp	r3, r2
 810556c:	d113      	bne.n	8105596 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810556e:	693b      	ldr	r3, [r7, #16]
 8105570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105576:	693b      	ldr	r3, [r7, #16]
 8105578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810557c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810557e:	683b      	ldr	r3, [r7, #0]
 8105580:	695b      	ldr	r3, [r3, #20]
 8105582:	011b      	lsls	r3, r3, #4
 8105584:	693a      	ldr	r2, [r7, #16]
 8105586:	4313      	orrs	r3, r2
 8105588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810558a:	683b      	ldr	r3, [r7, #0]
 810558c:	699b      	ldr	r3, [r3, #24]
 810558e:	011b      	lsls	r3, r3, #4
 8105590:	693a      	ldr	r2, [r7, #16]
 8105592:	4313      	orrs	r3, r2
 8105594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	693a      	ldr	r2, [r7, #16]
 810559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	68fa      	ldr	r2, [r7, #12]
 81055a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81055a2:	683b      	ldr	r3, [r7, #0]
 81055a4:	685a      	ldr	r2, [r3, #4]
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	697a      	ldr	r2, [r7, #20]
 81055ae:	621a      	str	r2, [r3, #32]
}
 81055b0:	bf00      	nop
 81055b2:	371c      	adds	r7, #28
 81055b4:	46bd      	mov	sp, r7
 81055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055ba:	4770      	bx	lr
 81055bc:	40010000 	.word	0x40010000
 81055c0:	40010400 	.word	0x40010400
 81055c4:	40014000 	.word	0x40014000
 81055c8:	40014400 	.word	0x40014400
 81055cc:	40014800 	.word	0x40014800

081055d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81055d0:	b480      	push	{r7}
 81055d2:	b087      	sub	sp, #28
 81055d4:	af00      	add	r7, sp, #0
 81055d6:	6078      	str	r0, [r7, #4]
 81055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	6a1b      	ldr	r3, [r3, #32]
 81055de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	6a1b      	ldr	r3, [r3, #32]
 81055ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	685b      	ldr	r3, [r3, #4]
 81055f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	69db      	ldr	r3, [r3, #28]
 81055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81055fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810560a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810560c:	683b      	ldr	r3, [r7, #0]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	021b      	lsls	r3, r3, #8
 8105612:	68fa      	ldr	r2, [r7, #12]
 8105614:	4313      	orrs	r3, r2
 8105616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8105618:	693b      	ldr	r3, [r7, #16]
 810561a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810561e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105620:	683b      	ldr	r3, [r7, #0]
 8105622:	689b      	ldr	r3, [r3, #8]
 8105624:	031b      	lsls	r3, r3, #12
 8105626:	693a      	ldr	r2, [r7, #16]
 8105628:	4313      	orrs	r3, r2
 810562a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	4a18      	ldr	r2, [pc, #96]	; (8105690 <TIM_OC4_SetConfig+0xc0>)
 8105630:	4293      	cmp	r3, r2
 8105632:	d00f      	beq.n	8105654 <TIM_OC4_SetConfig+0x84>
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	4a17      	ldr	r2, [pc, #92]	; (8105694 <TIM_OC4_SetConfig+0xc4>)
 8105638:	4293      	cmp	r3, r2
 810563a:	d00b      	beq.n	8105654 <TIM_OC4_SetConfig+0x84>
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	4a16      	ldr	r2, [pc, #88]	; (8105698 <TIM_OC4_SetConfig+0xc8>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d007      	beq.n	8105654 <TIM_OC4_SetConfig+0x84>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	4a15      	ldr	r2, [pc, #84]	; (810569c <TIM_OC4_SetConfig+0xcc>)
 8105648:	4293      	cmp	r3, r2
 810564a:	d003      	beq.n	8105654 <TIM_OC4_SetConfig+0x84>
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	4a14      	ldr	r2, [pc, #80]	; (81056a0 <TIM_OC4_SetConfig+0xd0>)
 8105650:	4293      	cmp	r3, r2
 8105652:	d109      	bne.n	8105668 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8105654:	697b      	ldr	r3, [r7, #20]
 8105656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810565a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810565c:	683b      	ldr	r3, [r7, #0]
 810565e:	695b      	ldr	r3, [r3, #20]
 8105660:	019b      	lsls	r3, r3, #6
 8105662:	697a      	ldr	r2, [r7, #20]
 8105664:	4313      	orrs	r3, r2
 8105666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	697a      	ldr	r2, [r7, #20]
 810566c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	68fa      	ldr	r2, [r7, #12]
 8105672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8105674:	683b      	ldr	r3, [r7, #0]
 8105676:	685a      	ldr	r2, [r3, #4]
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810567c:	687b      	ldr	r3, [r7, #4]
 810567e:	693a      	ldr	r2, [r7, #16]
 8105680:	621a      	str	r2, [r3, #32]
}
 8105682:	bf00      	nop
 8105684:	371c      	adds	r7, #28
 8105686:	46bd      	mov	sp, r7
 8105688:	f85d 7b04 	ldr.w	r7, [sp], #4
 810568c:	4770      	bx	lr
 810568e:	bf00      	nop
 8105690:	40010000 	.word	0x40010000
 8105694:	40010400 	.word	0x40010400
 8105698:	40014000 	.word	0x40014000
 810569c:	40014400 	.word	0x40014400
 81056a0:	40014800 	.word	0x40014800

081056a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81056a4:	b480      	push	{r7}
 81056a6:	b087      	sub	sp, #28
 81056a8:	af00      	add	r7, sp, #0
 81056aa:	6078      	str	r0, [r7, #4]
 81056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	6a1b      	ldr	r3, [r3, #32]
 81056b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	6a1b      	ldr	r3, [r3, #32]
 81056be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	685b      	ldr	r3, [r3, #4]
 81056c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81056cc:	68fb      	ldr	r3, [r7, #12]
 81056ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81056d8:	683b      	ldr	r3, [r7, #0]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	68fa      	ldr	r2, [r7, #12]
 81056de:	4313      	orrs	r3, r2
 81056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81056e2:	693b      	ldr	r3, [r7, #16]
 81056e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81056e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81056ea:	683b      	ldr	r3, [r7, #0]
 81056ec:	689b      	ldr	r3, [r3, #8]
 81056ee:	041b      	lsls	r3, r3, #16
 81056f0:	693a      	ldr	r2, [r7, #16]
 81056f2:	4313      	orrs	r3, r2
 81056f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	4a17      	ldr	r2, [pc, #92]	; (8105758 <TIM_OC5_SetConfig+0xb4>)
 81056fa:	4293      	cmp	r3, r2
 81056fc:	d00f      	beq.n	810571e <TIM_OC5_SetConfig+0x7a>
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	4a16      	ldr	r2, [pc, #88]	; (810575c <TIM_OC5_SetConfig+0xb8>)
 8105702:	4293      	cmp	r3, r2
 8105704:	d00b      	beq.n	810571e <TIM_OC5_SetConfig+0x7a>
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	4a15      	ldr	r2, [pc, #84]	; (8105760 <TIM_OC5_SetConfig+0xbc>)
 810570a:	4293      	cmp	r3, r2
 810570c:	d007      	beq.n	810571e <TIM_OC5_SetConfig+0x7a>
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	4a14      	ldr	r2, [pc, #80]	; (8105764 <TIM_OC5_SetConfig+0xc0>)
 8105712:	4293      	cmp	r3, r2
 8105714:	d003      	beq.n	810571e <TIM_OC5_SetConfig+0x7a>
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	4a13      	ldr	r2, [pc, #76]	; (8105768 <TIM_OC5_SetConfig+0xc4>)
 810571a:	4293      	cmp	r3, r2
 810571c:	d109      	bne.n	8105732 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810571e:	697b      	ldr	r3, [r7, #20]
 8105720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8105726:	683b      	ldr	r3, [r7, #0]
 8105728:	695b      	ldr	r3, [r3, #20]
 810572a:	021b      	lsls	r3, r3, #8
 810572c:	697a      	ldr	r2, [r7, #20]
 810572e:	4313      	orrs	r3, r2
 8105730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	697a      	ldr	r2, [r7, #20]
 8105736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	68fa      	ldr	r2, [r7, #12]
 810573c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810573e:	683b      	ldr	r3, [r7, #0]
 8105740:	685a      	ldr	r2, [r3, #4]
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	693a      	ldr	r2, [r7, #16]
 810574a:	621a      	str	r2, [r3, #32]
}
 810574c:	bf00      	nop
 810574e:	371c      	adds	r7, #28
 8105750:	46bd      	mov	sp, r7
 8105752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105756:	4770      	bx	lr
 8105758:	40010000 	.word	0x40010000
 810575c:	40010400 	.word	0x40010400
 8105760:	40014000 	.word	0x40014000
 8105764:	40014400 	.word	0x40014400
 8105768:	40014800 	.word	0x40014800

0810576c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810576c:	b480      	push	{r7}
 810576e:	b087      	sub	sp, #28
 8105770:	af00      	add	r7, sp, #0
 8105772:	6078      	str	r0, [r7, #4]
 8105774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	6a1b      	ldr	r3, [r3, #32]
 810577a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	6a1b      	ldr	r3, [r3, #32]
 8105786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	685b      	ldr	r3, [r3, #4]
 810578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810579e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81057a0:	683b      	ldr	r3, [r7, #0]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	021b      	lsls	r3, r3, #8
 81057a6:	68fa      	ldr	r2, [r7, #12]
 81057a8:	4313      	orrs	r3, r2
 81057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81057ac:	693b      	ldr	r3, [r7, #16]
 81057ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81057b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81057b4:	683b      	ldr	r3, [r7, #0]
 81057b6:	689b      	ldr	r3, [r3, #8]
 81057b8:	051b      	lsls	r3, r3, #20
 81057ba:	693a      	ldr	r2, [r7, #16]
 81057bc:	4313      	orrs	r3, r2
 81057be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	4a18      	ldr	r2, [pc, #96]	; (8105824 <TIM_OC6_SetConfig+0xb8>)
 81057c4:	4293      	cmp	r3, r2
 81057c6:	d00f      	beq.n	81057e8 <TIM_OC6_SetConfig+0x7c>
 81057c8:	687b      	ldr	r3, [r7, #4]
 81057ca:	4a17      	ldr	r2, [pc, #92]	; (8105828 <TIM_OC6_SetConfig+0xbc>)
 81057cc:	4293      	cmp	r3, r2
 81057ce:	d00b      	beq.n	81057e8 <TIM_OC6_SetConfig+0x7c>
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	4a16      	ldr	r2, [pc, #88]	; (810582c <TIM_OC6_SetConfig+0xc0>)
 81057d4:	4293      	cmp	r3, r2
 81057d6:	d007      	beq.n	81057e8 <TIM_OC6_SetConfig+0x7c>
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	4a15      	ldr	r2, [pc, #84]	; (8105830 <TIM_OC6_SetConfig+0xc4>)
 81057dc:	4293      	cmp	r3, r2
 81057de:	d003      	beq.n	81057e8 <TIM_OC6_SetConfig+0x7c>
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	4a14      	ldr	r2, [pc, #80]	; (8105834 <TIM_OC6_SetConfig+0xc8>)
 81057e4:	4293      	cmp	r3, r2
 81057e6:	d109      	bne.n	81057fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81057e8:	697b      	ldr	r3, [r7, #20]
 81057ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81057f0:	683b      	ldr	r3, [r7, #0]
 81057f2:	695b      	ldr	r3, [r3, #20]
 81057f4:	029b      	lsls	r3, r3, #10
 81057f6:	697a      	ldr	r2, [r7, #20]
 81057f8:	4313      	orrs	r3, r2
 81057fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81057fc:	687b      	ldr	r3, [r7, #4]
 81057fe:	697a      	ldr	r2, [r7, #20]
 8105800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	68fa      	ldr	r2, [r7, #12]
 8105806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8105808:	683b      	ldr	r3, [r7, #0]
 810580a:	685a      	ldr	r2, [r3, #4]
 810580c:	687b      	ldr	r3, [r7, #4]
 810580e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	693a      	ldr	r2, [r7, #16]
 8105814:	621a      	str	r2, [r3, #32]
}
 8105816:	bf00      	nop
 8105818:	371c      	adds	r7, #28
 810581a:	46bd      	mov	sp, r7
 810581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105820:	4770      	bx	lr
 8105822:	bf00      	nop
 8105824:	40010000 	.word	0x40010000
 8105828:	40010400 	.word	0x40010400
 810582c:	40014000 	.word	0x40014000
 8105830:	40014400 	.word	0x40014400
 8105834:	40014800 	.word	0x40014800

08105838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105838:	b480      	push	{r7}
 810583a:	b087      	sub	sp, #28
 810583c:	af00      	add	r7, sp, #0
 810583e:	60f8      	str	r0, [r7, #12]
 8105840:	60b9      	str	r1, [r7, #8]
 8105842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8105844:	68fb      	ldr	r3, [r7, #12]
 8105846:	6a1b      	ldr	r3, [r3, #32]
 8105848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810584a:	68fb      	ldr	r3, [r7, #12]
 810584c:	6a1b      	ldr	r3, [r3, #32]
 810584e:	f023 0201 	bic.w	r2, r3, #1
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	699b      	ldr	r3, [r3, #24]
 810585a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810585c:	693b      	ldr	r3, [r7, #16]
 810585e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8105862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	011b      	lsls	r3, r3, #4
 8105868:	693a      	ldr	r2, [r7, #16]
 810586a:	4313      	orrs	r3, r2
 810586c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810586e:	697b      	ldr	r3, [r7, #20]
 8105870:	f023 030a 	bic.w	r3, r3, #10
 8105874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8105876:	697a      	ldr	r2, [r7, #20]
 8105878:	68bb      	ldr	r3, [r7, #8]
 810587a:	4313      	orrs	r3, r2
 810587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810587e:	68fb      	ldr	r3, [r7, #12]
 8105880:	693a      	ldr	r2, [r7, #16]
 8105882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	697a      	ldr	r2, [r7, #20]
 8105888:	621a      	str	r2, [r3, #32]
}
 810588a:	bf00      	nop
 810588c:	371c      	adds	r7, #28
 810588e:	46bd      	mov	sp, r7
 8105890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105894:	4770      	bx	lr

08105896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8105896:	b480      	push	{r7}
 8105898:	b087      	sub	sp, #28
 810589a:	af00      	add	r7, sp, #0
 810589c:	60f8      	str	r0, [r7, #12]
 810589e:	60b9      	str	r1, [r7, #8]
 81058a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	6a1b      	ldr	r3, [r3, #32]
 81058a6:	f023 0210 	bic.w	r2, r3, #16
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	699b      	ldr	r3, [r3, #24]
 81058b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81058b4:	68fb      	ldr	r3, [r7, #12]
 81058b6:	6a1b      	ldr	r3, [r3, #32]
 81058b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81058ba:	697b      	ldr	r3, [r7, #20]
 81058bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81058c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	031b      	lsls	r3, r3, #12
 81058c6:	697a      	ldr	r2, [r7, #20]
 81058c8:	4313      	orrs	r3, r2
 81058ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81058cc:	693b      	ldr	r3, [r7, #16]
 81058ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81058d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81058d4:	68bb      	ldr	r3, [r7, #8]
 81058d6:	011b      	lsls	r3, r3, #4
 81058d8:	693a      	ldr	r2, [r7, #16]
 81058da:	4313      	orrs	r3, r2
 81058dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81058de:	68fb      	ldr	r3, [r7, #12]
 81058e0:	697a      	ldr	r2, [r7, #20]
 81058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81058e4:	68fb      	ldr	r3, [r7, #12]
 81058e6:	693a      	ldr	r2, [r7, #16]
 81058e8:	621a      	str	r2, [r3, #32]
}
 81058ea:	bf00      	nop
 81058ec:	371c      	adds	r7, #28
 81058ee:	46bd      	mov	sp, r7
 81058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058f4:	4770      	bx	lr

081058f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81058f6:	b480      	push	{r7}
 81058f8:	b085      	sub	sp, #20
 81058fa:	af00      	add	r7, sp, #0
 81058fc:	6078      	str	r0, [r7, #4]
 81058fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	689b      	ldr	r3, [r3, #8]
 8105904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105912:	683a      	ldr	r2, [r7, #0]
 8105914:	68fb      	ldr	r3, [r7, #12]
 8105916:	4313      	orrs	r3, r2
 8105918:	f043 0307 	orr.w	r3, r3, #7
 810591c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	68fa      	ldr	r2, [r7, #12]
 8105922:	609a      	str	r2, [r3, #8]
}
 8105924:	bf00      	nop
 8105926:	3714      	adds	r7, #20
 8105928:	46bd      	mov	sp, r7
 810592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810592e:	4770      	bx	lr

08105930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105930:	b480      	push	{r7}
 8105932:	b087      	sub	sp, #28
 8105934:	af00      	add	r7, sp, #0
 8105936:	60f8      	str	r0, [r7, #12]
 8105938:	60b9      	str	r1, [r7, #8]
 810593a:	607a      	str	r2, [r7, #4]
 810593c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810593e:	68fb      	ldr	r3, [r7, #12]
 8105940:	689b      	ldr	r3, [r3, #8]
 8105942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105944:	697b      	ldr	r3, [r7, #20]
 8105946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810594a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810594c:	683b      	ldr	r3, [r7, #0]
 810594e:	021a      	lsls	r2, r3, #8
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	431a      	orrs	r2, r3
 8105954:	68bb      	ldr	r3, [r7, #8]
 8105956:	4313      	orrs	r3, r2
 8105958:	697a      	ldr	r2, [r7, #20]
 810595a:	4313      	orrs	r3, r2
 810595c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	697a      	ldr	r2, [r7, #20]
 8105962:	609a      	str	r2, [r3, #8]
}
 8105964:	bf00      	nop
 8105966:	371c      	adds	r7, #28
 8105968:	46bd      	mov	sp, r7
 810596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810596e:	4770      	bx	lr

08105970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8105970:	b480      	push	{r7}
 8105972:	b087      	sub	sp, #28
 8105974:	af00      	add	r7, sp, #0
 8105976:	60f8      	str	r0, [r7, #12]
 8105978:	60b9      	str	r1, [r7, #8]
 810597a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810597c:	68bb      	ldr	r3, [r7, #8]
 810597e:	f003 031f 	and.w	r3, r3, #31
 8105982:	2201      	movs	r2, #1
 8105984:	fa02 f303 	lsl.w	r3, r2, r3
 8105988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810598a:	68fb      	ldr	r3, [r7, #12]
 810598c:	6a1a      	ldr	r2, [r3, #32]
 810598e:	697b      	ldr	r3, [r7, #20]
 8105990:	43db      	mvns	r3, r3
 8105992:	401a      	ands	r2, r3
 8105994:	68fb      	ldr	r3, [r7, #12]
 8105996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8105998:	68fb      	ldr	r3, [r7, #12]
 810599a:	6a1a      	ldr	r2, [r3, #32]
 810599c:	68bb      	ldr	r3, [r7, #8]
 810599e:	f003 031f 	and.w	r3, r3, #31
 81059a2:	6879      	ldr	r1, [r7, #4]
 81059a4:	fa01 f303 	lsl.w	r3, r1, r3
 81059a8:	431a      	orrs	r2, r3
 81059aa:	68fb      	ldr	r3, [r7, #12]
 81059ac:	621a      	str	r2, [r3, #32]
}
 81059ae:	bf00      	nop
 81059b0:	371c      	adds	r7, #28
 81059b2:	46bd      	mov	sp, r7
 81059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059b8:	4770      	bx	lr
	...

081059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81059bc:	b480      	push	{r7}
 81059be:	b085      	sub	sp, #20
 81059c0:	af00      	add	r7, sp, #0
 81059c2:	6078      	str	r0, [r7, #4]
 81059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81059c6:	687b      	ldr	r3, [r7, #4]
 81059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81059cc:	2b01      	cmp	r3, #1
 81059ce:	d101      	bne.n	81059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81059d0:	2302      	movs	r3, #2
 81059d2:	e06d      	b.n	8105ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	2201      	movs	r2, #1
 81059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	2202      	movs	r2, #2
 81059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	685b      	ldr	r3, [r3, #4]
 81059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	681b      	ldr	r3, [r3, #0]
 81059f0:	689b      	ldr	r3, [r3, #8]
 81059f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	681b      	ldr	r3, [r3, #0]
 81059f8:	4a30      	ldr	r2, [pc, #192]	; (8105abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81059fa:	4293      	cmp	r3, r2
 81059fc:	d004      	beq.n	8105a08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	681b      	ldr	r3, [r3, #0]
 8105a02:	4a2f      	ldr	r2, [pc, #188]	; (8105ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105a04:	4293      	cmp	r3, r2
 8105a06:	d108      	bne.n	8105a1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105a08:	68fb      	ldr	r3, [r7, #12]
 8105a0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8105a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105a10:	683b      	ldr	r3, [r7, #0]
 8105a12:	685b      	ldr	r3, [r3, #4]
 8105a14:	68fa      	ldr	r2, [r7, #12]
 8105a16:	4313      	orrs	r3, r2
 8105a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8105a1a:	68fb      	ldr	r3, [r7, #12]
 8105a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105a20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105a22:	683b      	ldr	r3, [r7, #0]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	68fa      	ldr	r2, [r7, #12]
 8105a28:	4313      	orrs	r3, r2
 8105a2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	68fa      	ldr	r2, [r7, #12]
 8105a32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	4a20      	ldr	r2, [pc, #128]	; (8105abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105a3a:	4293      	cmp	r3, r2
 8105a3c:	d022      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105a46:	d01d      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	681b      	ldr	r3, [r3, #0]
 8105a4c:	4a1d      	ldr	r2, [pc, #116]	; (8105ac4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8105a4e:	4293      	cmp	r3, r2
 8105a50:	d018      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	4a1c      	ldr	r2, [pc, #112]	; (8105ac8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105a58:	4293      	cmp	r3, r2
 8105a5a:	d013      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	4a1a      	ldr	r2, [pc, #104]	; (8105acc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8105a62:	4293      	cmp	r3, r2
 8105a64:	d00e      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	4a15      	ldr	r2, [pc, #84]	; (8105ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105a6c:	4293      	cmp	r3, r2
 8105a6e:	d009      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	4a16      	ldr	r2, [pc, #88]	; (8105ad0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8105a76:	4293      	cmp	r3, r2
 8105a78:	d004      	beq.n	8105a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	681b      	ldr	r3, [r3, #0]
 8105a7e:	4a15      	ldr	r2, [pc, #84]	; (8105ad4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8105a80:	4293      	cmp	r3, r2
 8105a82:	d10c      	bne.n	8105a9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105a84:	68bb      	ldr	r3, [r7, #8]
 8105a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105a8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105a8c:	683b      	ldr	r3, [r7, #0]
 8105a8e:	689b      	ldr	r3, [r3, #8]
 8105a90:	68ba      	ldr	r2, [r7, #8]
 8105a92:	4313      	orrs	r3, r2
 8105a94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	68ba      	ldr	r2, [r7, #8]
 8105a9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	2201      	movs	r2, #1
 8105aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	2200      	movs	r2, #0
 8105aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8105aae:	2300      	movs	r3, #0
}
 8105ab0:	4618      	mov	r0, r3
 8105ab2:	3714      	adds	r7, #20
 8105ab4:	46bd      	mov	sp, r7
 8105ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aba:	4770      	bx	lr
 8105abc:	40010000 	.word	0x40010000
 8105ac0:	40010400 	.word	0x40010400
 8105ac4:	40000400 	.word	0x40000400
 8105ac8:	40000800 	.word	0x40000800
 8105acc:	40000c00 	.word	0x40000c00
 8105ad0:	40001800 	.word	0x40001800
 8105ad4:	40014000 	.word	0x40014000

08105ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8105ad8:	b480      	push	{r7}
 8105ada:	b083      	sub	sp, #12
 8105adc:	af00      	add	r7, sp, #0
 8105ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8105ae0:	bf00      	nop
 8105ae2:	370c      	adds	r7, #12
 8105ae4:	46bd      	mov	sp, r7
 8105ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aea:	4770      	bx	lr

08105aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8105aec:	b480      	push	{r7}
 8105aee:	b083      	sub	sp, #12
 8105af0:	af00      	add	r7, sp, #0
 8105af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8105af4:	bf00      	nop
 8105af6:	370c      	adds	r7, #12
 8105af8:	46bd      	mov	sp, r7
 8105afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105afe:	4770      	bx	lr

08105b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8105b00:	b480      	push	{r7}
 8105b02:	b083      	sub	sp, #12
 8105b04:	af00      	add	r7, sp, #0
 8105b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8105b08:	bf00      	nop
 8105b0a:	370c      	adds	r7, #12
 8105b0c:	46bd      	mov	sp, r7
 8105b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b12:	4770      	bx	lr

08105b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105b14:	b580      	push	{r7, lr}
 8105b16:	b082      	sub	sp, #8
 8105b18:	af00      	add	r7, sp, #0
 8105b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	2b00      	cmp	r3, #0
 8105b20:	d101      	bne.n	8105b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105b22:	2301      	movs	r3, #1
 8105b24:	e042      	b.n	8105bac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b2c:	2b00      	cmp	r3, #0
 8105b2e:	d106      	bne.n	8105b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	2200      	movs	r2, #0
 8105b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105b38:	6878      	ldr	r0, [r7, #4]
 8105b3a:	f7fc f8f7 	bl	8101d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	2224      	movs	r2, #36	; 0x24
 8105b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	681a      	ldr	r2, [r3, #0]
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f022 0201 	bic.w	r2, r2, #1
 8105b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105b56:	6878      	ldr	r0, [r7, #4]
 8105b58:	f000 f8c2 	bl	8105ce0 <UART_SetConfig>
 8105b5c:	4603      	mov	r3, r0
 8105b5e:	2b01      	cmp	r3, #1
 8105b60:	d101      	bne.n	8105b66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8105b62:	2301      	movs	r3, #1
 8105b64:	e022      	b.n	8105bac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b6a:	2b00      	cmp	r3, #0
 8105b6c:	d002      	beq.n	8105b74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8105b6e:	6878      	ldr	r0, [r7, #4]
 8105b70:	f000 fe1e 	bl	81067b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	685a      	ldr	r2, [r3, #4]
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8105b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	689a      	ldr	r2, [r3, #8]
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8105b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	681b      	ldr	r3, [r3, #0]
 8105b98:	681a      	ldr	r2, [r3, #0]
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	681b      	ldr	r3, [r3, #0]
 8105b9e:	f042 0201 	orr.w	r2, r2, #1
 8105ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105ba4:	6878      	ldr	r0, [r7, #4]
 8105ba6:	f000 fea5 	bl	81068f4 <UART_CheckIdleState>
 8105baa:	4603      	mov	r3, r0
}
 8105bac:	4618      	mov	r0, r3
 8105bae:	3708      	adds	r7, #8
 8105bb0:	46bd      	mov	sp, r7
 8105bb2:	bd80      	pop	{r7, pc}

08105bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105bb4:	b580      	push	{r7, lr}
 8105bb6:	b08a      	sub	sp, #40	; 0x28
 8105bb8:	af02      	add	r7, sp, #8
 8105bba:	60f8      	str	r0, [r7, #12]
 8105bbc:	60b9      	str	r1, [r7, #8]
 8105bbe:	603b      	str	r3, [r7, #0]
 8105bc0:	4613      	mov	r3, r2
 8105bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105bc4:	68fb      	ldr	r3, [r7, #12]
 8105bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105bca:	2b20      	cmp	r3, #32
 8105bcc:	f040 8083 	bne.w	8105cd6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8105bd0:	68bb      	ldr	r3, [r7, #8]
 8105bd2:	2b00      	cmp	r3, #0
 8105bd4:	d002      	beq.n	8105bdc <HAL_UART_Transmit+0x28>
 8105bd6:	88fb      	ldrh	r3, [r7, #6]
 8105bd8:	2b00      	cmp	r3, #0
 8105bda:	d101      	bne.n	8105be0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8105bdc:	2301      	movs	r3, #1
 8105bde:	e07b      	b.n	8105cd8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8105be0:	68fb      	ldr	r3, [r7, #12]
 8105be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105be6:	2b01      	cmp	r3, #1
 8105be8:	d101      	bne.n	8105bee <HAL_UART_Transmit+0x3a>
 8105bea:	2302      	movs	r3, #2
 8105bec:	e074      	b.n	8105cd8 <HAL_UART_Transmit+0x124>
 8105bee:	68fb      	ldr	r3, [r7, #12]
 8105bf0:	2201      	movs	r2, #1
 8105bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105bf6:	68fb      	ldr	r3, [r7, #12]
 8105bf8:	2200      	movs	r2, #0
 8105bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105bfe:	68fb      	ldr	r3, [r7, #12]
 8105c00:	2221      	movs	r2, #33	; 0x21
 8105c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105c06:	f7fc facd 	bl	81021a4 <HAL_GetTick>
 8105c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105c0c:	68fb      	ldr	r3, [r7, #12]
 8105c0e:	88fa      	ldrh	r2, [r7, #6]
 8105c10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105c14:	68fb      	ldr	r3, [r7, #12]
 8105c16:	88fa      	ldrh	r2, [r7, #6]
 8105c18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105c1c:	68fb      	ldr	r3, [r7, #12]
 8105c1e:	689b      	ldr	r3, [r3, #8]
 8105c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105c24:	d108      	bne.n	8105c38 <HAL_UART_Transmit+0x84>
 8105c26:	68fb      	ldr	r3, [r7, #12]
 8105c28:	691b      	ldr	r3, [r3, #16]
 8105c2a:	2b00      	cmp	r3, #0
 8105c2c:	d104      	bne.n	8105c38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8105c2e:	2300      	movs	r3, #0
 8105c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8105c32:	68bb      	ldr	r3, [r7, #8]
 8105c34:	61bb      	str	r3, [r7, #24]
 8105c36:	e003      	b.n	8105c40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8105c38:	68bb      	ldr	r3, [r7, #8]
 8105c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105c3c:	2300      	movs	r3, #0
 8105c3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105c40:	68fb      	ldr	r3, [r7, #12]
 8105c42:	2200      	movs	r2, #0
 8105c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8105c48:	e02c      	b.n	8105ca4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8105c4a:	683b      	ldr	r3, [r7, #0]
 8105c4c:	9300      	str	r3, [sp, #0]
 8105c4e:	697b      	ldr	r3, [r7, #20]
 8105c50:	2200      	movs	r2, #0
 8105c52:	2180      	movs	r1, #128	; 0x80
 8105c54:	68f8      	ldr	r0, [r7, #12]
 8105c56:	f000 fe98 	bl	810698a <UART_WaitOnFlagUntilTimeout>
 8105c5a:	4603      	mov	r3, r0
 8105c5c:	2b00      	cmp	r3, #0
 8105c5e:	d001      	beq.n	8105c64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8105c60:	2303      	movs	r3, #3
 8105c62:	e039      	b.n	8105cd8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8105c64:	69fb      	ldr	r3, [r7, #28]
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d10b      	bne.n	8105c82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105c6a:	69bb      	ldr	r3, [r7, #24]
 8105c6c:	881b      	ldrh	r3, [r3, #0]
 8105c6e:	461a      	mov	r2, r3
 8105c70:	68fb      	ldr	r3, [r7, #12]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105c78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8105c7a:	69bb      	ldr	r3, [r7, #24]
 8105c7c:	3302      	adds	r3, #2
 8105c7e:	61bb      	str	r3, [r7, #24]
 8105c80:	e007      	b.n	8105c92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8105c82:	69fb      	ldr	r3, [r7, #28]
 8105c84:	781a      	ldrb	r2, [r3, #0]
 8105c86:	68fb      	ldr	r3, [r7, #12]
 8105c88:	681b      	ldr	r3, [r3, #0]
 8105c8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8105c8c:	69fb      	ldr	r3, [r7, #28]
 8105c8e:	3301      	adds	r3, #1
 8105c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8105c92:	68fb      	ldr	r3, [r7, #12]
 8105c94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105c98:	b29b      	uxth	r3, r3
 8105c9a:	3b01      	subs	r3, #1
 8105c9c:	b29a      	uxth	r2, r3
 8105c9e:	68fb      	ldr	r3, [r7, #12]
 8105ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8105ca4:	68fb      	ldr	r3, [r7, #12]
 8105ca6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105caa:	b29b      	uxth	r3, r3
 8105cac:	2b00      	cmp	r3, #0
 8105cae:	d1cc      	bne.n	8105c4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8105cb0:	683b      	ldr	r3, [r7, #0]
 8105cb2:	9300      	str	r3, [sp, #0]
 8105cb4:	697b      	ldr	r3, [r7, #20]
 8105cb6:	2200      	movs	r2, #0
 8105cb8:	2140      	movs	r1, #64	; 0x40
 8105cba:	68f8      	ldr	r0, [r7, #12]
 8105cbc:	f000 fe65 	bl	810698a <UART_WaitOnFlagUntilTimeout>
 8105cc0:	4603      	mov	r3, r0
 8105cc2:	2b00      	cmp	r3, #0
 8105cc4:	d001      	beq.n	8105cca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8105cc6:	2303      	movs	r3, #3
 8105cc8:	e006      	b.n	8105cd8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8105cca:	68fb      	ldr	r3, [r7, #12]
 8105ccc:	2220      	movs	r2, #32
 8105cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8105cd2:	2300      	movs	r3, #0
 8105cd4:	e000      	b.n	8105cd8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8105cd6:	2302      	movs	r3, #2
  }
}
 8105cd8:	4618      	mov	r0, r3
 8105cda:	3720      	adds	r7, #32
 8105cdc:	46bd      	mov	sp, r7
 8105cde:	bd80      	pop	{r7, pc}

08105ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105ce4:	b092      	sub	sp, #72	; 0x48
 8105ce6:	af00      	add	r7, sp, #0
 8105ce8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105cea:	2300      	movs	r3, #0
 8105cec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105cf0:	697b      	ldr	r3, [r7, #20]
 8105cf2:	689a      	ldr	r2, [r3, #8]
 8105cf4:	697b      	ldr	r3, [r7, #20]
 8105cf6:	691b      	ldr	r3, [r3, #16]
 8105cf8:	431a      	orrs	r2, r3
 8105cfa:	697b      	ldr	r3, [r7, #20]
 8105cfc:	695b      	ldr	r3, [r3, #20]
 8105cfe:	431a      	orrs	r2, r3
 8105d00:	697b      	ldr	r3, [r7, #20]
 8105d02:	69db      	ldr	r3, [r3, #28]
 8105d04:	4313      	orrs	r3, r2
 8105d06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105d08:	697b      	ldr	r3, [r7, #20]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	681a      	ldr	r2, [r3, #0]
 8105d0e:	4bbd      	ldr	r3, [pc, #756]	; (8106004 <UART_SetConfig+0x324>)
 8105d10:	4013      	ands	r3, r2
 8105d12:	697a      	ldr	r2, [r7, #20]
 8105d14:	6812      	ldr	r2, [r2, #0]
 8105d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105d18:	430b      	orrs	r3, r1
 8105d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105d1c:	697b      	ldr	r3, [r7, #20]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	685b      	ldr	r3, [r3, #4]
 8105d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105d26:	697b      	ldr	r3, [r7, #20]
 8105d28:	68da      	ldr	r2, [r3, #12]
 8105d2a:	697b      	ldr	r3, [r7, #20]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	430a      	orrs	r2, r1
 8105d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105d32:	697b      	ldr	r3, [r7, #20]
 8105d34:	699b      	ldr	r3, [r3, #24]
 8105d36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105d38:	697b      	ldr	r3, [r7, #20]
 8105d3a:	681b      	ldr	r3, [r3, #0]
 8105d3c:	4ab2      	ldr	r2, [pc, #712]	; (8106008 <UART_SetConfig+0x328>)
 8105d3e:	4293      	cmp	r3, r2
 8105d40:	d004      	beq.n	8105d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105d42:	697b      	ldr	r3, [r7, #20]
 8105d44:	6a1b      	ldr	r3, [r3, #32]
 8105d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105d48:	4313      	orrs	r3, r2
 8105d4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105d4c:	697b      	ldr	r3, [r7, #20]
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	689b      	ldr	r3, [r3, #8]
 8105d52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105d56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8105d5a:	697a      	ldr	r2, [r7, #20]
 8105d5c:	6812      	ldr	r2, [r2, #0]
 8105d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105d60:	430b      	orrs	r3, r1
 8105d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105d64:	697b      	ldr	r3, [r7, #20]
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d6a:	f023 010f 	bic.w	r1, r3, #15
 8105d6e:	697b      	ldr	r3, [r7, #20]
 8105d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105d72:	697b      	ldr	r3, [r7, #20]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	430a      	orrs	r2, r1
 8105d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8105d7a:	697b      	ldr	r3, [r7, #20]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	4aa3      	ldr	r2, [pc, #652]	; (810600c <UART_SetConfig+0x32c>)
 8105d80:	4293      	cmp	r3, r2
 8105d82:	d177      	bne.n	8105e74 <UART_SetConfig+0x194>
 8105d84:	4ba2      	ldr	r3, [pc, #648]	; (8106010 <UART_SetConfig+0x330>)
 8105d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105d8c:	2b28      	cmp	r3, #40	; 0x28
 8105d8e:	d86d      	bhi.n	8105e6c <UART_SetConfig+0x18c>
 8105d90:	a201      	add	r2, pc, #4	; (adr r2, 8105d98 <UART_SetConfig+0xb8>)
 8105d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d96:	bf00      	nop
 8105d98:	08105e3d 	.word	0x08105e3d
 8105d9c:	08105e6d 	.word	0x08105e6d
 8105da0:	08105e6d 	.word	0x08105e6d
 8105da4:	08105e6d 	.word	0x08105e6d
 8105da8:	08105e6d 	.word	0x08105e6d
 8105dac:	08105e6d 	.word	0x08105e6d
 8105db0:	08105e6d 	.word	0x08105e6d
 8105db4:	08105e6d 	.word	0x08105e6d
 8105db8:	08105e45 	.word	0x08105e45
 8105dbc:	08105e6d 	.word	0x08105e6d
 8105dc0:	08105e6d 	.word	0x08105e6d
 8105dc4:	08105e6d 	.word	0x08105e6d
 8105dc8:	08105e6d 	.word	0x08105e6d
 8105dcc:	08105e6d 	.word	0x08105e6d
 8105dd0:	08105e6d 	.word	0x08105e6d
 8105dd4:	08105e6d 	.word	0x08105e6d
 8105dd8:	08105e4d 	.word	0x08105e4d
 8105ddc:	08105e6d 	.word	0x08105e6d
 8105de0:	08105e6d 	.word	0x08105e6d
 8105de4:	08105e6d 	.word	0x08105e6d
 8105de8:	08105e6d 	.word	0x08105e6d
 8105dec:	08105e6d 	.word	0x08105e6d
 8105df0:	08105e6d 	.word	0x08105e6d
 8105df4:	08105e6d 	.word	0x08105e6d
 8105df8:	08105e55 	.word	0x08105e55
 8105dfc:	08105e6d 	.word	0x08105e6d
 8105e00:	08105e6d 	.word	0x08105e6d
 8105e04:	08105e6d 	.word	0x08105e6d
 8105e08:	08105e6d 	.word	0x08105e6d
 8105e0c:	08105e6d 	.word	0x08105e6d
 8105e10:	08105e6d 	.word	0x08105e6d
 8105e14:	08105e6d 	.word	0x08105e6d
 8105e18:	08105e5d 	.word	0x08105e5d
 8105e1c:	08105e6d 	.word	0x08105e6d
 8105e20:	08105e6d 	.word	0x08105e6d
 8105e24:	08105e6d 	.word	0x08105e6d
 8105e28:	08105e6d 	.word	0x08105e6d
 8105e2c:	08105e6d 	.word	0x08105e6d
 8105e30:	08105e6d 	.word	0x08105e6d
 8105e34:	08105e6d 	.word	0x08105e6d
 8105e38:	08105e65 	.word	0x08105e65
 8105e3c:	2301      	movs	r3, #1
 8105e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e42:	e220      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e44:	2304      	movs	r3, #4
 8105e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e4a:	e21c      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e4c:	2308      	movs	r3, #8
 8105e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e52:	e218      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e54:	2310      	movs	r3, #16
 8105e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e5a:	e214      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e5c:	2320      	movs	r3, #32
 8105e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e62:	e210      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e64:	2340      	movs	r3, #64	; 0x40
 8105e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e6a:	e20c      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e6c:	2380      	movs	r3, #128	; 0x80
 8105e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e72:	e208      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105e74:	697b      	ldr	r3, [r7, #20]
 8105e76:	681b      	ldr	r3, [r3, #0]
 8105e78:	4a66      	ldr	r2, [pc, #408]	; (8106014 <UART_SetConfig+0x334>)
 8105e7a:	4293      	cmp	r3, r2
 8105e7c:	d130      	bne.n	8105ee0 <UART_SetConfig+0x200>
 8105e7e:	4b64      	ldr	r3, [pc, #400]	; (8106010 <UART_SetConfig+0x330>)
 8105e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e82:	f003 0307 	and.w	r3, r3, #7
 8105e86:	2b05      	cmp	r3, #5
 8105e88:	d826      	bhi.n	8105ed8 <UART_SetConfig+0x1f8>
 8105e8a:	a201      	add	r2, pc, #4	; (adr r2, 8105e90 <UART_SetConfig+0x1b0>)
 8105e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e90:	08105ea9 	.word	0x08105ea9
 8105e94:	08105eb1 	.word	0x08105eb1
 8105e98:	08105eb9 	.word	0x08105eb9
 8105e9c:	08105ec1 	.word	0x08105ec1
 8105ea0:	08105ec9 	.word	0x08105ec9
 8105ea4:	08105ed1 	.word	0x08105ed1
 8105ea8:	2300      	movs	r3, #0
 8105eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105eae:	e1ea      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105eb0:	2304      	movs	r3, #4
 8105eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105eb6:	e1e6      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105eb8:	2308      	movs	r3, #8
 8105eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ebe:	e1e2      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ec0:	2310      	movs	r3, #16
 8105ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ec6:	e1de      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ec8:	2320      	movs	r3, #32
 8105eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ece:	e1da      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ed0:	2340      	movs	r3, #64	; 0x40
 8105ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ed6:	e1d6      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ed8:	2380      	movs	r3, #128	; 0x80
 8105eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ede:	e1d2      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ee0:	697b      	ldr	r3, [r7, #20]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a4c      	ldr	r2, [pc, #304]	; (8106018 <UART_SetConfig+0x338>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d130      	bne.n	8105f4c <UART_SetConfig+0x26c>
 8105eea:	4b49      	ldr	r3, [pc, #292]	; (8106010 <UART_SetConfig+0x330>)
 8105eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105eee:	f003 0307 	and.w	r3, r3, #7
 8105ef2:	2b05      	cmp	r3, #5
 8105ef4:	d826      	bhi.n	8105f44 <UART_SetConfig+0x264>
 8105ef6:	a201      	add	r2, pc, #4	; (adr r2, 8105efc <UART_SetConfig+0x21c>)
 8105ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105efc:	08105f15 	.word	0x08105f15
 8105f00:	08105f1d 	.word	0x08105f1d
 8105f04:	08105f25 	.word	0x08105f25
 8105f08:	08105f2d 	.word	0x08105f2d
 8105f0c:	08105f35 	.word	0x08105f35
 8105f10:	08105f3d 	.word	0x08105f3d
 8105f14:	2300      	movs	r3, #0
 8105f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f1a:	e1b4      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f1c:	2304      	movs	r3, #4
 8105f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f22:	e1b0      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f24:	2308      	movs	r3, #8
 8105f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f2a:	e1ac      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f2c:	2310      	movs	r3, #16
 8105f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f32:	e1a8      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f34:	2320      	movs	r3, #32
 8105f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f3a:	e1a4      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f3c:	2340      	movs	r3, #64	; 0x40
 8105f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f42:	e1a0      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f44:	2380      	movs	r3, #128	; 0x80
 8105f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f4a:	e19c      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f4c:	697b      	ldr	r3, [r7, #20]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	4a32      	ldr	r2, [pc, #200]	; (810601c <UART_SetConfig+0x33c>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d130      	bne.n	8105fb8 <UART_SetConfig+0x2d8>
 8105f56:	4b2e      	ldr	r3, [pc, #184]	; (8106010 <UART_SetConfig+0x330>)
 8105f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f5a:	f003 0307 	and.w	r3, r3, #7
 8105f5e:	2b05      	cmp	r3, #5
 8105f60:	d826      	bhi.n	8105fb0 <UART_SetConfig+0x2d0>
 8105f62:	a201      	add	r2, pc, #4	; (adr r2, 8105f68 <UART_SetConfig+0x288>)
 8105f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f68:	08105f81 	.word	0x08105f81
 8105f6c:	08105f89 	.word	0x08105f89
 8105f70:	08105f91 	.word	0x08105f91
 8105f74:	08105f99 	.word	0x08105f99
 8105f78:	08105fa1 	.word	0x08105fa1
 8105f7c:	08105fa9 	.word	0x08105fa9
 8105f80:	2300      	movs	r3, #0
 8105f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f86:	e17e      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f88:	2304      	movs	r3, #4
 8105f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f8e:	e17a      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f90:	2308      	movs	r3, #8
 8105f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f96:	e176      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105f98:	2310      	movs	r3, #16
 8105f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f9e:	e172      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105fa0:	2320      	movs	r3, #32
 8105fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fa6:	e16e      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105fa8:	2340      	movs	r3, #64	; 0x40
 8105faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fae:	e16a      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105fb0:	2380      	movs	r3, #128	; 0x80
 8105fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fb6:	e166      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105fb8:	697b      	ldr	r3, [r7, #20]
 8105fba:	681b      	ldr	r3, [r3, #0]
 8105fbc:	4a18      	ldr	r2, [pc, #96]	; (8106020 <UART_SetConfig+0x340>)
 8105fbe:	4293      	cmp	r3, r2
 8105fc0:	d140      	bne.n	8106044 <UART_SetConfig+0x364>
 8105fc2:	4b13      	ldr	r3, [pc, #76]	; (8106010 <UART_SetConfig+0x330>)
 8105fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105fc6:	f003 0307 	and.w	r3, r3, #7
 8105fca:	2b05      	cmp	r3, #5
 8105fcc:	d836      	bhi.n	810603c <UART_SetConfig+0x35c>
 8105fce:	a201      	add	r2, pc, #4	; (adr r2, 8105fd4 <UART_SetConfig+0x2f4>)
 8105fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fd4:	08105fed 	.word	0x08105fed
 8105fd8:	08105ff5 	.word	0x08105ff5
 8105fdc:	08105ffd 	.word	0x08105ffd
 8105fe0:	08106025 	.word	0x08106025
 8105fe4:	0810602d 	.word	0x0810602d
 8105fe8:	08106035 	.word	0x08106035
 8105fec:	2300      	movs	r3, #0
 8105fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ff2:	e148      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ff4:	2304      	movs	r3, #4
 8105ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ffa:	e144      	b.n	8106286 <UART_SetConfig+0x5a6>
 8105ffc:	2308      	movs	r3, #8
 8105ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106002:	e140      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106004:	cfff69f3 	.word	0xcfff69f3
 8106008:	58000c00 	.word	0x58000c00
 810600c:	40011000 	.word	0x40011000
 8106010:	58024400 	.word	0x58024400
 8106014:	40004400 	.word	0x40004400
 8106018:	40004800 	.word	0x40004800
 810601c:	40004c00 	.word	0x40004c00
 8106020:	40005000 	.word	0x40005000
 8106024:	2310      	movs	r3, #16
 8106026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810602a:	e12c      	b.n	8106286 <UART_SetConfig+0x5a6>
 810602c:	2320      	movs	r3, #32
 810602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106032:	e128      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106034:	2340      	movs	r3, #64	; 0x40
 8106036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810603a:	e124      	b.n	8106286 <UART_SetConfig+0x5a6>
 810603c:	2380      	movs	r3, #128	; 0x80
 810603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106042:	e120      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106044:	697b      	ldr	r3, [r7, #20]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	4acb      	ldr	r2, [pc, #812]	; (8106378 <UART_SetConfig+0x698>)
 810604a:	4293      	cmp	r3, r2
 810604c:	d176      	bne.n	810613c <UART_SetConfig+0x45c>
 810604e:	4bcb      	ldr	r3, [pc, #812]	; (810637c <UART_SetConfig+0x69c>)
 8106050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106056:	2b28      	cmp	r3, #40	; 0x28
 8106058:	d86c      	bhi.n	8106134 <UART_SetConfig+0x454>
 810605a:	a201      	add	r2, pc, #4	; (adr r2, 8106060 <UART_SetConfig+0x380>)
 810605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106060:	08106105 	.word	0x08106105
 8106064:	08106135 	.word	0x08106135
 8106068:	08106135 	.word	0x08106135
 810606c:	08106135 	.word	0x08106135
 8106070:	08106135 	.word	0x08106135
 8106074:	08106135 	.word	0x08106135
 8106078:	08106135 	.word	0x08106135
 810607c:	08106135 	.word	0x08106135
 8106080:	0810610d 	.word	0x0810610d
 8106084:	08106135 	.word	0x08106135
 8106088:	08106135 	.word	0x08106135
 810608c:	08106135 	.word	0x08106135
 8106090:	08106135 	.word	0x08106135
 8106094:	08106135 	.word	0x08106135
 8106098:	08106135 	.word	0x08106135
 810609c:	08106135 	.word	0x08106135
 81060a0:	08106115 	.word	0x08106115
 81060a4:	08106135 	.word	0x08106135
 81060a8:	08106135 	.word	0x08106135
 81060ac:	08106135 	.word	0x08106135
 81060b0:	08106135 	.word	0x08106135
 81060b4:	08106135 	.word	0x08106135
 81060b8:	08106135 	.word	0x08106135
 81060bc:	08106135 	.word	0x08106135
 81060c0:	0810611d 	.word	0x0810611d
 81060c4:	08106135 	.word	0x08106135
 81060c8:	08106135 	.word	0x08106135
 81060cc:	08106135 	.word	0x08106135
 81060d0:	08106135 	.word	0x08106135
 81060d4:	08106135 	.word	0x08106135
 81060d8:	08106135 	.word	0x08106135
 81060dc:	08106135 	.word	0x08106135
 81060e0:	08106125 	.word	0x08106125
 81060e4:	08106135 	.word	0x08106135
 81060e8:	08106135 	.word	0x08106135
 81060ec:	08106135 	.word	0x08106135
 81060f0:	08106135 	.word	0x08106135
 81060f4:	08106135 	.word	0x08106135
 81060f8:	08106135 	.word	0x08106135
 81060fc:	08106135 	.word	0x08106135
 8106100:	0810612d 	.word	0x0810612d
 8106104:	2301      	movs	r3, #1
 8106106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810610a:	e0bc      	b.n	8106286 <UART_SetConfig+0x5a6>
 810610c:	2304      	movs	r3, #4
 810610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106112:	e0b8      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106114:	2308      	movs	r3, #8
 8106116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810611a:	e0b4      	b.n	8106286 <UART_SetConfig+0x5a6>
 810611c:	2310      	movs	r3, #16
 810611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106122:	e0b0      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106124:	2320      	movs	r3, #32
 8106126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810612a:	e0ac      	b.n	8106286 <UART_SetConfig+0x5a6>
 810612c:	2340      	movs	r3, #64	; 0x40
 810612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106132:	e0a8      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106134:	2380      	movs	r3, #128	; 0x80
 8106136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810613a:	e0a4      	b.n	8106286 <UART_SetConfig+0x5a6>
 810613c:	697b      	ldr	r3, [r7, #20]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	4a8f      	ldr	r2, [pc, #572]	; (8106380 <UART_SetConfig+0x6a0>)
 8106142:	4293      	cmp	r3, r2
 8106144:	d130      	bne.n	81061a8 <UART_SetConfig+0x4c8>
 8106146:	4b8d      	ldr	r3, [pc, #564]	; (810637c <UART_SetConfig+0x69c>)
 8106148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810614a:	f003 0307 	and.w	r3, r3, #7
 810614e:	2b05      	cmp	r3, #5
 8106150:	d826      	bhi.n	81061a0 <UART_SetConfig+0x4c0>
 8106152:	a201      	add	r2, pc, #4	; (adr r2, 8106158 <UART_SetConfig+0x478>)
 8106154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106158:	08106171 	.word	0x08106171
 810615c:	08106179 	.word	0x08106179
 8106160:	08106181 	.word	0x08106181
 8106164:	08106189 	.word	0x08106189
 8106168:	08106191 	.word	0x08106191
 810616c:	08106199 	.word	0x08106199
 8106170:	2300      	movs	r3, #0
 8106172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106176:	e086      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106178:	2304      	movs	r3, #4
 810617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810617e:	e082      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106180:	2308      	movs	r3, #8
 8106182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106186:	e07e      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106188:	2310      	movs	r3, #16
 810618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810618e:	e07a      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106190:	2320      	movs	r3, #32
 8106192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106196:	e076      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106198:	2340      	movs	r3, #64	; 0x40
 810619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810619e:	e072      	b.n	8106286 <UART_SetConfig+0x5a6>
 81061a0:	2380      	movs	r3, #128	; 0x80
 81061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061a6:	e06e      	b.n	8106286 <UART_SetConfig+0x5a6>
 81061a8:	697b      	ldr	r3, [r7, #20]
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	4a75      	ldr	r2, [pc, #468]	; (8106384 <UART_SetConfig+0x6a4>)
 81061ae:	4293      	cmp	r3, r2
 81061b0:	d130      	bne.n	8106214 <UART_SetConfig+0x534>
 81061b2:	4b72      	ldr	r3, [pc, #456]	; (810637c <UART_SetConfig+0x69c>)
 81061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81061b6:	f003 0307 	and.w	r3, r3, #7
 81061ba:	2b05      	cmp	r3, #5
 81061bc:	d826      	bhi.n	810620c <UART_SetConfig+0x52c>
 81061be:	a201      	add	r2, pc, #4	; (adr r2, 81061c4 <UART_SetConfig+0x4e4>)
 81061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061c4:	081061dd 	.word	0x081061dd
 81061c8:	081061e5 	.word	0x081061e5
 81061cc:	081061ed 	.word	0x081061ed
 81061d0:	081061f5 	.word	0x081061f5
 81061d4:	081061fd 	.word	0x081061fd
 81061d8:	08106205 	.word	0x08106205
 81061dc:	2300      	movs	r3, #0
 81061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061e2:	e050      	b.n	8106286 <UART_SetConfig+0x5a6>
 81061e4:	2304      	movs	r3, #4
 81061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061ea:	e04c      	b.n	8106286 <UART_SetConfig+0x5a6>
 81061ec:	2308      	movs	r3, #8
 81061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061f2:	e048      	b.n	8106286 <UART_SetConfig+0x5a6>
 81061f4:	2310      	movs	r3, #16
 81061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061fa:	e044      	b.n	8106286 <UART_SetConfig+0x5a6>
 81061fc:	2320      	movs	r3, #32
 81061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106202:	e040      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106204:	2340      	movs	r3, #64	; 0x40
 8106206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810620a:	e03c      	b.n	8106286 <UART_SetConfig+0x5a6>
 810620c:	2380      	movs	r3, #128	; 0x80
 810620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106212:	e038      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106214:	697b      	ldr	r3, [r7, #20]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	4a5b      	ldr	r2, [pc, #364]	; (8106388 <UART_SetConfig+0x6a8>)
 810621a:	4293      	cmp	r3, r2
 810621c:	d130      	bne.n	8106280 <UART_SetConfig+0x5a0>
 810621e:	4b57      	ldr	r3, [pc, #348]	; (810637c <UART_SetConfig+0x69c>)
 8106220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106222:	f003 0307 	and.w	r3, r3, #7
 8106226:	2b05      	cmp	r3, #5
 8106228:	d826      	bhi.n	8106278 <UART_SetConfig+0x598>
 810622a:	a201      	add	r2, pc, #4	; (adr r2, 8106230 <UART_SetConfig+0x550>)
 810622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106230:	08106249 	.word	0x08106249
 8106234:	08106251 	.word	0x08106251
 8106238:	08106259 	.word	0x08106259
 810623c:	08106261 	.word	0x08106261
 8106240:	08106269 	.word	0x08106269
 8106244:	08106271 	.word	0x08106271
 8106248:	2302      	movs	r3, #2
 810624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810624e:	e01a      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106250:	2304      	movs	r3, #4
 8106252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106256:	e016      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106258:	2308      	movs	r3, #8
 810625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810625e:	e012      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106260:	2310      	movs	r3, #16
 8106262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106266:	e00e      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106268:	2320      	movs	r3, #32
 810626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810626e:	e00a      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106270:	2340      	movs	r3, #64	; 0x40
 8106272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106276:	e006      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106278:	2380      	movs	r3, #128	; 0x80
 810627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810627e:	e002      	b.n	8106286 <UART_SetConfig+0x5a6>
 8106280:	2380      	movs	r3, #128	; 0x80
 8106282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8106286:	697b      	ldr	r3, [r7, #20]
 8106288:	681b      	ldr	r3, [r3, #0]
 810628a:	4a3f      	ldr	r2, [pc, #252]	; (8106388 <UART_SetConfig+0x6a8>)
 810628c:	4293      	cmp	r3, r2
 810628e:	f040 80f8 	bne.w	8106482 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106292:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8106296:	2b20      	cmp	r3, #32
 8106298:	dc46      	bgt.n	8106328 <UART_SetConfig+0x648>
 810629a:	2b02      	cmp	r3, #2
 810629c:	f2c0 8082 	blt.w	81063a4 <UART_SetConfig+0x6c4>
 81062a0:	3b02      	subs	r3, #2
 81062a2:	2b1e      	cmp	r3, #30
 81062a4:	d87e      	bhi.n	81063a4 <UART_SetConfig+0x6c4>
 81062a6:	a201      	add	r2, pc, #4	; (adr r2, 81062ac <UART_SetConfig+0x5cc>)
 81062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062ac:	0810632f 	.word	0x0810632f
 81062b0:	081063a5 	.word	0x081063a5
 81062b4:	08106337 	.word	0x08106337
 81062b8:	081063a5 	.word	0x081063a5
 81062bc:	081063a5 	.word	0x081063a5
 81062c0:	081063a5 	.word	0x081063a5
 81062c4:	08106347 	.word	0x08106347
 81062c8:	081063a5 	.word	0x081063a5
 81062cc:	081063a5 	.word	0x081063a5
 81062d0:	081063a5 	.word	0x081063a5
 81062d4:	081063a5 	.word	0x081063a5
 81062d8:	081063a5 	.word	0x081063a5
 81062dc:	081063a5 	.word	0x081063a5
 81062e0:	081063a5 	.word	0x081063a5
 81062e4:	08106357 	.word	0x08106357
 81062e8:	081063a5 	.word	0x081063a5
 81062ec:	081063a5 	.word	0x081063a5
 81062f0:	081063a5 	.word	0x081063a5
 81062f4:	081063a5 	.word	0x081063a5
 81062f8:	081063a5 	.word	0x081063a5
 81062fc:	081063a5 	.word	0x081063a5
 8106300:	081063a5 	.word	0x081063a5
 8106304:	081063a5 	.word	0x081063a5
 8106308:	081063a5 	.word	0x081063a5
 810630c:	081063a5 	.word	0x081063a5
 8106310:	081063a5 	.word	0x081063a5
 8106314:	081063a5 	.word	0x081063a5
 8106318:	081063a5 	.word	0x081063a5
 810631c:	081063a5 	.word	0x081063a5
 8106320:	081063a5 	.word	0x081063a5
 8106324:	08106397 	.word	0x08106397
 8106328:	2b40      	cmp	r3, #64	; 0x40
 810632a:	d037      	beq.n	810639c <UART_SetConfig+0x6bc>
 810632c:	e03a      	b.n	81063a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810632e:	f7fd fc29 	bl	8103b84 <HAL_RCCEx_GetD3PCLK1Freq>
 8106332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106334:	e03c      	b.n	81063b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810633a:	4618      	mov	r0, r3
 810633c:	f7fd fc38 	bl	8103bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106344:	e034      	b.n	81063b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106346:	f107 0318 	add.w	r3, r7, #24
 810634a:	4618      	mov	r0, r3
 810634c:	f7fd fd84 	bl	8103e58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106350:	69fb      	ldr	r3, [r7, #28]
 8106352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106354:	e02c      	b.n	81063b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106356:	4b09      	ldr	r3, [pc, #36]	; (810637c <UART_SetConfig+0x69c>)
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	f003 0320 	and.w	r3, r3, #32
 810635e:	2b00      	cmp	r3, #0
 8106360:	d016      	beq.n	8106390 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106362:	4b06      	ldr	r3, [pc, #24]	; (810637c <UART_SetConfig+0x69c>)
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	08db      	lsrs	r3, r3, #3
 8106368:	f003 0303 	and.w	r3, r3, #3
 810636c:	4a07      	ldr	r2, [pc, #28]	; (810638c <UART_SetConfig+0x6ac>)
 810636e:	fa22 f303 	lsr.w	r3, r2, r3
 8106372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106374:	e01c      	b.n	81063b0 <UART_SetConfig+0x6d0>
 8106376:	bf00      	nop
 8106378:	40011400 	.word	0x40011400
 810637c:	58024400 	.word	0x58024400
 8106380:	40007800 	.word	0x40007800
 8106384:	40007c00 	.word	0x40007c00
 8106388:	58000c00 	.word	0x58000c00
 810638c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8106390:	4b9d      	ldr	r3, [pc, #628]	; (8106608 <UART_SetConfig+0x928>)
 8106392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106394:	e00c      	b.n	81063b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106396:	4b9d      	ldr	r3, [pc, #628]	; (810660c <UART_SetConfig+0x92c>)
 8106398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810639a:	e009      	b.n	81063b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810639c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81063a2:	e005      	b.n	81063b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81063a4:	2300      	movs	r3, #0
 81063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81063a8:	2301      	movs	r3, #1
 81063aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81063ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81063b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81063b2:	2b00      	cmp	r3, #0
 81063b4:	f000 81de 	beq.w	8106774 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81063b8:	697b      	ldr	r3, [r7, #20]
 81063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81063bc:	4a94      	ldr	r2, [pc, #592]	; (8106610 <UART_SetConfig+0x930>)
 81063be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81063c2:	461a      	mov	r2, r3
 81063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81063c6:	fbb3 f3f2 	udiv	r3, r3, r2
 81063ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81063cc:	697b      	ldr	r3, [r7, #20]
 81063ce:	685a      	ldr	r2, [r3, #4]
 81063d0:	4613      	mov	r3, r2
 81063d2:	005b      	lsls	r3, r3, #1
 81063d4:	4413      	add	r3, r2
 81063d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81063d8:	429a      	cmp	r2, r3
 81063da:	d305      	bcc.n	81063e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81063dc:	697b      	ldr	r3, [r7, #20]
 81063de:	685b      	ldr	r3, [r3, #4]
 81063e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81063e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81063e4:	429a      	cmp	r2, r3
 81063e6:	d903      	bls.n	81063f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81063e8:	2301      	movs	r3, #1
 81063ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81063ee:	e1c1      	b.n	8106774 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81063f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81063f2:	2200      	movs	r2, #0
 81063f4:	60bb      	str	r3, [r7, #8]
 81063f6:	60fa      	str	r2, [r7, #12]
 81063f8:	697b      	ldr	r3, [r7, #20]
 81063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81063fc:	4a84      	ldr	r2, [pc, #528]	; (8106610 <UART_SetConfig+0x930>)
 81063fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106402:	b29b      	uxth	r3, r3
 8106404:	2200      	movs	r2, #0
 8106406:	603b      	str	r3, [r7, #0]
 8106408:	607a      	str	r2, [r7, #4]
 810640a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810640e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8106412:	f7fa fcc1 	bl	8100d98 <__aeabi_uldivmod>
 8106416:	4602      	mov	r2, r0
 8106418:	460b      	mov	r3, r1
 810641a:	4610      	mov	r0, r2
 810641c:	4619      	mov	r1, r3
 810641e:	f04f 0200 	mov.w	r2, #0
 8106422:	f04f 0300 	mov.w	r3, #0
 8106426:	020b      	lsls	r3, r1, #8
 8106428:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810642c:	0202      	lsls	r2, r0, #8
 810642e:	6979      	ldr	r1, [r7, #20]
 8106430:	6849      	ldr	r1, [r1, #4]
 8106432:	0849      	lsrs	r1, r1, #1
 8106434:	2000      	movs	r0, #0
 8106436:	460c      	mov	r4, r1
 8106438:	4605      	mov	r5, r0
 810643a:	eb12 0804 	adds.w	r8, r2, r4
 810643e:	eb43 0905 	adc.w	r9, r3, r5
 8106442:	697b      	ldr	r3, [r7, #20]
 8106444:	685b      	ldr	r3, [r3, #4]
 8106446:	2200      	movs	r2, #0
 8106448:	469a      	mov	sl, r3
 810644a:	4693      	mov	fp, r2
 810644c:	4652      	mov	r2, sl
 810644e:	465b      	mov	r3, fp
 8106450:	4640      	mov	r0, r8
 8106452:	4649      	mov	r1, r9
 8106454:	f7fa fca0 	bl	8100d98 <__aeabi_uldivmod>
 8106458:	4602      	mov	r2, r0
 810645a:	460b      	mov	r3, r1
 810645c:	4613      	mov	r3, r2
 810645e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106466:	d308      	bcc.n	810647a <UART_SetConfig+0x79a>
 8106468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810646a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810646e:	d204      	bcs.n	810647a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8106470:	697b      	ldr	r3, [r7, #20]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106476:	60da      	str	r2, [r3, #12]
 8106478:	e17c      	b.n	8106774 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810647a:	2301      	movs	r3, #1
 810647c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8106480:	e178      	b.n	8106774 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106482:	697b      	ldr	r3, [r7, #20]
 8106484:	69db      	ldr	r3, [r3, #28]
 8106486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810648a:	f040 80c5 	bne.w	8106618 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810648e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8106492:	2b20      	cmp	r3, #32
 8106494:	dc48      	bgt.n	8106528 <UART_SetConfig+0x848>
 8106496:	2b00      	cmp	r3, #0
 8106498:	db7b      	blt.n	8106592 <UART_SetConfig+0x8b2>
 810649a:	2b20      	cmp	r3, #32
 810649c:	d879      	bhi.n	8106592 <UART_SetConfig+0x8b2>
 810649e:	a201      	add	r2, pc, #4	; (adr r2, 81064a4 <UART_SetConfig+0x7c4>)
 81064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064a4:	0810652f 	.word	0x0810652f
 81064a8:	08106537 	.word	0x08106537
 81064ac:	08106593 	.word	0x08106593
 81064b0:	08106593 	.word	0x08106593
 81064b4:	0810653f 	.word	0x0810653f
 81064b8:	08106593 	.word	0x08106593
 81064bc:	08106593 	.word	0x08106593
 81064c0:	08106593 	.word	0x08106593
 81064c4:	0810654f 	.word	0x0810654f
 81064c8:	08106593 	.word	0x08106593
 81064cc:	08106593 	.word	0x08106593
 81064d0:	08106593 	.word	0x08106593
 81064d4:	08106593 	.word	0x08106593
 81064d8:	08106593 	.word	0x08106593
 81064dc:	08106593 	.word	0x08106593
 81064e0:	08106593 	.word	0x08106593
 81064e4:	0810655f 	.word	0x0810655f
 81064e8:	08106593 	.word	0x08106593
 81064ec:	08106593 	.word	0x08106593
 81064f0:	08106593 	.word	0x08106593
 81064f4:	08106593 	.word	0x08106593
 81064f8:	08106593 	.word	0x08106593
 81064fc:	08106593 	.word	0x08106593
 8106500:	08106593 	.word	0x08106593
 8106504:	08106593 	.word	0x08106593
 8106508:	08106593 	.word	0x08106593
 810650c:	08106593 	.word	0x08106593
 8106510:	08106593 	.word	0x08106593
 8106514:	08106593 	.word	0x08106593
 8106518:	08106593 	.word	0x08106593
 810651c:	08106593 	.word	0x08106593
 8106520:	08106593 	.word	0x08106593
 8106524:	08106585 	.word	0x08106585
 8106528:	2b40      	cmp	r3, #64	; 0x40
 810652a:	d02e      	beq.n	810658a <UART_SetConfig+0x8aa>
 810652c:	e031      	b.n	8106592 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810652e:	f7fc fbb7 	bl	8102ca0 <HAL_RCC_GetPCLK1Freq>
 8106532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106534:	e033      	b.n	810659e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106536:	f7fc fbc9 	bl	8102ccc <HAL_RCC_GetPCLK2Freq>
 810653a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810653c:	e02f      	b.n	810659e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810653e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106542:	4618      	mov	r0, r3
 8106544:	f7fd fb34 	bl	8103bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810654a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810654c:	e027      	b.n	810659e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810654e:	f107 0318 	add.w	r3, r7, #24
 8106552:	4618      	mov	r0, r3
 8106554:	f7fd fc80 	bl	8103e58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106558:	69fb      	ldr	r3, [r7, #28]
 810655a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810655c:	e01f      	b.n	810659e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810655e:	4b2d      	ldr	r3, [pc, #180]	; (8106614 <UART_SetConfig+0x934>)
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	f003 0320 	and.w	r3, r3, #32
 8106566:	2b00      	cmp	r3, #0
 8106568:	d009      	beq.n	810657e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810656a:	4b2a      	ldr	r3, [pc, #168]	; (8106614 <UART_SetConfig+0x934>)
 810656c:	681b      	ldr	r3, [r3, #0]
 810656e:	08db      	lsrs	r3, r3, #3
 8106570:	f003 0303 	and.w	r3, r3, #3
 8106574:	4a24      	ldr	r2, [pc, #144]	; (8106608 <UART_SetConfig+0x928>)
 8106576:	fa22 f303 	lsr.w	r3, r2, r3
 810657a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810657c:	e00f      	b.n	810659e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810657e:	4b22      	ldr	r3, [pc, #136]	; (8106608 <UART_SetConfig+0x928>)
 8106580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106582:	e00c      	b.n	810659e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106584:	4b21      	ldr	r3, [pc, #132]	; (810660c <UART_SetConfig+0x92c>)
 8106586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106588:	e009      	b.n	810659e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810658a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810658e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106590:	e005      	b.n	810659e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8106592:	2300      	movs	r3, #0
 8106594:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106596:	2301      	movs	r3, #1
 8106598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810659c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81065a0:	2b00      	cmp	r3, #0
 81065a2:	f000 80e7 	beq.w	8106774 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81065a6:	697b      	ldr	r3, [r7, #20]
 81065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81065aa:	4a19      	ldr	r2, [pc, #100]	; (8106610 <UART_SetConfig+0x930>)
 81065ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81065b0:	461a      	mov	r2, r3
 81065b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81065b4:	fbb3 f3f2 	udiv	r3, r3, r2
 81065b8:	005a      	lsls	r2, r3, #1
 81065ba:	697b      	ldr	r3, [r7, #20]
 81065bc:	685b      	ldr	r3, [r3, #4]
 81065be:	085b      	lsrs	r3, r3, #1
 81065c0:	441a      	add	r2, r3
 81065c2:	697b      	ldr	r3, [r7, #20]
 81065c4:	685b      	ldr	r3, [r3, #4]
 81065c6:	fbb2 f3f3 	udiv	r3, r2, r3
 81065ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065ce:	2b0f      	cmp	r3, #15
 81065d0:	d916      	bls.n	8106600 <UART_SetConfig+0x920>
 81065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81065d8:	d212      	bcs.n	8106600 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065dc:	b29b      	uxth	r3, r3
 81065de:	f023 030f 	bic.w	r3, r3, #15
 81065e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065e6:	085b      	lsrs	r3, r3, #1
 81065e8:	b29b      	uxth	r3, r3
 81065ea:	f003 0307 	and.w	r3, r3, #7
 81065ee:	b29a      	uxth	r2, r3
 81065f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81065f2:	4313      	orrs	r3, r2
 81065f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81065f6:	697b      	ldr	r3, [r7, #20]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81065fc:	60da      	str	r2, [r3, #12]
 81065fe:	e0b9      	b.n	8106774 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8106600:	2301      	movs	r3, #1
 8106602:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8106606:	e0b5      	b.n	8106774 <UART_SetConfig+0xa94>
 8106608:	03d09000 	.word	0x03d09000
 810660c:	003d0900 	.word	0x003d0900
 8106610:	0810b6cc 	.word	0x0810b6cc
 8106614:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8106618:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810661c:	2b20      	cmp	r3, #32
 810661e:	dc49      	bgt.n	81066b4 <UART_SetConfig+0x9d4>
 8106620:	2b00      	cmp	r3, #0
 8106622:	db7c      	blt.n	810671e <UART_SetConfig+0xa3e>
 8106624:	2b20      	cmp	r3, #32
 8106626:	d87a      	bhi.n	810671e <UART_SetConfig+0xa3e>
 8106628:	a201      	add	r2, pc, #4	; (adr r2, 8106630 <UART_SetConfig+0x950>)
 810662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810662e:	bf00      	nop
 8106630:	081066bb 	.word	0x081066bb
 8106634:	081066c3 	.word	0x081066c3
 8106638:	0810671f 	.word	0x0810671f
 810663c:	0810671f 	.word	0x0810671f
 8106640:	081066cb 	.word	0x081066cb
 8106644:	0810671f 	.word	0x0810671f
 8106648:	0810671f 	.word	0x0810671f
 810664c:	0810671f 	.word	0x0810671f
 8106650:	081066db 	.word	0x081066db
 8106654:	0810671f 	.word	0x0810671f
 8106658:	0810671f 	.word	0x0810671f
 810665c:	0810671f 	.word	0x0810671f
 8106660:	0810671f 	.word	0x0810671f
 8106664:	0810671f 	.word	0x0810671f
 8106668:	0810671f 	.word	0x0810671f
 810666c:	0810671f 	.word	0x0810671f
 8106670:	081066eb 	.word	0x081066eb
 8106674:	0810671f 	.word	0x0810671f
 8106678:	0810671f 	.word	0x0810671f
 810667c:	0810671f 	.word	0x0810671f
 8106680:	0810671f 	.word	0x0810671f
 8106684:	0810671f 	.word	0x0810671f
 8106688:	0810671f 	.word	0x0810671f
 810668c:	0810671f 	.word	0x0810671f
 8106690:	0810671f 	.word	0x0810671f
 8106694:	0810671f 	.word	0x0810671f
 8106698:	0810671f 	.word	0x0810671f
 810669c:	0810671f 	.word	0x0810671f
 81066a0:	0810671f 	.word	0x0810671f
 81066a4:	0810671f 	.word	0x0810671f
 81066a8:	0810671f 	.word	0x0810671f
 81066ac:	0810671f 	.word	0x0810671f
 81066b0:	08106711 	.word	0x08106711
 81066b4:	2b40      	cmp	r3, #64	; 0x40
 81066b6:	d02e      	beq.n	8106716 <UART_SetConfig+0xa36>
 81066b8:	e031      	b.n	810671e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81066ba:	f7fc faf1 	bl	8102ca0 <HAL_RCC_GetPCLK1Freq>
 81066be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81066c0:	e033      	b.n	810672a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81066c2:	f7fc fb03 	bl	8102ccc <HAL_RCC_GetPCLK2Freq>
 81066c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81066c8:	e02f      	b.n	810672a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81066ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81066ce:	4618      	mov	r0, r3
 81066d0:	f7fd fa6e 	bl	8103bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81066d8:	e027      	b.n	810672a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81066da:	f107 0318 	add.w	r3, r7, #24
 81066de:	4618      	mov	r0, r3
 81066e0:	f7fd fbba 	bl	8103e58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81066e4:	69fb      	ldr	r3, [r7, #28]
 81066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81066e8:	e01f      	b.n	810672a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81066ea:	4b2d      	ldr	r3, [pc, #180]	; (81067a0 <UART_SetConfig+0xac0>)
 81066ec:	681b      	ldr	r3, [r3, #0]
 81066ee:	f003 0320 	and.w	r3, r3, #32
 81066f2:	2b00      	cmp	r3, #0
 81066f4:	d009      	beq.n	810670a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81066f6:	4b2a      	ldr	r3, [pc, #168]	; (81067a0 <UART_SetConfig+0xac0>)
 81066f8:	681b      	ldr	r3, [r3, #0]
 81066fa:	08db      	lsrs	r3, r3, #3
 81066fc:	f003 0303 	and.w	r3, r3, #3
 8106700:	4a28      	ldr	r2, [pc, #160]	; (81067a4 <UART_SetConfig+0xac4>)
 8106702:	fa22 f303 	lsr.w	r3, r2, r3
 8106706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106708:	e00f      	b.n	810672a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810670a:	4b26      	ldr	r3, [pc, #152]	; (81067a4 <UART_SetConfig+0xac4>)
 810670c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810670e:	e00c      	b.n	810672a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106710:	4b25      	ldr	r3, [pc, #148]	; (81067a8 <UART_SetConfig+0xac8>)
 8106712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106714:	e009      	b.n	810672a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810671a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810671c:	e005      	b.n	810672a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810671e:	2300      	movs	r3, #0
 8106720:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106722:	2301      	movs	r3, #1
 8106724:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106728:	bf00      	nop
    }

    if (pclk != 0U)
 810672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810672c:	2b00      	cmp	r3, #0
 810672e:	d021      	beq.n	8106774 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106730:	697b      	ldr	r3, [r7, #20]
 8106732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106734:	4a1d      	ldr	r2, [pc, #116]	; (81067ac <UART_SetConfig+0xacc>)
 8106736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810673a:	461a      	mov	r2, r3
 810673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810673e:	fbb3 f2f2 	udiv	r2, r3, r2
 8106742:	697b      	ldr	r3, [r7, #20]
 8106744:	685b      	ldr	r3, [r3, #4]
 8106746:	085b      	lsrs	r3, r3, #1
 8106748:	441a      	add	r2, r3
 810674a:	697b      	ldr	r3, [r7, #20]
 810674c:	685b      	ldr	r3, [r3, #4]
 810674e:	fbb2 f3f3 	udiv	r3, r2, r3
 8106752:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106756:	2b0f      	cmp	r3, #15
 8106758:	d909      	bls.n	810676e <UART_SetConfig+0xa8e>
 810675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106760:	d205      	bcs.n	810676e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106764:	b29a      	uxth	r2, r3
 8106766:	697b      	ldr	r3, [r7, #20]
 8106768:	681b      	ldr	r3, [r3, #0]
 810676a:	60da      	str	r2, [r3, #12]
 810676c:	e002      	b.n	8106774 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810676e:	2301      	movs	r3, #1
 8106770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106774:	697b      	ldr	r3, [r7, #20]
 8106776:	2201      	movs	r2, #1
 8106778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810677c:	697b      	ldr	r3, [r7, #20]
 810677e:	2201      	movs	r2, #1
 8106780:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106784:	697b      	ldr	r3, [r7, #20]
 8106786:	2200      	movs	r2, #0
 8106788:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810678a:	697b      	ldr	r3, [r7, #20]
 810678c:	2200      	movs	r2, #0
 810678e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8106790:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8106794:	4618      	mov	r0, r3
 8106796:	3748      	adds	r7, #72	; 0x48
 8106798:	46bd      	mov	sp, r7
 810679a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810679e:	bf00      	nop
 81067a0:	58024400 	.word	0x58024400
 81067a4:	03d09000 	.word	0x03d09000
 81067a8:	003d0900 	.word	0x003d0900
 81067ac:	0810b6cc 	.word	0x0810b6cc

081067b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81067b0:	b480      	push	{r7}
 81067b2:	b083      	sub	sp, #12
 81067b4:	af00      	add	r7, sp, #0
 81067b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067bc:	f003 0301 	and.w	r3, r3, #1
 81067c0:	2b00      	cmp	r3, #0
 81067c2:	d00a      	beq.n	81067da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	685b      	ldr	r3, [r3, #4]
 81067ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	430a      	orrs	r2, r1
 81067d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067de:	f003 0302 	and.w	r3, r3, #2
 81067e2:	2b00      	cmp	r3, #0
 81067e4:	d00a      	beq.n	81067fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	685b      	ldr	r3, [r3, #4]
 81067ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	681b      	ldr	r3, [r3, #0]
 81067f8:	430a      	orrs	r2, r1
 81067fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106800:	f003 0304 	and.w	r3, r3, #4
 8106804:	2b00      	cmp	r3, #0
 8106806:	d00a      	beq.n	810681e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106808:	687b      	ldr	r3, [r7, #4]
 810680a:	681b      	ldr	r3, [r3, #0]
 810680c:	685b      	ldr	r3, [r3, #4]
 810680e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	430a      	orrs	r2, r1
 810681c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106822:	f003 0308 	and.w	r3, r3, #8
 8106826:	2b00      	cmp	r3, #0
 8106828:	d00a      	beq.n	8106840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	681b      	ldr	r3, [r3, #0]
 810682e:	685b      	ldr	r3, [r3, #4]
 8106830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	430a      	orrs	r2, r1
 810683e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106844:	f003 0310 	and.w	r3, r3, #16
 8106848:	2b00      	cmp	r3, #0
 810684a:	d00a      	beq.n	8106862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	689b      	ldr	r3, [r3, #8]
 8106852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	430a      	orrs	r2, r1
 8106860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106862:	687b      	ldr	r3, [r7, #4]
 8106864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106866:	f003 0320 	and.w	r3, r3, #32
 810686a:	2b00      	cmp	r3, #0
 810686c:	d00a      	beq.n	8106884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	689b      	ldr	r3, [r3, #8]
 8106874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	430a      	orrs	r2, r1
 8106882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810688c:	2b00      	cmp	r3, #0
 810688e:	d01a      	beq.n	81068c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	681b      	ldr	r3, [r3, #0]
 8106894:	685b      	ldr	r3, [r3, #4]
 8106896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	681b      	ldr	r3, [r3, #0]
 81068a2:	430a      	orrs	r2, r1
 81068a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81068a6:	687b      	ldr	r3, [r7, #4]
 81068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81068aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81068ae:	d10a      	bne.n	81068c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	681b      	ldr	r3, [r3, #0]
 81068b4:	685b      	ldr	r3, [r3, #4]
 81068b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81068be:	687b      	ldr	r3, [r7, #4]
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	430a      	orrs	r2, r1
 81068c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81068ce:	2b00      	cmp	r3, #0
 81068d0:	d00a      	beq.n	81068e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81068d2:	687b      	ldr	r3, [r7, #4]
 81068d4:	681b      	ldr	r3, [r3, #0]
 81068d6:	685b      	ldr	r3, [r3, #4]
 81068d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	681b      	ldr	r3, [r3, #0]
 81068e4:	430a      	orrs	r2, r1
 81068e6:	605a      	str	r2, [r3, #4]
  }
}
 81068e8:	bf00      	nop
 81068ea:	370c      	adds	r7, #12
 81068ec:	46bd      	mov	sp, r7
 81068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068f2:	4770      	bx	lr

081068f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81068f4:	b580      	push	{r7, lr}
 81068f6:	b086      	sub	sp, #24
 81068f8:	af02      	add	r7, sp, #8
 81068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	2200      	movs	r2, #0
 8106900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106904:	f7fb fc4e 	bl	81021a4 <HAL_GetTick>
 8106908:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	681b      	ldr	r3, [r3, #0]
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	f003 0308 	and.w	r3, r3, #8
 8106914:	2b08      	cmp	r3, #8
 8106916:	d10e      	bne.n	8106936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810691c:	9300      	str	r3, [sp, #0]
 810691e:	68fb      	ldr	r3, [r7, #12]
 8106920:	2200      	movs	r2, #0
 8106922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8106926:	6878      	ldr	r0, [r7, #4]
 8106928:	f000 f82f 	bl	810698a <UART_WaitOnFlagUntilTimeout>
 810692c:	4603      	mov	r3, r0
 810692e:	2b00      	cmp	r3, #0
 8106930:	d001      	beq.n	8106936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106932:	2303      	movs	r3, #3
 8106934:	e025      	b.n	8106982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	681b      	ldr	r3, [r3, #0]
 810693a:	681b      	ldr	r3, [r3, #0]
 810693c:	f003 0304 	and.w	r3, r3, #4
 8106940:	2b04      	cmp	r3, #4
 8106942:	d10e      	bne.n	8106962 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106948:	9300      	str	r3, [sp, #0]
 810694a:	68fb      	ldr	r3, [r7, #12]
 810694c:	2200      	movs	r2, #0
 810694e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106952:	6878      	ldr	r0, [r7, #4]
 8106954:	f000 f819 	bl	810698a <UART_WaitOnFlagUntilTimeout>
 8106958:	4603      	mov	r3, r0
 810695a:	2b00      	cmp	r3, #0
 810695c:	d001      	beq.n	8106962 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810695e:	2303      	movs	r3, #3
 8106960:	e00f      	b.n	8106982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	2220      	movs	r2, #32
 8106966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	2220      	movs	r2, #32
 810696e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	2200      	movs	r2, #0
 8106976:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	2200      	movs	r2, #0
 810697c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106980:	2300      	movs	r3, #0
}
 8106982:	4618      	mov	r0, r3
 8106984:	3710      	adds	r7, #16
 8106986:	46bd      	mov	sp, r7
 8106988:	bd80      	pop	{r7, pc}

0810698a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810698a:	b580      	push	{r7, lr}
 810698c:	b09c      	sub	sp, #112	; 0x70
 810698e:	af00      	add	r7, sp, #0
 8106990:	60f8      	str	r0, [r7, #12]
 8106992:	60b9      	str	r1, [r7, #8]
 8106994:	603b      	str	r3, [r7, #0]
 8106996:	4613      	mov	r3, r2
 8106998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810699a:	e0a9      	b.n	8106af0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810699c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81069a2:	f000 80a5 	beq.w	8106af0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81069a6:	f7fb fbfd 	bl	81021a4 <HAL_GetTick>
 81069aa:	4602      	mov	r2, r0
 81069ac:	683b      	ldr	r3, [r7, #0]
 81069ae:	1ad3      	subs	r3, r2, r3
 81069b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81069b2:	429a      	cmp	r2, r3
 81069b4:	d302      	bcc.n	81069bc <UART_WaitOnFlagUntilTimeout+0x32>
 81069b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81069b8:	2b00      	cmp	r3, #0
 81069ba:	d140      	bne.n	8106a3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81069bc:	68fb      	ldr	r3, [r7, #12]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81069c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81069c4:	e853 3f00 	ldrex	r3, [r3]
 81069c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 81069ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81069cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81069d0:	667b      	str	r3, [r7, #100]	; 0x64
 81069d2:	68fb      	ldr	r3, [r7, #12]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	461a      	mov	r2, r3
 81069d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81069da:	65fb      	str	r3, [r7, #92]	; 0x5c
 81069dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81069de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81069e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81069e2:	e841 2300 	strex	r3, r2, [r1]
 81069e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 81069e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81069ea:	2b00      	cmp	r3, #0
 81069ec:	d1e6      	bne.n	81069bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81069ee:	68fb      	ldr	r3, [r7, #12]
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	3308      	adds	r3, #8
 81069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81069f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81069f8:	e853 3f00 	ldrex	r3, [r3]
 81069fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106a00:	f023 0301 	bic.w	r3, r3, #1
 8106a04:	663b      	str	r3, [r7, #96]	; 0x60
 8106a06:	68fb      	ldr	r3, [r7, #12]
 8106a08:	681b      	ldr	r3, [r3, #0]
 8106a0a:	3308      	adds	r3, #8
 8106a0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8106a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8106a10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106a16:	e841 2300 	strex	r3, r2, [r1]
 8106a1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8106a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d1e5      	bne.n	81069ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8106a22:	68fb      	ldr	r3, [r7, #12]
 8106a24:	2220      	movs	r2, #32
 8106a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8106a2a:	68fb      	ldr	r3, [r7, #12]
 8106a2c:	2220      	movs	r2, #32
 8106a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106a32:	68fb      	ldr	r3, [r7, #12]
 8106a34:	2200      	movs	r2, #0
 8106a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8106a3a:	2303      	movs	r3, #3
 8106a3c:	e069      	b.n	8106b12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106a3e:	68fb      	ldr	r3, [r7, #12]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	f003 0304 	and.w	r3, r3, #4
 8106a48:	2b00      	cmp	r3, #0
 8106a4a:	d051      	beq.n	8106af0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106a4c:	68fb      	ldr	r3, [r7, #12]
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	69db      	ldr	r3, [r3, #28]
 8106a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106a5a:	d149      	bne.n	8106af0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106a5c:	68fb      	ldr	r3, [r7, #12]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8106a66:	68fb      	ldr	r3, [r7, #12]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a6e:	e853 3f00 	ldrex	r3, [r3]
 8106a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106a7c:	68fb      	ldr	r3, [r7, #12]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	461a      	mov	r2, r3
 8106a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8106a84:	637b      	str	r3, [r7, #52]	; 0x34
 8106a86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8106a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106a8c:	e841 2300 	strex	r3, r2, [r1]
 8106a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d1e6      	bne.n	8106a66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106a98:	68fb      	ldr	r3, [r7, #12]
 8106a9a:	681b      	ldr	r3, [r3, #0]
 8106a9c:	3308      	adds	r3, #8
 8106a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106aa0:	697b      	ldr	r3, [r7, #20]
 8106aa2:	e853 3f00 	ldrex	r3, [r3]
 8106aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8106aa8:	693b      	ldr	r3, [r7, #16]
 8106aaa:	f023 0301 	bic.w	r3, r3, #1
 8106aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8106ab0:	68fb      	ldr	r3, [r7, #12]
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	3308      	adds	r3, #8
 8106ab6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8106ab8:	623a      	str	r2, [r7, #32]
 8106aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106abc:	69f9      	ldr	r1, [r7, #28]
 8106abe:	6a3a      	ldr	r2, [r7, #32]
 8106ac0:	e841 2300 	strex	r3, r2, [r1]
 8106ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8106ac6:	69bb      	ldr	r3, [r7, #24]
 8106ac8:	2b00      	cmp	r3, #0
 8106aca:	d1e5      	bne.n	8106a98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8106acc:	68fb      	ldr	r3, [r7, #12]
 8106ace:	2220      	movs	r2, #32
 8106ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8106ad4:	68fb      	ldr	r3, [r7, #12]
 8106ad6:	2220      	movs	r2, #32
 8106ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106adc:	68fb      	ldr	r3, [r7, #12]
 8106ade:	2220      	movs	r2, #32
 8106ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106ae4:	68fb      	ldr	r3, [r7, #12]
 8106ae6:	2200      	movs	r2, #0
 8106ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8106aec:	2303      	movs	r3, #3
 8106aee:	e010      	b.n	8106b12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	69da      	ldr	r2, [r3, #28]
 8106af6:	68bb      	ldr	r3, [r7, #8]
 8106af8:	4013      	ands	r3, r2
 8106afa:	68ba      	ldr	r2, [r7, #8]
 8106afc:	429a      	cmp	r2, r3
 8106afe:	bf0c      	ite	eq
 8106b00:	2301      	moveq	r3, #1
 8106b02:	2300      	movne	r3, #0
 8106b04:	b2db      	uxtb	r3, r3
 8106b06:	461a      	mov	r2, r3
 8106b08:	79fb      	ldrb	r3, [r7, #7]
 8106b0a:	429a      	cmp	r2, r3
 8106b0c:	f43f af46 	beq.w	810699c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106b10:	2300      	movs	r3, #0
}
 8106b12:	4618      	mov	r0, r3
 8106b14:	3770      	adds	r7, #112	; 0x70
 8106b16:	46bd      	mov	sp, r7
 8106b18:	bd80      	pop	{r7, pc}

08106b1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106b1a:	b480      	push	{r7}
 8106b1c:	b085      	sub	sp, #20
 8106b1e:	af00      	add	r7, sp, #0
 8106b20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106b28:	2b01      	cmp	r3, #1
 8106b2a:	d101      	bne.n	8106b30 <HAL_UARTEx_DisableFifoMode+0x16>
 8106b2c:	2302      	movs	r3, #2
 8106b2e:	e027      	b.n	8106b80 <HAL_UARTEx_DisableFifoMode+0x66>
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	2201      	movs	r2, #1
 8106b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	2224      	movs	r2, #36	; 0x24
 8106b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	681b      	ldr	r3, [r3, #0]
 8106b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	681a      	ldr	r2, [r3, #0]
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	681b      	ldr	r3, [r3, #0]
 8106b52:	f022 0201 	bic.w	r2, r2, #1
 8106b56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106b58:	68fb      	ldr	r3, [r7, #12]
 8106b5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8106b5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	2200      	movs	r2, #0
 8106b64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	681b      	ldr	r3, [r3, #0]
 8106b6a:	68fa      	ldr	r2, [r7, #12]
 8106b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	2220      	movs	r2, #32
 8106b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	2200      	movs	r2, #0
 8106b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106b7e:	2300      	movs	r3, #0
}
 8106b80:	4618      	mov	r0, r3
 8106b82:	3714      	adds	r7, #20
 8106b84:	46bd      	mov	sp, r7
 8106b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b8a:	4770      	bx	lr

08106b8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106b8c:	b580      	push	{r7, lr}
 8106b8e:	b084      	sub	sp, #16
 8106b90:	af00      	add	r7, sp, #0
 8106b92:	6078      	str	r0, [r7, #4]
 8106b94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106b9c:	2b01      	cmp	r3, #1
 8106b9e:	d101      	bne.n	8106ba4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106ba0:	2302      	movs	r3, #2
 8106ba2:	e02d      	b.n	8106c00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	2201      	movs	r2, #1
 8106ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	2224      	movs	r2, #36	; 0x24
 8106bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	681b      	ldr	r3, [r3, #0]
 8106bb8:	681b      	ldr	r3, [r3, #0]
 8106bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	681b      	ldr	r3, [r3, #0]
 8106bc0:	681a      	ldr	r2, [r3, #0]
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	681b      	ldr	r3, [r3, #0]
 8106bc6:	f022 0201 	bic.w	r2, r2, #1
 8106bca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	681b      	ldr	r3, [r3, #0]
 8106bd0:	689b      	ldr	r3, [r3, #8]
 8106bd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	683a      	ldr	r2, [r7, #0]
 8106bdc:	430a      	orrs	r2, r1
 8106bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106be0:	6878      	ldr	r0, [r7, #4]
 8106be2:	f000 f84f 	bl	8106c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106be6:	687b      	ldr	r3, [r7, #4]
 8106be8:	681b      	ldr	r3, [r3, #0]
 8106bea:	68fa      	ldr	r2, [r7, #12]
 8106bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	2220      	movs	r2, #32
 8106bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	2200      	movs	r2, #0
 8106bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106bfe:	2300      	movs	r3, #0
}
 8106c00:	4618      	mov	r0, r3
 8106c02:	3710      	adds	r7, #16
 8106c04:	46bd      	mov	sp, r7
 8106c06:	bd80      	pop	{r7, pc}

08106c08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106c08:	b580      	push	{r7, lr}
 8106c0a:	b084      	sub	sp, #16
 8106c0c:	af00      	add	r7, sp, #0
 8106c0e:	6078      	str	r0, [r7, #4]
 8106c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106c18:	2b01      	cmp	r3, #1
 8106c1a:	d101      	bne.n	8106c20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106c1c:	2302      	movs	r3, #2
 8106c1e:	e02d      	b.n	8106c7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	2201      	movs	r2, #1
 8106c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	2224      	movs	r2, #36	; 0x24
 8106c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	681b      	ldr	r3, [r3, #0]
 8106c34:	681b      	ldr	r3, [r3, #0]
 8106c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	681b      	ldr	r3, [r3, #0]
 8106c3c:	681a      	ldr	r2, [r3, #0]
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	f022 0201 	bic.w	r2, r2, #1
 8106c46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	689b      	ldr	r3, [r3, #8]
 8106c4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	683a      	ldr	r2, [r7, #0]
 8106c58:	430a      	orrs	r2, r1
 8106c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106c5c:	6878      	ldr	r0, [r7, #4]
 8106c5e:	f000 f811 	bl	8106c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	68fa      	ldr	r2, [r7, #12]
 8106c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106c6a:	687b      	ldr	r3, [r7, #4]
 8106c6c:	2220      	movs	r2, #32
 8106c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	2200      	movs	r2, #0
 8106c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106c7a:	2300      	movs	r3, #0
}
 8106c7c:	4618      	mov	r0, r3
 8106c7e:	3710      	adds	r7, #16
 8106c80:	46bd      	mov	sp, r7
 8106c82:	bd80      	pop	{r7, pc}

08106c84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8106c84:	b480      	push	{r7}
 8106c86:	b085      	sub	sp, #20
 8106c88:	af00      	add	r7, sp, #0
 8106c8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106c90:	2b00      	cmp	r3, #0
 8106c92:	d108      	bne.n	8106ca6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	2201      	movs	r2, #1
 8106c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	2201      	movs	r2, #1
 8106ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106ca4:	e031      	b.n	8106d0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8106ca6:	2310      	movs	r3, #16
 8106ca8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8106caa:	2310      	movs	r3, #16
 8106cac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	681b      	ldr	r3, [r3, #0]
 8106cb2:	689b      	ldr	r3, [r3, #8]
 8106cb4:	0e5b      	lsrs	r3, r3, #25
 8106cb6:	b2db      	uxtb	r3, r3
 8106cb8:	f003 0307 	and.w	r3, r3, #7
 8106cbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	681b      	ldr	r3, [r3, #0]
 8106cc2:	689b      	ldr	r3, [r3, #8]
 8106cc4:	0f5b      	lsrs	r3, r3, #29
 8106cc6:	b2db      	uxtb	r3, r3
 8106cc8:	f003 0307 	and.w	r3, r3, #7
 8106ccc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106cce:	7bbb      	ldrb	r3, [r7, #14]
 8106cd0:	7b3a      	ldrb	r2, [r7, #12]
 8106cd2:	4911      	ldr	r1, [pc, #68]	; (8106d18 <UARTEx_SetNbDataToProcess+0x94>)
 8106cd4:	5c8a      	ldrb	r2, [r1, r2]
 8106cd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8106cda:	7b3a      	ldrb	r2, [r7, #12]
 8106cdc:	490f      	ldr	r1, [pc, #60]	; (8106d1c <UARTEx_SetNbDataToProcess+0x98>)
 8106cde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8106ce4:	b29a      	uxth	r2, r3
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106cec:	7bfb      	ldrb	r3, [r7, #15]
 8106cee:	7b7a      	ldrb	r2, [r7, #13]
 8106cf0:	4909      	ldr	r1, [pc, #36]	; (8106d18 <UARTEx_SetNbDataToProcess+0x94>)
 8106cf2:	5c8a      	ldrb	r2, [r1, r2]
 8106cf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106cf8:	7b7a      	ldrb	r2, [r7, #13]
 8106cfa:	4908      	ldr	r1, [pc, #32]	; (8106d1c <UARTEx_SetNbDataToProcess+0x98>)
 8106cfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8106d02:	b29a      	uxth	r2, r3
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106d0a:	bf00      	nop
 8106d0c:	3714      	adds	r7, #20
 8106d0e:	46bd      	mov	sp, r7
 8106d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d14:	4770      	bx	lr
 8106d16:	bf00      	nop
 8106d18:	0810b6e4 	.word	0x0810b6e4
 8106d1c:	0810b6ec 	.word	0x0810b6ec

08106d20 <__errno>:
 8106d20:	4b01      	ldr	r3, [pc, #4]	; (8106d28 <__errno+0x8>)
 8106d22:	6818      	ldr	r0, [r3, #0]
 8106d24:	4770      	bx	lr
 8106d26:	bf00      	nop
 8106d28:	10000028 	.word	0x10000028

08106d2c <__libc_init_array>:
 8106d2c:	b570      	push	{r4, r5, r6, lr}
 8106d2e:	4d0d      	ldr	r5, [pc, #52]	; (8106d64 <__libc_init_array+0x38>)
 8106d30:	4c0d      	ldr	r4, [pc, #52]	; (8106d68 <__libc_init_array+0x3c>)
 8106d32:	1b64      	subs	r4, r4, r5
 8106d34:	10a4      	asrs	r4, r4, #2
 8106d36:	2600      	movs	r6, #0
 8106d38:	42a6      	cmp	r6, r4
 8106d3a:	d109      	bne.n	8106d50 <__libc_init_array+0x24>
 8106d3c:	4d0b      	ldr	r5, [pc, #44]	; (8106d6c <__libc_init_array+0x40>)
 8106d3e:	4c0c      	ldr	r4, [pc, #48]	; (8106d70 <__libc_init_array+0x44>)
 8106d40:	f004 fcaa 	bl	810b698 <_init>
 8106d44:	1b64      	subs	r4, r4, r5
 8106d46:	10a4      	asrs	r4, r4, #2
 8106d48:	2600      	movs	r6, #0
 8106d4a:	42a6      	cmp	r6, r4
 8106d4c:	d105      	bne.n	8106d5a <__libc_init_array+0x2e>
 8106d4e:	bd70      	pop	{r4, r5, r6, pc}
 8106d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8106d54:	4798      	blx	r3
 8106d56:	3601      	adds	r6, #1
 8106d58:	e7ee      	b.n	8106d38 <__libc_init_array+0xc>
 8106d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8106d5e:	4798      	blx	r3
 8106d60:	3601      	adds	r6, #1
 8106d62:	e7f2      	b.n	8106d4a <__libc_init_array+0x1e>
 8106d64:	0810bbac 	.word	0x0810bbac
 8106d68:	0810bbac 	.word	0x0810bbac
 8106d6c:	0810bbac 	.word	0x0810bbac
 8106d70:	0810bbb0 	.word	0x0810bbb0

08106d74 <memset>:
 8106d74:	4402      	add	r2, r0
 8106d76:	4603      	mov	r3, r0
 8106d78:	4293      	cmp	r3, r2
 8106d7a:	d100      	bne.n	8106d7e <memset+0xa>
 8106d7c:	4770      	bx	lr
 8106d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8106d82:	e7f9      	b.n	8106d78 <memset+0x4>

08106d84 <__cvt>:
 8106d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106d88:	ec55 4b10 	vmov	r4, r5, d0
 8106d8c:	2d00      	cmp	r5, #0
 8106d8e:	460e      	mov	r6, r1
 8106d90:	4619      	mov	r1, r3
 8106d92:	462b      	mov	r3, r5
 8106d94:	bfbb      	ittet	lt
 8106d96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8106d9a:	461d      	movlt	r5, r3
 8106d9c:	2300      	movge	r3, #0
 8106d9e:	232d      	movlt	r3, #45	; 0x2d
 8106da0:	700b      	strb	r3, [r1, #0]
 8106da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106da4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8106da8:	4691      	mov	r9, r2
 8106daa:	f023 0820 	bic.w	r8, r3, #32
 8106dae:	bfbc      	itt	lt
 8106db0:	4622      	movlt	r2, r4
 8106db2:	4614      	movlt	r4, r2
 8106db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106db8:	d005      	beq.n	8106dc6 <__cvt+0x42>
 8106dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8106dbe:	d100      	bne.n	8106dc2 <__cvt+0x3e>
 8106dc0:	3601      	adds	r6, #1
 8106dc2:	2102      	movs	r1, #2
 8106dc4:	e000      	b.n	8106dc8 <__cvt+0x44>
 8106dc6:	2103      	movs	r1, #3
 8106dc8:	ab03      	add	r3, sp, #12
 8106dca:	9301      	str	r3, [sp, #4]
 8106dcc:	ab02      	add	r3, sp, #8
 8106dce:	9300      	str	r3, [sp, #0]
 8106dd0:	ec45 4b10 	vmov	d0, r4, r5
 8106dd4:	4653      	mov	r3, sl
 8106dd6:	4632      	mov	r2, r6
 8106dd8:	f001 fdc6 	bl	8108968 <_dtoa_r>
 8106ddc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8106de0:	4607      	mov	r7, r0
 8106de2:	d102      	bne.n	8106dea <__cvt+0x66>
 8106de4:	f019 0f01 	tst.w	r9, #1
 8106de8:	d022      	beq.n	8106e30 <__cvt+0xac>
 8106dea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106dee:	eb07 0906 	add.w	r9, r7, r6
 8106df2:	d110      	bne.n	8106e16 <__cvt+0x92>
 8106df4:	783b      	ldrb	r3, [r7, #0]
 8106df6:	2b30      	cmp	r3, #48	; 0x30
 8106df8:	d10a      	bne.n	8106e10 <__cvt+0x8c>
 8106dfa:	2200      	movs	r2, #0
 8106dfc:	2300      	movs	r3, #0
 8106dfe:	4620      	mov	r0, r4
 8106e00:	4629      	mov	r1, r5
 8106e02:	f7f9 fee9 	bl	8100bd8 <__aeabi_dcmpeq>
 8106e06:	b918      	cbnz	r0, 8106e10 <__cvt+0x8c>
 8106e08:	f1c6 0601 	rsb	r6, r6, #1
 8106e0c:	f8ca 6000 	str.w	r6, [sl]
 8106e10:	f8da 3000 	ldr.w	r3, [sl]
 8106e14:	4499      	add	r9, r3
 8106e16:	2200      	movs	r2, #0
 8106e18:	2300      	movs	r3, #0
 8106e1a:	4620      	mov	r0, r4
 8106e1c:	4629      	mov	r1, r5
 8106e1e:	f7f9 fedb 	bl	8100bd8 <__aeabi_dcmpeq>
 8106e22:	b108      	cbz	r0, 8106e28 <__cvt+0xa4>
 8106e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8106e28:	2230      	movs	r2, #48	; 0x30
 8106e2a:	9b03      	ldr	r3, [sp, #12]
 8106e2c:	454b      	cmp	r3, r9
 8106e2e:	d307      	bcc.n	8106e40 <__cvt+0xbc>
 8106e30:	9b03      	ldr	r3, [sp, #12]
 8106e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8106e34:	1bdb      	subs	r3, r3, r7
 8106e36:	4638      	mov	r0, r7
 8106e38:	6013      	str	r3, [r2, #0]
 8106e3a:	b004      	add	sp, #16
 8106e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106e40:	1c59      	adds	r1, r3, #1
 8106e42:	9103      	str	r1, [sp, #12]
 8106e44:	701a      	strb	r2, [r3, #0]
 8106e46:	e7f0      	b.n	8106e2a <__cvt+0xa6>

08106e48 <__exponent>:
 8106e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8106e4a:	4603      	mov	r3, r0
 8106e4c:	2900      	cmp	r1, #0
 8106e4e:	bfb8      	it	lt
 8106e50:	4249      	neglt	r1, r1
 8106e52:	f803 2b02 	strb.w	r2, [r3], #2
 8106e56:	bfb4      	ite	lt
 8106e58:	222d      	movlt	r2, #45	; 0x2d
 8106e5a:	222b      	movge	r2, #43	; 0x2b
 8106e5c:	2909      	cmp	r1, #9
 8106e5e:	7042      	strb	r2, [r0, #1]
 8106e60:	dd2a      	ble.n	8106eb8 <__exponent+0x70>
 8106e62:	f10d 0407 	add.w	r4, sp, #7
 8106e66:	46a4      	mov	ip, r4
 8106e68:	270a      	movs	r7, #10
 8106e6a:	46a6      	mov	lr, r4
 8106e6c:	460a      	mov	r2, r1
 8106e6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8106e72:	fb07 1516 	mls	r5, r7, r6, r1
 8106e76:	3530      	adds	r5, #48	; 0x30
 8106e78:	2a63      	cmp	r2, #99	; 0x63
 8106e7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8106e7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8106e82:	4631      	mov	r1, r6
 8106e84:	dcf1      	bgt.n	8106e6a <__exponent+0x22>
 8106e86:	3130      	adds	r1, #48	; 0x30
 8106e88:	f1ae 0502 	sub.w	r5, lr, #2
 8106e8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8106e90:	1c44      	adds	r4, r0, #1
 8106e92:	4629      	mov	r1, r5
 8106e94:	4561      	cmp	r1, ip
 8106e96:	d30a      	bcc.n	8106eae <__exponent+0x66>
 8106e98:	f10d 0209 	add.w	r2, sp, #9
 8106e9c:	eba2 020e 	sub.w	r2, r2, lr
 8106ea0:	4565      	cmp	r5, ip
 8106ea2:	bf88      	it	hi
 8106ea4:	2200      	movhi	r2, #0
 8106ea6:	4413      	add	r3, r2
 8106ea8:	1a18      	subs	r0, r3, r0
 8106eaa:	b003      	add	sp, #12
 8106eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106eb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8106eb6:	e7ed      	b.n	8106e94 <__exponent+0x4c>
 8106eb8:	2330      	movs	r3, #48	; 0x30
 8106eba:	3130      	adds	r1, #48	; 0x30
 8106ebc:	7083      	strb	r3, [r0, #2]
 8106ebe:	70c1      	strb	r1, [r0, #3]
 8106ec0:	1d03      	adds	r3, r0, #4
 8106ec2:	e7f1      	b.n	8106ea8 <__exponent+0x60>

08106ec4 <_printf_float>:
 8106ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106ec8:	ed2d 8b02 	vpush	{d8}
 8106ecc:	b08d      	sub	sp, #52	; 0x34
 8106ece:	460c      	mov	r4, r1
 8106ed0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8106ed4:	4616      	mov	r6, r2
 8106ed6:	461f      	mov	r7, r3
 8106ed8:	4605      	mov	r5, r0
 8106eda:	f002 ff97 	bl	8109e0c <_localeconv_r>
 8106ede:	f8d0 a000 	ldr.w	sl, [r0]
 8106ee2:	4650      	mov	r0, sl
 8106ee4:	f7f9 f9fc 	bl	81002e0 <strlen>
 8106ee8:	2300      	movs	r3, #0
 8106eea:	930a      	str	r3, [sp, #40]	; 0x28
 8106eec:	6823      	ldr	r3, [r4, #0]
 8106eee:	9305      	str	r3, [sp, #20]
 8106ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8106ef4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8106ef8:	3307      	adds	r3, #7
 8106efa:	f023 0307 	bic.w	r3, r3, #7
 8106efe:	f103 0208 	add.w	r2, r3, #8
 8106f02:	f8c8 2000 	str.w	r2, [r8]
 8106f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8106f0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8106f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8106f16:	9307      	str	r3, [sp, #28]
 8106f18:	f8cd 8018 	str.w	r8, [sp, #24]
 8106f1c:	ee08 0a10 	vmov	s16, r0
 8106f20:	4b9f      	ldr	r3, [pc, #636]	; (81071a0 <_printf_float+0x2dc>)
 8106f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106f26:	f04f 32ff 	mov.w	r2, #4294967295
 8106f2a:	f7f9 fe87 	bl	8100c3c <__aeabi_dcmpun>
 8106f2e:	bb88      	cbnz	r0, 8106f94 <_printf_float+0xd0>
 8106f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106f34:	4b9a      	ldr	r3, [pc, #616]	; (81071a0 <_printf_float+0x2dc>)
 8106f36:	f04f 32ff 	mov.w	r2, #4294967295
 8106f3a:	f7f9 fe61 	bl	8100c00 <__aeabi_dcmple>
 8106f3e:	bb48      	cbnz	r0, 8106f94 <_printf_float+0xd0>
 8106f40:	2200      	movs	r2, #0
 8106f42:	2300      	movs	r3, #0
 8106f44:	4640      	mov	r0, r8
 8106f46:	4649      	mov	r1, r9
 8106f48:	f7f9 fe50 	bl	8100bec <__aeabi_dcmplt>
 8106f4c:	b110      	cbz	r0, 8106f54 <_printf_float+0x90>
 8106f4e:	232d      	movs	r3, #45	; 0x2d
 8106f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106f54:	4b93      	ldr	r3, [pc, #588]	; (81071a4 <_printf_float+0x2e0>)
 8106f56:	4894      	ldr	r0, [pc, #592]	; (81071a8 <_printf_float+0x2e4>)
 8106f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8106f5c:	bf94      	ite	ls
 8106f5e:	4698      	movls	r8, r3
 8106f60:	4680      	movhi	r8, r0
 8106f62:	2303      	movs	r3, #3
 8106f64:	6123      	str	r3, [r4, #16]
 8106f66:	9b05      	ldr	r3, [sp, #20]
 8106f68:	f023 0204 	bic.w	r2, r3, #4
 8106f6c:	6022      	str	r2, [r4, #0]
 8106f6e:	f04f 0900 	mov.w	r9, #0
 8106f72:	9700      	str	r7, [sp, #0]
 8106f74:	4633      	mov	r3, r6
 8106f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8106f78:	4621      	mov	r1, r4
 8106f7a:	4628      	mov	r0, r5
 8106f7c:	f000 f9d8 	bl	8107330 <_printf_common>
 8106f80:	3001      	adds	r0, #1
 8106f82:	f040 8090 	bne.w	81070a6 <_printf_float+0x1e2>
 8106f86:	f04f 30ff 	mov.w	r0, #4294967295
 8106f8a:	b00d      	add	sp, #52	; 0x34
 8106f8c:	ecbd 8b02 	vpop	{d8}
 8106f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106f94:	4642      	mov	r2, r8
 8106f96:	464b      	mov	r3, r9
 8106f98:	4640      	mov	r0, r8
 8106f9a:	4649      	mov	r1, r9
 8106f9c:	f7f9 fe4e 	bl	8100c3c <__aeabi_dcmpun>
 8106fa0:	b140      	cbz	r0, 8106fb4 <_printf_float+0xf0>
 8106fa2:	464b      	mov	r3, r9
 8106fa4:	2b00      	cmp	r3, #0
 8106fa6:	bfbc      	itt	lt
 8106fa8:	232d      	movlt	r3, #45	; 0x2d
 8106faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8106fae:	487f      	ldr	r0, [pc, #508]	; (81071ac <_printf_float+0x2e8>)
 8106fb0:	4b7f      	ldr	r3, [pc, #508]	; (81071b0 <_printf_float+0x2ec>)
 8106fb2:	e7d1      	b.n	8106f58 <_printf_float+0x94>
 8106fb4:	6863      	ldr	r3, [r4, #4]
 8106fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8106fba:	9206      	str	r2, [sp, #24]
 8106fbc:	1c5a      	adds	r2, r3, #1
 8106fbe:	d13f      	bne.n	8107040 <_printf_float+0x17c>
 8106fc0:	2306      	movs	r3, #6
 8106fc2:	6063      	str	r3, [r4, #4]
 8106fc4:	9b05      	ldr	r3, [sp, #20]
 8106fc6:	6861      	ldr	r1, [r4, #4]
 8106fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8106fcc:	2300      	movs	r3, #0
 8106fce:	9303      	str	r3, [sp, #12]
 8106fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8106fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8106fd6:	ab09      	add	r3, sp, #36	; 0x24
 8106fd8:	ec49 8b10 	vmov	d0, r8, r9
 8106fdc:	9300      	str	r3, [sp, #0]
 8106fde:	6022      	str	r2, [r4, #0]
 8106fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8106fe4:	4628      	mov	r0, r5
 8106fe6:	f7ff fecd 	bl	8106d84 <__cvt>
 8106fea:	9b06      	ldr	r3, [sp, #24]
 8106fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8106fee:	2b47      	cmp	r3, #71	; 0x47
 8106ff0:	4680      	mov	r8, r0
 8106ff2:	d108      	bne.n	8107006 <_printf_float+0x142>
 8106ff4:	1cc8      	adds	r0, r1, #3
 8106ff6:	db02      	blt.n	8106ffe <_printf_float+0x13a>
 8106ff8:	6863      	ldr	r3, [r4, #4]
 8106ffa:	4299      	cmp	r1, r3
 8106ffc:	dd41      	ble.n	8107082 <_printf_float+0x1be>
 8106ffe:	f1ab 0b02 	sub.w	fp, fp, #2
 8107002:	fa5f fb8b 	uxtb.w	fp, fp
 8107006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810700a:	d820      	bhi.n	810704e <_printf_float+0x18a>
 810700c:	3901      	subs	r1, #1
 810700e:	465a      	mov	r2, fp
 8107010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107014:	9109      	str	r1, [sp, #36]	; 0x24
 8107016:	f7ff ff17 	bl	8106e48 <__exponent>
 810701a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810701c:	1813      	adds	r3, r2, r0
 810701e:	2a01      	cmp	r2, #1
 8107020:	4681      	mov	r9, r0
 8107022:	6123      	str	r3, [r4, #16]
 8107024:	dc02      	bgt.n	810702c <_printf_float+0x168>
 8107026:	6822      	ldr	r2, [r4, #0]
 8107028:	07d2      	lsls	r2, r2, #31
 810702a:	d501      	bpl.n	8107030 <_printf_float+0x16c>
 810702c:	3301      	adds	r3, #1
 810702e:	6123      	str	r3, [r4, #16]
 8107030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107034:	2b00      	cmp	r3, #0
 8107036:	d09c      	beq.n	8106f72 <_printf_float+0xae>
 8107038:	232d      	movs	r3, #45	; 0x2d
 810703a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810703e:	e798      	b.n	8106f72 <_printf_float+0xae>
 8107040:	9a06      	ldr	r2, [sp, #24]
 8107042:	2a47      	cmp	r2, #71	; 0x47
 8107044:	d1be      	bne.n	8106fc4 <_printf_float+0x100>
 8107046:	2b00      	cmp	r3, #0
 8107048:	d1bc      	bne.n	8106fc4 <_printf_float+0x100>
 810704a:	2301      	movs	r3, #1
 810704c:	e7b9      	b.n	8106fc2 <_printf_float+0xfe>
 810704e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107052:	d118      	bne.n	8107086 <_printf_float+0x1c2>
 8107054:	2900      	cmp	r1, #0
 8107056:	6863      	ldr	r3, [r4, #4]
 8107058:	dd0b      	ble.n	8107072 <_printf_float+0x1ae>
 810705a:	6121      	str	r1, [r4, #16]
 810705c:	b913      	cbnz	r3, 8107064 <_printf_float+0x1a0>
 810705e:	6822      	ldr	r2, [r4, #0]
 8107060:	07d0      	lsls	r0, r2, #31
 8107062:	d502      	bpl.n	810706a <_printf_float+0x1a6>
 8107064:	3301      	adds	r3, #1
 8107066:	440b      	add	r3, r1
 8107068:	6123      	str	r3, [r4, #16]
 810706a:	65a1      	str	r1, [r4, #88]	; 0x58
 810706c:	f04f 0900 	mov.w	r9, #0
 8107070:	e7de      	b.n	8107030 <_printf_float+0x16c>
 8107072:	b913      	cbnz	r3, 810707a <_printf_float+0x1b6>
 8107074:	6822      	ldr	r2, [r4, #0]
 8107076:	07d2      	lsls	r2, r2, #31
 8107078:	d501      	bpl.n	810707e <_printf_float+0x1ba>
 810707a:	3302      	adds	r3, #2
 810707c:	e7f4      	b.n	8107068 <_printf_float+0x1a4>
 810707e:	2301      	movs	r3, #1
 8107080:	e7f2      	b.n	8107068 <_printf_float+0x1a4>
 8107082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107088:	4299      	cmp	r1, r3
 810708a:	db05      	blt.n	8107098 <_printf_float+0x1d4>
 810708c:	6823      	ldr	r3, [r4, #0]
 810708e:	6121      	str	r1, [r4, #16]
 8107090:	07d8      	lsls	r0, r3, #31
 8107092:	d5ea      	bpl.n	810706a <_printf_float+0x1a6>
 8107094:	1c4b      	adds	r3, r1, #1
 8107096:	e7e7      	b.n	8107068 <_printf_float+0x1a4>
 8107098:	2900      	cmp	r1, #0
 810709a:	bfd4      	ite	le
 810709c:	f1c1 0202 	rsble	r2, r1, #2
 81070a0:	2201      	movgt	r2, #1
 81070a2:	4413      	add	r3, r2
 81070a4:	e7e0      	b.n	8107068 <_printf_float+0x1a4>
 81070a6:	6823      	ldr	r3, [r4, #0]
 81070a8:	055a      	lsls	r2, r3, #21
 81070aa:	d407      	bmi.n	81070bc <_printf_float+0x1f8>
 81070ac:	6923      	ldr	r3, [r4, #16]
 81070ae:	4642      	mov	r2, r8
 81070b0:	4631      	mov	r1, r6
 81070b2:	4628      	mov	r0, r5
 81070b4:	47b8      	blx	r7
 81070b6:	3001      	adds	r0, #1
 81070b8:	d12c      	bne.n	8107114 <_printf_float+0x250>
 81070ba:	e764      	b.n	8106f86 <_printf_float+0xc2>
 81070bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81070c0:	f240 80e0 	bls.w	8107284 <_printf_float+0x3c0>
 81070c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81070c8:	2200      	movs	r2, #0
 81070ca:	2300      	movs	r3, #0
 81070cc:	f7f9 fd84 	bl	8100bd8 <__aeabi_dcmpeq>
 81070d0:	2800      	cmp	r0, #0
 81070d2:	d034      	beq.n	810713e <_printf_float+0x27a>
 81070d4:	4a37      	ldr	r2, [pc, #220]	; (81071b4 <_printf_float+0x2f0>)
 81070d6:	2301      	movs	r3, #1
 81070d8:	4631      	mov	r1, r6
 81070da:	4628      	mov	r0, r5
 81070dc:	47b8      	blx	r7
 81070de:	3001      	adds	r0, #1
 81070e0:	f43f af51 	beq.w	8106f86 <_printf_float+0xc2>
 81070e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81070e8:	429a      	cmp	r2, r3
 81070ea:	db02      	blt.n	81070f2 <_printf_float+0x22e>
 81070ec:	6823      	ldr	r3, [r4, #0]
 81070ee:	07d8      	lsls	r0, r3, #31
 81070f0:	d510      	bpl.n	8107114 <_printf_float+0x250>
 81070f2:	ee18 3a10 	vmov	r3, s16
 81070f6:	4652      	mov	r2, sl
 81070f8:	4631      	mov	r1, r6
 81070fa:	4628      	mov	r0, r5
 81070fc:	47b8      	blx	r7
 81070fe:	3001      	adds	r0, #1
 8107100:	f43f af41 	beq.w	8106f86 <_printf_float+0xc2>
 8107104:	f04f 0800 	mov.w	r8, #0
 8107108:	f104 091a 	add.w	r9, r4, #26
 810710c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810710e:	3b01      	subs	r3, #1
 8107110:	4543      	cmp	r3, r8
 8107112:	dc09      	bgt.n	8107128 <_printf_float+0x264>
 8107114:	6823      	ldr	r3, [r4, #0]
 8107116:	079b      	lsls	r3, r3, #30
 8107118:	f100 8105 	bmi.w	8107326 <_printf_float+0x462>
 810711c:	68e0      	ldr	r0, [r4, #12]
 810711e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107120:	4298      	cmp	r0, r3
 8107122:	bfb8      	it	lt
 8107124:	4618      	movlt	r0, r3
 8107126:	e730      	b.n	8106f8a <_printf_float+0xc6>
 8107128:	2301      	movs	r3, #1
 810712a:	464a      	mov	r2, r9
 810712c:	4631      	mov	r1, r6
 810712e:	4628      	mov	r0, r5
 8107130:	47b8      	blx	r7
 8107132:	3001      	adds	r0, #1
 8107134:	f43f af27 	beq.w	8106f86 <_printf_float+0xc2>
 8107138:	f108 0801 	add.w	r8, r8, #1
 810713c:	e7e6      	b.n	810710c <_printf_float+0x248>
 810713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107140:	2b00      	cmp	r3, #0
 8107142:	dc39      	bgt.n	81071b8 <_printf_float+0x2f4>
 8107144:	4a1b      	ldr	r2, [pc, #108]	; (81071b4 <_printf_float+0x2f0>)
 8107146:	2301      	movs	r3, #1
 8107148:	4631      	mov	r1, r6
 810714a:	4628      	mov	r0, r5
 810714c:	47b8      	blx	r7
 810714e:	3001      	adds	r0, #1
 8107150:	f43f af19 	beq.w	8106f86 <_printf_float+0xc2>
 8107154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107158:	4313      	orrs	r3, r2
 810715a:	d102      	bne.n	8107162 <_printf_float+0x29e>
 810715c:	6823      	ldr	r3, [r4, #0]
 810715e:	07d9      	lsls	r1, r3, #31
 8107160:	d5d8      	bpl.n	8107114 <_printf_float+0x250>
 8107162:	ee18 3a10 	vmov	r3, s16
 8107166:	4652      	mov	r2, sl
 8107168:	4631      	mov	r1, r6
 810716a:	4628      	mov	r0, r5
 810716c:	47b8      	blx	r7
 810716e:	3001      	adds	r0, #1
 8107170:	f43f af09 	beq.w	8106f86 <_printf_float+0xc2>
 8107174:	f04f 0900 	mov.w	r9, #0
 8107178:	f104 0a1a 	add.w	sl, r4, #26
 810717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810717e:	425b      	negs	r3, r3
 8107180:	454b      	cmp	r3, r9
 8107182:	dc01      	bgt.n	8107188 <_printf_float+0x2c4>
 8107184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107186:	e792      	b.n	81070ae <_printf_float+0x1ea>
 8107188:	2301      	movs	r3, #1
 810718a:	4652      	mov	r2, sl
 810718c:	4631      	mov	r1, r6
 810718e:	4628      	mov	r0, r5
 8107190:	47b8      	blx	r7
 8107192:	3001      	adds	r0, #1
 8107194:	f43f aef7 	beq.w	8106f86 <_printf_float+0xc2>
 8107198:	f109 0901 	add.w	r9, r9, #1
 810719c:	e7ee      	b.n	810717c <_printf_float+0x2b8>
 810719e:	bf00      	nop
 81071a0:	7fefffff 	.word	0x7fefffff
 81071a4:	0810b6f8 	.word	0x0810b6f8
 81071a8:	0810b6fc 	.word	0x0810b6fc
 81071ac:	0810b704 	.word	0x0810b704
 81071b0:	0810b700 	.word	0x0810b700
 81071b4:	0810b708 	.word	0x0810b708
 81071b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81071ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81071bc:	429a      	cmp	r2, r3
 81071be:	bfa8      	it	ge
 81071c0:	461a      	movge	r2, r3
 81071c2:	2a00      	cmp	r2, #0
 81071c4:	4691      	mov	r9, r2
 81071c6:	dc37      	bgt.n	8107238 <_printf_float+0x374>
 81071c8:	f04f 0b00 	mov.w	fp, #0
 81071cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81071d0:	f104 021a 	add.w	r2, r4, #26
 81071d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81071d6:	9305      	str	r3, [sp, #20]
 81071d8:	eba3 0309 	sub.w	r3, r3, r9
 81071dc:	455b      	cmp	r3, fp
 81071de:	dc33      	bgt.n	8107248 <_printf_float+0x384>
 81071e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81071e4:	429a      	cmp	r2, r3
 81071e6:	db3b      	blt.n	8107260 <_printf_float+0x39c>
 81071e8:	6823      	ldr	r3, [r4, #0]
 81071ea:	07da      	lsls	r2, r3, #31
 81071ec:	d438      	bmi.n	8107260 <_printf_float+0x39c>
 81071ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81071f0:	9a05      	ldr	r2, [sp, #20]
 81071f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 81071f4:	1a9a      	subs	r2, r3, r2
 81071f6:	eba3 0901 	sub.w	r9, r3, r1
 81071fa:	4591      	cmp	r9, r2
 81071fc:	bfa8      	it	ge
 81071fe:	4691      	movge	r9, r2
 8107200:	f1b9 0f00 	cmp.w	r9, #0
 8107204:	dc35      	bgt.n	8107272 <_printf_float+0x3ae>
 8107206:	f04f 0800 	mov.w	r8, #0
 810720a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810720e:	f104 0a1a 	add.w	sl, r4, #26
 8107212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107216:	1a9b      	subs	r3, r3, r2
 8107218:	eba3 0309 	sub.w	r3, r3, r9
 810721c:	4543      	cmp	r3, r8
 810721e:	f77f af79 	ble.w	8107114 <_printf_float+0x250>
 8107222:	2301      	movs	r3, #1
 8107224:	4652      	mov	r2, sl
 8107226:	4631      	mov	r1, r6
 8107228:	4628      	mov	r0, r5
 810722a:	47b8      	blx	r7
 810722c:	3001      	adds	r0, #1
 810722e:	f43f aeaa 	beq.w	8106f86 <_printf_float+0xc2>
 8107232:	f108 0801 	add.w	r8, r8, #1
 8107236:	e7ec      	b.n	8107212 <_printf_float+0x34e>
 8107238:	4613      	mov	r3, r2
 810723a:	4631      	mov	r1, r6
 810723c:	4642      	mov	r2, r8
 810723e:	4628      	mov	r0, r5
 8107240:	47b8      	blx	r7
 8107242:	3001      	adds	r0, #1
 8107244:	d1c0      	bne.n	81071c8 <_printf_float+0x304>
 8107246:	e69e      	b.n	8106f86 <_printf_float+0xc2>
 8107248:	2301      	movs	r3, #1
 810724a:	4631      	mov	r1, r6
 810724c:	4628      	mov	r0, r5
 810724e:	9205      	str	r2, [sp, #20]
 8107250:	47b8      	blx	r7
 8107252:	3001      	adds	r0, #1
 8107254:	f43f ae97 	beq.w	8106f86 <_printf_float+0xc2>
 8107258:	9a05      	ldr	r2, [sp, #20]
 810725a:	f10b 0b01 	add.w	fp, fp, #1
 810725e:	e7b9      	b.n	81071d4 <_printf_float+0x310>
 8107260:	ee18 3a10 	vmov	r3, s16
 8107264:	4652      	mov	r2, sl
 8107266:	4631      	mov	r1, r6
 8107268:	4628      	mov	r0, r5
 810726a:	47b8      	blx	r7
 810726c:	3001      	adds	r0, #1
 810726e:	d1be      	bne.n	81071ee <_printf_float+0x32a>
 8107270:	e689      	b.n	8106f86 <_printf_float+0xc2>
 8107272:	9a05      	ldr	r2, [sp, #20]
 8107274:	464b      	mov	r3, r9
 8107276:	4442      	add	r2, r8
 8107278:	4631      	mov	r1, r6
 810727a:	4628      	mov	r0, r5
 810727c:	47b8      	blx	r7
 810727e:	3001      	adds	r0, #1
 8107280:	d1c1      	bne.n	8107206 <_printf_float+0x342>
 8107282:	e680      	b.n	8106f86 <_printf_float+0xc2>
 8107284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107286:	2a01      	cmp	r2, #1
 8107288:	dc01      	bgt.n	810728e <_printf_float+0x3ca>
 810728a:	07db      	lsls	r3, r3, #31
 810728c:	d538      	bpl.n	8107300 <_printf_float+0x43c>
 810728e:	2301      	movs	r3, #1
 8107290:	4642      	mov	r2, r8
 8107292:	4631      	mov	r1, r6
 8107294:	4628      	mov	r0, r5
 8107296:	47b8      	blx	r7
 8107298:	3001      	adds	r0, #1
 810729a:	f43f ae74 	beq.w	8106f86 <_printf_float+0xc2>
 810729e:	ee18 3a10 	vmov	r3, s16
 81072a2:	4652      	mov	r2, sl
 81072a4:	4631      	mov	r1, r6
 81072a6:	4628      	mov	r0, r5
 81072a8:	47b8      	blx	r7
 81072aa:	3001      	adds	r0, #1
 81072ac:	f43f ae6b 	beq.w	8106f86 <_printf_float+0xc2>
 81072b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81072b4:	2200      	movs	r2, #0
 81072b6:	2300      	movs	r3, #0
 81072b8:	f7f9 fc8e 	bl	8100bd8 <__aeabi_dcmpeq>
 81072bc:	b9d8      	cbnz	r0, 81072f6 <_printf_float+0x432>
 81072be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81072c0:	f108 0201 	add.w	r2, r8, #1
 81072c4:	3b01      	subs	r3, #1
 81072c6:	4631      	mov	r1, r6
 81072c8:	4628      	mov	r0, r5
 81072ca:	47b8      	blx	r7
 81072cc:	3001      	adds	r0, #1
 81072ce:	d10e      	bne.n	81072ee <_printf_float+0x42a>
 81072d0:	e659      	b.n	8106f86 <_printf_float+0xc2>
 81072d2:	2301      	movs	r3, #1
 81072d4:	4652      	mov	r2, sl
 81072d6:	4631      	mov	r1, r6
 81072d8:	4628      	mov	r0, r5
 81072da:	47b8      	blx	r7
 81072dc:	3001      	adds	r0, #1
 81072de:	f43f ae52 	beq.w	8106f86 <_printf_float+0xc2>
 81072e2:	f108 0801 	add.w	r8, r8, #1
 81072e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81072e8:	3b01      	subs	r3, #1
 81072ea:	4543      	cmp	r3, r8
 81072ec:	dcf1      	bgt.n	81072d2 <_printf_float+0x40e>
 81072ee:	464b      	mov	r3, r9
 81072f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81072f4:	e6dc      	b.n	81070b0 <_printf_float+0x1ec>
 81072f6:	f04f 0800 	mov.w	r8, #0
 81072fa:	f104 0a1a 	add.w	sl, r4, #26
 81072fe:	e7f2      	b.n	81072e6 <_printf_float+0x422>
 8107300:	2301      	movs	r3, #1
 8107302:	4642      	mov	r2, r8
 8107304:	e7df      	b.n	81072c6 <_printf_float+0x402>
 8107306:	2301      	movs	r3, #1
 8107308:	464a      	mov	r2, r9
 810730a:	4631      	mov	r1, r6
 810730c:	4628      	mov	r0, r5
 810730e:	47b8      	blx	r7
 8107310:	3001      	adds	r0, #1
 8107312:	f43f ae38 	beq.w	8106f86 <_printf_float+0xc2>
 8107316:	f108 0801 	add.w	r8, r8, #1
 810731a:	68e3      	ldr	r3, [r4, #12]
 810731c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810731e:	1a5b      	subs	r3, r3, r1
 8107320:	4543      	cmp	r3, r8
 8107322:	dcf0      	bgt.n	8107306 <_printf_float+0x442>
 8107324:	e6fa      	b.n	810711c <_printf_float+0x258>
 8107326:	f04f 0800 	mov.w	r8, #0
 810732a:	f104 0919 	add.w	r9, r4, #25
 810732e:	e7f4      	b.n	810731a <_printf_float+0x456>

08107330 <_printf_common>:
 8107330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107334:	4616      	mov	r6, r2
 8107336:	4699      	mov	r9, r3
 8107338:	688a      	ldr	r2, [r1, #8]
 810733a:	690b      	ldr	r3, [r1, #16]
 810733c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107340:	4293      	cmp	r3, r2
 8107342:	bfb8      	it	lt
 8107344:	4613      	movlt	r3, r2
 8107346:	6033      	str	r3, [r6, #0]
 8107348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810734c:	4607      	mov	r7, r0
 810734e:	460c      	mov	r4, r1
 8107350:	b10a      	cbz	r2, 8107356 <_printf_common+0x26>
 8107352:	3301      	adds	r3, #1
 8107354:	6033      	str	r3, [r6, #0]
 8107356:	6823      	ldr	r3, [r4, #0]
 8107358:	0699      	lsls	r1, r3, #26
 810735a:	bf42      	ittt	mi
 810735c:	6833      	ldrmi	r3, [r6, #0]
 810735e:	3302      	addmi	r3, #2
 8107360:	6033      	strmi	r3, [r6, #0]
 8107362:	6825      	ldr	r5, [r4, #0]
 8107364:	f015 0506 	ands.w	r5, r5, #6
 8107368:	d106      	bne.n	8107378 <_printf_common+0x48>
 810736a:	f104 0a19 	add.w	sl, r4, #25
 810736e:	68e3      	ldr	r3, [r4, #12]
 8107370:	6832      	ldr	r2, [r6, #0]
 8107372:	1a9b      	subs	r3, r3, r2
 8107374:	42ab      	cmp	r3, r5
 8107376:	dc26      	bgt.n	81073c6 <_printf_common+0x96>
 8107378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810737c:	1e13      	subs	r3, r2, #0
 810737e:	6822      	ldr	r2, [r4, #0]
 8107380:	bf18      	it	ne
 8107382:	2301      	movne	r3, #1
 8107384:	0692      	lsls	r2, r2, #26
 8107386:	d42b      	bmi.n	81073e0 <_printf_common+0xb0>
 8107388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810738c:	4649      	mov	r1, r9
 810738e:	4638      	mov	r0, r7
 8107390:	47c0      	blx	r8
 8107392:	3001      	adds	r0, #1
 8107394:	d01e      	beq.n	81073d4 <_printf_common+0xa4>
 8107396:	6823      	ldr	r3, [r4, #0]
 8107398:	68e5      	ldr	r5, [r4, #12]
 810739a:	6832      	ldr	r2, [r6, #0]
 810739c:	f003 0306 	and.w	r3, r3, #6
 81073a0:	2b04      	cmp	r3, #4
 81073a2:	bf08      	it	eq
 81073a4:	1aad      	subeq	r5, r5, r2
 81073a6:	68a3      	ldr	r3, [r4, #8]
 81073a8:	6922      	ldr	r2, [r4, #16]
 81073aa:	bf0c      	ite	eq
 81073ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81073b0:	2500      	movne	r5, #0
 81073b2:	4293      	cmp	r3, r2
 81073b4:	bfc4      	itt	gt
 81073b6:	1a9b      	subgt	r3, r3, r2
 81073b8:	18ed      	addgt	r5, r5, r3
 81073ba:	2600      	movs	r6, #0
 81073bc:	341a      	adds	r4, #26
 81073be:	42b5      	cmp	r5, r6
 81073c0:	d11a      	bne.n	81073f8 <_printf_common+0xc8>
 81073c2:	2000      	movs	r0, #0
 81073c4:	e008      	b.n	81073d8 <_printf_common+0xa8>
 81073c6:	2301      	movs	r3, #1
 81073c8:	4652      	mov	r2, sl
 81073ca:	4649      	mov	r1, r9
 81073cc:	4638      	mov	r0, r7
 81073ce:	47c0      	blx	r8
 81073d0:	3001      	adds	r0, #1
 81073d2:	d103      	bne.n	81073dc <_printf_common+0xac>
 81073d4:	f04f 30ff 	mov.w	r0, #4294967295
 81073d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81073dc:	3501      	adds	r5, #1
 81073de:	e7c6      	b.n	810736e <_printf_common+0x3e>
 81073e0:	18e1      	adds	r1, r4, r3
 81073e2:	1c5a      	adds	r2, r3, #1
 81073e4:	2030      	movs	r0, #48	; 0x30
 81073e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81073ea:	4422      	add	r2, r4
 81073ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81073f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81073f4:	3302      	adds	r3, #2
 81073f6:	e7c7      	b.n	8107388 <_printf_common+0x58>
 81073f8:	2301      	movs	r3, #1
 81073fa:	4622      	mov	r2, r4
 81073fc:	4649      	mov	r1, r9
 81073fe:	4638      	mov	r0, r7
 8107400:	47c0      	blx	r8
 8107402:	3001      	adds	r0, #1
 8107404:	d0e6      	beq.n	81073d4 <_printf_common+0xa4>
 8107406:	3601      	adds	r6, #1
 8107408:	e7d9      	b.n	81073be <_printf_common+0x8e>
	...

0810740c <_printf_i>:
 810740c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107410:	7e0f      	ldrb	r7, [r1, #24]
 8107412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8107414:	2f78      	cmp	r7, #120	; 0x78
 8107416:	4691      	mov	r9, r2
 8107418:	4680      	mov	r8, r0
 810741a:	460c      	mov	r4, r1
 810741c:	469a      	mov	sl, r3
 810741e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8107422:	d807      	bhi.n	8107434 <_printf_i+0x28>
 8107424:	2f62      	cmp	r7, #98	; 0x62
 8107426:	d80a      	bhi.n	810743e <_printf_i+0x32>
 8107428:	2f00      	cmp	r7, #0
 810742a:	f000 80d8 	beq.w	81075de <_printf_i+0x1d2>
 810742e:	2f58      	cmp	r7, #88	; 0x58
 8107430:	f000 80a3 	beq.w	810757a <_printf_i+0x16e>
 8107434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8107438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810743c:	e03a      	b.n	81074b4 <_printf_i+0xa8>
 810743e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107442:	2b15      	cmp	r3, #21
 8107444:	d8f6      	bhi.n	8107434 <_printf_i+0x28>
 8107446:	a101      	add	r1, pc, #4	; (adr r1, 810744c <_printf_i+0x40>)
 8107448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810744c:	081074a5 	.word	0x081074a5
 8107450:	081074b9 	.word	0x081074b9
 8107454:	08107435 	.word	0x08107435
 8107458:	08107435 	.word	0x08107435
 810745c:	08107435 	.word	0x08107435
 8107460:	08107435 	.word	0x08107435
 8107464:	081074b9 	.word	0x081074b9
 8107468:	08107435 	.word	0x08107435
 810746c:	08107435 	.word	0x08107435
 8107470:	08107435 	.word	0x08107435
 8107474:	08107435 	.word	0x08107435
 8107478:	081075c5 	.word	0x081075c5
 810747c:	081074e9 	.word	0x081074e9
 8107480:	081075a7 	.word	0x081075a7
 8107484:	08107435 	.word	0x08107435
 8107488:	08107435 	.word	0x08107435
 810748c:	081075e7 	.word	0x081075e7
 8107490:	08107435 	.word	0x08107435
 8107494:	081074e9 	.word	0x081074e9
 8107498:	08107435 	.word	0x08107435
 810749c:	08107435 	.word	0x08107435
 81074a0:	081075af 	.word	0x081075af
 81074a4:	682b      	ldr	r3, [r5, #0]
 81074a6:	1d1a      	adds	r2, r3, #4
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	602a      	str	r2, [r5, #0]
 81074ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81074b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81074b4:	2301      	movs	r3, #1
 81074b6:	e0a3      	b.n	8107600 <_printf_i+0x1f4>
 81074b8:	6820      	ldr	r0, [r4, #0]
 81074ba:	6829      	ldr	r1, [r5, #0]
 81074bc:	0606      	lsls	r6, r0, #24
 81074be:	f101 0304 	add.w	r3, r1, #4
 81074c2:	d50a      	bpl.n	81074da <_printf_i+0xce>
 81074c4:	680e      	ldr	r6, [r1, #0]
 81074c6:	602b      	str	r3, [r5, #0]
 81074c8:	2e00      	cmp	r6, #0
 81074ca:	da03      	bge.n	81074d4 <_printf_i+0xc8>
 81074cc:	232d      	movs	r3, #45	; 0x2d
 81074ce:	4276      	negs	r6, r6
 81074d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81074d4:	485e      	ldr	r0, [pc, #376]	; (8107650 <_printf_i+0x244>)
 81074d6:	230a      	movs	r3, #10
 81074d8:	e019      	b.n	810750e <_printf_i+0x102>
 81074da:	680e      	ldr	r6, [r1, #0]
 81074dc:	602b      	str	r3, [r5, #0]
 81074de:	f010 0f40 	tst.w	r0, #64	; 0x40
 81074e2:	bf18      	it	ne
 81074e4:	b236      	sxthne	r6, r6
 81074e6:	e7ef      	b.n	81074c8 <_printf_i+0xbc>
 81074e8:	682b      	ldr	r3, [r5, #0]
 81074ea:	6820      	ldr	r0, [r4, #0]
 81074ec:	1d19      	adds	r1, r3, #4
 81074ee:	6029      	str	r1, [r5, #0]
 81074f0:	0601      	lsls	r1, r0, #24
 81074f2:	d501      	bpl.n	81074f8 <_printf_i+0xec>
 81074f4:	681e      	ldr	r6, [r3, #0]
 81074f6:	e002      	b.n	81074fe <_printf_i+0xf2>
 81074f8:	0646      	lsls	r6, r0, #25
 81074fa:	d5fb      	bpl.n	81074f4 <_printf_i+0xe8>
 81074fc:	881e      	ldrh	r6, [r3, #0]
 81074fe:	4854      	ldr	r0, [pc, #336]	; (8107650 <_printf_i+0x244>)
 8107500:	2f6f      	cmp	r7, #111	; 0x6f
 8107502:	bf0c      	ite	eq
 8107504:	2308      	moveq	r3, #8
 8107506:	230a      	movne	r3, #10
 8107508:	2100      	movs	r1, #0
 810750a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810750e:	6865      	ldr	r5, [r4, #4]
 8107510:	60a5      	str	r5, [r4, #8]
 8107512:	2d00      	cmp	r5, #0
 8107514:	bfa2      	ittt	ge
 8107516:	6821      	ldrge	r1, [r4, #0]
 8107518:	f021 0104 	bicge.w	r1, r1, #4
 810751c:	6021      	strge	r1, [r4, #0]
 810751e:	b90e      	cbnz	r6, 8107524 <_printf_i+0x118>
 8107520:	2d00      	cmp	r5, #0
 8107522:	d04d      	beq.n	81075c0 <_printf_i+0x1b4>
 8107524:	4615      	mov	r5, r2
 8107526:	fbb6 f1f3 	udiv	r1, r6, r3
 810752a:	fb03 6711 	mls	r7, r3, r1, r6
 810752e:	5dc7      	ldrb	r7, [r0, r7]
 8107530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8107534:	4637      	mov	r7, r6
 8107536:	42bb      	cmp	r3, r7
 8107538:	460e      	mov	r6, r1
 810753a:	d9f4      	bls.n	8107526 <_printf_i+0x11a>
 810753c:	2b08      	cmp	r3, #8
 810753e:	d10b      	bne.n	8107558 <_printf_i+0x14c>
 8107540:	6823      	ldr	r3, [r4, #0]
 8107542:	07de      	lsls	r6, r3, #31
 8107544:	d508      	bpl.n	8107558 <_printf_i+0x14c>
 8107546:	6923      	ldr	r3, [r4, #16]
 8107548:	6861      	ldr	r1, [r4, #4]
 810754a:	4299      	cmp	r1, r3
 810754c:	bfde      	ittt	le
 810754e:	2330      	movle	r3, #48	; 0x30
 8107550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8107554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8107558:	1b52      	subs	r2, r2, r5
 810755a:	6122      	str	r2, [r4, #16]
 810755c:	f8cd a000 	str.w	sl, [sp]
 8107560:	464b      	mov	r3, r9
 8107562:	aa03      	add	r2, sp, #12
 8107564:	4621      	mov	r1, r4
 8107566:	4640      	mov	r0, r8
 8107568:	f7ff fee2 	bl	8107330 <_printf_common>
 810756c:	3001      	adds	r0, #1
 810756e:	d14c      	bne.n	810760a <_printf_i+0x1fe>
 8107570:	f04f 30ff 	mov.w	r0, #4294967295
 8107574:	b004      	add	sp, #16
 8107576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810757a:	4835      	ldr	r0, [pc, #212]	; (8107650 <_printf_i+0x244>)
 810757c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8107580:	6829      	ldr	r1, [r5, #0]
 8107582:	6823      	ldr	r3, [r4, #0]
 8107584:	f851 6b04 	ldr.w	r6, [r1], #4
 8107588:	6029      	str	r1, [r5, #0]
 810758a:	061d      	lsls	r5, r3, #24
 810758c:	d514      	bpl.n	81075b8 <_printf_i+0x1ac>
 810758e:	07df      	lsls	r7, r3, #31
 8107590:	bf44      	itt	mi
 8107592:	f043 0320 	orrmi.w	r3, r3, #32
 8107596:	6023      	strmi	r3, [r4, #0]
 8107598:	b91e      	cbnz	r6, 81075a2 <_printf_i+0x196>
 810759a:	6823      	ldr	r3, [r4, #0]
 810759c:	f023 0320 	bic.w	r3, r3, #32
 81075a0:	6023      	str	r3, [r4, #0]
 81075a2:	2310      	movs	r3, #16
 81075a4:	e7b0      	b.n	8107508 <_printf_i+0xfc>
 81075a6:	6823      	ldr	r3, [r4, #0]
 81075a8:	f043 0320 	orr.w	r3, r3, #32
 81075ac:	6023      	str	r3, [r4, #0]
 81075ae:	2378      	movs	r3, #120	; 0x78
 81075b0:	4828      	ldr	r0, [pc, #160]	; (8107654 <_printf_i+0x248>)
 81075b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81075b6:	e7e3      	b.n	8107580 <_printf_i+0x174>
 81075b8:	0659      	lsls	r1, r3, #25
 81075ba:	bf48      	it	mi
 81075bc:	b2b6      	uxthmi	r6, r6
 81075be:	e7e6      	b.n	810758e <_printf_i+0x182>
 81075c0:	4615      	mov	r5, r2
 81075c2:	e7bb      	b.n	810753c <_printf_i+0x130>
 81075c4:	682b      	ldr	r3, [r5, #0]
 81075c6:	6826      	ldr	r6, [r4, #0]
 81075c8:	6961      	ldr	r1, [r4, #20]
 81075ca:	1d18      	adds	r0, r3, #4
 81075cc:	6028      	str	r0, [r5, #0]
 81075ce:	0635      	lsls	r5, r6, #24
 81075d0:	681b      	ldr	r3, [r3, #0]
 81075d2:	d501      	bpl.n	81075d8 <_printf_i+0x1cc>
 81075d4:	6019      	str	r1, [r3, #0]
 81075d6:	e002      	b.n	81075de <_printf_i+0x1d2>
 81075d8:	0670      	lsls	r0, r6, #25
 81075da:	d5fb      	bpl.n	81075d4 <_printf_i+0x1c8>
 81075dc:	8019      	strh	r1, [r3, #0]
 81075de:	2300      	movs	r3, #0
 81075e0:	6123      	str	r3, [r4, #16]
 81075e2:	4615      	mov	r5, r2
 81075e4:	e7ba      	b.n	810755c <_printf_i+0x150>
 81075e6:	682b      	ldr	r3, [r5, #0]
 81075e8:	1d1a      	adds	r2, r3, #4
 81075ea:	602a      	str	r2, [r5, #0]
 81075ec:	681d      	ldr	r5, [r3, #0]
 81075ee:	6862      	ldr	r2, [r4, #4]
 81075f0:	2100      	movs	r1, #0
 81075f2:	4628      	mov	r0, r5
 81075f4:	f7f8 fe7c 	bl	81002f0 <memchr>
 81075f8:	b108      	cbz	r0, 81075fe <_printf_i+0x1f2>
 81075fa:	1b40      	subs	r0, r0, r5
 81075fc:	6060      	str	r0, [r4, #4]
 81075fe:	6863      	ldr	r3, [r4, #4]
 8107600:	6123      	str	r3, [r4, #16]
 8107602:	2300      	movs	r3, #0
 8107604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107608:	e7a8      	b.n	810755c <_printf_i+0x150>
 810760a:	6923      	ldr	r3, [r4, #16]
 810760c:	462a      	mov	r2, r5
 810760e:	4649      	mov	r1, r9
 8107610:	4640      	mov	r0, r8
 8107612:	47d0      	blx	sl
 8107614:	3001      	adds	r0, #1
 8107616:	d0ab      	beq.n	8107570 <_printf_i+0x164>
 8107618:	6823      	ldr	r3, [r4, #0]
 810761a:	079b      	lsls	r3, r3, #30
 810761c:	d413      	bmi.n	8107646 <_printf_i+0x23a>
 810761e:	68e0      	ldr	r0, [r4, #12]
 8107620:	9b03      	ldr	r3, [sp, #12]
 8107622:	4298      	cmp	r0, r3
 8107624:	bfb8      	it	lt
 8107626:	4618      	movlt	r0, r3
 8107628:	e7a4      	b.n	8107574 <_printf_i+0x168>
 810762a:	2301      	movs	r3, #1
 810762c:	4632      	mov	r2, r6
 810762e:	4649      	mov	r1, r9
 8107630:	4640      	mov	r0, r8
 8107632:	47d0      	blx	sl
 8107634:	3001      	adds	r0, #1
 8107636:	d09b      	beq.n	8107570 <_printf_i+0x164>
 8107638:	3501      	adds	r5, #1
 810763a:	68e3      	ldr	r3, [r4, #12]
 810763c:	9903      	ldr	r1, [sp, #12]
 810763e:	1a5b      	subs	r3, r3, r1
 8107640:	42ab      	cmp	r3, r5
 8107642:	dcf2      	bgt.n	810762a <_printf_i+0x21e>
 8107644:	e7eb      	b.n	810761e <_printf_i+0x212>
 8107646:	2500      	movs	r5, #0
 8107648:	f104 0619 	add.w	r6, r4, #25
 810764c:	e7f5      	b.n	810763a <_printf_i+0x22e>
 810764e:	bf00      	nop
 8107650:	0810b70a 	.word	0x0810b70a
 8107654:	0810b71b 	.word	0x0810b71b

08107658 <_scanf_float>:
 8107658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810765c:	b087      	sub	sp, #28
 810765e:	4617      	mov	r7, r2
 8107660:	9303      	str	r3, [sp, #12]
 8107662:	688b      	ldr	r3, [r1, #8]
 8107664:	1e5a      	subs	r2, r3, #1
 8107666:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810766a:	bf83      	ittte	hi
 810766c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8107670:	195b      	addhi	r3, r3, r5
 8107672:	9302      	strhi	r3, [sp, #8]
 8107674:	2300      	movls	r3, #0
 8107676:	bf86      	itte	hi
 8107678:	f240 135d 	movwhi	r3, #349	; 0x15d
 810767c:	608b      	strhi	r3, [r1, #8]
 810767e:	9302      	strls	r3, [sp, #8]
 8107680:	680b      	ldr	r3, [r1, #0]
 8107682:	468b      	mov	fp, r1
 8107684:	2500      	movs	r5, #0
 8107686:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810768a:	f84b 3b1c 	str.w	r3, [fp], #28
 810768e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8107692:	4680      	mov	r8, r0
 8107694:	460c      	mov	r4, r1
 8107696:	465e      	mov	r6, fp
 8107698:	46aa      	mov	sl, r5
 810769a:	46a9      	mov	r9, r5
 810769c:	9501      	str	r5, [sp, #4]
 810769e:	68a2      	ldr	r2, [r4, #8]
 81076a0:	b152      	cbz	r2, 81076b8 <_scanf_float+0x60>
 81076a2:	683b      	ldr	r3, [r7, #0]
 81076a4:	781b      	ldrb	r3, [r3, #0]
 81076a6:	2b4e      	cmp	r3, #78	; 0x4e
 81076a8:	d864      	bhi.n	8107774 <_scanf_float+0x11c>
 81076aa:	2b40      	cmp	r3, #64	; 0x40
 81076ac:	d83c      	bhi.n	8107728 <_scanf_float+0xd0>
 81076ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81076b2:	b2c8      	uxtb	r0, r1
 81076b4:	280e      	cmp	r0, #14
 81076b6:	d93a      	bls.n	810772e <_scanf_float+0xd6>
 81076b8:	f1b9 0f00 	cmp.w	r9, #0
 81076bc:	d003      	beq.n	81076c6 <_scanf_float+0x6e>
 81076be:	6823      	ldr	r3, [r4, #0]
 81076c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81076c4:	6023      	str	r3, [r4, #0]
 81076c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81076ca:	f1ba 0f01 	cmp.w	sl, #1
 81076ce:	f200 8113 	bhi.w	81078f8 <_scanf_float+0x2a0>
 81076d2:	455e      	cmp	r6, fp
 81076d4:	f200 8105 	bhi.w	81078e2 <_scanf_float+0x28a>
 81076d8:	2501      	movs	r5, #1
 81076da:	4628      	mov	r0, r5
 81076dc:	b007      	add	sp, #28
 81076de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81076e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81076e6:	2a0d      	cmp	r2, #13
 81076e8:	d8e6      	bhi.n	81076b8 <_scanf_float+0x60>
 81076ea:	a101      	add	r1, pc, #4	; (adr r1, 81076f0 <_scanf_float+0x98>)
 81076ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81076f0:	0810782f 	.word	0x0810782f
 81076f4:	081076b9 	.word	0x081076b9
 81076f8:	081076b9 	.word	0x081076b9
 81076fc:	081076b9 	.word	0x081076b9
 8107700:	0810788f 	.word	0x0810788f
 8107704:	08107867 	.word	0x08107867
 8107708:	081076b9 	.word	0x081076b9
 810770c:	081076b9 	.word	0x081076b9
 8107710:	0810783d 	.word	0x0810783d
 8107714:	081076b9 	.word	0x081076b9
 8107718:	081076b9 	.word	0x081076b9
 810771c:	081076b9 	.word	0x081076b9
 8107720:	081076b9 	.word	0x081076b9
 8107724:	081077f5 	.word	0x081077f5
 8107728:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810772c:	e7db      	b.n	81076e6 <_scanf_float+0x8e>
 810772e:	290e      	cmp	r1, #14
 8107730:	d8c2      	bhi.n	81076b8 <_scanf_float+0x60>
 8107732:	a001      	add	r0, pc, #4	; (adr r0, 8107738 <_scanf_float+0xe0>)
 8107734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8107738:	081077e7 	.word	0x081077e7
 810773c:	081076b9 	.word	0x081076b9
 8107740:	081077e7 	.word	0x081077e7
 8107744:	0810787b 	.word	0x0810787b
 8107748:	081076b9 	.word	0x081076b9
 810774c:	08107795 	.word	0x08107795
 8107750:	081077d1 	.word	0x081077d1
 8107754:	081077d1 	.word	0x081077d1
 8107758:	081077d1 	.word	0x081077d1
 810775c:	081077d1 	.word	0x081077d1
 8107760:	081077d1 	.word	0x081077d1
 8107764:	081077d1 	.word	0x081077d1
 8107768:	081077d1 	.word	0x081077d1
 810776c:	081077d1 	.word	0x081077d1
 8107770:	081077d1 	.word	0x081077d1
 8107774:	2b6e      	cmp	r3, #110	; 0x6e
 8107776:	d809      	bhi.n	810778c <_scanf_float+0x134>
 8107778:	2b60      	cmp	r3, #96	; 0x60
 810777a:	d8b2      	bhi.n	81076e2 <_scanf_float+0x8a>
 810777c:	2b54      	cmp	r3, #84	; 0x54
 810777e:	d077      	beq.n	8107870 <_scanf_float+0x218>
 8107780:	2b59      	cmp	r3, #89	; 0x59
 8107782:	d199      	bne.n	81076b8 <_scanf_float+0x60>
 8107784:	2d07      	cmp	r5, #7
 8107786:	d197      	bne.n	81076b8 <_scanf_float+0x60>
 8107788:	2508      	movs	r5, #8
 810778a:	e029      	b.n	81077e0 <_scanf_float+0x188>
 810778c:	2b74      	cmp	r3, #116	; 0x74
 810778e:	d06f      	beq.n	8107870 <_scanf_float+0x218>
 8107790:	2b79      	cmp	r3, #121	; 0x79
 8107792:	e7f6      	b.n	8107782 <_scanf_float+0x12a>
 8107794:	6821      	ldr	r1, [r4, #0]
 8107796:	05c8      	lsls	r0, r1, #23
 8107798:	d51a      	bpl.n	81077d0 <_scanf_float+0x178>
 810779a:	9b02      	ldr	r3, [sp, #8]
 810779c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81077a0:	6021      	str	r1, [r4, #0]
 81077a2:	f109 0901 	add.w	r9, r9, #1
 81077a6:	b11b      	cbz	r3, 81077b0 <_scanf_float+0x158>
 81077a8:	3b01      	subs	r3, #1
 81077aa:	3201      	adds	r2, #1
 81077ac:	9302      	str	r3, [sp, #8]
 81077ae:	60a2      	str	r2, [r4, #8]
 81077b0:	68a3      	ldr	r3, [r4, #8]
 81077b2:	3b01      	subs	r3, #1
 81077b4:	60a3      	str	r3, [r4, #8]
 81077b6:	6923      	ldr	r3, [r4, #16]
 81077b8:	3301      	adds	r3, #1
 81077ba:	6123      	str	r3, [r4, #16]
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	3b01      	subs	r3, #1
 81077c0:	2b00      	cmp	r3, #0
 81077c2:	607b      	str	r3, [r7, #4]
 81077c4:	f340 8084 	ble.w	81078d0 <_scanf_float+0x278>
 81077c8:	683b      	ldr	r3, [r7, #0]
 81077ca:	3301      	adds	r3, #1
 81077cc:	603b      	str	r3, [r7, #0]
 81077ce:	e766      	b.n	810769e <_scanf_float+0x46>
 81077d0:	eb1a 0f05 	cmn.w	sl, r5
 81077d4:	f47f af70 	bne.w	81076b8 <_scanf_float+0x60>
 81077d8:	6822      	ldr	r2, [r4, #0]
 81077da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81077de:	6022      	str	r2, [r4, #0]
 81077e0:	f806 3b01 	strb.w	r3, [r6], #1
 81077e4:	e7e4      	b.n	81077b0 <_scanf_float+0x158>
 81077e6:	6822      	ldr	r2, [r4, #0]
 81077e8:	0610      	lsls	r0, r2, #24
 81077ea:	f57f af65 	bpl.w	81076b8 <_scanf_float+0x60>
 81077ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81077f2:	e7f4      	b.n	81077de <_scanf_float+0x186>
 81077f4:	f1ba 0f00 	cmp.w	sl, #0
 81077f8:	d10e      	bne.n	8107818 <_scanf_float+0x1c0>
 81077fa:	f1b9 0f00 	cmp.w	r9, #0
 81077fe:	d10e      	bne.n	810781e <_scanf_float+0x1c6>
 8107800:	6822      	ldr	r2, [r4, #0]
 8107802:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8107806:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810780a:	d108      	bne.n	810781e <_scanf_float+0x1c6>
 810780c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107810:	6022      	str	r2, [r4, #0]
 8107812:	f04f 0a01 	mov.w	sl, #1
 8107816:	e7e3      	b.n	81077e0 <_scanf_float+0x188>
 8107818:	f1ba 0f02 	cmp.w	sl, #2
 810781c:	d055      	beq.n	81078ca <_scanf_float+0x272>
 810781e:	2d01      	cmp	r5, #1
 8107820:	d002      	beq.n	8107828 <_scanf_float+0x1d0>
 8107822:	2d04      	cmp	r5, #4
 8107824:	f47f af48 	bne.w	81076b8 <_scanf_float+0x60>
 8107828:	3501      	adds	r5, #1
 810782a:	b2ed      	uxtb	r5, r5
 810782c:	e7d8      	b.n	81077e0 <_scanf_float+0x188>
 810782e:	f1ba 0f01 	cmp.w	sl, #1
 8107832:	f47f af41 	bne.w	81076b8 <_scanf_float+0x60>
 8107836:	f04f 0a02 	mov.w	sl, #2
 810783a:	e7d1      	b.n	81077e0 <_scanf_float+0x188>
 810783c:	b97d      	cbnz	r5, 810785e <_scanf_float+0x206>
 810783e:	f1b9 0f00 	cmp.w	r9, #0
 8107842:	f47f af3c 	bne.w	81076be <_scanf_float+0x66>
 8107846:	6822      	ldr	r2, [r4, #0]
 8107848:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810784c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8107850:	f47f af39 	bne.w	81076c6 <_scanf_float+0x6e>
 8107854:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107858:	6022      	str	r2, [r4, #0]
 810785a:	2501      	movs	r5, #1
 810785c:	e7c0      	b.n	81077e0 <_scanf_float+0x188>
 810785e:	2d03      	cmp	r5, #3
 8107860:	d0e2      	beq.n	8107828 <_scanf_float+0x1d0>
 8107862:	2d05      	cmp	r5, #5
 8107864:	e7de      	b.n	8107824 <_scanf_float+0x1cc>
 8107866:	2d02      	cmp	r5, #2
 8107868:	f47f af26 	bne.w	81076b8 <_scanf_float+0x60>
 810786c:	2503      	movs	r5, #3
 810786e:	e7b7      	b.n	81077e0 <_scanf_float+0x188>
 8107870:	2d06      	cmp	r5, #6
 8107872:	f47f af21 	bne.w	81076b8 <_scanf_float+0x60>
 8107876:	2507      	movs	r5, #7
 8107878:	e7b2      	b.n	81077e0 <_scanf_float+0x188>
 810787a:	6822      	ldr	r2, [r4, #0]
 810787c:	0591      	lsls	r1, r2, #22
 810787e:	f57f af1b 	bpl.w	81076b8 <_scanf_float+0x60>
 8107882:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8107886:	6022      	str	r2, [r4, #0]
 8107888:	f8cd 9004 	str.w	r9, [sp, #4]
 810788c:	e7a8      	b.n	81077e0 <_scanf_float+0x188>
 810788e:	6822      	ldr	r2, [r4, #0]
 8107890:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8107894:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8107898:	d006      	beq.n	81078a8 <_scanf_float+0x250>
 810789a:	0550      	lsls	r0, r2, #21
 810789c:	f57f af0c 	bpl.w	81076b8 <_scanf_float+0x60>
 81078a0:	f1b9 0f00 	cmp.w	r9, #0
 81078a4:	f43f af0f 	beq.w	81076c6 <_scanf_float+0x6e>
 81078a8:	0591      	lsls	r1, r2, #22
 81078aa:	bf58      	it	pl
 81078ac:	9901      	ldrpl	r1, [sp, #4]
 81078ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81078b2:	bf58      	it	pl
 81078b4:	eba9 0101 	subpl.w	r1, r9, r1
 81078b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 81078bc:	bf58      	it	pl
 81078be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 81078c2:	6022      	str	r2, [r4, #0]
 81078c4:	f04f 0900 	mov.w	r9, #0
 81078c8:	e78a      	b.n	81077e0 <_scanf_float+0x188>
 81078ca:	f04f 0a03 	mov.w	sl, #3
 81078ce:	e787      	b.n	81077e0 <_scanf_float+0x188>
 81078d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81078d4:	4639      	mov	r1, r7
 81078d6:	4640      	mov	r0, r8
 81078d8:	4798      	blx	r3
 81078da:	2800      	cmp	r0, #0
 81078dc:	f43f aedf 	beq.w	810769e <_scanf_float+0x46>
 81078e0:	e6ea      	b.n	81076b8 <_scanf_float+0x60>
 81078e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81078e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81078ea:	463a      	mov	r2, r7
 81078ec:	4640      	mov	r0, r8
 81078ee:	4798      	blx	r3
 81078f0:	6923      	ldr	r3, [r4, #16]
 81078f2:	3b01      	subs	r3, #1
 81078f4:	6123      	str	r3, [r4, #16]
 81078f6:	e6ec      	b.n	81076d2 <_scanf_float+0x7a>
 81078f8:	1e6b      	subs	r3, r5, #1
 81078fa:	2b06      	cmp	r3, #6
 81078fc:	d825      	bhi.n	810794a <_scanf_float+0x2f2>
 81078fe:	2d02      	cmp	r5, #2
 8107900:	d836      	bhi.n	8107970 <_scanf_float+0x318>
 8107902:	455e      	cmp	r6, fp
 8107904:	f67f aee8 	bls.w	81076d8 <_scanf_float+0x80>
 8107908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810790c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107910:	463a      	mov	r2, r7
 8107912:	4640      	mov	r0, r8
 8107914:	4798      	blx	r3
 8107916:	6923      	ldr	r3, [r4, #16]
 8107918:	3b01      	subs	r3, #1
 810791a:	6123      	str	r3, [r4, #16]
 810791c:	e7f1      	b.n	8107902 <_scanf_float+0x2aa>
 810791e:	9802      	ldr	r0, [sp, #8]
 8107920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107924:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8107928:	9002      	str	r0, [sp, #8]
 810792a:	463a      	mov	r2, r7
 810792c:	4640      	mov	r0, r8
 810792e:	4798      	blx	r3
 8107930:	6923      	ldr	r3, [r4, #16]
 8107932:	3b01      	subs	r3, #1
 8107934:	6123      	str	r3, [r4, #16]
 8107936:	f10a 3aff 	add.w	sl, sl, #4294967295
 810793a:	fa5f fa8a 	uxtb.w	sl, sl
 810793e:	f1ba 0f02 	cmp.w	sl, #2
 8107942:	d1ec      	bne.n	810791e <_scanf_float+0x2c6>
 8107944:	3d03      	subs	r5, #3
 8107946:	b2ed      	uxtb	r5, r5
 8107948:	1b76      	subs	r6, r6, r5
 810794a:	6823      	ldr	r3, [r4, #0]
 810794c:	05da      	lsls	r2, r3, #23
 810794e:	d52f      	bpl.n	81079b0 <_scanf_float+0x358>
 8107950:	055b      	lsls	r3, r3, #21
 8107952:	d510      	bpl.n	8107976 <_scanf_float+0x31e>
 8107954:	455e      	cmp	r6, fp
 8107956:	f67f aebf 	bls.w	81076d8 <_scanf_float+0x80>
 810795a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810795e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107962:	463a      	mov	r2, r7
 8107964:	4640      	mov	r0, r8
 8107966:	4798      	blx	r3
 8107968:	6923      	ldr	r3, [r4, #16]
 810796a:	3b01      	subs	r3, #1
 810796c:	6123      	str	r3, [r4, #16]
 810796e:	e7f1      	b.n	8107954 <_scanf_float+0x2fc>
 8107970:	46aa      	mov	sl, r5
 8107972:	9602      	str	r6, [sp, #8]
 8107974:	e7df      	b.n	8107936 <_scanf_float+0x2de>
 8107976:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810797a:	6923      	ldr	r3, [r4, #16]
 810797c:	2965      	cmp	r1, #101	; 0x65
 810797e:	f103 33ff 	add.w	r3, r3, #4294967295
 8107982:	f106 35ff 	add.w	r5, r6, #4294967295
 8107986:	6123      	str	r3, [r4, #16]
 8107988:	d00c      	beq.n	81079a4 <_scanf_float+0x34c>
 810798a:	2945      	cmp	r1, #69	; 0x45
 810798c:	d00a      	beq.n	81079a4 <_scanf_float+0x34c>
 810798e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107992:	463a      	mov	r2, r7
 8107994:	4640      	mov	r0, r8
 8107996:	4798      	blx	r3
 8107998:	6923      	ldr	r3, [r4, #16]
 810799a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810799e:	3b01      	subs	r3, #1
 81079a0:	1eb5      	subs	r5, r6, #2
 81079a2:	6123      	str	r3, [r4, #16]
 81079a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81079a8:	463a      	mov	r2, r7
 81079aa:	4640      	mov	r0, r8
 81079ac:	4798      	blx	r3
 81079ae:	462e      	mov	r6, r5
 81079b0:	6825      	ldr	r5, [r4, #0]
 81079b2:	f015 0510 	ands.w	r5, r5, #16
 81079b6:	d159      	bne.n	8107a6c <_scanf_float+0x414>
 81079b8:	7035      	strb	r5, [r6, #0]
 81079ba:	6823      	ldr	r3, [r4, #0]
 81079bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81079c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81079c4:	d11b      	bne.n	81079fe <_scanf_float+0x3a6>
 81079c6:	9b01      	ldr	r3, [sp, #4]
 81079c8:	454b      	cmp	r3, r9
 81079ca:	eba3 0209 	sub.w	r2, r3, r9
 81079ce:	d123      	bne.n	8107a18 <_scanf_float+0x3c0>
 81079d0:	2200      	movs	r2, #0
 81079d2:	4659      	mov	r1, fp
 81079d4:	4640      	mov	r0, r8
 81079d6:	f000 feb1 	bl	810873c <_strtod_r>
 81079da:	6822      	ldr	r2, [r4, #0]
 81079dc:	9b03      	ldr	r3, [sp, #12]
 81079de:	f012 0f02 	tst.w	r2, #2
 81079e2:	ec57 6b10 	vmov	r6, r7, d0
 81079e6:	681b      	ldr	r3, [r3, #0]
 81079e8:	d021      	beq.n	8107a2e <_scanf_float+0x3d6>
 81079ea:	9903      	ldr	r1, [sp, #12]
 81079ec:	1d1a      	adds	r2, r3, #4
 81079ee:	600a      	str	r2, [r1, #0]
 81079f0:	681b      	ldr	r3, [r3, #0]
 81079f2:	e9c3 6700 	strd	r6, r7, [r3]
 81079f6:	68e3      	ldr	r3, [r4, #12]
 81079f8:	3301      	adds	r3, #1
 81079fa:	60e3      	str	r3, [r4, #12]
 81079fc:	e66d      	b.n	81076da <_scanf_float+0x82>
 81079fe:	9b04      	ldr	r3, [sp, #16]
 8107a00:	2b00      	cmp	r3, #0
 8107a02:	d0e5      	beq.n	81079d0 <_scanf_float+0x378>
 8107a04:	9905      	ldr	r1, [sp, #20]
 8107a06:	230a      	movs	r3, #10
 8107a08:	462a      	mov	r2, r5
 8107a0a:	3101      	adds	r1, #1
 8107a0c:	4640      	mov	r0, r8
 8107a0e:	f000 ff1d 	bl	810884c <_strtol_r>
 8107a12:	9b04      	ldr	r3, [sp, #16]
 8107a14:	9e05      	ldr	r6, [sp, #20]
 8107a16:	1ac2      	subs	r2, r0, r3
 8107a18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8107a1c:	429e      	cmp	r6, r3
 8107a1e:	bf28      	it	cs
 8107a20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8107a24:	4912      	ldr	r1, [pc, #72]	; (8107a70 <_scanf_float+0x418>)
 8107a26:	4630      	mov	r0, r6
 8107a28:	f000 f844 	bl	8107ab4 <siprintf>
 8107a2c:	e7d0      	b.n	81079d0 <_scanf_float+0x378>
 8107a2e:	9903      	ldr	r1, [sp, #12]
 8107a30:	f012 0f04 	tst.w	r2, #4
 8107a34:	f103 0204 	add.w	r2, r3, #4
 8107a38:	600a      	str	r2, [r1, #0]
 8107a3a:	d1d9      	bne.n	81079f0 <_scanf_float+0x398>
 8107a3c:	f8d3 8000 	ldr.w	r8, [r3]
 8107a40:	ee10 2a10 	vmov	r2, s0
 8107a44:	ee10 0a10 	vmov	r0, s0
 8107a48:	463b      	mov	r3, r7
 8107a4a:	4639      	mov	r1, r7
 8107a4c:	f7f9 f8f6 	bl	8100c3c <__aeabi_dcmpun>
 8107a50:	b128      	cbz	r0, 8107a5e <_scanf_float+0x406>
 8107a52:	4808      	ldr	r0, [pc, #32]	; (8107a74 <_scanf_float+0x41c>)
 8107a54:	f000 f828 	bl	8107aa8 <nanf>
 8107a58:	ed88 0a00 	vstr	s0, [r8]
 8107a5c:	e7cb      	b.n	81079f6 <_scanf_float+0x39e>
 8107a5e:	4630      	mov	r0, r6
 8107a60:	4639      	mov	r1, r7
 8107a62:	f7f9 f949 	bl	8100cf8 <__aeabi_d2f>
 8107a66:	f8c8 0000 	str.w	r0, [r8]
 8107a6a:	e7c4      	b.n	81079f6 <_scanf_float+0x39e>
 8107a6c:	2500      	movs	r5, #0
 8107a6e:	e634      	b.n	81076da <_scanf_float+0x82>
 8107a70:	0810b72c 	.word	0x0810b72c
 8107a74:	0810bba0 	.word	0x0810bba0

08107a78 <iprintf>:
 8107a78:	b40f      	push	{r0, r1, r2, r3}
 8107a7a:	4b0a      	ldr	r3, [pc, #40]	; (8107aa4 <iprintf+0x2c>)
 8107a7c:	b513      	push	{r0, r1, r4, lr}
 8107a7e:	681c      	ldr	r4, [r3, #0]
 8107a80:	b124      	cbz	r4, 8107a8c <iprintf+0x14>
 8107a82:	69a3      	ldr	r3, [r4, #24]
 8107a84:	b913      	cbnz	r3, 8107a8c <iprintf+0x14>
 8107a86:	4620      	mov	r0, r4
 8107a88:	f001 fdb4 	bl	81095f4 <__sinit>
 8107a8c:	ab05      	add	r3, sp, #20
 8107a8e:	9a04      	ldr	r2, [sp, #16]
 8107a90:	68a1      	ldr	r1, [r4, #8]
 8107a92:	9301      	str	r3, [sp, #4]
 8107a94:	4620      	mov	r0, r4
 8107a96:	f003 f927 	bl	810ace8 <_vfiprintf_r>
 8107a9a:	b002      	add	sp, #8
 8107a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107aa0:	b004      	add	sp, #16
 8107aa2:	4770      	bx	lr
 8107aa4:	10000028 	.word	0x10000028

08107aa8 <nanf>:
 8107aa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8107ab0 <nanf+0x8>
 8107aac:	4770      	bx	lr
 8107aae:	bf00      	nop
 8107ab0:	7fc00000 	.word	0x7fc00000

08107ab4 <siprintf>:
 8107ab4:	b40e      	push	{r1, r2, r3}
 8107ab6:	b500      	push	{lr}
 8107ab8:	b09c      	sub	sp, #112	; 0x70
 8107aba:	ab1d      	add	r3, sp, #116	; 0x74
 8107abc:	9002      	str	r0, [sp, #8]
 8107abe:	9006      	str	r0, [sp, #24]
 8107ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8107ac4:	4809      	ldr	r0, [pc, #36]	; (8107aec <siprintf+0x38>)
 8107ac6:	9107      	str	r1, [sp, #28]
 8107ac8:	9104      	str	r1, [sp, #16]
 8107aca:	4909      	ldr	r1, [pc, #36]	; (8107af0 <siprintf+0x3c>)
 8107acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8107ad0:	9105      	str	r1, [sp, #20]
 8107ad2:	6800      	ldr	r0, [r0, #0]
 8107ad4:	9301      	str	r3, [sp, #4]
 8107ad6:	a902      	add	r1, sp, #8
 8107ad8:	f002 ffdc 	bl	810aa94 <_svfiprintf_r>
 8107adc:	9b02      	ldr	r3, [sp, #8]
 8107ade:	2200      	movs	r2, #0
 8107ae0:	701a      	strb	r2, [r3, #0]
 8107ae2:	b01c      	add	sp, #112	; 0x70
 8107ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8107ae8:	b003      	add	sp, #12
 8107aea:	4770      	bx	lr
 8107aec:	10000028 	.word	0x10000028
 8107af0:	ffff0208 	.word	0xffff0208

08107af4 <sulp>:
 8107af4:	b570      	push	{r4, r5, r6, lr}
 8107af6:	4604      	mov	r4, r0
 8107af8:	460d      	mov	r5, r1
 8107afa:	ec45 4b10 	vmov	d0, r4, r5
 8107afe:	4616      	mov	r6, r2
 8107b00:	f002 fd26 	bl	810a550 <__ulp>
 8107b04:	ec51 0b10 	vmov	r0, r1, d0
 8107b08:	b17e      	cbz	r6, 8107b2a <sulp+0x36>
 8107b0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8107b0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8107b12:	2b00      	cmp	r3, #0
 8107b14:	dd09      	ble.n	8107b2a <sulp+0x36>
 8107b16:	051b      	lsls	r3, r3, #20
 8107b18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8107b1c:	2400      	movs	r4, #0
 8107b1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8107b22:	4622      	mov	r2, r4
 8107b24:	462b      	mov	r3, r5
 8107b26:	f7f8 fdef 	bl	8100708 <__aeabi_dmul>
 8107b2a:	bd70      	pop	{r4, r5, r6, pc}
 8107b2c:	0000      	movs	r0, r0
	...

08107b30 <_strtod_l>:
 8107b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107b34:	ed2d 8b02 	vpush	{d8}
 8107b38:	b09d      	sub	sp, #116	; 0x74
 8107b3a:	461f      	mov	r7, r3
 8107b3c:	2300      	movs	r3, #0
 8107b3e:	9318      	str	r3, [sp, #96]	; 0x60
 8107b40:	4ba2      	ldr	r3, [pc, #648]	; (8107dcc <_strtod_l+0x29c>)
 8107b42:	9213      	str	r2, [sp, #76]	; 0x4c
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	9305      	str	r3, [sp, #20]
 8107b48:	4604      	mov	r4, r0
 8107b4a:	4618      	mov	r0, r3
 8107b4c:	4688      	mov	r8, r1
 8107b4e:	f7f8 fbc7 	bl	81002e0 <strlen>
 8107b52:	f04f 0a00 	mov.w	sl, #0
 8107b56:	4605      	mov	r5, r0
 8107b58:	f04f 0b00 	mov.w	fp, #0
 8107b5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8107b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107b62:	781a      	ldrb	r2, [r3, #0]
 8107b64:	2a2b      	cmp	r2, #43	; 0x2b
 8107b66:	d04e      	beq.n	8107c06 <_strtod_l+0xd6>
 8107b68:	d83b      	bhi.n	8107be2 <_strtod_l+0xb2>
 8107b6a:	2a0d      	cmp	r2, #13
 8107b6c:	d834      	bhi.n	8107bd8 <_strtod_l+0xa8>
 8107b6e:	2a08      	cmp	r2, #8
 8107b70:	d834      	bhi.n	8107bdc <_strtod_l+0xac>
 8107b72:	2a00      	cmp	r2, #0
 8107b74:	d03e      	beq.n	8107bf4 <_strtod_l+0xc4>
 8107b76:	2300      	movs	r3, #0
 8107b78:	930a      	str	r3, [sp, #40]	; 0x28
 8107b7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8107b7c:	7833      	ldrb	r3, [r6, #0]
 8107b7e:	2b30      	cmp	r3, #48	; 0x30
 8107b80:	f040 80b0 	bne.w	8107ce4 <_strtod_l+0x1b4>
 8107b84:	7873      	ldrb	r3, [r6, #1]
 8107b86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8107b8a:	2b58      	cmp	r3, #88	; 0x58
 8107b8c:	d168      	bne.n	8107c60 <_strtod_l+0x130>
 8107b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107b90:	9301      	str	r3, [sp, #4]
 8107b92:	ab18      	add	r3, sp, #96	; 0x60
 8107b94:	9702      	str	r7, [sp, #8]
 8107b96:	9300      	str	r3, [sp, #0]
 8107b98:	4a8d      	ldr	r2, [pc, #564]	; (8107dd0 <_strtod_l+0x2a0>)
 8107b9a:	ab19      	add	r3, sp, #100	; 0x64
 8107b9c:	a917      	add	r1, sp, #92	; 0x5c
 8107b9e:	4620      	mov	r0, r4
 8107ba0:	f001 fe2c 	bl	81097fc <__gethex>
 8107ba4:	f010 0707 	ands.w	r7, r0, #7
 8107ba8:	4605      	mov	r5, r0
 8107baa:	d005      	beq.n	8107bb8 <_strtod_l+0x88>
 8107bac:	2f06      	cmp	r7, #6
 8107bae:	d12c      	bne.n	8107c0a <_strtod_l+0xda>
 8107bb0:	3601      	adds	r6, #1
 8107bb2:	2300      	movs	r3, #0
 8107bb4:	9617      	str	r6, [sp, #92]	; 0x5c
 8107bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8107bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107bba:	2b00      	cmp	r3, #0
 8107bbc:	f040 8590 	bne.w	81086e0 <_strtod_l+0xbb0>
 8107bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107bc2:	b1eb      	cbz	r3, 8107c00 <_strtod_l+0xd0>
 8107bc4:	4652      	mov	r2, sl
 8107bc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8107bca:	ec43 2b10 	vmov	d0, r2, r3
 8107bce:	b01d      	add	sp, #116	; 0x74
 8107bd0:	ecbd 8b02 	vpop	{d8}
 8107bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107bd8:	2a20      	cmp	r2, #32
 8107bda:	d1cc      	bne.n	8107b76 <_strtod_l+0x46>
 8107bdc:	3301      	adds	r3, #1
 8107bde:	9317      	str	r3, [sp, #92]	; 0x5c
 8107be0:	e7be      	b.n	8107b60 <_strtod_l+0x30>
 8107be2:	2a2d      	cmp	r2, #45	; 0x2d
 8107be4:	d1c7      	bne.n	8107b76 <_strtod_l+0x46>
 8107be6:	2201      	movs	r2, #1
 8107be8:	920a      	str	r2, [sp, #40]	; 0x28
 8107bea:	1c5a      	adds	r2, r3, #1
 8107bec:	9217      	str	r2, [sp, #92]	; 0x5c
 8107bee:	785b      	ldrb	r3, [r3, #1]
 8107bf0:	2b00      	cmp	r3, #0
 8107bf2:	d1c2      	bne.n	8107b7a <_strtod_l+0x4a>
 8107bf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107bf6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8107bfa:	2b00      	cmp	r3, #0
 8107bfc:	f040 856e 	bne.w	81086dc <_strtod_l+0xbac>
 8107c00:	4652      	mov	r2, sl
 8107c02:	465b      	mov	r3, fp
 8107c04:	e7e1      	b.n	8107bca <_strtod_l+0x9a>
 8107c06:	2200      	movs	r2, #0
 8107c08:	e7ee      	b.n	8107be8 <_strtod_l+0xb8>
 8107c0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8107c0c:	b13a      	cbz	r2, 8107c1e <_strtod_l+0xee>
 8107c0e:	2135      	movs	r1, #53	; 0x35
 8107c10:	a81a      	add	r0, sp, #104	; 0x68
 8107c12:	f002 fda8 	bl	810a766 <__copybits>
 8107c16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8107c18:	4620      	mov	r0, r4
 8107c1a:	f002 f967 	bl	8109eec <_Bfree>
 8107c1e:	3f01      	subs	r7, #1
 8107c20:	2f04      	cmp	r7, #4
 8107c22:	d806      	bhi.n	8107c32 <_strtod_l+0x102>
 8107c24:	e8df f007 	tbb	[pc, r7]
 8107c28:	1714030a 	.word	0x1714030a
 8107c2c:	0a          	.byte	0x0a
 8107c2d:	00          	.byte	0x00
 8107c2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8107c32:	0728      	lsls	r0, r5, #28
 8107c34:	d5c0      	bpl.n	8107bb8 <_strtod_l+0x88>
 8107c36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8107c3a:	e7bd      	b.n	8107bb8 <_strtod_l+0x88>
 8107c3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8107c40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8107c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8107c46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8107c4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8107c4e:	e7f0      	b.n	8107c32 <_strtod_l+0x102>
 8107c50:	f8df b180 	ldr.w	fp, [pc, #384]	; 8107dd4 <_strtod_l+0x2a4>
 8107c54:	e7ed      	b.n	8107c32 <_strtod_l+0x102>
 8107c56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8107c5a:	f04f 3aff 	mov.w	sl, #4294967295
 8107c5e:	e7e8      	b.n	8107c32 <_strtod_l+0x102>
 8107c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107c62:	1c5a      	adds	r2, r3, #1
 8107c64:	9217      	str	r2, [sp, #92]	; 0x5c
 8107c66:	785b      	ldrb	r3, [r3, #1]
 8107c68:	2b30      	cmp	r3, #48	; 0x30
 8107c6a:	d0f9      	beq.n	8107c60 <_strtod_l+0x130>
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	d0a3      	beq.n	8107bb8 <_strtod_l+0x88>
 8107c70:	2301      	movs	r3, #1
 8107c72:	f04f 0900 	mov.w	r9, #0
 8107c76:	9304      	str	r3, [sp, #16]
 8107c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107c7a:	9308      	str	r3, [sp, #32]
 8107c7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8107c80:	464f      	mov	r7, r9
 8107c82:	220a      	movs	r2, #10
 8107c84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8107c86:	7806      	ldrb	r6, [r0, #0]
 8107c88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8107c8c:	b2d9      	uxtb	r1, r3
 8107c8e:	2909      	cmp	r1, #9
 8107c90:	d92a      	bls.n	8107ce8 <_strtod_l+0x1b8>
 8107c92:	9905      	ldr	r1, [sp, #20]
 8107c94:	462a      	mov	r2, r5
 8107c96:	f003 f9b2 	bl	810affe <strncmp>
 8107c9a:	b398      	cbz	r0, 8107d04 <_strtod_l+0x1d4>
 8107c9c:	2000      	movs	r0, #0
 8107c9e:	4632      	mov	r2, r6
 8107ca0:	463d      	mov	r5, r7
 8107ca2:	9005      	str	r0, [sp, #20]
 8107ca4:	4603      	mov	r3, r0
 8107ca6:	2a65      	cmp	r2, #101	; 0x65
 8107ca8:	d001      	beq.n	8107cae <_strtod_l+0x17e>
 8107caa:	2a45      	cmp	r2, #69	; 0x45
 8107cac:	d118      	bne.n	8107ce0 <_strtod_l+0x1b0>
 8107cae:	b91d      	cbnz	r5, 8107cb8 <_strtod_l+0x188>
 8107cb0:	9a04      	ldr	r2, [sp, #16]
 8107cb2:	4302      	orrs	r2, r0
 8107cb4:	d09e      	beq.n	8107bf4 <_strtod_l+0xc4>
 8107cb6:	2500      	movs	r5, #0
 8107cb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8107cbc:	f108 0201 	add.w	r2, r8, #1
 8107cc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8107cc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8107cc6:	2a2b      	cmp	r2, #43	; 0x2b
 8107cc8:	d075      	beq.n	8107db6 <_strtod_l+0x286>
 8107cca:	2a2d      	cmp	r2, #45	; 0x2d
 8107ccc:	d07b      	beq.n	8107dc6 <_strtod_l+0x296>
 8107cce:	f04f 0c00 	mov.w	ip, #0
 8107cd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8107cd6:	2909      	cmp	r1, #9
 8107cd8:	f240 8082 	bls.w	8107de0 <_strtod_l+0x2b0>
 8107cdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8107ce0:	2600      	movs	r6, #0
 8107ce2:	e09d      	b.n	8107e20 <_strtod_l+0x2f0>
 8107ce4:	2300      	movs	r3, #0
 8107ce6:	e7c4      	b.n	8107c72 <_strtod_l+0x142>
 8107ce8:	2f08      	cmp	r7, #8
 8107cea:	bfd8      	it	le
 8107cec:	9907      	ldrle	r1, [sp, #28]
 8107cee:	f100 0001 	add.w	r0, r0, #1
 8107cf2:	bfda      	itte	le
 8107cf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8107cf8:	9307      	strle	r3, [sp, #28]
 8107cfa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8107cfe:	3701      	adds	r7, #1
 8107d00:	9017      	str	r0, [sp, #92]	; 0x5c
 8107d02:	e7bf      	b.n	8107c84 <_strtod_l+0x154>
 8107d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107d06:	195a      	adds	r2, r3, r5
 8107d08:	9217      	str	r2, [sp, #92]	; 0x5c
 8107d0a:	5d5a      	ldrb	r2, [r3, r5]
 8107d0c:	2f00      	cmp	r7, #0
 8107d0e:	d037      	beq.n	8107d80 <_strtod_l+0x250>
 8107d10:	9005      	str	r0, [sp, #20]
 8107d12:	463d      	mov	r5, r7
 8107d14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8107d18:	2b09      	cmp	r3, #9
 8107d1a:	d912      	bls.n	8107d42 <_strtod_l+0x212>
 8107d1c:	2301      	movs	r3, #1
 8107d1e:	e7c2      	b.n	8107ca6 <_strtod_l+0x176>
 8107d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107d22:	1c5a      	adds	r2, r3, #1
 8107d24:	9217      	str	r2, [sp, #92]	; 0x5c
 8107d26:	785a      	ldrb	r2, [r3, #1]
 8107d28:	3001      	adds	r0, #1
 8107d2a:	2a30      	cmp	r2, #48	; 0x30
 8107d2c:	d0f8      	beq.n	8107d20 <_strtod_l+0x1f0>
 8107d2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8107d32:	2b08      	cmp	r3, #8
 8107d34:	f200 84d9 	bhi.w	81086ea <_strtod_l+0xbba>
 8107d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107d3a:	9005      	str	r0, [sp, #20]
 8107d3c:	2000      	movs	r0, #0
 8107d3e:	9308      	str	r3, [sp, #32]
 8107d40:	4605      	mov	r5, r0
 8107d42:	3a30      	subs	r2, #48	; 0x30
 8107d44:	f100 0301 	add.w	r3, r0, #1
 8107d48:	d014      	beq.n	8107d74 <_strtod_l+0x244>
 8107d4a:	9905      	ldr	r1, [sp, #20]
 8107d4c:	4419      	add	r1, r3
 8107d4e:	9105      	str	r1, [sp, #20]
 8107d50:	462b      	mov	r3, r5
 8107d52:	eb00 0e05 	add.w	lr, r0, r5
 8107d56:	210a      	movs	r1, #10
 8107d58:	4573      	cmp	r3, lr
 8107d5a:	d113      	bne.n	8107d84 <_strtod_l+0x254>
 8107d5c:	182b      	adds	r3, r5, r0
 8107d5e:	2b08      	cmp	r3, #8
 8107d60:	f105 0501 	add.w	r5, r5, #1
 8107d64:	4405      	add	r5, r0
 8107d66:	dc1c      	bgt.n	8107da2 <_strtod_l+0x272>
 8107d68:	9907      	ldr	r1, [sp, #28]
 8107d6a:	230a      	movs	r3, #10
 8107d6c:	fb03 2301 	mla	r3, r3, r1, r2
 8107d70:	9307      	str	r3, [sp, #28]
 8107d72:	2300      	movs	r3, #0
 8107d74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8107d76:	1c51      	adds	r1, r2, #1
 8107d78:	9117      	str	r1, [sp, #92]	; 0x5c
 8107d7a:	7852      	ldrb	r2, [r2, #1]
 8107d7c:	4618      	mov	r0, r3
 8107d7e:	e7c9      	b.n	8107d14 <_strtod_l+0x1e4>
 8107d80:	4638      	mov	r0, r7
 8107d82:	e7d2      	b.n	8107d2a <_strtod_l+0x1fa>
 8107d84:	2b08      	cmp	r3, #8
 8107d86:	dc04      	bgt.n	8107d92 <_strtod_l+0x262>
 8107d88:	9e07      	ldr	r6, [sp, #28]
 8107d8a:	434e      	muls	r6, r1
 8107d8c:	9607      	str	r6, [sp, #28]
 8107d8e:	3301      	adds	r3, #1
 8107d90:	e7e2      	b.n	8107d58 <_strtod_l+0x228>
 8107d92:	f103 0c01 	add.w	ip, r3, #1
 8107d96:	f1bc 0f10 	cmp.w	ip, #16
 8107d9a:	bfd8      	it	le
 8107d9c:	fb01 f909 	mulle.w	r9, r1, r9
 8107da0:	e7f5      	b.n	8107d8e <_strtod_l+0x25e>
 8107da2:	2d10      	cmp	r5, #16
 8107da4:	bfdc      	itt	le
 8107da6:	230a      	movle	r3, #10
 8107da8:	fb03 2909 	mlale	r9, r3, r9, r2
 8107dac:	e7e1      	b.n	8107d72 <_strtod_l+0x242>
 8107dae:	2300      	movs	r3, #0
 8107db0:	9305      	str	r3, [sp, #20]
 8107db2:	2301      	movs	r3, #1
 8107db4:	e77c      	b.n	8107cb0 <_strtod_l+0x180>
 8107db6:	f04f 0c00 	mov.w	ip, #0
 8107dba:	f108 0202 	add.w	r2, r8, #2
 8107dbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8107dc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8107dc4:	e785      	b.n	8107cd2 <_strtod_l+0x1a2>
 8107dc6:	f04f 0c01 	mov.w	ip, #1
 8107dca:	e7f6      	b.n	8107dba <_strtod_l+0x28a>
 8107dcc:	0810b9e4 	.word	0x0810b9e4
 8107dd0:	0810b734 	.word	0x0810b734
 8107dd4:	7ff00000 	.word	0x7ff00000
 8107dd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8107dda:	1c51      	adds	r1, r2, #1
 8107ddc:	9117      	str	r1, [sp, #92]	; 0x5c
 8107dde:	7852      	ldrb	r2, [r2, #1]
 8107de0:	2a30      	cmp	r2, #48	; 0x30
 8107de2:	d0f9      	beq.n	8107dd8 <_strtod_l+0x2a8>
 8107de4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8107de8:	2908      	cmp	r1, #8
 8107dea:	f63f af79 	bhi.w	8107ce0 <_strtod_l+0x1b0>
 8107dee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8107df2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8107df4:	9206      	str	r2, [sp, #24]
 8107df6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8107df8:	1c51      	adds	r1, r2, #1
 8107dfa:	9117      	str	r1, [sp, #92]	; 0x5c
 8107dfc:	7852      	ldrb	r2, [r2, #1]
 8107dfe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8107e02:	2e09      	cmp	r6, #9
 8107e04:	d937      	bls.n	8107e76 <_strtod_l+0x346>
 8107e06:	9e06      	ldr	r6, [sp, #24]
 8107e08:	1b89      	subs	r1, r1, r6
 8107e0a:	2908      	cmp	r1, #8
 8107e0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8107e10:	dc02      	bgt.n	8107e18 <_strtod_l+0x2e8>
 8107e12:	4576      	cmp	r6, lr
 8107e14:	bfa8      	it	ge
 8107e16:	4676      	movge	r6, lr
 8107e18:	f1bc 0f00 	cmp.w	ip, #0
 8107e1c:	d000      	beq.n	8107e20 <_strtod_l+0x2f0>
 8107e1e:	4276      	negs	r6, r6
 8107e20:	2d00      	cmp	r5, #0
 8107e22:	d14d      	bne.n	8107ec0 <_strtod_l+0x390>
 8107e24:	9904      	ldr	r1, [sp, #16]
 8107e26:	4301      	orrs	r1, r0
 8107e28:	f47f aec6 	bne.w	8107bb8 <_strtod_l+0x88>
 8107e2c:	2b00      	cmp	r3, #0
 8107e2e:	f47f aee1 	bne.w	8107bf4 <_strtod_l+0xc4>
 8107e32:	2a69      	cmp	r2, #105	; 0x69
 8107e34:	d027      	beq.n	8107e86 <_strtod_l+0x356>
 8107e36:	dc24      	bgt.n	8107e82 <_strtod_l+0x352>
 8107e38:	2a49      	cmp	r2, #73	; 0x49
 8107e3a:	d024      	beq.n	8107e86 <_strtod_l+0x356>
 8107e3c:	2a4e      	cmp	r2, #78	; 0x4e
 8107e3e:	f47f aed9 	bne.w	8107bf4 <_strtod_l+0xc4>
 8107e42:	499f      	ldr	r1, [pc, #636]	; (81080c0 <_strtod_l+0x590>)
 8107e44:	a817      	add	r0, sp, #92	; 0x5c
 8107e46:	f001 ff31 	bl	8109cac <__match>
 8107e4a:	2800      	cmp	r0, #0
 8107e4c:	f43f aed2 	beq.w	8107bf4 <_strtod_l+0xc4>
 8107e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107e52:	781b      	ldrb	r3, [r3, #0]
 8107e54:	2b28      	cmp	r3, #40	; 0x28
 8107e56:	d12d      	bne.n	8107eb4 <_strtod_l+0x384>
 8107e58:	499a      	ldr	r1, [pc, #616]	; (81080c4 <_strtod_l+0x594>)
 8107e5a:	aa1a      	add	r2, sp, #104	; 0x68
 8107e5c:	a817      	add	r0, sp, #92	; 0x5c
 8107e5e:	f001 ff39 	bl	8109cd4 <__hexnan>
 8107e62:	2805      	cmp	r0, #5
 8107e64:	d126      	bne.n	8107eb4 <_strtod_l+0x384>
 8107e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8107e68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8107e6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8107e70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8107e74:	e6a0      	b.n	8107bb8 <_strtod_l+0x88>
 8107e76:	210a      	movs	r1, #10
 8107e78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8107e7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8107e80:	e7b9      	b.n	8107df6 <_strtod_l+0x2c6>
 8107e82:	2a6e      	cmp	r2, #110	; 0x6e
 8107e84:	e7db      	b.n	8107e3e <_strtod_l+0x30e>
 8107e86:	4990      	ldr	r1, [pc, #576]	; (81080c8 <_strtod_l+0x598>)
 8107e88:	a817      	add	r0, sp, #92	; 0x5c
 8107e8a:	f001 ff0f 	bl	8109cac <__match>
 8107e8e:	2800      	cmp	r0, #0
 8107e90:	f43f aeb0 	beq.w	8107bf4 <_strtod_l+0xc4>
 8107e94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107e96:	498d      	ldr	r1, [pc, #564]	; (81080cc <_strtod_l+0x59c>)
 8107e98:	3b01      	subs	r3, #1
 8107e9a:	a817      	add	r0, sp, #92	; 0x5c
 8107e9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8107e9e:	f001 ff05 	bl	8109cac <__match>
 8107ea2:	b910      	cbnz	r0, 8107eaa <_strtod_l+0x37a>
 8107ea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107ea6:	3301      	adds	r3, #1
 8107ea8:	9317      	str	r3, [sp, #92]	; 0x5c
 8107eaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 81080dc <_strtod_l+0x5ac>
 8107eae:	f04f 0a00 	mov.w	sl, #0
 8107eb2:	e681      	b.n	8107bb8 <_strtod_l+0x88>
 8107eb4:	4886      	ldr	r0, [pc, #536]	; (81080d0 <_strtod_l+0x5a0>)
 8107eb6:	f003 f847 	bl	810af48 <nan>
 8107eba:	ec5b ab10 	vmov	sl, fp, d0
 8107ebe:	e67b      	b.n	8107bb8 <_strtod_l+0x88>
 8107ec0:	9b05      	ldr	r3, [sp, #20]
 8107ec2:	9807      	ldr	r0, [sp, #28]
 8107ec4:	1af3      	subs	r3, r6, r3
 8107ec6:	2f00      	cmp	r7, #0
 8107ec8:	bf08      	it	eq
 8107eca:	462f      	moveq	r7, r5
 8107ecc:	2d10      	cmp	r5, #16
 8107ece:	9306      	str	r3, [sp, #24]
 8107ed0:	46a8      	mov	r8, r5
 8107ed2:	bfa8      	it	ge
 8107ed4:	f04f 0810 	movge.w	r8, #16
 8107ed8:	f7f8 fb9c 	bl	8100614 <__aeabi_ui2d>
 8107edc:	2d09      	cmp	r5, #9
 8107ede:	4682      	mov	sl, r0
 8107ee0:	468b      	mov	fp, r1
 8107ee2:	dd13      	ble.n	8107f0c <_strtod_l+0x3dc>
 8107ee4:	4b7b      	ldr	r3, [pc, #492]	; (81080d4 <_strtod_l+0x5a4>)
 8107ee6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8107eea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8107eee:	f7f8 fc0b 	bl	8100708 <__aeabi_dmul>
 8107ef2:	4682      	mov	sl, r0
 8107ef4:	4648      	mov	r0, r9
 8107ef6:	468b      	mov	fp, r1
 8107ef8:	f7f8 fb8c 	bl	8100614 <__aeabi_ui2d>
 8107efc:	4602      	mov	r2, r0
 8107efe:	460b      	mov	r3, r1
 8107f00:	4650      	mov	r0, sl
 8107f02:	4659      	mov	r1, fp
 8107f04:	f7f8 fa4a 	bl	810039c <__adddf3>
 8107f08:	4682      	mov	sl, r0
 8107f0a:	468b      	mov	fp, r1
 8107f0c:	2d0f      	cmp	r5, #15
 8107f0e:	dc38      	bgt.n	8107f82 <_strtod_l+0x452>
 8107f10:	9b06      	ldr	r3, [sp, #24]
 8107f12:	2b00      	cmp	r3, #0
 8107f14:	f43f ae50 	beq.w	8107bb8 <_strtod_l+0x88>
 8107f18:	dd24      	ble.n	8107f64 <_strtod_l+0x434>
 8107f1a:	2b16      	cmp	r3, #22
 8107f1c:	dc0b      	bgt.n	8107f36 <_strtod_l+0x406>
 8107f1e:	496d      	ldr	r1, [pc, #436]	; (81080d4 <_strtod_l+0x5a4>)
 8107f20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8107f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8107f28:	4652      	mov	r2, sl
 8107f2a:	465b      	mov	r3, fp
 8107f2c:	f7f8 fbec 	bl	8100708 <__aeabi_dmul>
 8107f30:	4682      	mov	sl, r0
 8107f32:	468b      	mov	fp, r1
 8107f34:	e640      	b.n	8107bb8 <_strtod_l+0x88>
 8107f36:	9a06      	ldr	r2, [sp, #24]
 8107f38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8107f3c:	4293      	cmp	r3, r2
 8107f3e:	db20      	blt.n	8107f82 <_strtod_l+0x452>
 8107f40:	4c64      	ldr	r4, [pc, #400]	; (81080d4 <_strtod_l+0x5a4>)
 8107f42:	f1c5 050f 	rsb	r5, r5, #15
 8107f46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8107f4a:	4652      	mov	r2, sl
 8107f4c:	465b      	mov	r3, fp
 8107f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8107f52:	f7f8 fbd9 	bl	8100708 <__aeabi_dmul>
 8107f56:	9b06      	ldr	r3, [sp, #24]
 8107f58:	1b5d      	subs	r5, r3, r5
 8107f5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8107f5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8107f62:	e7e3      	b.n	8107f2c <_strtod_l+0x3fc>
 8107f64:	9b06      	ldr	r3, [sp, #24]
 8107f66:	3316      	adds	r3, #22
 8107f68:	db0b      	blt.n	8107f82 <_strtod_l+0x452>
 8107f6a:	9b05      	ldr	r3, [sp, #20]
 8107f6c:	1b9e      	subs	r6, r3, r6
 8107f6e:	4b59      	ldr	r3, [pc, #356]	; (81080d4 <_strtod_l+0x5a4>)
 8107f70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8107f74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8107f78:	4650      	mov	r0, sl
 8107f7a:	4659      	mov	r1, fp
 8107f7c:	f7f8 fcee 	bl	810095c <__aeabi_ddiv>
 8107f80:	e7d6      	b.n	8107f30 <_strtod_l+0x400>
 8107f82:	9b06      	ldr	r3, [sp, #24]
 8107f84:	eba5 0808 	sub.w	r8, r5, r8
 8107f88:	4498      	add	r8, r3
 8107f8a:	f1b8 0f00 	cmp.w	r8, #0
 8107f8e:	dd74      	ble.n	810807a <_strtod_l+0x54a>
 8107f90:	f018 030f 	ands.w	r3, r8, #15
 8107f94:	d00a      	beq.n	8107fac <_strtod_l+0x47c>
 8107f96:	494f      	ldr	r1, [pc, #316]	; (81080d4 <_strtod_l+0x5a4>)
 8107f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8107f9c:	4652      	mov	r2, sl
 8107f9e:	465b      	mov	r3, fp
 8107fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8107fa4:	f7f8 fbb0 	bl	8100708 <__aeabi_dmul>
 8107fa8:	4682      	mov	sl, r0
 8107faa:	468b      	mov	fp, r1
 8107fac:	f038 080f 	bics.w	r8, r8, #15
 8107fb0:	d04f      	beq.n	8108052 <_strtod_l+0x522>
 8107fb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8107fb6:	dd22      	ble.n	8107ffe <_strtod_l+0x4ce>
 8107fb8:	2500      	movs	r5, #0
 8107fba:	462e      	mov	r6, r5
 8107fbc:	9507      	str	r5, [sp, #28]
 8107fbe:	9505      	str	r5, [sp, #20]
 8107fc0:	2322      	movs	r3, #34	; 0x22
 8107fc2:	f8df b118 	ldr.w	fp, [pc, #280]	; 81080dc <_strtod_l+0x5ac>
 8107fc6:	6023      	str	r3, [r4, #0]
 8107fc8:	f04f 0a00 	mov.w	sl, #0
 8107fcc:	9b07      	ldr	r3, [sp, #28]
 8107fce:	2b00      	cmp	r3, #0
 8107fd0:	f43f adf2 	beq.w	8107bb8 <_strtod_l+0x88>
 8107fd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8107fd6:	4620      	mov	r0, r4
 8107fd8:	f001 ff88 	bl	8109eec <_Bfree>
 8107fdc:	9905      	ldr	r1, [sp, #20]
 8107fde:	4620      	mov	r0, r4
 8107fe0:	f001 ff84 	bl	8109eec <_Bfree>
 8107fe4:	4631      	mov	r1, r6
 8107fe6:	4620      	mov	r0, r4
 8107fe8:	f001 ff80 	bl	8109eec <_Bfree>
 8107fec:	9907      	ldr	r1, [sp, #28]
 8107fee:	4620      	mov	r0, r4
 8107ff0:	f001 ff7c 	bl	8109eec <_Bfree>
 8107ff4:	4629      	mov	r1, r5
 8107ff6:	4620      	mov	r0, r4
 8107ff8:	f001 ff78 	bl	8109eec <_Bfree>
 8107ffc:	e5dc      	b.n	8107bb8 <_strtod_l+0x88>
 8107ffe:	4b36      	ldr	r3, [pc, #216]	; (81080d8 <_strtod_l+0x5a8>)
 8108000:	9304      	str	r3, [sp, #16]
 8108002:	2300      	movs	r3, #0
 8108004:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108008:	4650      	mov	r0, sl
 810800a:	4659      	mov	r1, fp
 810800c:	4699      	mov	r9, r3
 810800e:	f1b8 0f01 	cmp.w	r8, #1
 8108012:	dc21      	bgt.n	8108058 <_strtod_l+0x528>
 8108014:	b10b      	cbz	r3, 810801a <_strtod_l+0x4ea>
 8108016:	4682      	mov	sl, r0
 8108018:	468b      	mov	fp, r1
 810801a:	4b2f      	ldr	r3, [pc, #188]	; (81080d8 <_strtod_l+0x5a8>)
 810801c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108020:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108024:	4652      	mov	r2, sl
 8108026:	465b      	mov	r3, fp
 8108028:	e9d9 0100 	ldrd	r0, r1, [r9]
 810802c:	f7f8 fb6c 	bl	8100708 <__aeabi_dmul>
 8108030:	4b2a      	ldr	r3, [pc, #168]	; (81080dc <_strtod_l+0x5ac>)
 8108032:	460a      	mov	r2, r1
 8108034:	400b      	ands	r3, r1
 8108036:	492a      	ldr	r1, [pc, #168]	; (81080e0 <_strtod_l+0x5b0>)
 8108038:	428b      	cmp	r3, r1
 810803a:	4682      	mov	sl, r0
 810803c:	d8bc      	bhi.n	8107fb8 <_strtod_l+0x488>
 810803e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108042:	428b      	cmp	r3, r1
 8108044:	bf86      	itte	hi
 8108046:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 81080e4 <_strtod_l+0x5b4>
 810804a:	f04f 3aff 	movhi.w	sl, #4294967295
 810804e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108052:	2300      	movs	r3, #0
 8108054:	9304      	str	r3, [sp, #16]
 8108056:	e084      	b.n	8108162 <_strtod_l+0x632>
 8108058:	f018 0f01 	tst.w	r8, #1
 810805c:	d005      	beq.n	810806a <_strtod_l+0x53a>
 810805e:	9b04      	ldr	r3, [sp, #16]
 8108060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108064:	f7f8 fb50 	bl	8100708 <__aeabi_dmul>
 8108068:	2301      	movs	r3, #1
 810806a:	9a04      	ldr	r2, [sp, #16]
 810806c:	3208      	adds	r2, #8
 810806e:	f109 0901 	add.w	r9, r9, #1
 8108072:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108076:	9204      	str	r2, [sp, #16]
 8108078:	e7c9      	b.n	810800e <_strtod_l+0x4de>
 810807a:	d0ea      	beq.n	8108052 <_strtod_l+0x522>
 810807c:	f1c8 0800 	rsb	r8, r8, #0
 8108080:	f018 020f 	ands.w	r2, r8, #15
 8108084:	d00a      	beq.n	810809c <_strtod_l+0x56c>
 8108086:	4b13      	ldr	r3, [pc, #76]	; (81080d4 <_strtod_l+0x5a4>)
 8108088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810808c:	4650      	mov	r0, sl
 810808e:	4659      	mov	r1, fp
 8108090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108094:	f7f8 fc62 	bl	810095c <__aeabi_ddiv>
 8108098:	4682      	mov	sl, r0
 810809a:	468b      	mov	fp, r1
 810809c:	ea5f 1828 	movs.w	r8, r8, asr #4
 81080a0:	d0d7      	beq.n	8108052 <_strtod_l+0x522>
 81080a2:	f1b8 0f1f 	cmp.w	r8, #31
 81080a6:	dd1f      	ble.n	81080e8 <_strtod_l+0x5b8>
 81080a8:	2500      	movs	r5, #0
 81080aa:	462e      	mov	r6, r5
 81080ac:	9507      	str	r5, [sp, #28]
 81080ae:	9505      	str	r5, [sp, #20]
 81080b0:	2322      	movs	r3, #34	; 0x22
 81080b2:	f04f 0a00 	mov.w	sl, #0
 81080b6:	f04f 0b00 	mov.w	fp, #0
 81080ba:	6023      	str	r3, [r4, #0]
 81080bc:	e786      	b.n	8107fcc <_strtod_l+0x49c>
 81080be:	bf00      	nop
 81080c0:	0810b705 	.word	0x0810b705
 81080c4:	0810b748 	.word	0x0810b748
 81080c8:	0810b6fd 	.word	0x0810b6fd
 81080cc:	0810b88c 	.word	0x0810b88c
 81080d0:	0810bba0 	.word	0x0810bba0
 81080d4:	0810ba80 	.word	0x0810ba80
 81080d8:	0810ba58 	.word	0x0810ba58
 81080dc:	7ff00000 	.word	0x7ff00000
 81080e0:	7ca00000 	.word	0x7ca00000
 81080e4:	7fefffff 	.word	0x7fefffff
 81080e8:	f018 0310 	ands.w	r3, r8, #16
 81080ec:	bf18      	it	ne
 81080ee:	236a      	movne	r3, #106	; 0x6a
 81080f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 81084a0 <_strtod_l+0x970>
 81080f4:	9304      	str	r3, [sp, #16]
 81080f6:	4650      	mov	r0, sl
 81080f8:	4659      	mov	r1, fp
 81080fa:	2300      	movs	r3, #0
 81080fc:	f018 0f01 	tst.w	r8, #1
 8108100:	d004      	beq.n	810810c <_strtod_l+0x5dc>
 8108102:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108106:	f7f8 faff 	bl	8100708 <__aeabi_dmul>
 810810a:	2301      	movs	r3, #1
 810810c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108110:	f109 0908 	add.w	r9, r9, #8
 8108114:	d1f2      	bne.n	81080fc <_strtod_l+0x5cc>
 8108116:	b10b      	cbz	r3, 810811c <_strtod_l+0x5ec>
 8108118:	4682      	mov	sl, r0
 810811a:	468b      	mov	fp, r1
 810811c:	9b04      	ldr	r3, [sp, #16]
 810811e:	b1c3      	cbz	r3, 8108152 <_strtod_l+0x622>
 8108120:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8108124:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108128:	2b00      	cmp	r3, #0
 810812a:	4659      	mov	r1, fp
 810812c:	dd11      	ble.n	8108152 <_strtod_l+0x622>
 810812e:	2b1f      	cmp	r3, #31
 8108130:	f340 8124 	ble.w	810837c <_strtod_l+0x84c>
 8108134:	2b34      	cmp	r3, #52	; 0x34
 8108136:	bfde      	ittt	le
 8108138:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810813c:	f04f 33ff 	movle.w	r3, #4294967295
 8108140:	fa03 f202 	lslle.w	r2, r3, r2
 8108144:	f04f 0a00 	mov.w	sl, #0
 8108148:	bfcc      	ite	gt
 810814a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810814e:	ea02 0b01 	andle.w	fp, r2, r1
 8108152:	2200      	movs	r2, #0
 8108154:	2300      	movs	r3, #0
 8108156:	4650      	mov	r0, sl
 8108158:	4659      	mov	r1, fp
 810815a:	f7f8 fd3d 	bl	8100bd8 <__aeabi_dcmpeq>
 810815e:	2800      	cmp	r0, #0
 8108160:	d1a2      	bne.n	81080a8 <_strtod_l+0x578>
 8108162:	9b07      	ldr	r3, [sp, #28]
 8108164:	9300      	str	r3, [sp, #0]
 8108166:	9908      	ldr	r1, [sp, #32]
 8108168:	462b      	mov	r3, r5
 810816a:	463a      	mov	r2, r7
 810816c:	4620      	mov	r0, r4
 810816e:	f001 ff25 	bl	8109fbc <__s2b>
 8108172:	9007      	str	r0, [sp, #28]
 8108174:	2800      	cmp	r0, #0
 8108176:	f43f af1f 	beq.w	8107fb8 <_strtod_l+0x488>
 810817a:	9b05      	ldr	r3, [sp, #20]
 810817c:	1b9e      	subs	r6, r3, r6
 810817e:	9b06      	ldr	r3, [sp, #24]
 8108180:	2b00      	cmp	r3, #0
 8108182:	bfb4      	ite	lt
 8108184:	4633      	movlt	r3, r6
 8108186:	2300      	movge	r3, #0
 8108188:	930c      	str	r3, [sp, #48]	; 0x30
 810818a:	9b06      	ldr	r3, [sp, #24]
 810818c:	2500      	movs	r5, #0
 810818e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108192:	9312      	str	r3, [sp, #72]	; 0x48
 8108194:	462e      	mov	r6, r5
 8108196:	9b07      	ldr	r3, [sp, #28]
 8108198:	4620      	mov	r0, r4
 810819a:	6859      	ldr	r1, [r3, #4]
 810819c:	f001 fe66 	bl	8109e6c <_Balloc>
 81081a0:	9005      	str	r0, [sp, #20]
 81081a2:	2800      	cmp	r0, #0
 81081a4:	f43f af0c 	beq.w	8107fc0 <_strtod_l+0x490>
 81081a8:	9b07      	ldr	r3, [sp, #28]
 81081aa:	691a      	ldr	r2, [r3, #16]
 81081ac:	3202      	adds	r2, #2
 81081ae:	f103 010c 	add.w	r1, r3, #12
 81081b2:	0092      	lsls	r2, r2, #2
 81081b4:	300c      	adds	r0, #12
 81081b6:	f001 fe4b 	bl	8109e50 <memcpy>
 81081ba:	ec4b ab10 	vmov	d0, sl, fp
 81081be:	aa1a      	add	r2, sp, #104	; 0x68
 81081c0:	a919      	add	r1, sp, #100	; 0x64
 81081c2:	4620      	mov	r0, r4
 81081c4:	f002 fa40 	bl	810a648 <__d2b>
 81081c8:	ec4b ab18 	vmov	d8, sl, fp
 81081cc:	9018      	str	r0, [sp, #96]	; 0x60
 81081ce:	2800      	cmp	r0, #0
 81081d0:	f43f aef6 	beq.w	8107fc0 <_strtod_l+0x490>
 81081d4:	2101      	movs	r1, #1
 81081d6:	4620      	mov	r0, r4
 81081d8:	f001 ff8a 	bl	810a0f0 <__i2b>
 81081dc:	4606      	mov	r6, r0
 81081de:	2800      	cmp	r0, #0
 81081e0:	f43f aeee 	beq.w	8107fc0 <_strtod_l+0x490>
 81081e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81081e6:	9904      	ldr	r1, [sp, #16]
 81081e8:	2b00      	cmp	r3, #0
 81081ea:	bfab      	itete	ge
 81081ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 81081ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 81081f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 81081f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 81081f6:	bfac      	ite	ge
 81081f8:	eb03 0902 	addge.w	r9, r3, r2
 81081fc:	1ad7      	sublt	r7, r2, r3
 81081fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8108200:	eba3 0801 	sub.w	r8, r3, r1
 8108204:	4490      	add	r8, r2
 8108206:	4ba1      	ldr	r3, [pc, #644]	; (810848c <_strtod_l+0x95c>)
 8108208:	f108 38ff 	add.w	r8, r8, #4294967295
 810820c:	4598      	cmp	r8, r3
 810820e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108212:	f280 80c7 	bge.w	81083a4 <_strtod_l+0x874>
 8108216:	eba3 0308 	sub.w	r3, r3, r8
 810821a:	2b1f      	cmp	r3, #31
 810821c:	eba2 0203 	sub.w	r2, r2, r3
 8108220:	f04f 0101 	mov.w	r1, #1
 8108224:	f300 80b1 	bgt.w	810838a <_strtod_l+0x85a>
 8108228:	fa01 f303 	lsl.w	r3, r1, r3
 810822c:	930d      	str	r3, [sp, #52]	; 0x34
 810822e:	2300      	movs	r3, #0
 8108230:	9308      	str	r3, [sp, #32]
 8108232:	eb09 0802 	add.w	r8, r9, r2
 8108236:	9b04      	ldr	r3, [sp, #16]
 8108238:	45c1      	cmp	r9, r8
 810823a:	4417      	add	r7, r2
 810823c:	441f      	add	r7, r3
 810823e:	464b      	mov	r3, r9
 8108240:	bfa8      	it	ge
 8108242:	4643      	movge	r3, r8
 8108244:	42bb      	cmp	r3, r7
 8108246:	bfa8      	it	ge
 8108248:	463b      	movge	r3, r7
 810824a:	2b00      	cmp	r3, #0
 810824c:	bfc2      	ittt	gt
 810824e:	eba8 0803 	subgt.w	r8, r8, r3
 8108252:	1aff      	subgt	r7, r7, r3
 8108254:	eba9 0903 	subgt.w	r9, r9, r3
 8108258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810825a:	2b00      	cmp	r3, #0
 810825c:	dd17      	ble.n	810828e <_strtod_l+0x75e>
 810825e:	4631      	mov	r1, r6
 8108260:	461a      	mov	r2, r3
 8108262:	4620      	mov	r0, r4
 8108264:	f002 f804 	bl	810a270 <__pow5mult>
 8108268:	4606      	mov	r6, r0
 810826a:	2800      	cmp	r0, #0
 810826c:	f43f aea8 	beq.w	8107fc0 <_strtod_l+0x490>
 8108270:	4601      	mov	r1, r0
 8108272:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108274:	4620      	mov	r0, r4
 8108276:	f001 ff51 	bl	810a11c <__multiply>
 810827a:	900b      	str	r0, [sp, #44]	; 0x2c
 810827c:	2800      	cmp	r0, #0
 810827e:	f43f ae9f 	beq.w	8107fc0 <_strtod_l+0x490>
 8108282:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108284:	4620      	mov	r0, r4
 8108286:	f001 fe31 	bl	8109eec <_Bfree>
 810828a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810828c:	9318      	str	r3, [sp, #96]	; 0x60
 810828e:	f1b8 0f00 	cmp.w	r8, #0
 8108292:	f300 808c 	bgt.w	81083ae <_strtod_l+0x87e>
 8108296:	9b06      	ldr	r3, [sp, #24]
 8108298:	2b00      	cmp	r3, #0
 810829a:	dd08      	ble.n	81082ae <_strtod_l+0x77e>
 810829c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810829e:	9905      	ldr	r1, [sp, #20]
 81082a0:	4620      	mov	r0, r4
 81082a2:	f001 ffe5 	bl	810a270 <__pow5mult>
 81082a6:	9005      	str	r0, [sp, #20]
 81082a8:	2800      	cmp	r0, #0
 81082aa:	f43f ae89 	beq.w	8107fc0 <_strtod_l+0x490>
 81082ae:	2f00      	cmp	r7, #0
 81082b0:	dd08      	ble.n	81082c4 <_strtod_l+0x794>
 81082b2:	9905      	ldr	r1, [sp, #20]
 81082b4:	463a      	mov	r2, r7
 81082b6:	4620      	mov	r0, r4
 81082b8:	f002 f834 	bl	810a324 <__lshift>
 81082bc:	9005      	str	r0, [sp, #20]
 81082be:	2800      	cmp	r0, #0
 81082c0:	f43f ae7e 	beq.w	8107fc0 <_strtod_l+0x490>
 81082c4:	f1b9 0f00 	cmp.w	r9, #0
 81082c8:	dd08      	ble.n	81082dc <_strtod_l+0x7ac>
 81082ca:	4631      	mov	r1, r6
 81082cc:	464a      	mov	r2, r9
 81082ce:	4620      	mov	r0, r4
 81082d0:	f002 f828 	bl	810a324 <__lshift>
 81082d4:	4606      	mov	r6, r0
 81082d6:	2800      	cmp	r0, #0
 81082d8:	f43f ae72 	beq.w	8107fc0 <_strtod_l+0x490>
 81082dc:	9a05      	ldr	r2, [sp, #20]
 81082de:	9918      	ldr	r1, [sp, #96]	; 0x60
 81082e0:	4620      	mov	r0, r4
 81082e2:	f002 f8ab 	bl	810a43c <__mdiff>
 81082e6:	4605      	mov	r5, r0
 81082e8:	2800      	cmp	r0, #0
 81082ea:	f43f ae69 	beq.w	8107fc0 <_strtod_l+0x490>
 81082ee:	68c3      	ldr	r3, [r0, #12]
 81082f0:	930b      	str	r3, [sp, #44]	; 0x2c
 81082f2:	2300      	movs	r3, #0
 81082f4:	60c3      	str	r3, [r0, #12]
 81082f6:	4631      	mov	r1, r6
 81082f8:	f002 f884 	bl	810a404 <__mcmp>
 81082fc:	2800      	cmp	r0, #0
 81082fe:	da60      	bge.n	81083c2 <_strtod_l+0x892>
 8108300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108302:	ea53 030a 	orrs.w	r3, r3, sl
 8108306:	f040 8082 	bne.w	810840e <_strtod_l+0x8de>
 810830a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810830e:	2b00      	cmp	r3, #0
 8108310:	d17d      	bne.n	810840e <_strtod_l+0x8de>
 8108312:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108316:	0d1b      	lsrs	r3, r3, #20
 8108318:	051b      	lsls	r3, r3, #20
 810831a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810831e:	d976      	bls.n	810840e <_strtod_l+0x8de>
 8108320:	696b      	ldr	r3, [r5, #20]
 8108322:	b913      	cbnz	r3, 810832a <_strtod_l+0x7fa>
 8108324:	692b      	ldr	r3, [r5, #16]
 8108326:	2b01      	cmp	r3, #1
 8108328:	dd71      	ble.n	810840e <_strtod_l+0x8de>
 810832a:	4629      	mov	r1, r5
 810832c:	2201      	movs	r2, #1
 810832e:	4620      	mov	r0, r4
 8108330:	f001 fff8 	bl	810a324 <__lshift>
 8108334:	4631      	mov	r1, r6
 8108336:	4605      	mov	r5, r0
 8108338:	f002 f864 	bl	810a404 <__mcmp>
 810833c:	2800      	cmp	r0, #0
 810833e:	dd66      	ble.n	810840e <_strtod_l+0x8de>
 8108340:	9904      	ldr	r1, [sp, #16]
 8108342:	4a53      	ldr	r2, [pc, #332]	; (8108490 <_strtod_l+0x960>)
 8108344:	465b      	mov	r3, fp
 8108346:	2900      	cmp	r1, #0
 8108348:	f000 8081 	beq.w	810844e <_strtod_l+0x91e>
 810834c:	ea02 010b 	and.w	r1, r2, fp
 8108350:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108354:	dc7b      	bgt.n	810844e <_strtod_l+0x91e>
 8108356:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810835a:	f77f aea9 	ble.w	81080b0 <_strtod_l+0x580>
 810835e:	4b4d      	ldr	r3, [pc, #308]	; (8108494 <_strtod_l+0x964>)
 8108360:	4650      	mov	r0, sl
 8108362:	4659      	mov	r1, fp
 8108364:	2200      	movs	r2, #0
 8108366:	f7f8 f9cf 	bl	8100708 <__aeabi_dmul>
 810836a:	460b      	mov	r3, r1
 810836c:	4303      	orrs	r3, r0
 810836e:	bf08      	it	eq
 8108370:	2322      	moveq	r3, #34	; 0x22
 8108372:	4682      	mov	sl, r0
 8108374:	468b      	mov	fp, r1
 8108376:	bf08      	it	eq
 8108378:	6023      	streq	r3, [r4, #0]
 810837a:	e62b      	b.n	8107fd4 <_strtod_l+0x4a4>
 810837c:	f04f 32ff 	mov.w	r2, #4294967295
 8108380:	fa02 f303 	lsl.w	r3, r2, r3
 8108384:	ea03 0a0a 	and.w	sl, r3, sl
 8108388:	e6e3      	b.n	8108152 <_strtod_l+0x622>
 810838a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810838e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108392:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108396:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810839a:	fa01 f308 	lsl.w	r3, r1, r8
 810839e:	9308      	str	r3, [sp, #32]
 81083a0:	910d      	str	r1, [sp, #52]	; 0x34
 81083a2:	e746      	b.n	8108232 <_strtod_l+0x702>
 81083a4:	2300      	movs	r3, #0
 81083a6:	9308      	str	r3, [sp, #32]
 81083a8:	2301      	movs	r3, #1
 81083aa:	930d      	str	r3, [sp, #52]	; 0x34
 81083ac:	e741      	b.n	8108232 <_strtod_l+0x702>
 81083ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 81083b0:	4642      	mov	r2, r8
 81083b2:	4620      	mov	r0, r4
 81083b4:	f001 ffb6 	bl	810a324 <__lshift>
 81083b8:	9018      	str	r0, [sp, #96]	; 0x60
 81083ba:	2800      	cmp	r0, #0
 81083bc:	f47f af6b 	bne.w	8108296 <_strtod_l+0x766>
 81083c0:	e5fe      	b.n	8107fc0 <_strtod_l+0x490>
 81083c2:	465f      	mov	r7, fp
 81083c4:	d16e      	bne.n	81084a4 <_strtod_l+0x974>
 81083c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81083c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81083cc:	b342      	cbz	r2, 8108420 <_strtod_l+0x8f0>
 81083ce:	4a32      	ldr	r2, [pc, #200]	; (8108498 <_strtod_l+0x968>)
 81083d0:	4293      	cmp	r3, r2
 81083d2:	d128      	bne.n	8108426 <_strtod_l+0x8f6>
 81083d4:	9b04      	ldr	r3, [sp, #16]
 81083d6:	4651      	mov	r1, sl
 81083d8:	b1eb      	cbz	r3, 8108416 <_strtod_l+0x8e6>
 81083da:	4b2d      	ldr	r3, [pc, #180]	; (8108490 <_strtod_l+0x960>)
 81083dc:	403b      	ands	r3, r7
 81083de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81083e2:	f04f 32ff 	mov.w	r2, #4294967295
 81083e6:	d819      	bhi.n	810841c <_strtod_l+0x8ec>
 81083e8:	0d1b      	lsrs	r3, r3, #20
 81083ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81083ee:	fa02 f303 	lsl.w	r3, r2, r3
 81083f2:	4299      	cmp	r1, r3
 81083f4:	d117      	bne.n	8108426 <_strtod_l+0x8f6>
 81083f6:	4b29      	ldr	r3, [pc, #164]	; (810849c <_strtod_l+0x96c>)
 81083f8:	429f      	cmp	r7, r3
 81083fa:	d102      	bne.n	8108402 <_strtod_l+0x8d2>
 81083fc:	3101      	adds	r1, #1
 81083fe:	f43f addf 	beq.w	8107fc0 <_strtod_l+0x490>
 8108402:	4b23      	ldr	r3, [pc, #140]	; (8108490 <_strtod_l+0x960>)
 8108404:	403b      	ands	r3, r7
 8108406:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810840a:	f04f 0a00 	mov.w	sl, #0
 810840e:	9b04      	ldr	r3, [sp, #16]
 8108410:	2b00      	cmp	r3, #0
 8108412:	d1a4      	bne.n	810835e <_strtod_l+0x82e>
 8108414:	e5de      	b.n	8107fd4 <_strtod_l+0x4a4>
 8108416:	f04f 33ff 	mov.w	r3, #4294967295
 810841a:	e7ea      	b.n	81083f2 <_strtod_l+0x8c2>
 810841c:	4613      	mov	r3, r2
 810841e:	e7e8      	b.n	81083f2 <_strtod_l+0x8c2>
 8108420:	ea53 030a 	orrs.w	r3, r3, sl
 8108424:	d08c      	beq.n	8108340 <_strtod_l+0x810>
 8108426:	9b08      	ldr	r3, [sp, #32]
 8108428:	b1db      	cbz	r3, 8108462 <_strtod_l+0x932>
 810842a:	423b      	tst	r3, r7
 810842c:	d0ef      	beq.n	810840e <_strtod_l+0x8de>
 810842e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108430:	9a04      	ldr	r2, [sp, #16]
 8108432:	4650      	mov	r0, sl
 8108434:	4659      	mov	r1, fp
 8108436:	b1c3      	cbz	r3, 810846a <_strtod_l+0x93a>
 8108438:	f7ff fb5c 	bl	8107af4 <sulp>
 810843c:	4602      	mov	r2, r0
 810843e:	460b      	mov	r3, r1
 8108440:	ec51 0b18 	vmov	r0, r1, d8
 8108444:	f7f7 ffaa 	bl	810039c <__adddf3>
 8108448:	4682      	mov	sl, r0
 810844a:	468b      	mov	fp, r1
 810844c:	e7df      	b.n	810840e <_strtod_l+0x8de>
 810844e:	4013      	ands	r3, r2
 8108450:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8108454:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108458:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810845c:	f04f 3aff 	mov.w	sl, #4294967295
 8108460:	e7d5      	b.n	810840e <_strtod_l+0x8de>
 8108462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108464:	ea13 0f0a 	tst.w	r3, sl
 8108468:	e7e0      	b.n	810842c <_strtod_l+0x8fc>
 810846a:	f7ff fb43 	bl	8107af4 <sulp>
 810846e:	4602      	mov	r2, r0
 8108470:	460b      	mov	r3, r1
 8108472:	ec51 0b18 	vmov	r0, r1, d8
 8108476:	f7f7 ff8f 	bl	8100398 <__aeabi_dsub>
 810847a:	2200      	movs	r2, #0
 810847c:	2300      	movs	r3, #0
 810847e:	4682      	mov	sl, r0
 8108480:	468b      	mov	fp, r1
 8108482:	f7f8 fba9 	bl	8100bd8 <__aeabi_dcmpeq>
 8108486:	2800      	cmp	r0, #0
 8108488:	d0c1      	beq.n	810840e <_strtod_l+0x8de>
 810848a:	e611      	b.n	81080b0 <_strtod_l+0x580>
 810848c:	fffffc02 	.word	0xfffffc02
 8108490:	7ff00000 	.word	0x7ff00000
 8108494:	39500000 	.word	0x39500000
 8108498:	000fffff 	.word	0x000fffff
 810849c:	7fefffff 	.word	0x7fefffff
 81084a0:	0810b760 	.word	0x0810b760
 81084a4:	4631      	mov	r1, r6
 81084a6:	4628      	mov	r0, r5
 81084a8:	f002 f92a 	bl	810a700 <__ratio>
 81084ac:	ec59 8b10 	vmov	r8, r9, d0
 81084b0:	ee10 0a10 	vmov	r0, s0
 81084b4:	2200      	movs	r2, #0
 81084b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81084ba:	4649      	mov	r1, r9
 81084bc:	f7f8 fba0 	bl	8100c00 <__aeabi_dcmple>
 81084c0:	2800      	cmp	r0, #0
 81084c2:	d07a      	beq.n	81085ba <_strtod_l+0xa8a>
 81084c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81084c6:	2b00      	cmp	r3, #0
 81084c8:	d04a      	beq.n	8108560 <_strtod_l+0xa30>
 81084ca:	4b95      	ldr	r3, [pc, #596]	; (8108720 <_strtod_l+0xbf0>)
 81084cc:	2200      	movs	r2, #0
 81084ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81084d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8108720 <_strtod_l+0xbf0>
 81084d6:	f04f 0800 	mov.w	r8, #0
 81084da:	4b92      	ldr	r3, [pc, #584]	; (8108724 <_strtod_l+0xbf4>)
 81084dc:	403b      	ands	r3, r7
 81084de:	930d      	str	r3, [sp, #52]	; 0x34
 81084e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81084e2:	4b91      	ldr	r3, [pc, #580]	; (8108728 <_strtod_l+0xbf8>)
 81084e4:	429a      	cmp	r2, r3
 81084e6:	f040 80b0 	bne.w	810864a <_strtod_l+0xb1a>
 81084ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81084ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 81084f2:	ec4b ab10 	vmov	d0, sl, fp
 81084f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81084fa:	f002 f829 	bl	810a550 <__ulp>
 81084fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8108502:	ec53 2b10 	vmov	r2, r3, d0
 8108506:	f7f8 f8ff 	bl	8100708 <__aeabi_dmul>
 810850a:	4652      	mov	r2, sl
 810850c:	465b      	mov	r3, fp
 810850e:	f7f7 ff45 	bl	810039c <__adddf3>
 8108512:	460b      	mov	r3, r1
 8108514:	4983      	ldr	r1, [pc, #524]	; (8108724 <_strtod_l+0xbf4>)
 8108516:	4a85      	ldr	r2, [pc, #532]	; (810872c <_strtod_l+0xbfc>)
 8108518:	4019      	ands	r1, r3
 810851a:	4291      	cmp	r1, r2
 810851c:	4682      	mov	sl, r0
 810851e:	d960      	bls.n	81085e2 <_strtod_l+0xab2>
 8108520:	ee18 3a90 	vmov	r3, s17
 8108524:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8108528:	4293      	cmp	r3, r2
 810852a:	d104      	bne.n	8108536 <_strtod_l+0xa06>
 810852c:	ee18 3a10 	vmov	r3, s16
 8108530:	3301      	adds	r3, #1
 8108532:	f43f ad45 	beq.w	8107fc0 <_strtod_l+0x490>
 8108536:	f8df b200 	ldr.w	fp, [pc, #512]	; 8108738 <_strtod_l+0xc08>
 810853a:	f04f 3aff 	mov.w	sl, #4294967295
 810853e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108540:	4620      	mov	r0, r4
 8108542:	f001 fcd3 	bl	8109eec <_Bfree>
 8108546:	9905      	ldr	r1, [sp, #20]
 8108548:	4620      	mov	r0, r4
 810854a:	f001 fccf 	bl	8109eec <_Bfree>
 810854e:	4631      	mov	r1, r6
 8108550:	4620      	mov	r0, r4
 8108552:	f001 fccb 	bl	8109eec <_Bfree>
 8108556:	4629      	mov	r1, r5
 8108558:	4620      	mov	r0, r4
 810855a:	f001 fcc7 	bl	8109eec <_Bfree>
 810855e:	e61a      	b.n	8108196 <_strtod_l+0x666>
 8108560:	f1ba 0f00 	cmp.w	sl, #0
 8108564:	d11b      	bne.n	810859e <_strtod_l+0xa6e>
 8108566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810856a:	b9f3      	cbnz	r3, 81085aa <_strtod_l+0xa7a>
 810856c:	4b6c      	ldr	r3, [pc, #432]	; (8108720 <_strtod_l+0xbf0>)
 810856e:	2200      	movs	r2, #0
 8108570:	4640      	mov	r0, r8
 8108572:	4649      	mov	r1, r9
 8108574:	f7f8 fb3a 	bl	8100bec <__aeabi_dcmplt>
 8108578:	b9d0      	cbnz	r0, 81085b0 <_strtod_l+0xa80>
 810857a:	4640      	mov	r0, r8
 810857c:	4649      	mov	r1, r9
 810857e:	4b6c      	ldr	r3, [pc, #432]	; (8108730 <_strtod_l+0xc00>)
 8108580:	2200      	movs	r2, #0
 8108582:	f7f8 f8c1 	bl	8100708 <__aeabi_dmul>
 8108586:	4680      	mov	r8, r0
 8108588:	4689      	mov	r9, r1
 810858a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810858e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8108592:	9315      	str	r3, [sp, #84]	; 0x54
 8108594:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8108598:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810859c:	e79d      	b.n	81084da <_strtod_l+0x9aa>
 810859e:	f1ba 0f01 	cmp.w	sl, #1
 81085a2:	d102      	bne.n	81085aa <_strtod_l+0xa7a>
 81085a4:	2f00      	cmp	r7, #0
 81085a6:	f43f ad83 	beq.w	81080b0 <_strtod_l+0x580>
 81085aa:	4b62      	ldr	r3, [pc, #392]	; (8108734 <_strtod_l+0xc04>)
 81085ac:	2200      	movs	r2, #0
 81085ae:	e78e      	b.n	81084ce <_strtod_l+0x99e>
 81085b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8108730 <_strtod_l+0xc00>
 81085b4:	f04f 0800 	mov.w	r8, #0
 81085b8:	e7e7      	b.n	810858a <_strtod_l+0xa5a>
 81085ba:	4b5d      	ldr	r3, [pc, #372]	; (8108730 <_strtod_l+0xc00>)
 81085bc:	4640      	mov	r0, r8
 81085be:	4649      	mov	r1, r9
 81085c0:	2200      	movs	r2, #0
 81085c2:	f7f8 f8a1 	bl	8100708 <__aeabi_dmul>
 81085c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81085c8:	4680      	mov	r8, r0
 81085ca:	4689      	mov	r9, r1
 81085cc:	b933      	cbnz	r3, 81085dc <_strtod_l+0xaac>
 81085ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81085d2:	900e      	str	r0, [sp, #56]	; 0x38
 81085d4:	930f      	str	r3, [sp, #60]	; 0x3c
 81085d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 81085da:	e7dd      	b.n	8108598 <_strtod_l+0xa68>
 81085dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 81085e0:	e7f9      	b.n	81085d6 <_strtod_l+0xaa6>
 81085e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 81085e6:	9b04      	ldr	r3, [sp, #16]
 81085e8:	2b00      	cmp	r3, #0
 81085ea:	d1a8      	bne.n	810853e <_strtod_l+0xa0e>
 81085ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81085f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81085f2:	0d1b      	lsrs	r3, r3, #20
 81085f4:	051b      	lsls	r3, r3, #20
 81085f6:	429a      	cmp	r2, r3
 81085f8:	d1a1      	bne.n	810853e <_strtod_l+0xa0e>
 81085fa:	4640      	mov	r0, r8
 81085fc:	4649      	mov	r1, r9
 81085fe:	f7f8 fbe3 	bl	8100dc8 <__aeabi_d2lz>
 8108602:	f7f8 f853 	bl	81006ac <__aeabi_l2d>
 8108606:	4602      	mov	r2, r0
 8108608:	460b      	mov	r3, r1
 810860a:	4640      	mov	r0, r8
 810860c:	4649      	mov	r1, r9
 810860e:	f7f7 fec3 	bl	8100398 <__aeabi_dsub>
 8108612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8108614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108618:	ea43 030a 	orr.w	r3, r3, sl
 810861c:	4313      	orrs	r3, r2
 810861e:	4680      	mov	r8, r0
 8108620:	4689      	mov	r9, r1
 8108622:	d055      	beq.n	81086d0 <_strtod_l+0xba0>
 8108624:	a336      	add	r3, pc, #216	; (adr r3, 8108700 <_strtod_l+0xbd0>)
 8108626:	e9d3 2300 	ldrd	r2, r3, [r3]
 810862a:	f7f8 fadf 	bl	8100bec <__aeabi_dcmplt>
 810862e:	2800      	cmp	r0, #0
 8108630:	f47f acd0 	bne.w	8107fd4 <_strtod_l+0x4a4>
 8108634:	a334      	add	r3, pc, #208	; (adr r3, 8108708 <_strtod_l+0xbd8>)
 8108636:	e9d3 2300 	ldrd	r2, r3, [r3]
 810863a:	4640      	mov	r0, r8
 810863c:	4649      	mov	r1, r9
 810863e:	f7f8 faf3 	bl	8100c28 <__aeabi_dcmpgt>
 8108642:	2800      	cmp	r0, #0
 8108644:	f43f af7b 	beq.w	810853e <_strtod_l+0xa0e>
 8108648:	e4c4      	b.n	8107fd4 <_strtod_l+0x4a4>
 810864a:	9b04      	ldr	r3, [sp, #16]
 810864c:	b333      	cbz	r3, 810869c <_strtod_l+0xb6c>
 810864e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108650:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8108654:	d822      	bhi.n	810869c <_strtod_l+0xb6c>
 8108656:	a32e      	add	r3, pc, #184	; (adr r3, 8108710 <_strtod_l+0xbe0>)
 8108658:	e9d3 2300 	ldrd	r2, r3, [r3]
 810865c:	4640      	mov	r0, r8
 810865e:	4649      	mov	r1, r9
 8108660:	f7f8 face 	bl	8100c00 <__aeabi_dcmple>
 8108664:	b1a0      	cbz	r0, 8108690 <_strtod_l+0xb60>
 8108666:	4649      	mov	r1, r9
 8108668:	4640      	mov	r0, r8
 810866a:	f7f8 fb25 	bl	8100cb8 <__aeabi_d2uiz>
 810866e:	2801      	cmp	r0, #1
 8108670:	bf38      	it	cc
 8108672:	2001      	movcc	r0, #1
 8108674:	f7f7 ffce 	bl	8100614 <__aeabi_ui2d>
 8108678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810867a:	4680      	mov	r8, r0
 810867c:	4689      	mov	r9, r1
 810867e:	bb23      	cbnz	r3, 81086ca <_strtod_l+0xb9a>
 8108680:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108684:	9010      	str	r0, [sp, #64]	; 0x40
 8108686:	9311      	str	r3, [sp, #68]	; 0x44
 8108688:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810868c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8108690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108692:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8108694:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8108698:	1a9b      	subs	r3, r3, r2
 810869a:	9309      	str	r3, [sp, #36]	; 0x24
 810869c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81086a0:	eeb0 0a48 	vmov.f32	s0, s16
 81086a4:	eef0 0a68 	vmov.f32	s1, s17
 81086a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81086ac:	f001 ff50 	bl	810a550 <__ulp>
 81086b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81086b4:	ec53 2b10 	vmov	r2, r3, d0
 81086b8:	f7f8 f826 	bl	8100708 <__aeabi_dmul>
 81086bc:	ec53 2b18 	vmov	r2, r3, d8
 81086c0:	f7f7 fe6c 	bl	810039c <__adddf3>
 81086c4:	4682      	mov	sl, r0
 81086c6:	468b      	mov	fp, r1
 81086c8:	e78d      	b.n	81085e6 <_strtod_l+0xab6>
 81086ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 81086ce:	e7db      	b.n	8108688 <_strtod_l+0xb58>
 81086d0:	a311      	add	r3, pc, #68	; (adr r3, 8108718 <_strtod_l+0xbe8>)
 81086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81086d6:	f7f8 fa89 	bl	8100bec <__aeabi_dcmplt>
 81086da:	e7b2      	b.n	8108642 <_strtod_l+0xb12>
 81086dc:	2300      	movs	r3, #0
 81086de:	930a      	str	r3, [sp, #40]	; 0x28
 81086e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 81086e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81086e4:	6013      	str	r3, [r2, #0]
 81086e6:	f7ff ba6b 	b.w	8107bc0 <_strtod_l+0x90>
 81086ea:	2a65      	cmp	r2, #101	; 0x65
 81086ec:	f43f ab5f 	beq.w	8107dae <_strtod_l+0x27e>
 81086f0:	2a45      	cmp	r2, #69	; 0x45
 81086f2:	f43f ab5c 	beq.w	8107dae <_strtod_l+0x27e>
 81086f6:	2301      	movs	r3, #1
 81086f8:	f7ff bb94 	b.w	8107e24 <_strtod_l+0x2f4>
 81086fc:	f3af 8000 	nop.w
 8108700:	94a03595 	.word	0x94a03595
 8108704:	3fdfffff 	.word	0x3fdfffff
 8108708:	35afe535 	.word	0x35afe535
 810870c:	3fe00000 	.word	0x3fe00000
 8108710:	ffc00000 	.word	0xffc00000
 8108714:	41dfffff 	.word	0x41dfffff
 8108718:	94a03595 	.word	0x94a03595
 810871c:	3fcfffff 	.word	0x3fcfffff
 8108720:	3ff00000 	.word	0x3ff00000
 8108724:	7ff00000 	.word	0x7ff00000
 8108728:	7fe00000 	.word	0x7fe00000
 810872c:	7c9fffff 	.word	0x7c9fffff
 8108730:	3fe00000 	.word	0x3fe00000
 8108734:	bff00000 	.word	0xbff00000
 8108738:	7fefffff 	.word	0x7fefffff

0810873c <_strtod_r>:
 810873c:	4b01      	ldr	r3, [pc, #4]	; (8108744 <_strtod_r+0x8>)
 810873e:	f7ff b9f7 	b.w	8107b30 <_strtod_l>
 8108742:	bf00      	nop
 8108744:	10000090 	.word	0x10000090

08108748 <_strtol_l.constprop.0>:
 8108748:	2b01      	cmp	r3, #1
 810874a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810874e:	d001      	beq.n	8108754 <_strtol_l.constprop.0+0xc>
 8108750:	2b24      	cmp	r3, #36	; 0x24
 8108752:	d906      	bls.n	8108762 <_strtol_l.constprop.0+0x1a>
 8108754:	f7fe fae4 	bl	8106d20 <__errno>
 8108758:	2316      	movs	r3, #22
 810875a:	6003      	str	r3, [r0, #0]
 810875c:	2000      	movs	r0, #0
 810875e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108762:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8108848 <_strtol_l.constprop.0+0x100>
 8108766:	460d      	mov	r5, r1
 8108768:	462e      	mov	r6, r5
 810876a:	f815 4b01 	ldrb.w	r4, [r5], #1
 810876e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8108772:	f017 0708 	ands.w	r7, r7, #8
 8108776:	d1f7      	bne.n	8108768 <_strtol_l.constprop.0+0x20>
 8108778:	2c2d      	cmp	r4, #45	; 0x2d
 810877a:	d132      	bne.n	81087e2 <_strtol_l.constprop.0+0x9a>
 810877c:	782c      	ldrb	r4, [r5, #0]
 810877e:	2701      	movs	r7, #1
 8108780:	1cb5      	adds	r5, r6, #2
 8108782:	2b00      	cmp	r3, #0
 8108784:	d05b      	beq.n	810883e <_strtol_l.constprop.0+0xf6>
 8108786:	2b10      	cmp	r3, #16
 8108788:	d109      	bne.n	810879e <_strtol_l.constprop.0+0x56>
 810878a:	2c30      	cmp	r4, #48	; 0x30
 810878c:	d107      	bne.n	810879e <_strtol_l.constprop.0+0x56>
 810878e:	782c      	ldrb	r4, [r5, #0]
 8108790:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8108794:	2c58      	cmp	r4, #88	; 0x58
 8108796:	d14d      	bne.n	8108834 <_strtol_l.constprop.0+0xec>
 8108798:	786c      	ldrb	r4, [r5, #1]
 810879a:	2310      	movs	r3, #16
 810879c:	3502      	adds	r5, #2
 810879e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 81087a2:	f108 38ff 	add.w	r8, r8, #4294967295
 81087a6:	f04f 0c00 	mov.w	ip, #0
 81087aa:	fbb8 f9f3 	udiv	r9, r8, r3
 81087ae:	4666      	mov	r6, ip
 81087b0:	fb03 8a19 	mls	sl, r3, r9, r8
 81087b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 81087b8:	f1be 0f09 	cmp.w	lr, #9
 81087bc:	d816      	bhi.n	81087ec <_strtol_l.constprop.0+0xa4>
 81087be:	4674      	mov	r4, lr
 81087c0:	42a3      	cmp	r3, r4
 81087c2:	dd24      	ble.n	810880e <_strtol_l.constprop.0+0xc6>
 81087c4:	f1bc 0f00 	cmp.w	ip, #0
 81087c8:	db1e      	blt.n	8108808 <_strtol_l.constprop.0+0xc0>
 81087ca:	45b1      	cmp	r9, r6
 81087cc:	d31c      	bcc.n	8108808 <_strtol_l.constprop.0+0xc0>
 81087ce:	d101      	bne.n	81087d4 <_strtol_l.constprop.0+0x8c>
 81087d0:	45a2      	cmp	sl, r4
 81087d2:	db19      	blt.n	8108808 <_strtol_l.constprop.0+0xc0>
 81087d4:	fb06 4603 	mla	r6, r6, r3, r4
 81087d8:	f04f 0c01 	mov.w	ip, #1
 81087dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 81087e0:	e7e8      	b.n	81087b4 <_strtol_l.constprop.0+0x6c>
 81087e2:	2c2b      	cmp	r4, #43	; 0x2b
 81087e4:	bf04      	itt	eq
 81087e6:	782c      	ldrbeq	r4, [r5, #0]
 81087e8:	1cb5      	addeq	r5, r6, #2
 81087ea:	e7ca      	b.n	8108782 <_strtol_l.constprop.0+0x3a>
 81087ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 81087f0:	f1be 0f19 	cmp.w	lr, #25
 81087f4:	d801      	bhi.n	81087fa <_strtol_l.constprop.0+0xb2>
 81087f6:	3c37      	subs	r4, #55	; 0x37
 81087f8:	e7e2      	b.n	81087c0 <_strtol_l.constprop.0+0x78>
 81087fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 81087fe:	f1be 0f19 	cmp.w	lr, #25
 8108802:	d804      	bhi.n	810880e <_strtol_l.constprop.0+0xc6>
 8108804:	3c57      	subs	r4, #87	; 0x57
 8108806:	e7db      	b.n	81087c0 <_strtol_l.constprop.0+0x78>
 8108808:	f04f 3cff 	mov.w	ip, #4294967295
 810880c:	e7e6      	b.n	81087dc <_strtol_l.constprop.0+0x94>
 810880e:	f1bc 0f00 	cmp.w	ip, #0
 8108812:	da05      	bge.n	8108820 <_strtol_l.constprop.0+0xd8>
 8108814:	2322      	movs	r3, #34	; 0x22
 8108816:	6003      	str	r3, [r0, #0]
 8108818:	4646      	mov	r6, r8
 810881a:	b942      	cbnz	r2, 810882e <_strtol_l.constprop.0+0xe6>
 810881c:	4630      	mov	r0, r6
 810881e:	e79e      	b.n	810875e <_strtol_l.constprop.0+0x16>
 8108820:	b107      	cbz	r7, 8108824 <_strtol_l.constprop.0+0xdc>
 8108822:	4276      	negs	r6, r6
 8108824:	2a00      	cmp	r2, #0
 8108826:	d0f9      	beq.n	810881c <_strtol_l.constprop.0+0xd4>
 8108828:	f1bc 0f00 	cmp.w	ip, #0
 810882c:	d000      	beq.n	8108830 <_strtol_l.constprop.0+0xe8>
 810882e:	1e69      	subs	r1, r5, #1
 8108830:	6011      	str	r1, [r2, #0]
 8108832:	e7f3      	b.n	810881c <_strtol_l.constprop.0+0xd4>
 8108834:	2430      	movs	r4, #48	; 0x30
 8108836:	2b00      	cmp	r3, #0
 8108838:	d1b1      	bne.n	810879e <_strtol_l.constprop.0+0x56>
 810883a:	2308      	movs	r3, #8
 810883c:	e7af      	b.n	810879e <_strtol_l.constprop.0+0x56>
 810883e:	2c30      	cmp	r4, #48	; 0x30
 8108840:	d0a5      	beq.n	810878e <_strtol_l.constprop.0+0x46>
 8108842:	230a      	movs	r3, #10
 8108844:	e7ab      	b.n	810879e <_strtol_l.constprop.0+0x56>
 8108846:	bf00      	nop
 8108848:	0810b789 	.word	0x0810b789

0810884c <_strtol_r>:
 810884c:	f7ff bf7c 	b.w	8108748 <_strtol_l.constprop.0>

08108850 <quorem>:
 8108850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108854:	6903      	ldr	r3, [r0, #16]
 8108856:	690c      	ldr	r4, [r1, #16]
 8108858:	42a3      	cmp	r3, r4
 810885a:	4607      	mov	r7, r0
 810885c:	f2c0 8081 	blt.w	8108962 <quorem+0x112>
 8108860:	3c01      	subs	r4, #1
 8108862:	f101 0814 	add.w	r8, r1, #20
 8108866:	f100 0514 	add.w	r5, r0, #20
 810886a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810886e:	9301      	str	r3, [sp, #4]
 8108870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108878:	3301      	adds	r3, #1
 810887a:	429a      	cmp	r2, r3
 810887c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8108880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108884:	fbb2 f6f3 	udiv	r6, r2, r3
 8108888:	d331      	bcc.n	81088ee <quorem+0x9e>
 810888a:	f04f 0e00 	mov.w	lr, #0
 810888e:	4640      	mov	r0, r8
 8108890:	46ac      	mov	ip, r5
 8108892:	46f2      	mov	sl, lr
 8108894:	f850 2b04 	ldr.w	r2, [r0], #4
 8108898:	b293      	uxth	r3, r2
 810889a:	fb06 e303 	mla	r3, r6, r3, lr
 810889e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81088a2:	b29b      	uxth	r3, r3
 81088a4:	ebaa 0303 	sub.w	r3, sl, r3
 81088a8:	f8dc a000 	ldr.w	sl, [ip]
 81088ac:	0c12      	lsrs	r2, r2, #16
 81088ae:	fa13 f38a 	uxtah	r3, r3, sl
 81088b2:	fb06 e202 	mla	r2, r6, r2, lr
 81088b6:	9300      	str	r3, [sp, #0]
 81088b8:	9b00      	ldr	r3, [sp, #0]
 81088ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81088be:	b292      	uxth	r2, r2
 81088c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 81088c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81088c8:	f8bd 3000 	ldrh.w	r3, [sp]
 81088cc:	4581      	cmp	r9, r0
 81088ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81088d2:	f84c 3b04 	str.w	r3, [ip], #4
 81088d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81088da:	d2db      	bcs.n	8108894 <quorem+0x44>
 81088dc:	f855 300b 	ldr.w	r3, [r5, fp]
 81088e0:	b92b      	cbnz	r3, 81088ee <quorem+0x9e>
 81088e2:	9b01      	ldr	r3, [sp, #4]
 81088e4:	3b04      	subs	r3, #4
 81088e6:	429d      	cmp	r5, r3
 81088e8:	461a      	mov	r2, r3
 81088ea:	d32e      	bcc.n	810894a <quorem+0xfa>
 81088ec:	613c      	str	r4, [r7, #16]
 81088ee:	4638      	mov	r0, r7
 81088f0:	f001 fd88 	bl	810a404 <__mcmp>
 81088f4:	2800      	cmp	r0, #0
 81088f6:	db24      	blt.n	8108942 <quorem+0xf2>
 81088f8:	3601      	adds	r6, #1
 81088fa:	4628      	mov	r0, r5
 81088fc:	f04f 0c00 	mov.w	ip, #0
 8108900:	f858 2b04 	ldr.w	r2, [r8], #4
 8108904:	f8d0 e000 	ldr.w	lr, [r0]
 8108908:	b293      	uxth	r3, r2
 810890a:	ebac 0303 	sub.w	r3, ip, r3
 810890e:	0c12      	lsrs	r2, r2, #16
 8108910:	fa13 f38e 	uxtah	r3, r3, lr
 8108914:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8108918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810891c:	b29b      	uxth	r3, r3
 810891e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108922:	45c1      	cmp	r9, r8
 8108924:	f840 3b04 	str.w	r3, [r0], #4
 8108928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810892c:	d2e8      	bcs.n	8108900 <quorem+0xb0>
 810892e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108936:	b922      	cbnz	r2, 8108942 <quorem+0xf2>
 8108938:	3b04      	subs	r3, #4
 810893a:	429d      	cmp	r5, r3
 810893c:	461a      	mov	r2, r3
 810893e:	d30a      	bcc.n	8108956 <quorem+0x106>
 8108940:	613c      	str	r4, [r7, #16]
 8108942:	4630      	mov	r0, r6
 8108944:	b003      	add	sp, #12
 8108946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810894a:	6812      	ldr	r2, [r2, #0]
 810894c:	3b04      	subs	r3, #4
 810894e:	2a00      	cmp	r2, #0
 8108950:	d1cc      	bne.n	81088ec <quorem+0x9c>
 8108952:	3c01      	subs	r4, #1
 8108954:	e7c7      	b.n	81088e6 <quorem+0x96>
 8108956:	6812      	ldr	r2, [r2, #0]
 8108958:	3b04      	subs	r3, #4
 810895a:	2a00      	cmp	r2, #0
 810895c:	d1f0      	bne.n	8108940 <quorem+0xf0>
 810895e:	3c01      	subs	r4, #1
 8108960:	e7eb      	b.n	810893a <quorem+0xea>
 8108962:	2000      	movs	r0, #0
 8108964:	e7ee      	b.n	8108944 <quorem+0xf4>
	...

08108968 <_dtoa_r>:
 8108968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810896c:	ed2d 8b04 	vpush	{d8-d9}
 8108970:	ec57 6b10 	vmov	r6, r7, d0
 8108974:	b093      	sub	sp, #76	; 0x4c
 8108976:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8108978:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810897c:	9106      	str	r1, [sp, #24]
 810897e:	ee10 aa10 	vmov	sl, s0
 8108982:	4604      	mov	r4, r0
 8108984:	9209      	str	r2, [sp, #36]	; 0x24
 8108986:	930c      	str	r3, [sp, #48]	; 0x30
 8108988:	46bb      	mov	fp, r7
 810898a:	b975      	cbnz	r5, 81089aa <_dtoa_r+0x42>
 810898c:	2010      	movs	r0, #16
 810898e:	f001 fa45 	bl	8109e1c <malloc>
 8108992:	4602      	mov	r2, r0
 8108994:	6260      	str	r0, [r4, #36]	; 0x24
 8108996:	b920      	cbnz	r0, 81089a2 <_dtoa_r+0x3a>
 8108998:	4ba7      	ldr	r3, [pc, #668]	; (8108c38 <_dtoa_r+0x2d0>)
 810899a:	21ea      	movs	r1, #234	; 0xea
 810899c:	48a7      	ldr	r0, [pc, #668]	; (8108c3c <_dtoa_r+0x2d4>)
 810899e:	f002 fc23 	bl	810b1e8 <__assert_func>
 81089a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81089a6:	6005      	str	r5, [r0, #0]
 81089a8:	60c5      	str	r5, [r0, #12]
 81089aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81089ac:	6819      	ldr	r1, [r3, #0]
 81089ae:	b151      	cbz	r1, 81089c6 <_dtoa_r+0x5e>
 81089b0:	685a      	ldr	r2, [r3, #4]
 81089b2:	604a      	str	r2, [r1, #4]
 81089b4:	2301      	movs	r3, #1
 81089b6:	4093      	lsls	r3, r2
 81089b8:	608b      	str	r3, [r1, #8]
 81089ba:	4620      	mov	r0, r4
 81089bc:	f001 fa96 	bl	8109eec <_Bfree>
 81089c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81089c2:	2200      	movs	r2, #0
 81089c4:	601a      	str	r2, [r3, #0]
 81089c6:	1e3b      	subs	r3, r7, #0
 81089c8:	bfaa      	itet	ge
 81089ca:	2300      	movge	r3, #0
 81089cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 81089d0:	f8c8 3000 	strge.w	r3, [r8]
 81089d4:	4b9a      	ldr	r3, [pc, #616]	; (8108c40 <_dtoa_r+0x2d8>)
 81089d6:	bfbc      	itt	lt
 81089d8:	2201      	movlt	r2, #1
 81089da:	f8c8 2000 	strlt.w	r2, [r8]
 81089de:	ea33 030b 	bics.w	r3, r3, fp
 81089e2:	d11b      	bne.n	8108a1c <_dtoa_r+0xb4>
 81089e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81089e6:	f242 730f 	movw	r3, #9999	; 0x270f
 81089ea:	6013      	str	r3, [r2, #0]
 81089ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81089f0:	4333      	orrs	r3, r6
 81089f2:	f000 8592 	beq.w	810951a <_dtoa_r+0xbb2>
 81089f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81089f8:	b963      	cbnz	r3, 8108a14 <_dtoa_r+0xac>
 81089fa:	4b92      	ldr	r3, [pc, #584]	; (8108c44 <_dtoa_r+0x2dc>)
 81089fc:	e022      	b.n	8108a44 <_dtoa_r+0xdc>
 81089fe:	4b92      	ldr	r3, [pc, #584]	; (8108c48 <_dtoa_r+0x2e0>)
 8108a00:	9301      	str	r3, [sp, #4]
 8108a02:	3308      	adds	r3, #8
 8108a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8108a06:	6013      	str	r3, [r2, #0]
 8108a08:	9801      	ldr	r0, [sp, #4]
 8108a0a:	b013      	add	sp, #76	; 0x4c
 8108a0c:	ecbd 8b04 	vpop	{d8-d9}
 8108a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108a14:	4b8b      	ldr	r3, [pc, #556]	; (8108c44 <_dtoa_r+0x2dc>)
 8108a16:	9301      	str	r3, [sp, #4]
 8108a18:	3303      	adds	r3, #3
 8108a1a:	e7f3      	b.n	8108a04 <_dtoa_r+0x9c>
 8108a1c:	2200      	movs	r2, #0
 8108a1e:	2300      	movs	r3, #0
 8108a20:	4650      	mov	r0, sl
 8108a22:	4659      	mov	r1, fp
 8108a24:	f7f8 f8d8 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a28:	ec4b ab19 	vmov	d9, sl, fp
 8108a2c:	4680      	mov	r8, r0
 8108a2e:	b158      	cbz	r0, 8108a48 <_dtoa_r+0xe0>
 8108a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8108a32:	2301      	movs	r3, #1
 8108a34:	6013      	str	r3, [r2, #0]
 8108a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108a38:	2b00      	cmp	r3, #0
 8108a3a:	f000 856b 	beq.w	8109514 <_dtoa_r+0xbac>
 8108a3e:	4883      	ldr	r0, [pc, #524]	; (8108c4c <_dtoa_r+0x2e4>)
 8108a40:	6018      	str	r0, [r3, #0]
 8108a42:	1e43      	subs	r3, r0, #1
 8108a44:	9301      	str	r3, [sp, #4]
 8108a46:	e7df      	b.n	8108a08 <_dtoa_r+0xa0>
 8108a48:	ec4b ab10 	vmov	d0, sl, fp
 8108a4c:	aa10      	add	r2, sp, #64	; 0x40
 8108a4e:	a911      	add	r1, sp, #68	; 0x44
 8108a50:	4620      	mov	r0, r4
 8108a52:	f001 fdf9 	bl	810a648 <__d2b>
 8108a56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8108a5a:	ee08 0a10 	vmov	s16, r0
 8108a5e:	2d00      	cmp	r5, #0
 8108a60:	f000 8084 	beq.w	8108b6c <_dtoa_r+0x204>
 8108a64:	ee19 3a90 	vmov	r3, s19
 8108a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108a6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8108a70:	4656      	mov	r6, sl
 8108a72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8108a76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8108a7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8108a7e:	4b74      	ldr	r3, [pc, #464]	; (8108c50 <_dtoa_r+0x2e8>)
 8108a80:	2200      	movs	r2, #0
 8108a82:	4630      	mov	r0, r6
 8108a84:	4639      	mov	r1, r7
 8108a86:	f7f7 fc87 	bl	8100398 <__aeabi_dsub>
 8108a8a:	a365      	add	r3, pc, #404	; (adr r3, 8108c20 <_dtoa_r+0x2b8>)
 8108a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a90:	f7f7 fe3a 	bl	8100708 <__aeabi_dmul>
 8108a94:	a364      	add	r3, pc, #400	; (adr r3, 8108c28 <_dtoa_r+0x2c0>)
 8108a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a9a:	f7f7 fc7f 	bl	810039c <__adddf3>
 8108a9e:	4606      	mov	r6, r0
 8108aa0:	4628      	mov	r0, r5
 8108aa2:	460f      	mov	r7, r1
 8108aa4:	f7f7 fdc6 	bl	8100634 <__aeabi_i2d>
 8108aa8:	a361      	add	r3, pc, #388	; (adr r3, 8108c30 <_dtoa_r+0x2c8>)
 8108aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108aae:	f7f7 fe2b 	bl	8100708 <__aeabi_dmul>
 8108ab2:	4602      	mov	r2, r0
 8108ab4:	460b      	mov	r3, r1
 8108ab6:	4630      	mov	r0, r6
 8108ab8:	4639      	mov	r1, r7
 8108aba:	f7f7 fc6f 	bl	810039c <__adddf3>
 8108abe:	4606      	mov	r6, r0
 8108ac0:	460f      	mov	r7, r1
 8108ac2:	f7f8 f8d1 	bl	8100c68 <__aeabi_d2iz>
 8108ac6:	2200      	movs	r2, #0
 8108ac8:	9000      	str	r0, [sp, #0]
 8108aca:	2300      	movs	r3, #0
 8108acc:	4630      	mov	r0, r6
 8108ace:	4639      	mov	r1, r7
 8108ad0:	f7f8 f88c 	bl	8100bec <__aeabi_dcmplt>
 8108ad4:	b150      	cbz	r0, 8108aec <_dtoa_r+0x184>
 8108ad6:	9800      	ldr	r0, [sp, #0]
 8108ad8:	f7f7 fdac 	bl	8100634 <__aeabi_i2d>
 8108adc:	4632      	mov	r2, r6
 8108ade:	463b      	mov	r3, r7
 8108ae0:	f7f8 f87a 	bl	8100bd8 <__aeabi_dcmpeq>
 8108ae4:	b910      	cbnz	r0, 8108aec <_dtoa_r+0x184>
 8108ae6:	9b00      	ldr	r3, [sp, #0]
 8108ae8:	3b01      	subs	r3, #1
 8108aea:	9300      	str	r3, [sp, #0]
 8108aec:	9b00      	ldr	r3, [sp, #0]
 8108aee:	2b16      	cmp	r3, #22
 8108af0:	d85a      	bhi.n	8108ba8 <_dtoa_r+0x240>
 8108af2:	9a00      	ldr	r2, [sp, #0]
 8108af4:	4b57      	ldr	r3, [pc, #348]	; (8108c54 <_dtoa_r+0x2ec>)
 8108af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108afe:	ec51 0b19 	vmov	r0, r1, d9
 8108b02:	f7f8 f873 	bl	8100bec <__aeabi_dcmplt>
 8108b06:	2800      	cmp	r0, #0
 8108b08:	d050      	beq.n	8108bac <_dtoa_r+0x244>
 8108b0a:	9b00      	ldr	r3, [sp, #0]
 8108b0c:	3b01      	subs	r3, #1
 8108b0e:	9300      	str	r3, [sp, #0]
 8108b10:	2300      	movs	r3, #0
 8108b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8108b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108b16:	1b5d      	subs	r5, r3, r5
 8108b18:	1e6b      	subs	r3, r5, #1
 8108b1a:	9305      	str	r3, [sp, #20]
 8108b1c:	bf45      	ittet	mi
 8108b1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8108b22:	9304      	strmi	r3, [sp, #16]
 8108b24:	2300      	movpl	r3, #0
 8108b26:	2300      	movmi	r3, #0
 8108b28:	bf4c      	ite	mi
 8108b2a:	9305      	strmi	r3, [sp, #20]
 8108b2c:	9304      	strpl	r3, [sp, #16]
 8108b2e:	9b00      	ldr	r3, [sp, #0]
 8108b30:	2b00      	cmp	r3, #0
 8108b32:	db3d      	blt.n	8108bb0 <_dtoa_r+0x248>
 8108b34:	9b05      	ldr	r3, [sp, #20]
 8108b36:	9a00      	ldr	r2, [sp, #0]
 8108b38:	920a      	str	r2, [sp, #40]	; 0x28
 8108b3a:	4413      	add	r3, r2
 8108b3c:	9305      	str	r3, [sp, #20]
 8108b3e:	2300      	movs	r3, #0
 8108b40:	9307      	str	r3, [sp, #28]
 8108b42:	9b06      	ldr	r3, [sp, #24]
 8108b44:	2b09      	cmp	r3, #9
 8108b46:	f200 8089 	bhi.w	8108c5c <_dtoa_r+0x2f4>
 8108b4a:	2b05      	cmp	r3, #5
 8108b4c:	bfc4      	itt	gt
 8108b4e:	3b04      	subgt	r3, #4
 8108b50:	9306      	strgt	r3, [sp, #24]
 8108b52:	9b06      	ldr	r3, [sp, #24]
 8108b54:	f1a3 0302 	sub.w	r3, r3, #2
 8108b58:	bfcc      	ite	gt
 8108b5a:	2500      	movgt	r5, #0
 8108b5c:	2501      	movle	r5, #1
 8108b5e:	2b03      	cmp	r3, #3
 8108b60:	f200 8087 	bhi.w	8108c72 <_dtoa_r+0x30a>
 8108b64:	e8df f003 	tbb	[pc, r3]
 8108b68:	59383a2d 	.word	0x59383a2d
 8108b6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8108b70:	441d      	add	r5, r3
 8108b72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8108b76:	2b20      	cmp	r3, #32
 8108b78:	bfc1      	itttt	gt
 8108b7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8108b7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8108b82:	fa0b f303 	lslgt.w	r3, fp, r3
 8108b86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8108b8a:	bfda      	itte	le
 8108b8c:	f1c3 0320 	rsble	r3, r3, #32
 8108b90:	fa06 f003 	lslle.w	r0, r6, r3
 8108b94:	4318      	orrgt	r0, r3
 8108b96:	f7f7 fd3d 	bl	8100614 <__aeabi_ui2d>
 8108b9a:	2301      	movs	r3, #1
 8108b9c:	4606      	mov	r6, r0
 8108b9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8108ba2:	3d01      	subs	r5, #1
 8108ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8108ba6:	e76a      	b.n	8108a7e <_dtoa_r+0x116>
 8108ba8:	2301      	movs	r3, #1
 8108baa:	e7b2      	b.n	8108b12 <_dtoa_r+0x1aa>
 8108bac:	900b      	str	r0, [sp, #44]	; 0x2c
 8108bae:	e7b1      	b.n	8108b14 <_dtoa_r+0x1ac>
 8108bb0:	9b04      	ldr	r3, [sp, #16]
 8108bb2:	9a00      	ldr	r2, [sp, #0]
 8108bb4:	1a9b      	subs	r3, r3, r2
 8108bb6:	9304      	str	r3, [sp, #16]
 8108bb8:	4253      	negs	r3, r2
 8108bba:	9307      	str	r3, [sp, #28]
 8108bbc:	2300      	movs	r3, #0
 8108bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8108bc0:	e7bf      	b.n	8108b42 <_dtoa_r+0x1da>
 8108bc2:	2300      	movs	r3, #0
 8108bc4:	9308      	str	r3, [sp, #32]
 8108bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108bc8:	2b00      	cmp	r3, #0
 8108bca:	dc55      	bgt.n	8108c78 <_dtoa_r+0x310>
 8108bcc:	2301      	movs	r3, #1
 8108bce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8108bd2:	461a      	mov	r2, r3
 8108bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8108bd6:	e00c      	b.n	8108bf2 <_dtoa_r+0x28a>
 8108bd8:	2301      	movs	r3, #1
 8108bda:	e7f3      	b.n	8108bc4 <_dtoa_r+0x25c>
 8108bdc:	2300      	movs	r3, #0
 8108bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108be0:	9308      	str	r3, [sp, #32]
 8108be2:	9b00      	ldr	r3, [sp, #0]
 8108be4:	4413      	add	r3, r2
 8108be6:	9302      	str	r3, [sp, #8]
 8108be8:	3301      	adds	r3, #1
 8108bea:	2b01      	cmp	r3, #1
 8108bec:	9303      	str	r3, [sp, #12]
 8108bee:	bfb8      	it	lt
 8108bf0:	2301      	movlt	r3, #1
 8108bf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8108bf4:	2200      	movs	r2, #0
 8108bf6:	6042      	str	r2, [r0, #4]
 8108bf8:	2204      	movs	r2, #4
 8108bfa:	f102 0614 	add.w	r6, r2, #20
 8108bfe:	429e      	cmp	r6, r3
 8108c00:	6841      	ldr	r1, [r0, #4]
 8108c02:	d93d      	bls.n	8108c80 <_dtoa_r+0x318>
 8108c04:	4620      	mov	r0, r4
 8108c06:	f001 f931 	bl	8109e6c <_Balloc>
 8108c0a:	9001      	str	r0, [sp, #4]
 8108c0c:	2800      	cmp	r0, #0
 8108c0e:	d13b      	bne.n	8108c88 <_dtoa_r+0x320>
 8108c10:	4b11      	ldr	r3, [pc, #68]	; (8108c58 <_dtoa_r+0x2f0>)
 8108c12:	4602      	mov	r2, r0
 8108c14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8108c18:	e6c0      	b.n	810899c <_dtoa_r+0x34>
 8108c1a:	2301      	movs	r3, #1
 8108c1c:	e7df      	b.n	8108bde <_dtoa_r+0x276>
 8108c1e:	bf00      	nop
 8108c20:	636f4361 	.word	0x636f4361
 8108c24:	3fd287a7 	.word	0x3fd287a7
 8108c28:	8b60c8b3 	.word	0x8b60c8b3
 8108c2c:	3fc68a28 	.word	0x3fc68a28
 8108c30:	509f79fb 	.word	0x509f79fb
 8108c34:	3fd34413 	.word	0x3fd34413
 8108c38:	0810b896 	.word	0x0810b896
 8108c3c:	0810b8ad 	.word	0x0810b8ad
 8108c40:	7ff00000 	.word	0x7ff00000
 8108c44:	0810b892 	.word	0x0810b892
 8108c48:	0810b889 	.word	0x0810b889
 8108c4c:	0810b709 	.word	0x0810b709
 8108c50:	3ff80000 	.word	0x3ff80000
 8108c54:	0810ba80 	.word	0x0810ba80
 8108c58:	0810b908 	.word	0x0810b908
 8108c5c:	2501      	movs	r5, #1
 8108c5e:	2300      	movs	r3, #0
 8108c60:	9306      	str	r3, [sp, #24]
 8108c62:	9508      	str	r5, [sp, #32]
 8108c64:	f04f 33ff 	mov.w	r3, #4294967295
 8108c68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8108c6c:	2200      	movs	r2, #0
 8108c6e:	2312      	movs	r3, #18
 8108c70:	e7b0      	b.n	8108bd4 <_dtoa_r+0x26c>
 8108c72:	2301      	movs	r3, #1
 8108c74:	9308      	str	r3, [sp, #32]
 8108c76:	e7f5      	b.n	8108c64 <_dtoa_r+0x2fc>
 8108c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108c7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8108c7e:	e7b8      	b.n	8108bf2 <_dtoa_r+0x28a>
 8108c80:	3101      	adds	r1, #1
 8108c82:	6041      	str	r1, [r0, #4]
 8108c84:	0052      	lsls	r2, r2, #1
 8108c86:	e7b8      	b.n	8108bfa <_dtoa_r+0x292>
 8108c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108c8a:	9a01      	ldr	r2, [sp, #4]
 8108c8c:	601a      	str	r2, [r3, #0]
 8108c8e:	9b03      	ldr	r3, [sp, #12]
 8108c90:	2b0e      	cmp	r3, #14
 8108c92:	f200 809d 	bhi.w	8108dd0 <_dtoa_r+0x468>
 8108c96:	2d00      	cmp	r5, #0
 8108c98:	f000 809a 	beq.w	8108dd0 <_dtoa_r+0x468>
 8108c9c:	9b00      	ldr	r3, [sp, #0]
 8108c9e:	2b00      	cmp	r3, #0
 8108ca0:	dd32      	ble.n	8108d08 <_dtoa_r+0x3a0>
 8108ca2:	4ab7      	ldr	r2, [pc, #732]	; (8108f80 <_dtoa_r+0x618>)
 8108ca4:	f003 030f 	and.w	r3, r3, #15
 8108ca8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108cb0:	9b00      	ldr	r3, [sp, #0]
 8108cb2:	05d8      	lsls	r0, r3, #23
 8108cb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8108cb8:	d516      	bpl.n	8108ce8 <_dtoa_r+0x380>
 8108cba:	4bb2      	ldr	r3, [pc, #712]	; (8108f84 <_dtoa_r+0x61c>)
 8108cbc:	ec51 0b19 	vmov	r0, r1, d9
 8108cc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8108cc4:	f7f7 fe4a 	bl	810095c <__aeabi_ddiv>
 8108cc8:	f007 070f 	and.w	r7, r7, #15
 8108ccc:	4682      	mov	sl, r0
 8108cce:	468b      	mov	fp, r1
 8108cd0:	2503      	movs	r5, #3
 8108cd2:	4eac      	ldr	r6, [pc, #688]	; (8108f84 <_dtoa_r+0x61c>)
 8108cd4:	b957      	cbnz	r7, 8108cec <_dtoa_r+0x384>
 8108cd6:	4642      	mov	r2, r8
 8108cd8:	464b      	mov	r3, r9
 8108cda:	4650      	mov	r0, sl
 8108cdc:	4659      	mov	r1, fp
 8108cde:	f7f7 fe3d 	bl	810095c <__aeabi_ddiv>
 8108ce2:	4682      	mov	sl, r0
 8108ce4:	468b      	mov	fp, r1
 8108ce6:	e028      	b.n	8108d3a <_dtoa_r+0x3d2>
 8108ce8:	2502      	movs	r5, #2
 8108cea:	e7f2      	b.n	8108cd2 <_dtoa_r+0x36a>
 8108cec:	07f9      	lsls	r1, r7, #31
 8108cee:	d508      	bpl.n	8108d02 <_dtoa_r+0x39a>
 8108cf0:	4640      	mov	r0, r8
 8108cf2:	4649      	mov	r1, r9
 8108cf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108cf8:	f7f7 fd06 	bl	8100708 <__aeabi_dmul>
 8108cfc:	3501      	adds	r5, #1
 8108cfe:	4680      	mov	r8, r0
 8108d00:	4689      	mov	r9, r1
 8108d02:	107f      	asrs	r7, r7, #1
 8108d04:	3608      	adds	r6, #8
 8108d06:	e7e5      	b.n	8108cd4 <_dtoa_r+0x36c>
 8108d08:	f000 809b 	beq.w	8108e42 <_dtoa_r+0x4da>
 8108d0c:	9b00      	ldr	r3, [sp, #0]
 8108d0e:	4f9d      	ldr	r7, [pc, #628]	; (8108f84 <_dtoa_r+0x61c>)
 8108d10:	425e      	negs	r6, r3
 8108d12:	4b9b      	ldr	r3, [pc, #620]	; (8108f80 <_dtoa_r+0x618>)
 8108d14:	f006 020f 	and.w	r2, r6, #15
 8108d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d20:	ec51 0b19 	vmov	r0, r1, d9
 8108d24:	f7f7 fcf0 	bl	8100708 <__aeabi_dmul>
 8108d28:	1136      	asrs	r6, r6, #4
 8108d2a:	4682      	mov	sl, r0
 8108d2c:	468b      	mov	fp, r1
 8108d2e:	2300      	movs	r3, #0
 8108d30:	2502      	movs	r5, #2
 8108d32:	2e00      	cmp	r6, #0
 8108d34:	d17a      	bne.n	8108e2c <_dtoa_r+0x4c4>
 8108d36:	2b00      	cmp	r3, #0
 8108d38:	d1d3      	bne.n	8108ce2 <_dtoa_r+0x37a>
 8108d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108d3c:	2b00      	cmp	r3, #0
 8108d3e:	f000 8082 	beq.w	8108e46 <_dtoa_r+0x4de>
 8108d42:	4b91      	ldr	r3, [pc, #580]	; (8108f88 <_dtoa_r+0x620>)
 8108d44:	2200      	movs	r2, #0
 8108d46:	4650      	mov	r0, sl
 8108d48:	4659      	mov	r1, fp
 8108d4a:	f7f7 ff4f 	bl	8100bec <__aeabi_dcmplt>
 8108d4e:	2800      	cmp	r0, #0
 8108d50:	d079      	beq.n	8108e46 <_dtoa_r+0x4de>
 8108d52:	9b03      	ldr	r3, [sp, #12]
 8108d54:	2b00      	cmp	r3, #0
 8108d56:	d076      	beq.n	8108e46 <_dtoa_r+0x4de>
 8108d58:	9b02      	ldr	r3, [sp, #8]
 8108d5a:	2b00      	cmp	r3, #0
 8108d5c:	dd36      	ble.n	8108dcc <_dtoa_r+0x464>
 8108d5e:	9b00      	ldr	r3, [sp, #0]
 8108d60:	4650      	mov	r0, sl
 8108d62:	4659      	mov	r1, fp
 8108d64:	1e5f      	subs	r7, r3, #1
 8108d66:	2200      	movs	r2, #0
 8108d68:	4b88      	ldr	r3, [pc, #544]	; (8108f8c <_dtoa_r+0x624>)
 8108d6a:	f7f7 fccd 	bl	8100708 <__aeabi_dmul>
 8108d6e:	9e02      	ldr	r6, [sp, #8]
 8108d70:	4682      	mov	sl, r0
 8108d72:	468b      	mov	fp, r1
 8108d74:	3501      	adds	r5, #1
 8108d76:	4628      	mov	r0, r5
 8108d78:	f7f7 fc5c 	bl	8100634 <__aeabi_i2d>
 8108d7c:	4652      	mov	r2, sl
 8108d7e:	465b      	mov	r3, fp
 8108d80:	f7f7 fcc2 	bl	8100708 <__aeabi_dmul>
 8108d84:	4b82      	ldr	r3, [pc, #520]	; (8108f90 <_dtoa_r+0x628>)
 8108d86:	2200      	movs	r2, #0
 8108d88:	f7f7 fb08 	bl	810039c <__adddf3>
 8108d8c:	46d0      	mov	r8, sl
 8108d8e:	46d9      	mov	r9, fp
 8108d90:	4682      	mov	sl, r0
 8108d92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8108d96:	2e00      	cmp	r6, #0
 8108d98:	d158      	bne.n	8108e4c <_dtoa_r+0x4e4>
 8108d9a:	4b7e      	ldr	r3, [pc, #504]	; (8108f94 <_dtoa_r+0x62c>)
 8108d9c:	2200      	movs	r2, #0
 8108d9e:	4640      	mov	r0, r8
 8108da0:	4649      	mov	r1, r9
 8108da2:	f7f7 faf9 	bl	8100398 <__aeabi_dsub>
 8108da6:	4652      	mov	r2, sl
 8108da8:	465b      	mov	r3, fp
 8108daa:	4680      	mov	r8, r0
 8108dac:	4689      	mov	r9, r1
 8108dae:	f7f7 ff3b 	bl	8100c28 <__aeabi_dcmpgt>
 8108db2:	2800      	cmp	r0, #0
 8108db4:	f040 8295 	bne.w	81092e2 <_dtoa_r+0x97a>
 8108db8:	4652      	mov	r2, sl
 8108dba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8108dbe:	4640      	mov	r0, r8
 8108dc0:	4649      	mov	r1, r9
 8108dc2:	f7f7 ff13 	bl	8100bec <__aeabi_dcmplt>
 8108dc6:	2800      	cmp	r0, #0
 8108dc8:	f040 8289 	bne.w	81092de <_dtoa_r+0x976>
 8108dcc:	ec5b ab19 	vmov	sl, fp, d9
 8108dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108dd2:	2b00      	cmp	r3, #0
 8108dd4:	f2c0 8148 	blt.w	8109068 <_dtoa_r+0x700>
 8108dd8:	9a00      	ldr	r2, [sp, #0]
 8108dda:	2a0e      	cmp	r2, #14
 8108ddc:	f300 8144 	bgt.w	8109068 <_dtoa_r+0x700>
 8108de0:	4b67      	ldr	r3, [pc, #412]	; (8108f80 <_dtoa_r+0x618>)
 8108de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108de6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108dec:	2b00      	cmp	r3, #0
 8108dee:	f280 80d5 	bge.w	8108f9c <_dtoa_r+0x634>
 8108df2:	9b03      	ldr	r3, [sp, #12]
 8108df4:	2b00      	cmp	r3, #0
 8108df6:	f300 80d1 	bgt.w	8108f9c <_dtoa_r+0x634>
 8108dfa:	f040 826f 	bne.w	81092dc <_dtoa_r+0x974>
 8108dfe:	4b65      	ldr	r3, [pc, #404]	; (8108f94 <_dtoa_r+0x62c>)
 8108e00:	2200      	movs	r2, #0
 8108e02:	4640      	mov	r0, r8
 8108e04:	4649      	mov	r1, r9
 8108e06:	f7f7 fc7f 	bl	8100708 <__aeabi_dmul>
 8108e0a:	4652      	mov	r2, sl
 8108e0c:	465b      	mov	r3, fp
 8108e0e:	f7f7 ff01 	bl	8100c14 <__aeabi_dcmpge>
 8108e12:	9e03      	ldr	r6, [sp, #12]
 8108e14:	4637      	mov	r7, r6
 8108e16:	2800      	cmp	r0, #0
 8108e18:	f040 8245 	bne.w	81092a6 <_dtoa_r+0x93e>
 8108e1c:	9d01      	ldr	r5, [sp, #4]
 8108e1e:	2331      	movs	r3, #49	; 0x31
 8108e20:	f805 3b01 	strb.w	r3, [r5], #1
 8108e24:	9b00      	ldr	r3, [sp, #0]
 8108e26:	3301      	adds	r3, #1
 8108e28:	9300      	str	r3, [sp, #0]
 8108e2a:	e240      	b.n	81092ae <_dtoa_r+0x946>
 8108e2c:	07f2      	lsls	r2, r6, #31
 8108e2e:	d505      	bpl.n	8108e3c <_dtoa_r+0x4d4>
 8108e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108e34:	f7f7 fc68 	bl	8100708 <__aeabi_dmul>
 8108e38:	3501      	adds	r5, #1
 8108e3a:	2301      	movs	r3, #1
 8108e3c:	1076      	asrs	r6, r6, #1
 8108e3e:	3708      	adds	r7, #8
 8108e40:	e777      	b.n	8108d32 <_dtoa_r+0x3ca>
 8108e42:	2502      	movs	r5, #2
 8108e44:	e779      	b.n	8108d3a <_dtoa_r+0x3d2>
 8108e46:	9f00      	ldr	r7, [sp, #0]
 8108e48:	9e03      	ldr	r6, [sp, #12]
 8108e4a:	e794      	b.n	8108d76 <_dtoa_r+0x40e>
 8108e4c:	9901      	ldr	r1, [sp, #4]
 8108e4e:	4b4c      	ldr	r3, [pc, #304]	; (8108f80 <_dtoa_r+0x618>)
 8108e50:	4431      	add	r1, r6
 8108e52:	910d      	str	r1, [sp, #52]	; 0x34
 8108e54:	9908      	ldr	r1, [sp, #32]
 8108e56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8108e5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8108e5e:	2900      	cmp	r1, #0
 8108e60:	d043      	beq.n	8108eea <_dtoa_r+0x582>
 8108e62:	494d      	ldr	r1, [pc, #308]	; (8108f98 <_dtoa_r+0x630>)
 8108e64:	2000      	movs	r0, #0
 8108e66:	f7f7 fd79 	bl	810095c <__aeabi_ddiv>
 8108e6a:	4652      	mov	r2, sl
 8108e6c:	465b      	mov	r3, fp
 8108e6e:	f7f7 fa93 	bl	8100398 <__aeabi_dsub>
 8108e72:	9d01      	ldr	r5, [sp, #4]
 8108e74:	4682      	mov	sl, r0
 8108e76:	468b      	mov	fp, r1
 8108e78:	4649      	mov	r1, r9
 8108e7a:	4640      	mov	r0, r8
 8108e7c:	f7f7 fef4 	bl	8100c68 <__aeabi_d2iz>
 8108e80:	4606      	mov	r6, r0
 8108e82:	f7f7 fbd7 	bl	8100634 <__aeabi_i2d>
 8108e86:	4602      	mov	r2, r0
 8108e88:	460b      	mov	r3, r1
 8108e8a:	4640      	mov	r0, r8
 8108e8c:	4649      	mov	r1, r9
 8108e8e:	f7f7 fa83 	bl	8100398 <__aeabi_dsub>
 8108e92:	3630      	adds	r6, #48	; 0x30
 8108e94:	f805 6b01 	strb.w	r6, [r5], #1
 8108e98:	4652      	mov	r2, sl
 8108e9a:	465b      	mov	r3, fp
 8108e9c:	4680      	mov	r8, r0
 8108e9e:	4689      	mov	r9, r1
 8108ea0:	f7f7 fea4 	bl	8100bec <__aeabi_dcmplt>
 8108ea4:	2800      	cmp	r0, #0
 8108ea6:	d163      	bne.n	8108f70 <_dtoa_r+0x608>
 8108ea8:	4642      	mov	r2, r8
 8108eaa:	464b      	mov	r3, r9
 8108eac:	4936      	ldr	r1, [pc, #216]	; (8108f88 <_dtoa_r+0x620>)
 8108eae:	2000      	movs	r0, #0
 8108eb0:	f7f7 fa72 	bl	8100398 <__aeabi_dsub>
 8108eb4:	4652      	mov	r2, sl
 8108eb6:	465b      	mov	r3, fp
 8108eb8:	f7f7 fe98 	bl	8100bec <__aeabi_dcmplt>
 8108ebc:	2800      	cmp	r0, #0
 8108ebe:	f040 80b5 	bne.w	810902c <_dtoa_r+0x6c4>
 8108ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108ec4:	429d      	cmp	r5, r3
 8108ec6:	d081      	beq.n	8108dcc <_dtoa_r+0x464>
 8108ec8:	4b30      	ldr	r3, [pc, #192]	; (8108f8c <_dtoa_r+0x624>)
 8108eca:	2200      	movs	r2, #0
 8108ecc:	4650      	mov	r0, sl
 8108ece:	4659      	mov	r1, fp
 8108ed0:	f7f7 fc1a 	bl	8100708 <__aeabi_dmul>
 8108ed4:	4b2d      	ldr	r3, [pc, #180]	; (8108f8c <_dtoa_r+0x624>)
 8108ed6:	4682      	mov	sl, r0
 8108ed8:	468b      	mov	fp, r1
 8108eda:	4640      	mov	r0, r8
 8108edc:	4649      	mov	r1, r9
 8108ede:	2200      	movs	r2, #0
 8108ee0:	f7f7 fc12 	bl	8100708 <__aeabi_dmul>
 8108ee4:	4680      	mov	r8, r0
 8108ee6:	4689      	mov	r9, r1
 8108ee8:	e7c6      	b.n	8108e78 <_dtoa_r+0x510>
 8108eea:	4650      	mov	r0, sl
 8108eec:	4659      	mov	r1, fp
 8108eee:	f7f7 fc0b 	bl	8100708 <__aeabi_dmul>
 8108ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108ef4:	9d01      	ldr	r5, [sp, #4]
 8108ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8108ef8:	4682      	mov	sl, r0
 8108efa:	468b      	mov	fp, r1
 8108efc:	4649      	mov	r1, r9
 8108efe:	4640      	mov	r0, r8
 8108f00:	f7f7 feb2 	bl	8100c68 <__aeabi_d2iz>
 8108f04:	4606      	mov	r6, r0
 8108f06:	f7f7 fb95 	bl	8100634 <__aeabi_i2d>
 8108f0a:	3630      	adds	r6, #48	; 0x30
 8108f0c:	4602      	mov	r2, r0
 8108f0e:	460b      	mov	r3, r1
 8108f10:	4640      	mov	r0, r8
 8108f12:	4649      	mov	r1, r9
 8108f14:	f7f7 fa40 	bl	8100398 <__aeabi_dsub>
 8108f18:	f805 6b01 	strb.w	r6, [r5], #1
 8108f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108f1e:	429d      	cmp	r5, r3
 8108f20:	4680      	mov	r8, r0
 8108f22:	4689      	mov	r9, r1
 8108f24:	f04f 0200 	mov.w	r2, #0
 8108f28:	d124      	bne.n	8108f74 <_dtoa_r+0x60c>
 8108f2a:	4b1b      	ldr	r3, [pc, #108]	; (8108f98 <_dtoa_r+0x630>)
 8108f2c:	4650      	mov	r0, sl
 8108f2e:	4659      	mov	r1, fp
 8108f30:	f7f7 fa34 	bl	810039c <__adddf3>
 8108f34:	4602      	mov	r2, r0
 8108f36:	460b      	mov	r3, r1
 8108f38:	4640      	mov	r0, r8
 8108f3a:	4649      	mov	r1, r9
 8108f3c:	f7f7 fe74 	bl	8100c28 <__aeabi_dcmpgt>
 8108f40:	2800      	cmp	r0, #0
 8108f42:	d173      	bne.n	810902c <_dtoa_r+0x6c4>
 8108f44:	4652      	mov	r2, sl
 8108f46:	465b      	mov	r3, fp
 8108f48:	4913      	ldr	r1, [pc, #76]	; (8108f98 <_dtoa_r+0x630>)
 8108f4a:	2000      	movs	r0, #0
 8108f4c:	f7f7 fa24 	bl	8100398 <__aeabi_dsub>
 8108f50:	4602      	mov	r2, r0
 8108f52:	460b      	mov	r3, r1
 8108f54:	4640      	mov	r0, r8
 8108f56:	4649      	mov	r1, r9
 8108f58:	f7f7 fe48 	bl	8100bec <__aeabi_dcmplt>
 8108f5c:	2800      	cmp	r0, #0
 8108f5e:	f43f af35 	beq.w	8108dcc <_dtoa_r+0x464>
 8108f62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8108f64:	1e6b      	subs	r3, r5, #1
 8108f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8108f68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8108f6c:	2b30      	cmp	r3, #48	; 0x30
 8108f6e:	d0f8      	beq.n	8108f62 <_dtoa_r+0x5fa>
 8108f70:	9700      	str	r7, [sp, #0]
 8108f72:	e049      	b.n	8109008 <_dtoa_r+0x6a0>
 8108f74:	4b05      	ldr	r3, [pc, #20]	; (8108f8c <_dtoa_r+0x624>)
 8108f76:	f7f7 fbc7 	bl	8100708 <__aeabi_dmul>
 8108f7a:	4680      	mov	r8, r0
 8108f7c:	4689      	mov	r9, r1
 8108f7e:	e7bd      	b.n	8108efc <_dtoa_r+0x594>
 8108f80:	0810ba80 	.word	0x0810ba80
 8108f84:	0810ba58 	.word	0x0810ba58
 8108f88:	3ff00000 	.word	0x3ff00000
 8108f8c:	40240000 	.word	0x40240000
 8108f90:	401c0000 	.word	0x401c0000
 8108f94:	40140000 	.word	0x40140000
 8108f98:	3fe00000 	.word	0x3fe00000
 8108f9c:	9d01      	ldr	r5, [sp, #4]
 8108f9e:	4656      	mov	r6, sl
 8108fa0:	465f      	mov	r7, fp
 8108fa2:	4642      	mov	r2, r8
 8108fa4:	464b      	mov	r3, r9
 8108fa6:	4630      	mov	r0, r6
 8108fa8:	4639      	mov	r1, r7
 8108faa:	f7f7 fcd7 	bl	810095c <__aeabi_ddiv>
 8108fae:	f7f7 fe5b 	bl	8100c68 <__aeabi_d2iz>
 8108fb2:	4682      	mov	sl, r0
 8108fb4:	f7f7 fb3e 	bl	8100634 <__aeabi_i2d>
 8108fb8:	4642      	mov	r2, r8
 8108fba:	464b      	mov	r3, r9
 8108fbc:	f7f7 fba4 	bl	8100708 <__aeabi_dmul>
 8108fc0:	4602      	mov	r2, r0
 8108fc2:	460b      	mov	r3, r1
 8108fc4:	4630      	mov	r0, r6
 8108fc6:	4639      	mov	r1, r7
 8108fc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8108fcc:	f7f7 f9e4 	bl	8100398 <__aeabi_dsub>
 8108fd0:	f805 6b01 	strb.w	r6, [r5], #1
 8108fd4:	9e01      	ldr	r6, [sp, #4]
 8108fd6:	9f03      	ldr	r7, [sp, #12]
 8108fd8:	1bae      	subs	r6, r5, r6
 8108fda:	42b7      	cmp	r7, r6
 8108fdc:	4602      	mov	r2, r0
 8108fde:	460b      	mov	r3, r1
 8108fe0:	d135      	bne.n	810904e <_dtoa_r+0x6e6>
 8108fe2:	f7f7 f9db 	bl	810039c <__adddf3>
 8108fe6:	4642      	mov	r2, r8
 8108fe8:	464b      	mov	r3, r9
 8108fea:	4606      	mov	r6, r0
 8108fec:	460f      	mov	r7, r1
 8108fee:	f7f7 fe1b 	bl	8100c28 <__aeabi_dcmpgt>
 8108ff2:	b9d0      	cbnz	r0, 810902a <_dtoa_r+0x6c2>
 8108ff4:	4642      	mov	r2, r8
 8108ff6:	464b      	mov	r3, r9
 8108ff8:	4630      	mov	r0, r6
 8108ffa:	4639      	mov	r1, r7
 8108ffc:	f7f7 fdec 	bl	8100bd8 <__aeabi_dcmpeq>
 8109000:	b110      	cbz	r0, 8109008 <_dtoa_r+0x6a0>
 8109002:	f01a 0f01 	tst.w	sl, #1
 8109006:	d110      	bne.n	810902a <_dtoa_r+0x6c2>
 8109008:	4620      	mov	r0, r4
 810900a:	ee18 1a10 	vmov	r1, s16
 810900e:	f000 ff6d 	bl	8109eec <_Bfree>
 8109012:	2300      	movs	r3, #0
 8109014:	9800      	ldr	r0, [sp, #0]
 8109016:	702b      	strb	r3, [r5, #0]
 8109018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810901a:	3001      	adds	r0, #1
 810901c:	6018      	str	r0, [r3, #0]
 810901e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109020:	2b00      	cmp	r3, #0
 8109022:	f43f acf1 	beq.w	8108a08 <_dtoa_r+0xa0>
 8109026:	601d      	str	r5, [r3, #0]
 8109028:	e4ee      	b.n	8108a08 <_dtoa_r+0xa0>
 810902a:	9f00      	ldr	r7, [sp, #0]
 810902c:	462b      	mov	r3, r5
 810902e:	461d      	mov	r5, r3
 8109030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109034:	2a39      	cmp	r2, #57	; 0x39
 8109036:	d106      	bne.n	8109046 <_dtoa_r+0x6de>
 8109038:	9a01      	ldr	r2, [sp, #4]
 810903a:	429a      	cmp	r2, r3
 810903c:	d1f7      	bne.n	810902e <_dtoa_r+0x6c6>
 810903e:	9901      	ldr	r1, [sp, #4]
 8109040:	2230      	movs	r2, #48	; 0x30
 8109042:	3701      	adds	r7, #1
 8109044:	700a      	strb	r2, [r1, #0]
 8109046:	781a      	ldrb	r2, [r3, #0]
 8109048:	3201      	adds	r2, #1
 810904a:	701a      	strb	r2, [r3, #0]
 810904c:	e790      	b.n	8108f70 <_dtoa_r+0x608>
 810904e:	4ba6      	ldr	r3, [pc, #664]	; (81092e8 <_dtoa_r+0x980>)
 8109050:	2200      	movs	r2, #0
 8109052:	f7f7 fb59 	bl	8100708 <__aeabi_dmul>
 8109056:	2200      	movs	r2, #0
 8109058:	2300      	movs	r3, #0
 810905a:	4606      	mov	r6, r0
 810905c:	460f      	mov	r7, r1
 810905e:	f7f7 fdbb 	bl	8100bd8 <__aeabi_dcmpeq>
 8109062:	2800      	cmp	r0, #0
 8109064:	d09d      	beq.n	8108fa2 <_dtoa_r+0x63a>
 8109066:	e7cf      	b.n	8109008 <_dtoa_r+0x6a0>
 8109068:	9a08      	ldr	r2, [sp, #32]
 810906a:	2a00      	cmp	r2, #0
 810906c:	f000 80d7 	beq.w	810921e <_dtoa_r+0x8b6>
 8109070:	9a06      	ldr	r2, [sp, #24]
 8109072:	2a01      	cmp	r2, #1
 8109074:	f300 80ba 	bgt.w	81091ec <_dtoa_r+0x884>
 8109078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810907a:	2a00      	cmp	r2, #0
 810907c:	f000 80b2 	beq.w	81091e4 <_dtoa_r+0x87c>
 8109080:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109084:	9e07      	ldr	r6, [sp, #28]
 8109086:	9d04      	ldr	r5, [sp, #16]
 8109088:	9a04      	ldr	r2, [sp, #16]
 810908a:	441a      	add	r2, r3
 810908c:	9204      	str	r2, [sp, #16]
 810908e:	9a05      	ldr	r2, [sp, #20]
 8109090:	2101      	movs	r1, #1
 8109092:	441a      	add	r2, r3
 8109094:	4620      	mov	r0, r4
 8109096:	9205      	str	r2, [sp, #20]
 8109098:	f001 f82a 	bl	810a0f0 <__i2b>
 810909c:	4607      	mov	r7, r0
 810909e:	2d00      	cmp	r5, #0
 81090a0:	dd0c      	ble.n	81090bc <_dtoa_r+0x754>
 81090a2:	9b05      	ldr	r3, [sp, #20]
 81090a4:	2b00      	cmp	r3, #0
 81090a6:	dd09      	ble.n	81090bc <_dtoa_r+0x754>
 81090a8:	42ab      	cmp	r3, r5
 81090aa:	9a04      	ldr	r2, [sp, #16]
 81090ac:	bfa8      	it	ge
 81090ae:	462b      	movge	r3, r5
 81090b0:	1ad2      	subs	r2, r2, r3
 81090b2:	9204      	str	r2, [sp, #16]
 81090b4:	9a05      	ldr	r2, [sp, #20]
 81090b6:	1aed      	subs	r5, r5, r3
 81090b8:	1ad3      	subs	r3, r2, r3
 81090ba:	9305      	str	r3, [sp, #20]
 81090bc:	9b07      	ldr	r3, [sp, #28]
 81090be:	b31b      	cbz	r3, 8109108 <_dtoa_r+0x7a0>
 81090c0:	9b08      	ldr	r3, [sp, #32]
 81090c2:	2b00      	cmp	r3, #0
 81090c4:	f000 80af 	beq.w	8109226 <_dtoa_r+0x8be>
 81090c8:	2e00      	cmp	r6, #0
 81090ca:	dd13      	ble.n	81090f4 <_dtoa_r+0x78c>
 81090cc:	4639      	mov	r1, r7
 81090ce:	4632      	mov	r2, r6
 81090d0:	4620      	mov	r0, r4
 81090d2:	f001 f8cd 	bl	810a270 <__pow5mult>
 81090d6:	ee18 2a10 	vmov	r2, s16
 81090da:	4601      	mov	r1, r0
 81090dc:	4607      	mov	r7, r0
 81090de:	4620      	mov	r0, r4
 81090e0:	f001 f81c 	bl	810a11c <__multiply>
 81090e4:	ee18 1a10 	vmov	r1, s16
 81090e8:	4680      	mov	r8, r0
 81090ea:	4620      	mov	r0, r4
 81090ec:	f000 fefe 	bl	8109eec <_Bfree>
 81090f0:	ee08 8a10 	vmov	s16, r8
 81090f4:	9b07      	ldr	r3, [sp, #28]
 81090f6:	1b9a      	subs	r2, r3, r6
 81090f8:	d006      	beq.n	8109108 <_dtoa_r+0x7a0>
 81090fa:	ee18 1a10 	vmov	r1, s16
 81090fe:	4620      	mov	r0, r4
 8109100:	f001 f8b6 	bl	810a270 <__pow5mult>
 8109104:	ee08 0a10 	vmov	s16, r0
 8109108:	2101      	movs	r1, #1
 810910a:	4620      	mov	r0, r4
 810910c:	f000 fff0 	bl	810a0f0 <__i2b>
 8109110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109112:	2b00      	cmp	r3, #0
 8109114:	4606      	mov	r6, r0
 8109116:	f340 8088 	ble.w	810922a <_dtoa_r+0x8c2>
 810911a:	461a      	mov	r2, r3
 810911c:	4601      	mov	r1, r0
 810911e:	4620      	mov	r0, r4
 8109120:	f001 f8a6 	bl	810a270 <__pow5mult>
 8109124:	9b06      	ldr	r3, [sp, #24]
 8109126:	2b01      	cmp	r3, #1
 8109128:	4606      	mov	r6, r0
 810912a:	f340 8081 	ble.w	8109230 <_dtoa_r+0x8c8>
 810912e:	f04f 0800 	mov.w	r8, #0
 8109132:	6933      	ldr	r3, [r6, #16]
 8109134:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109138:	6918      	ldr	r0, [r3, #16]
 810913a:	f000 ff89 	bl	810a050 <__hi0bits>
 810913e:	f1c0 0020 	rsb	r0, r0, #32
 8109142:	9b05      	ldr	r3, [sp, #20]
 8109144:	4418      	add	r0, r3
 8109146:	f010 001f 	ands.w	r0, r0, #31
 810914a:	f000 8092 	beq.w	8109272 <_dtoa_r+0x90a>
 810914e:	f1c0 0320 	rsb	r3, r0, #32
 8109152:	2b04      	cmp	r3, #4
 8109154:	f340 808a 	ble.w	810926c <_dtoa_r+0x904>
 8109158:	f1c0 001c 	rsb	r0, r0, #28
 810915c:	9b04      	ldr	r3, [sp, #16]
 810915e:	4403      	add	r3, r0
 8109160:	9304      	str	r3, [sp, #16]
 8109162:	9b05      	ldr	r3, [sp, #20]
 8109164:	4403      	add	r3, r0
 8109166:	4405      	add	r5, r0
 8109168:	9305      	str	r3, [sp, #20]
 810916a:	9b04      	ldr	r3, [sp, #16]
 810916c:	2b00      	cmp	r3, #0
 810916e:	dd07      	ble.n	8109180 <_dtoa_r+0x818>
 8109170:	ee18 1a10 	vmov	r1, s16
 8109174:	461a      	mov	r2, r3
 8109176:	4620      	mov	r0, r4
 8109178:	f001 f8d4 	bl	810a324 <__lshift>
 810917c:	ee08 0a10 	vmov	s16, r0
 8109180:	9b05      	ldr	r3, [sp, #20]
 8109182:	2b00      	cmp	r3, #0
 8109184:	dd05      	ble.n	8109192 <_dtoa_r+0x82a>
 8109186:	4631      	mov	r1, r6
 8109188:	461a      	mov	r2, r3
 810918a:	4620      	mov	r0, r4
 810918c:	f001 f8ca 	bl	810a324 <__lshift>
 8109190:	4606      	mov	r6, r0
 8109192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109194:	2b00      	cmp	r3, #0
 8109196:	d06e      	beq.n	8109276 <_dtoa_r+0x90e>
 8109198:	ee18 0a10 	vmov	r0, s16
 810919c:	4631      	mov	r1, r6
 810919e:	f001 f931 	bl	810a404 <__mcmp>
 81091a2:	2800      	cmp	r0, #0
 81091a4:	da67      	bge.n	8109276 <_dtoa_r+0x90e>
 81091a6:	9b00      	ldr	r3, [sp, #0]
 81091a8:	3b01      	subs	r3, #1
 81091aa:	ee18 1a10 	vmov	r1, s16
 81091ae:	9300      	str	r3, [sp, #0]
 81091b0:	220a      	movs	r2, #10
 81091b2:	2300      	movs	r3, #0
 81091b4:	4620      	mov	r0, r4
 81091b6:	f000 febb 	bl	8109f30 <__multadd>
 81091ba:	9b08      	ldr	r3, [sp, #32]
 81091bc:	ee08 0a10 	vmov	s16, r0
 81091c0:	2b00      	cmp	r3, #0
 81091c2:	f000 81b1 	beq.w	8109528 <_dtoa_r+0xbc0>
 81091c6:	2300      	movs	r3, #0
 81091c8:	4639      	mov	r1, r7
 81091ca:	220a      	movs	r2, #10
 81091cc:	4620      	mov	r0, r4
 81091ce:	f000 feaf 	bl	8109f30 <__multadd>
 81091d2:	9b02      	ldr	r3, [sp, #8]
 81091d4:	2b00      	cmp	r3, #0
 81091d6:	4607      	mov	r7, r0
 81091d8:	f300 808e 	bgt.w	81092f8 <_dtoa_r+0x990>
 81091dc:	9b06      	ldr	r3, [sp, #24]
 81091de:	2b02      	cmp	r3, #2
 81091e0:	dc51      	bgt.n	8109286 <_dtoa_r+0x91e>
 81091e2:	e089      	b.n	81092f8 <_dtoa_r+0x990>
 81091e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 81091e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 81091ea:	e74b      	b.n	8109084 <_dtoa_r+0x71c>
 81091ec:	9b03      	ldr	r3, [sp, #12]
 81091ee:	1e5e      	subs	r6, r3, #1
 81091f0:	9b07      	ldr	r3, [sp, #28]
 81091f2:	42b3      	cmp	r3, r6
 81091f4:	bfbf      	itttt	lt
 81091f6:	9b07      	ldrlt	r3, [sp, #28]
 81091f8:	9607      	strlt	r6, [sp, #28]
 81091fa:	1af2      	sublt	r2, r6, r3
 81091fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 81091fe:	bfb6      	itet	lt
 8109200:	189b      	addlt	r3, r3, r2
 8109202:	1b9e      	subge	r6, r3, r6
 8109204:	930a      	strlt	r3, [sp, #40]	; 0x28
 8109206:	9b03      	ldr	r3, [sp, #12]
 8109208:	bfb8      	it	lt
 810920a:	2600      	movlt	r6, #0
 810920c:	2b00      	cmp	r3, #0
 810920e:	bfb7      	itett	lt
 8109210:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8109214:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8109218:	1a9d      	sublt	r5, r3, r2
 810921a:	2300      	movlt	r3, #0
 810921c:	e734      	b.n	8109088 <_dtoa_r+0x720>
 810921e:	9e07      	ldr	r6, [sp, #28]
 8109220:	9d04      	ldr	r5, [sp, #16]
 8109222:	9f08      	ldr	r7, [sp, #32]
 8109224:	e73b      	b.n	810909e <_dtoa_r+0x736>
 8109226:	9a07      	ldr	r2, [sp, #28]
 8109228:	e767      	b.n	81090fa <_dtoa_r+0x792>
 810922a:	9b06      	ldr	r3, [sp, #24]
 810922c:	2b01      	cmp	r3, #1
 810922e:	dc18      	bgt.n	8109262 <_dtoa_r+0x8fa>
 8109230:	f1ba 0f00 	cmp.w	sl, #0
 8109234:	d115      	bne.n	8109262 <_dtoa_r+0x8fa>
 8109236:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810923a:	b993      	cbnz	r3, 8109262 <_dtoa_r+0x8fa>
 810923c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109240:	0d1b      	lsrs	r3, r3, #20
 8109242:	051b      	lsls	r3, r3, #20
 8109244:	b183      	cbz	r3, 8109268 <_dtoa_r+0x900>
 8109246:	9b04      	ldr	r3, [sp, #16]
 8109248:	3301      	adds	r3, #1
 810924a:	9304      	str	r3, [sp, #16]
 810924c:	9b05      	ldr	r3, [sp, #20]
 810924e:	3301      	adds	r3, #1
 8109250:	9305      	str	r3, [sp, #20]
 8109252:	f04f 0801 	mov.w	r8, #1
 8109256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109258:	2b00      	cmp	r3, #0
 810925a:	f47f af6a 	bne.w	8109132 <_dtoa_r+0x7ca>
 810925e:	2001      	movs	r0, #1
 8109260:	e76f      	b.n	8109142 <_dtoa_r+0x7da>
 8109262:	f04f 0800 	mov.w	r8, #0
 8109266:	e7f6      	b.n	8109256 <_dtoa_r+0x8ee>
 8109268:	4698      	mov	r8, r3
 810926a:	e7f4      	b.n	8109256 <_dtoa_r+0x8ee>
 810926c:	f43f af7d 	beq.w	810916a <_dtoa_r+0x802>
 8109270:	4618      	mov	r0, r3
 8109272:	301c      	adds	r0, #28
 8109274:	e772      	b.n	810915c <_dtoa_r+0x7f4>
 8109276:	9b03      	ldr	r3, [sp, #12]
 8109278:	2b00      	cmp	r3, #0
 810927a:	dc37      	bgt.n	81092ec <_dtoa_r+0x984>
 810927c:	9b06      	ldr	r3, [sp, #24]
 810927e:	2b02      	cmp	r3, #2
 8109280:	dd34      	ble.n	81092ec <_dtoa_r+0x984>
 8109282:	9b03      	ldr	r3, [sp, #12]
 8109284:	9302      	str	r3, [sp, #8]
 8109286:	9b02      	ldr	r3, [sp, #8]
 8109288:	b96b      	cbnz	r3, 81092a6 <_dtoa_r+0x93e>
 810928a:	4631      	mov	r1, r6
 810928c:	2205      	movs	r2, #5
 810928e:	4620      	mov	r0, r4
 8109290:	f000 fe4e 	bl	8109f30 <__multadd>
 8109294:	4601      	mov	r1, r0
 8109296:	4606      	mov	r6, r0
 8109298:	ee18 0a10 	vmov	r0, s16
 810929c:	f001 f8b2 	bl	810a404 <__mcmp>
 81092a0:	2800      	cmp	r0, #0
 81092a2:	f73f adbb 	bgt.w	8108e1c <_dtoa_r+0x4b4>
 81092a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81092a8:	9d01      	ldr	r5, [sp, #4]
 81092aa:	43db      	mvns	r3, r3
 81092ac:	9300      	str	r3, [sp, #0]
 81092ae:	f04f 0800 	mov.w	r8, #0
 81092b2:	4631      	mov	r1, r6
 81092b4:	4620      	mov	r0, r4
 81092b6:	f000 fe19 	bl	8109eec <_Bfree>
 81092ba:	2f00      	cmp	r7, #0
 81092bc:	f43f aea4 	beq.w	8109008 <_dtoa_r+0x6a0>
 81092c0:	f1b8 0f00 	cmp.w	r8, #0
 81092c4:	d005      	beq.n	81092d2 <_dtoa_r+0x96a>
 81092c6:	45b8      	cmp	r8, r7
 81092c8:	d003      	beq.n	81092d2 <_dtoa_r+0x96a>
 81092ca:	4641      	mov	r1, r8
 81092cc:	4620      	mov	r0, r4
 81092ce:	f000 fe0d 	bl	8109eec <_Bfree>
 81092d2:	4639      	mov	r1, r7
 81092d4:	4620      	mov	r0, r4
 81092d6:	f000 fe09 	bl	8109eec <_Bfree>
 81092da:	e695      	b.n	8109008 <_dtoa_r+0x6a0>
 81092dc:	2600      	movs	r6, #0
 81092de:	4637      	mov	r7, r6
 81092e0:	e7e1      	b.n	81092a6 <_dtoa_r+0x93e>
 81092e2:	9700      	str	r7, [sp, #0]
 81092e4:	4637      	mov	r7, r6
 81092e6:	e599      	b.n	8108e1c <_dtoa_r+0x4b4>
 81092e8:	40240000 	.word	0x40240000
 81092ec:	9b08      	ldr	r3, [sp, #32]
 81092ee:	2b00      	cmp	r3, #0
 81092f0:	f000 80ca 	beq.w	8109488 <_dtoa_r+0xb20>
 81092f4:	9b03      	ldr	r3, [sp, #12]
 81092f6:	9302      	str	r3, [sp, #8]
 81092f8:	2d00      	cmp	r5, #0
 81092fa:	dd05      	ble.n	8109308 <_dtoa_r+0x9a0>
 81092fc:	4639      	mov	r1, r7
 81092fe:	462a      	mov	r2, r5
 8109300:	4620      	mov	r0, r4
 8109302:	f001 f80f 	bl	810a324 <__lshift>
 8109306:	4607      	mov	r7, r0
 8109308:	f1b8 0f00 	cmp.w	r8, #0
 810930c:	d05b      	beq.n	81093c6 <_dtoa_r+0xa5e>
 810930e:	6879      	ldr	r1, [r7, #4]
 8109310:	4620      	mov	r0, r4
 8109312:	f000 fdab 	bl	8109e6c <_Balloc>
 8109316:	4605      	mov	r5, r0
 8109318:	b928      	cbnz	r0, 8109326 <_dtoa_r+0x9be>
 810931a:	4b87      	ldr	r3, [pc, #540]	; (8109538 <_dtoa_r+0xbd0>)
 810931c:	4602      	mov	r2, r0
 810931e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109322:	f7ff bb3b 	b.w	810899c <_dtoa_r+0x34>
 8109326:	693a      	ldr	r2, [r7, #16]
 8109328:	3202      	adds	r2, #2
 810932a:	0092      	lsls	r2, r2, #2
 810932c:	f107 010c 	add.w	r1, r7, #12
 8109330:	300c      	adds	r0, #12
 8109332:	f000 fd8d 	bl	8109e50 <memcpy>
 8109336:	2201      	movs	r2, #1
 8109338:	4629      	mov	r1, r5
 810933a:	4620      	mov	r0, r4
 810933c:	f000 fff2 	bl	810a324 <__lshift>
 8109340:	9b01      	ldr	r3, [sp, #4]
 8109342:	f103 0901 	add.w	r9, r3, #1
 8109346:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810934a:	4413      	add	r3, r2
 810934c:	9305      	str	r3, [sp, #20]
 810934e:	f00a 0301 	and.w	r3, sl, #1
 8109352:	46b8      	mov	r8, r7
 8109354:	9304      	str	r3, [sp, #16]
 8109356:	4607      	mov	r7, r0
 8109358:	4631      	mov	r1, r6
 810935a:	ee18 0a10 	vmov	r0, s16
 810935e:	f7ff fa77 	bl	8108850 <quorem>
 8109362:	4641      	mov	r1, r8
 8109364:	9002      	str	r0, [sp, #8]
 8109366:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810936a:	ee18 0a10 	vmov	r0, s16
 810936e:	f001 f849 	bl	810a404 <__mcmp>
 8109372:	463a      	mov	r2, r7
 8109374:	9003      	str	r0, [sp, #12]
 8109376:	4631      	mov	r1, r6
 8109378:	4620      	mov	r0, r4
 810937a:	f001 f85f 	bl	810a43c <__mdiff>
 810937e:	68c2      	ldr	r2, [r0, #12]
 8109380:	f109 3bff 	add.w	fp, r9, #4294967295
 8109384:	4605      	mov	r5, r0
 8109386:	bb02      	cbnz	r2, 81093ca <_dtoa_r+0xa62>
 8109388:	4601      	mov	r1, r0
 810938a:	ee18 0a10 	vmov	r0, s16
 810938e:	f001 f839 	bl	810a404 <__mcmp>
 8109392:	4602      	mov	r2, r0
 8109394:	4629      	mov	r1, r5
 8109396:	4620      	mov	r0, r4
 8109398:	9207      	str	r2, [sp, #28]
 810939a:	f000 fda7 	bl	8109eec <_Bfree>
 810939e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 81093a2:	ea43 0102 	orr.w	r1, r3, r2
 81093a6:	9b04      	ldr	r3, [sp, #16]
 81093a8:	430b      	orrs	r3, r1
 81093aa:	464d      	mov	r5, r9
 81093ac:	d10f      	bne.n	81093ce <_dtoa_r+0xa66>
 81093ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 81093b2:	d02a      	beq.n	810940a <_dtoa_r+0xaa2>
 81093b4:	9b03      	ldr	r3, [sp, #12]
 81093b6:	2b00      	cmp	r3, #0
 81093b8:	dd02      	ble.n	81093c0 <_dtoa_r+0xa58>
 81093ba:	9b02      	ldr	r3, [sp, #8]
 81093bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 81093c0:	f88b a000 	strb.w	sl, [fp]
 81093c4:	e775      	b.n	81092b2 <_dtoa_r+0x94a>
 81093c6:	4638      	mov	r0, r7
 81093c8:	e7ba      	b.n	8109340 <_dtoa_r+0x9d8>
 81093ca:	2201      	movs	r2, #1
 81093cc:	e7e2      	b.n	8109394 <_dtoa_r+0xa2c>
 81093ce:	9b03      	ldr	r3, [sp, #12]
 81093d0:	2b00      	cmp	r3, #0
 81093d2:	db04      	blt.n	81093de <_dtoa_r+0xa76>
 81093d4:	9906      	ldr	r1, [sp, #24]
 81093d6:	430b      	orrs	r3, r1
 81093d8:	9904      	ldr	r1, [sp, #16]
 81093da:	430b      	orrs	r3, r1
 81093dc:	d122      	bne.n	8109424 <_dtoa_r+0xabc>
 81093de:	2a00      	cmp	r2, #0
 81093e0:	ddee      	ble.n	81093c0 <_dtoa_r+0xa58>
 81093e2:	ee18 1a10 	vmov	r1, s16
 81093e6:	2201      	movs	r2, #1
 81093e8:	4620      	mov	r0, r4
 81093ea:	f000 ff9b 	bl	810a324 <__lshift>
 81093ee:	4631      	mov	r1, r6
 81093f0:	ee08 0a10 	vmov	s16, r0
 81093f4:	f001 f806 	bl	810a404 <__mcmp>
 81093f8:	2800      	cmp	r0, #0
 81093fa:	dc03      	bgt.n	8109404 <_dtoa_r+0xa9c>
 81093fc:	d1e0      	bne.n	81093c0 <_dtoa_r+0xa58>
 81093fe:	f01a 0f01 	tst.w	sl, #1
 8109402:	d0dd      	beq.n	81093c0 <_dtoa_r+0xa58>
 8109404:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8109408:	d1d7      	bne.n	81093ba <_dtoa_r+0xa52>
 810940a:	2339      	movs	r3, #57	; 0x39
 810940c:	f88b 3000 	strb.w	r3, [fp]
 8109410:	462b      	mov	r3, r5
 8109412:	461d      	mov	r5, r3
 8109414:	3b01      	subs	r3, #1
 8109416:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810941a:	2a39      	cmp	r2, #57	; 0x39
 810941c:	d071      	beq.n	8109502 <_dtoa_r+0xb9a>
 810941e:	3201      	adds	r2, #1
 8109420:	701a      	strb	r2, [r3, #0]
 8109422:	e746      	b.n	81092b2 <_dtoa_r+0x94a>
 8109424:	2a00      	cmp	r2, #0
 8109426:	dd07      	ble.n	8109438 <_dtoa_r+0xad0>
 8109428:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810942c:	d0ed      	beq.n	810940a <_dtoa_r+0xaa2>
 810942e:	f10a 0301 	add.w	r3, sl, #1
 8109432:	f88b 3000 	strb.w	r3, [fp]
 8109436:	e73c      	b.n	81092b2 <_dtoa_r+0x94a>
 8109438:	9b05      	ldr	r3, [sp, #20]
 810943a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810943e:	4599      	cmp	r9, r3
 8109440:	d047      	beq.n	81094d2 <_dtoa_r+0xb6a>
 8109442:	ee18 1a10 	vmov	r1, s16
 8109446:	2300      	movs	r3, #0
 8109448:	220a      	movs	r2, #10
 810944a:	4620      	mov	r0, r4
 810944c:	f000 fd70 	bl	8109f30 <__multadd>
 8109450:	45b8      	cmp	r8, r7
 8109452:	ee08 0a10 	vmov	s16, r0
 8109456:	f04f 0300 	mov.w	r3, #0
 810945a:	f04f 020a 	mov.w	r2, #10
 810945e:	4641      	mov	r1, r8
 8109460:	4620      	mov	r0, r4
 8109462:	d106      	bne.n	8109472 <_dtoa_r+0xb0a>
 8109464:	f000 fd64 	bl	8109f30 <__multadd>
 8109468:	4680      	mov	r8, r0
 810946a:	4607      	mov	r7, r0
 810946c:	f109 0901 	add.w	r9, r9, #1
 8109470:	e772      	b.n	8109358 <_dtoa_r+0x9f0>
 8109472:	f000 fd5d 	bl	8109f30 <__multadd>
 8109476:	4639      	mov	r1, r7
 8109478:	4680      	mov	r8, r0
 810947a:	2300      	movs	r3, #0
 810947c:	220a      	movs	r2, #10
 810947e:	4620      	mov	r0, r4
 8109480:	f000 fd56 	bl	8109f30 <__multadd>
 8109484:	4607      	mov	r7, r0
 8109486:	e7f1      	b.n	810946c <_dtoa_r+0xb04>
 8109488:	9b03      	ldr	r3, [sp, #12]
 810948a:	9302      	str	r3, [sp, #8]
 810948c:	9d01      	ldr	r5, [sp, #4]
 810948e:	ee18 0a10 	vmov	r0, s16
 8109492:	4631      	mov	r1, r6
 8109494:	f7ff f9dc 	bl	8108850 <quorem>
 8109498:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810949c:	9b01      	ldr	r3, [sp, #4]
 810949e:	f805 ab01 	strb.w	sl, [r5], #1
 81094a2:	1aea      	subs	r2, r5, r3
 81094a4:	9b02      	ldr	r3, [sp, #8]
 81094a6:	4293      	cmp	r3, r2
 81094a8:	dd09      	ble.n	81094be <_dtoa_r+0xb56>
 81094aa:	ee18 1a10 	vmov	r1, s16
 81094ae:	2300      	movs	r3, #0
 81094b0:	220a      	movs	r2, #10
 81094b2:	4620      	mov	r0, r4
 81094b4:	f000 fd3c 	bl	8109f30 <__multadd>
 81094b8:	ee08 0a10 	vmov	s16, r0
 81094bc:	e7e7      	b.n	810948e <_dtoa_r+0xb26>
 81094be:	9b02      	ldr	r3, [sp, #8]
 81094c0:	2b00      	cmp	r3, #0
 81094c2:	bfc8      	it	gt
 81094c4:	461d      	movgt	r5, r3
 81094c6:	9b01      	ldr	r3, [sp, #4]
 81094c8:	bfd8      	it	le
 81094ca:	2501      	movle	r5, #1
 81094cc:	441d      	add	r5, r3
 81094ce:	f04f 0800 	mov.w	r8, #0
 81094d2:	ee18 1a10 	vmov	r1, s16
 81094d6:	2201      	movs	r2, #1
 81094d8:	4620      	mov	r0, r4
 81094da:	f000 ff23 	bl	810a324 <__lshift>
 81094de:	4631      	mov	r1, r6
 81094e0:	ee08 0a10 	vmov	s16, r0
 81094e4:	f000 ff8e 	bl	810a404 <__mcmp>
 81094e8:	2800      	cmp	r0, #0
 81094ea:	dc91      	bgt.n	8109410 <_dtoa_r+0xaa8>
 81094ec:	d102      	bne.n	81094f4 <_dtoa_r+0xb8c>
 81094ee:	f01a 0f01 	tst.w	sl, #1
 81094f2:	d18d      	bne.n	8109410 <_dtoa_r+0xaa8>
 81094f4:	462b      	mov	r3, r5
 81094f6:	461d      	mov	r5, r3
 81094f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81094fc:	2a30      	cmp	r2, #48	; 0x30
 81094fe:	d0fa      	beq.n	81094f6 <_dtoa_r+0xb8e>
 8109500:	e6d7      	b.n	81092b2 <_dtoa_r+0x94a>
 8109502:	9a01      	ldr	r2, [sp, #4]
 8109504:	429a      	cmp	r2, r3
 8109506:	d184      	bne.n	8109412 <_dtoa_r+0xaaa>
 8109508:	9b00      	ldr	r3, [sp, #0]
 810950a:	3301      	adds	r3, #1
 810950c:	9300      	str	r3, [sp, #0]
 810950e:	2331      	movs	r3, #49	; 0x31
 8109510:	7013      	strb	r3, [r2, #0]
 8109512:	e6ce      	b.n	81092b2 <_dtoa_r+0x94a>
 8109514:	4b09      	ldr	r3, [pc, #36]	; (810953c <_dtoa_r+0xbd4>)
 8109516:	f7ff ba95 	b.w	8108a44 <_dtoa_r+0xdc>
 810951a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810951c:	2b00      	cmp	r3, #0
 810951e:	f47f aa6e 	bne.w	81089fe <_dtoa_r+0x96>
 8109522:	4b07      	ldr	r3, [pc, #28]	; (8109540 <_dtoa_r+0xbd8>)
 8109524:	f7ff ba8e 	b.w	8108a44 <_dtoa_r+0xdc>
 8109528:	9b02      	ldr	r3, [sp, #8]
 810952a:	2b00      	cmp	r3, #0
 810952c:	dcae      	bgt.n	810948c <_dtoa_r+0xb24>
 810952e:	9b06      	ldr	r3, [sp, #24]
 8109530:	2b02      	cmp	r3, #2
 8109532:	f73f aea8 	bgt.w	8109286 <_dtoa_r+0x91e>
 8109536:	e7a9      	b.n	810948c <_dtoa_r+0xb24>
 8109538:	0810b908 	.word	0x0810b908
 810953c:	0810b708 	.word	0x0810b708
 8109540:	0810b889 	.word	0x0810b889

08109544 <std>:
 8109544:	2300      	movs	r3, #0
 8109546:	b510      	push	{r4, lr}
 8109548:	4604      	mov	r4, r0
 810954a:	e9c0 3300 	strd	r3, r3, [r0]
 810954e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109552:	6083      	str	r3, [r0, #8]
 8109554:	8181      	strh	r1, [r0, #12]
 8109556:	6643      	str	r3, [r0, #100]	; 0x64
 8109558:	81c2      	strh	r2, [r0, #14]
 810955a:	6183      	str	r3, [r0, #24]
 810955c:	4619      	mov	r1, r3
 810955e:	2208      	movs	r2, #8
 8109560:	305c      	adds	r0, #92	; 0x5c
 8109562:	f7fd fc07 	bl	8106d74 <memset>
 8109566:	4b05      	ldr	r3, [pc, #20]	; (810957c <std+0x38>)
 8109568:	6263      	str	r3, [r4, #36]	; 0x24
 810956a:	4b05      	ldr	r3, [pc, #20]	; (8109580 <std+0x3c>)
 810956c:	62a3      	str	r3, [r4, #40]	; 0x28
 810956e:	4b05      	ldr	r3, [pc, #20]	; (8109584 <std+0x40>)
 8109570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8109572:	4b05      	ldr	r3, [pc, #20]	; (8109588 <std+0x44>)
 8109574:	6224      	str	r4, [r4, #32]
 8109576:	6323      	str	r3, [r4, #48]	; 0x30
 8109578:	bd10      	pop	{r4, pc}
 810957a:	bf00      	nop
 810957c:	0810af79 	.word	0x0810af79
 8109580:	0810af9b 	.word	0x0810af9b
 8109584:	0810afd3 	.word	0x0810afd3
 8109588:	0810aff7 	.word	0x0810aff7

0810958c <_cleanup_r>:
 810958c:	4901      	ldr	r1, [pc, #4]	; (8109594 <_cleanup_r+0x8>)
 810958e:	f000 b8af 	b.w	81096f0 <_fwalk_reent>
 8109592:	bf00      	nop
 8109594:	0810b351 	.word	0x0810b351

08109598 <__sfmoreglue>:
 8109598:	b570      	push	{r4, r5, r6, lr}
 810959a:	2268      	movs	r2, #104	; 0x68
 810959c:	1e4d      	subs	r5, r1, #1
 810959e:	4355      	muls	r5, r2
 81095a0:	460e      	mov	r6, r1
 81095a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 81095a6:	f001 f9a5 	bl	810a8f4 <_malloc_r>
 81095aa:	4604      	mov	r4, r0
 81095ac:	b140      	cbz	r0, 81095c0 <__sfmoreglue+0x28>
 81095ae:	2100      	movs	r1, #0
 81095b0:	e9c0 1600 	strd	r1, r6, [r0]
 81095b4:	300c      	adds	r0, #12
 81095b6:	60a0      	str	r0, [r4, #8]
 81095b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81095bc:	f7fd fbda 	bl	8106d74 <memset>
 81095c0:	4620      	mov	r0, r4
 81095c2:	bd70      	pop	{r4, r5, r6, pc}

081095c4 <__sfp_lock_acquire>:
 81095c4:	4801      	ldr	r0, [pc, #4]	; (81095cc <__sfp_lock_acquire+0x8>)
 81095c6:	f000 bc26 	b.w	8109e16 <__retarget_lock_acquire_recursive>
 81095ca:	bf00      	nop
 81095cc:	100003f1 	.word	0x100003f1

081095d0 <__sfp_lock_release>:
 81095d0:	4801      	ldr	r0, [pc, #4]	; (81095d8 <__sfp_lock_release+0x8>)
 81095d2:	f000 bc21 	b.w	8109e18 <__retarget_lock_release_recursive>
 81095d6:	bf00      	nop
 81095d8:	100003f1 	.word	0x100003f1

081095dc <__sinit_lock_acquire>:
 81095dc:	4801      	ldr	r0, [pc, #4]	; (81095e4 <__sinit_lock_acquire+0x8>)
 81095de:	f000 bc1a 	b.w	8109e16 <__retarget_lock_acquire_recursive>
 81095e2:	bf00      	nop
 81095e4:	100003f2 	.word	0x100003f2

081095e8 <__sinit_lock_release>:
 81095e8:	4801      	ldr	r0, [pc, #4]	; (81095f0 <__sinit_lock_release+0x8>)
 81095ea:	f000 bc15 	b.w	8109e18 <__retarget_lock_release_recursive>
 81095ee:	bf00      	nop
 81095f0:	100003f2 	.word	0x100003f2

081095f4 <__sinit>:
 81095f4:	b510      	push	{r4, lr}
 81095f6:	4604      	mov	r4, r0
 81095f8:	f7ff fff0 	bl	81095dc <__sinit_lock_acquire>
 81095fc:	69a3      	ldr	r3, [r4, #24]
 81095fe:	b11b      	cbz	r3, 8109608 <__sinit+0x14>
 8109600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109604:	f7ff bff0 	b.w	81095e8 <__sinit_lock_release>
 8109608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810960c:	6523      	str	r3, [r4, #80]	; 0x50
 810960e:	4b13      	ldr	r3, [pc, #76]	; (810965c <__sinit+0x68>)
 8109610:	4a13      	ldr	r2, [pc, #76]	; (8109660 <__sinit+0x6c>)
 8109612:	681b      	ldr	r3, [r3, #0]
 8109614:	62a2      	str	r2, [r4, #40]	; 0x28
 8109616:	42a3      	cmp	r3, r4
 8109618:	bf04      	itt	eq
 810961a:	2301      	moveq	r3, #1
 810961c:	61a3      	streq	r3, [r4, #24]
 810961e:	4620      	mov	r0, r4
 8109620:	f000 f820 	bl	8109664 <__sfp>
 8109624:	6060      	str	r0, [r4, #4]
 8109626:	4620      	mov	r0, r4
 8109628:	f000 f81c 	bl	8109664 <__sfp>
 810962c:	60a0      	str	r0, [r4, #8]
 810962e:	4620      	mov	r0, r4
 8109630:	f000 f818 	bl	8109664 <__sfp>
 8109634:	2200      	movs	r2, #0
 8109636:	60e0      	str	r0, [r4, #12]
 8109638:	2104      	movs	r1, #4
 810963a:	6860      	ldr	r0, [r4, #4]
 810963c:	f7ff ff82 	bl	8109544 <std>
 8109640:	68a0      	ldr	r0, [r4, #8]
 8109642:	2201      	movs	r2, #1
 8109644:	2109      	movs	r1, #9
 8109646:	f7ff ff7d 	bl	8109544 <std>
 810964a:	68e0      	ldr	r0, [r4, #12]
 810964c:	2202      	movs	r2, #2
 810964e:	2112      	movs	r1, #18
 8109650:	f7ff ff78 	bl	8109544 <std>
 8109654:	2301      	movs	r3, #1
 8109656:	61a3      	str	r3, [r4, #24]
 8109658:	e7d2      	b.n	8109600 <__sinit+0xc>
 810965a:	bf00      	nop
 810965c:	0810b6f4 	.word	0x0810b6f4
 8109660:	0810958d 	.word	0x0810958d

08109664 <__sfp>:
 8109664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109666:	4607      	mov	r7, r0
 8109668:	f7ff ffac 	bl	81095c4 <__sfp_lock_acquire>
 810966c:	4b1e      	ldr	r3, [pc, #120]	; (81096e8 <__sfp+0x84>)
 810966e:	681e      	ldr	r6, [r3, #0]
 8109670:	69b3      	ldr	r3, [r6, #24]
 8109672:	b913      	cbnz	r3, 810967a <__sfp+0x16>
 8109674:	4630      	mov	r0, r6
 8109676:	f7ff ffbd 	bl	81095f4 <__sinit>
 810967a:	3648      	adds	r6, #72	; 0x48
 810967c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8109680:	3b01      	subs	r3, #1
 8109682:	d503      	bpl.n	810968c <__sfp+0x28>
 8109684:	6833      	ldr	r3, [r6, #0]
 8109686:	b30b      	cbz	r3, 81096cc <__sfp+0x68>
 8109688:	6836      	ldr	r6, [r6, #0]
 810968a:	e7f7      	b.n	810967c <__sfp+0x18>
 810968c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8109690:	b9d5      	cbnz	r5, 81096c8 <__sfp+0x64>
 8109692:	4b16      	ldr	r3, [pc, #88]	; (81096ec <__sfp+0x88>)
 8109694:	60e3      	str	r3, [r4, #12]
 8109696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810969a:	6665      	str	r5, [r4, #100]	; 0x64
 810969c:	f000 fbba 	bl	8109e14 <__retarget_lock_init_recursive>
 81096a0:	f7ff ff96 	bl	81095d0 <__sfp_lock_release>
 81096a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 81096a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 81096ac:	6025      	str	r5, [r4, #0]
 81096ae:	61a5      	str	r5, [r4, #24]
 81096b0:	2208      	movs	r2, #8
 81096b2:	4629      	mov	r1, r5
 81096b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81096b8:	f7fd fb5c 	bl	8106d74 <memset>
 81096bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81096c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81096c4:	4620      	mov	r0, r4
 81096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81096c8:	3468      	adds	r4, #104	; 0x68
 81096ca:	e7d9      	b.n	8109680 <__sfp+0x1c>
 81096cc:	2104      	movs	r1, #4
 81096ce:	4638      	mov	r0, r7
 81096d0:	f7ff ff62 	bl	8109598 <__sfmoreglue>
 81096d4:	4604      	mov	r4, r0
 81096d6:	6030      	str	r0, [r6, #0]
 81096d8:	2800      	cmp	r0, #0
 81096da:	d1d5      	bne.n	8109688 <__sfp+0x24>
 81096dc:	f7ff ff78 	bl	81095d0 <__sfp_lock_release>
 81096e0:	230c      	movs	r3, #12
 81096e2:	603b      	str	r3, [r7, #0]
 81096e4:	e7ee      	b.n	81096c4 <__sfp+0x60>
 81096e6:	bf00      	nop
 81096e8:	0810b6f4 	.word	0x0810b6f4
 81096ec:	ffff0001 	.word	0xffff0001

081096f0 <_fwalk_reent>:
 81096f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81096f4:	4606      	mov	r6, r0
 81096f6:	4688      	mov	r8, r1
 81096f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81096fc:	2700      	movs	r7, #0
 81096fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8109702:	f1b9 0901 	subs.w	r9, r9, #1
 8109706:	d505      	bpl.n	8109714 <_fwalk_reent+0x24>
 8109708:	6824      	ldr	r4, [r4, #0]
 810970a:	2c00      	cmp	r4, #0
 810970c:	d1f7      	bne.n	81096fe <_fwalk_reent+0xe>
 810970e:	4638      	mov	r0, r7
 8109710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109714:	89ab      	ldrh	r3, [r5, #12]
 8109716:	2b01      	cmp	r3, #1
 8109718:	d907      	bls.n	810972a <_fwalk_reent+0x3a>
 810971a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810971e:	3301      	adds	r3, #1
 8109720:	d003      	beq.n	810972a <_fwalk_reent+0x3a>
 8109722:	4629      	mov	r1, r5
 8109724:	4630      	mov	r0, r6
 8109726:	47c0      	blx	r8
 8109728:	4307      	orrs	r7, r0
 810972a:	3568      	adds	r5, #104	; 0x68
 810972c:	e7e9      	b.n	8109702 <_fwalk_reent+0x12>

0810972e <rshift>:
 810972e:	6903      	ldr	r3, [r0, #16]
 8109730:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8109734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8109738:	ea4f 1261 	mov.w	r2, r1, asr #5
 810973c:	f100 0414 	add.w	r4, r0, #20
 8109740:	dd45      	ble.n	81097ce <rshift+0xa0>
 8109742:	f011 011f 	ands.w	r1, r1, #31
 8109746:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810974a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810974e:	d10c      	bne.n	810976a <rshift+0x3c>
 8109750:	f100 0710 	add.w	r7, r0, #16
 8109754:	4629      	mov	r1, r5
 8109756:	42b1      	cmp	r1, r6
 8109758:	d334      	bcc.n	81097c4 <rshift+0x96>
 810975a:	1a9b      	subs	r3, r3, r2
 810975c:	009b      	lsls	r3, r3, #2
 810975e:	1eea      	subs	r2, r5, #3
 8109760:	4296      	cmp	r6, r2
 8109762:	bf38      	it	cc
 8109764:	2300      	movcc	r3, #0
 8109766:	4423      	add	r3, r4
 8109768:	e015      	b.n	8109796 <rshift+0x68>
 810976a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810976e:	f1c1 0820 	rsb	r8, r1, #32
 8109772:	40cf      	lsrs	r7, r1
 8109774:	f105 0e04 	add.w	lr, r5, #4
 8109778:	46a1      	mov	r9, r4
 810977a:	4576      	cmp	r6, lr
 810977c:	46f4      	mov	ip, lr
 810977e:	d815      	bhi.n	81097ac <rshift+0x7e>
 8109780:	1a9a      	subs	r2, r3, r2
 8109782:	0092      	lsls	r2, r2, #2
 8109784:	3a04      	subs	r2, #4
 8109786:	3501      	adds	r5, #1
 8109788:	42ae      	cmp	r6, r5
 810978a:	bf38      	it	cc
 810978c:	2200      	movcc	r2, #0
 810978e:	18a3      	adds	r3, r4, r2
 8109790:	50a7      	str	r7, [r4, r2]
 8109792:	b107      	cbz	r7, 8109796 <rshift+0x68>
 8109794:	3304      	adds	r3, #4
 8109796:	1b1a      	subs	r2, r3, r4
 8109798:	42a3      	cmp	r3, r4
 810979a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810979e:	bf08      	it	eq
 81097a0:	2300      	moveq	r3, #0
 81097a2:	6102      	str	r2, [r0, #16]
 81097a4:	bf08      	it	eq
 81097a6:	6143      	streq	r3, [r0, #20]
 81097a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81097ac:	f8dc c000 	ldr.w	ip, [ip]
 81097b0:	fa0c fc08 	lsl.w	ip, ip, r8
 81097b4:	ea4c 0707 	orr.w	r7, ip, r7
 81097b8:	f849 7b04 	str.w	r7, [r9], #4
 81097bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 81097c0:	40cf      	lsrs	r7, r1
 81097c2:	e7da      	b.n	810977a <rshift+0x4c>
 81097c4:	f851 cb04 	ldr.w	ip, [r1], #4
 81097c8:	f847 cf04 	str.w	ip, [r7, #4]!
 81097cc:	e7c3      	b.n	8109756 <rshift+0x28>
 81097ce:	4623      	mov	r3, r4
 81097d0:	e7e1      	b.n	8109796 <rshift+0x68>

081097d2 <__hexdig_fun>:
 81097d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 81097d6:	2b09      	cmp	r3, #9
 81097d8:	d802      	bhi.n	81097e0 <__hexdig_fun+0xe>
 81097da:	3820      	subs	r0, #32
 81097dc:	b2c0      	uxtb	r0, r0
 81097de:	4770      	bx	lr
 81097e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 81097e4:	2b05      	cmp	r3, #5
 81097e6:	d801      	bhi.n	81097ec <__hexdig_fun+0x1a>
 81097e8:	3847      	subs	r0, #71	; 0x47
 81097ea:	e7f7      	b.n	81097dc <__hexdig_fun+0xa>
 81097ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 81097f0:	2b05      	cmp	r3, #5
 81097f2:	d801      	bhi.n	81097f8 <__hexdig_fun+0x26>
 81097f4:	3827      	subs	r0, #39	; 0x27
 81097f6:	e7f1      	b.n	81097dc <__hexdig_fun+0xa>
 81097f8:	2000      	movs	r0, #0
 81097fa:	4770      	bx	lr

081097fc <__gethex>:
 81097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109800:	ed2d 8b02 	vpush	{d8}
 8109804:	b089      	sub	sp, #36	; 0x24
 8109806:	ee08 0a10 	vmov	s16, r0
 810980a:	9304      	str	r3, [sp, #16]
 810980c:	4bb4      	ldr	r3, [pc, #720]	; (8109ae0 <__gethex+0x2e4>)
 810980e:	681b      	ldr	r3, [r3, #0]
 8109810:	9301      	str	r3, [sp, #4]
 8109812:	4618      	mov	r0, r3
 8109814:	468b      	mov	fp, r1
 8109816:	4690      	mov	r8, r2
 8109818:	f7f6 fd62 	bl	81002e0 <strlen>
 810981c:	9b01      	ldr	r3, [sp, #4]
 810981e:	f8db 2000 	ldr.w	r2, [fp]
 8109822:	4403      	add	r3, r0
 8109824:	4682      	mov	sl, r0
 8109826:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810982a:	9305      	str	r3, [sp, #20]
 810982c:	1c93      	adds	r3, r2, #2
 810982e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8109832:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8109836:	32fe      	adds	r2, #254	; 0xfe
 8109838:	18d1      	adds	r1, r2, r3
 810983a:	461f      	mov	r7, r3
 810983c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8109840:	9100      	str	r1, [sp, #0]
 8109842:	2830      	cmp	r0, #48	; 0x30
 8109844:	d0f8      	beq.n	8109838 <__gethex+0x3c>
 8109846:	f7ff ffc4 	bl	81097d2 <__hexdig_fun>
 810984a:	4604      	mov	r4, r0
 810984c:	2800      	cmp	r0, #0
 810984e:	d13a      	bne.n	81098c6 <__gethex+0xca>
 8109850:	9901      	ldr	r1, [sp, #4]
 8109852:	4652      	mov	r2, sl
 8109854:	4638      	mov	r0, r7
 8109856:	f001 fbd2 	bl	810affe <strncmp>
 810985a:	4605      	mov	r5, r0
 810985c:	2800      	cmp	r0, #0
 810985e:	d168      	bne.n	8109932 <__gethex+0x136>
 8109860:	f817 000a 	ldrb.w	r0, [r7, sl]
 8109864:	eb07 060a 	add.w	r6, r7, sl
 8109868:	f7ff ffb3 	bl	81097d2 <__hexdig_fun>
 810986c:	2800      	cmp	r0, #0
 810986e:	d062      	beq.n	8109936 <__gethex+0x13a>
 8109870:	4633      	mov	r3, r6
 8109872:	7818      	ldrb	r0, [r3, #0]
 8109874:	2830      	cmp	r0, #48	; 0x30
 8109876:	461f      	mov	r7, r3
 8109878:	f103 0301 	add.w	r3, r3, #1
 810987c:	d0f9      	beq.n	8109872 <__gethex+0x76>
 810987e:	f7ff ffa8 	bl	81097d2 <__hexdig_fun>
 8109882:	2301      	movs	r3, #1
 8109884:	fab0 f480 	clz	r4, r0
 8109888:	0964      	lsrs	r4, r4, #5
 810988a:	4635      	mov	r5, r6
 810988c:	9300      	str	r3, [sp, #0]
 810988e:	463a      	mov	r2, r7
 8109890:	4616      	mov	r6, r2
 8109892:	3201      	adds	r2, #1
 8109894:	7830      	ldrb	r0, [r6, #0]
 8109896:	f7ff ff9c 	bl	81097d2 <__hexdig_fun>
 810989a:	2800      	cmp	r0, #0
 810989c:	d1f8      	bne.n	8109890 <__gethex+0x94>
 810989e:	9901      	ldr	r1, [sp, #4]
 81098a0:	4652      	mov	r2, sl
 81098a2:	4630      	mov	r0, r6
 81098a4:	f001 fbab 	bl	810affe <strncmp>
 81098a8:	b980      	cbnz	r0, 81098cc <__gethex+0xd0>
 81098aa:	b94d      	cbnz	r5, 81098c0 <__gethex+0xc4>
 81098ac:	eb06 050a 	add.w	r5, r6, sl
 81098b0:	462a      	mov	r2, r5
 81098b2:	4616      	mov	r6, r2
 81098b4:	3201      	adds	r2, #1
 81098b6:	7830      	ldrb	r0, [r6, #0]
 81098b8:	f7ff ff8b 	bl	81097d2 <__hexdig_fun>
 81098bc:	2800      	cmp	r0, #0
 81098be:	d1f8      	bne.n	81098b2 <__gethex+0xb6>
 81098c0:	1bad      	subs	r5, r5, r6
 81098c2:	00ad      	lsls	r5, r5, #2
 81098c4:	e004      	b.n	81098d0 <__gethex+0xd4>
 81098c6:	2400      	movs	r4, #0
 81098c8:	4625      	mov	r5, r4
 81098ca:	e7e0      	b.n	810988e <__gethex+0x92>
 81098cc:	2d00      	cmp	r5, #0
 81098ce:	d1f7      	bne.n	81098c0 <__gethex+0xc4>
 81098d0:	7833      	ldrb	r3, [r6, #0]
 81098d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 81098d6:	2b50      	cmp	r3, #80	; 0x50
 81098d8:	d13b      	bne.n	8109952 <__gethex+0x156>
 81098da:	7873      	ldrb	r3, [r6, #1]
 81098dc:	2b2b      	cmp	r3, #43	; 0x2b
 81098de:	d02c      	beq.n	810993a <__gethex+0x13e>
 81098e0:	2b2d      	cmp	r3, #45	; 0x2d
 81098e2:	d02e      	beq.n	8109942 <__gethex+0x146>
 81098e4:	1c71      	adds	r1, r6, #1
 81098e6:	f04f 0900 	mov.w	r9, #0
 81098ea:	7808      	ldrb	r0, [r1, #0]
 81098ec:	f7ff ff71 	bl	81097d2 <__hexdig_fun>
 81098f0:	1e43      	subs	r3, r0, #1
 81098f2:	b2db      	uxtb	r3, r3
 81098f4:	2b18      	cmp	r3, #24
 81098f6:	d82c      	bhi.n	8109952 <__gethex+0x156>
 81098f8:	f1a0 0210 	sub.w	r2, r0, #16
 81098fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8109900:	f7ff ff67 	bl	81097d2 <__hexdig_fun>
 8109904:	1e43      	subs	r3, r0, #1
 8109906:	b2db      	uxtb	r3, r3
 8109908:	2b18      	cmp	r3, #24
 810990a:	d91d      	bls.n	8109948 <__gethex+0x14c>
 810990c:	f1b9 0f00 	cmp.w	r9, #0
 8109910:	d000      	beq.n	8109914 <__gethex+0x118>
 8109912:	4252      	negs	r2, r2
 8109914:	4415      	add	r5, r2
 8109916:	f8cb 1000 	str.w	r1, [fp]
 810991a:	b1e4      	cbz	r4, 8109956 <__gethex+0x15a>
 810991c:	9b00      	ldr	r3, [sp, #0]
 810991e:	2b00      	cmp	r3, #0
 8109920:	bf14      	ite	ne
 8109922:	2700      	movne	r7, #0
 8109924:	2706      	moveq	r7, #6
 8109926:	4638      	mov	r0, r7
 8109928:	b009      	add	sp, #36	; 0x24
 810992a:	ecbd 8b02 	vpop	{d8}
 810992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109932:	463e      	mov	r6, r7
 8109934:	4625      	mov	r5, r4
 8109936:	2401      	movs	r4, #1
 8109938:	e7ca      	b.n	81098d0 <__gethex+0xd4>
 810993a:	f04f 0900 	mov.w	r9, #0
 810993e:	1cb1      	adds	r1, r6, #2
 8109940:	e7d3      	b.n	81098ea <__gethex+0xee>
 8109942:	f04f 0901 	mov.w	r9, #1
 8109946:	e7fa      	b.n	810993e <__gethex+0x142>
 8109948:	230a      	movs	r3, #10
 810994a:	fb03 0202 	mla	r2, r3, r2, r0
 810994e:	3a10      	subs	r2, #16
 8109950:	e7d4      	b.n	81098fc <__gethex+0x100>
 8109952:	4631      	mov	r1, r6
 8109954:	e7df      	b.n	8109916 <__gethex+0x11a>
 8109956:	1bf3      	subs	r3, r6, r7
 8109958:	3b01      	subs	r3, #1
 810995a:	4621      	mov	r1, r4
 810995c:	2b07      	cmp	r3, #7
 810995e:	dc0b      	bgt.n	8109978 <__gethex+0x17c>
 8109960:	ee18 0a10 	vmov	r0, s16
 8109964:	f000 fa82 	bl	8109e6c <_Balloc>
 8109968:	4604      	mov	r4, r0
 810996a:	b940      	cbnz	r0, 810997e <__gethex+0x182>
 810996c:	4b5d      	ldr	r3, [pc, #372]	; (8109ae4 <__gethex+0x2e8>)
 810996e:	4602      	mov	r2, r0
 8109970:	21de      	movs	r1, #222	; 0xde
 8109972:	485d      	ldr	r0, [pc, #372]	; (8109ae8 <__gethex+0x2ec>)
 8109974:	f001 fc38 	bl	810b1e8 <__assert_func>
 8109978:	3101      	adds	r1, #1
 810997a:	105b      	asrs	r3, r3, #1
 810997c:	e7ee      	b.n	810995c <__gethex+0x160>
 810997e:	f100 0914 	add.w	r9, r0, #20
 8109982:	f04f 0b00 	mov.w	fp, #0
 8109986:	f1ca 0301 	rsb	r3, sl, #1
 810998a:	f8cd 9008 	str.w	r9, [sp, #8]
 810998e:	f8cd b000 	str.w	fp, [sp]
 8109992:	9306      	str	r3, [sp, #24]
 8109994:	42b7      	cmp	r7, r6
 8109996:	d340      	bcc.n	8109a1a <__gethex+0x21e>
 8109998:	9802      	ldr	r0, [sp, #8]
 810999a:	9b00      	ldr	r3, [sp, #0]
 810999c:	f840 3b04 	str.w	r3, [r0], #4
 81099a0:	eba0 0009 	sub.w	r0, r0, r9
 81099a4:	1080      	asrs	r0, r0, #2
 81099a6:	0146      	lsls	r6, r0, #5
 81099a8:	6120      	str	r0, [r4, #16]
 81099aa:	4618      	mov	r0, r3
 81099ac:	f000 fb50 	bl	810a050 <__hi0bits>
 81099b0:	1a30      	subs	r0, r6, r0
 81099b2:	f8d8 6000 	ldr.w	r6, [r8]
 81099b6:	42b0      	cmp	r0, r6
 81099b8:	dd63      	ble.n	8109a82 <__gethex+0x286>
 81099ba:	1b87      	subs	r7, r0, r6
 81099bc:	4639      	mov	r1, r7
 81099be:	4620      	mov	r0, r4
 81099c0:	f000 fef4 	bl	810a7ac <__any_on>
 81099c4:	4682      	mov	sl, r0
 81099c6:	b1a8      	cbz	r0, 81099f4 <__gethex+0x1f8>
 81099c8:	1e7b      	subs	r3, r7, #1
 81099ca:	1159      	asrs	r1, r3, #5
 81099cc:	f003 021f 	and.w	r2, r3, #31
 81099d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 81099d4:	f04f 0a01 	mov.w	sl, #1
 81099d8:	fa0a f202 	lsl.w	r2, sl, r2
 81099dc:	420a      	tst	r2, r1
 81099de:	d009      	beq.n	81099f4 <__gethex+0x1f8>
 81099e0:	4553      	cmp	r3, sl
 81099e2:	dd05      	ble.n	81099f0 <__gethex+0x1f4>
 81099e4:	1eb9      	subs	r1, r7, #2
 81099e6:	4620      	mov	r0, r4
 81099e8:	f000 fee0 	bl	810a7ac <__any_on>
 81099ec:	2800      	cmp	r0, #0
 81099ee:	d145      	bne.n	8109a7c <__gethex+0x280>
 81099f0:	f04f 0a02 	mov.w	sl, #2
 81099f4:	4639      	mov	r1, r7
 81099f6:	4620      	mov	r0, r4
 81099f8:	f7ff fe99 	bl	810972e <rshift>
 81099fc:	443d      	add	r5, r7
 81099fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109a02:	42ab      	cmp	r3, r5
 8109a04:	da4c      	bge.n	8109aa0 <__gethex+0x2a4>
 8109a06:	ee18 0a10 	vmov	r0, s16
 8109a0a:	4621      	mov	r1, r4
 8109a0c:	f000 fa6e 	bl	8109eec <_Bfree>
 8109a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109a12:	2300      	movs	r3, #0
 8109a14:	6013      	str	r3, [r2, #0]
 8109a16:	27a3      	movs	r7, #163	; 0xa3
 8109a18:	e785      	b.n	8109926 <__gethex+0x12a>
 8109a1a:	1e73      	subs	r3, r6, #1
 8109a1c:	9a05      	ldr	r2, [sp, #20]
 8109a1e:	9303      	str	r3, [sp, #12]
 8109a20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8109a24:	4293      	cmp	r3, r2
 8109a26:	d019      	beq.n	8109a5c <__gethex+0x260>
 8109a28:	f1bb 0f20 	cmp.w	fp, #32
 8109a2c:	d107      	bne.n	8109a3e <__gethex+0x242>
 8109a2e:	9b02      	ldr	r3, [sp, #8]
 8109a30:	9a00      	ldr	r2, [sp, #0]
 8109a32:	f843 2b04 	str.w	r2, [r3], #4
 8109a36:	9302      	str	r3, [sp, #8]
 8109a38:	2300      	movs	r3, #0
 8109a3a:	9300      	str	r3, [sp, #0]
 8109a3c:	469b      	mov	fp, r3
 8109a3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8109a42:	f7ff fec6 	bl	81097d2 <__hexdig_fun>
 8109a46:	9b00      	ldr	r3, [sp, #0]
 8109a48:	f000 000f 	and.w	r0, r0, #15
 8109a4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8109a50:	4303      	orrs	r3, r0
 8109a52:	9300      	str	r3, [sp, #0]
 8109a54:	f10b 0b04 	add.w	fp, fp, #4
 8109a58:	9b03      	ldr	r3, [sp, #12]
 8109a5a:	e00d      	b.n	8109a78 <__gethex+0x27c>
 8109a5c:	9b03      	ldr	r3, [sp, #12]
 8109a5e:	9a06      	ldr	r2, [sp, #24]
 8109a60:	4413      	add	r3, r2
 8109a62:	42bb      	cmp	r3, r7
 8109a64:	d3e0      	bcc.n	8109a28 <__gethex+0x22c>
 8109a66:	4618      	mov	r0, r3
 8109a68:	9901      	ldr	r1, [sp, #4]
 8109a6a:	9307      	str	r3, [sp, #28]
 8109a6c:	4652      	mov	r2, sl
 8109a6e:	f001 fac6 	bl	810affe <strncmp>
 8109a72:	9b07      	ldr	r3, [sp, #28]
 8109a74:	2800      	cmp	r0, #0
 8109a76:	d1d7      	bne.n	8109a28 <__gethex+0x22c>
 8109a78:	461e      	mov	r6, r3
 8109a7a:	e78b      	b.n	8109994 <__gethex+0x198>
 8109a7c:	f04f 0a03 	mov.w	sl, #3
 8109a80:	e7b8      	b.n	81099f4 <__gethex+0x1f8>
 8109a82:	da0a      	bge.n	8109a9a <__gethex+0x29e>
 8109a84:	1a37      	subs	r7, r6, r0
 8109a86:	4621      	mov	r1, r4
 8109a88:	ee18 0a10 	vmov	r0, s16
 8109a8c:	463a      	mov	r2, r7
 8109a8e:	f000 fc49 	bl	810a324 <__lshift>
 8109a92:	1bed      	subs	r5, r5, r7
 8109a94:	4604      	mov	r4, r0
 8109a96:	f100 0914 	add.w	r9, r0, #20
 8109a9a:	f04f 0a00 	mov.w	sl, #0
 8109a9e:	e7ae      	b.n	81099fe <__gethex+0x202>
 8109aa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8109aa4:	42a8      	cmp	r0, r5
 8109aa6:	dd72      	ble.n	8109b8e <__gethex+0x392>
 8109aa8:	1b45      	subs	r5, r0, r5
 8109aaa:	42ae      	cmp	r6, r5
 8109aac:	dc36      	bgt.n	8109b1c <__gethex+0x320>
 8109aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109ab2:	2b02      	cmp	r3, #2
 8109ab4:	d02a      	beq.n	8109b0c <__gethex+0x310>
 8109ab6:	2b03      	cmp	r3, #3
 8109ab8:	d02c      	beq.n	8109b14 <__gethex+0x318>
 8109aba:	2b01      	cmp	r3, #1
 8109abc:	d11c      	bne.n	8109af8 <__gethex+0x2fc>
 8109abe:	42ae      	cmp	r6, r5
 8109ac0:	d11a      	bne.n	8109af8 <__gethex+0x2fc>
 8109ac2:	2e01      	cmp	r6, #1
 8109ac4:	d112      	bne.n	8109aec <__gethex+0x2f0>
 8109ac6:	9a04      	ldr	r2, [sp, #16]
 8109ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8109acc:	6013      	str	r3, [r2, #0]
 8109ace:	2301      	movs	r3, #1
 8109ad0:	6123      	str	r3, [r4, #16]
 8109ad2:	f8c9 3000 	str.w	r3, [r9]
 8109ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109ad8:	2762      	movs	r7, #98	; 0x62
 8109ada:	601c      	str	r4, [r3, #0]
 8109adc:	e723      	b.n	8109926 <__gethex+0x12a>
 8109ade:	bf00      	nop
 8109ae0:	0810b9e4 	.word	0x0810b9e4
 8109ae4:	0810b908 	.word	0x0810b908
 8109ae8:	0810b97c 	.word	0x0810b97c
 8109aec:	1e71      	subs	r1, r6, #1
 8109aee:	4620      	mov	r0, r4
 8109af0:	f000 fe5c 	bl	810a7ac <__any_on>
 8109af4:	2800      	cmp	r0, #0
 8109af6:	d1e6      	bne.n	8109ac6 <__gethex+0x2ca>
 8109af8:	ee18 0a10 	vmov	r0, s16
 8109afc:	4621      	mov	r1, r4
 8109afe:	f000 f9f5 	bl	8109eec <_Bfree>
 8109b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109b04:	2300      	movs	r3, #0
 8109b06:	6013      	str	r3, [r2, #0]
 8109b08:	2750      	movs	r7, #80	; 0x50
 8109b0a:	e70c      	b.n	8109926 <__gethex+0x12a>
 8109b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109b0e:	2b00      	cmp	r3, #0
 8109b10:	d1f2      	bne.n	8109af8 <__gethex+0x2fc>
 8109b12:	e7d8      	b.n	8109ac6 <__gethex+0x2ca>
 8109b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109b16:	2b00      	cmp	r3, #0
 8109b18:	d1d5      	bne.n	8109ac6 <__gethex+0x2ca>
 8109b1a:	e7ed      	b.n	8109af8 <__gethex+0x2fc>
 8109b1c:	1e6f      	subs	r7, r5, #1
 8109b1e:	f1ba 0f00 	cmp.w	sl, #0
 8109b22:	d131      	bne.n	8109b88 <__gethex+0x38c>
 8109b24:	b127      	cbz	r7, 8109b30 <__gethex+0x334>
 8109b26:	4639      	mov	r1, r7
 8109b28:	4620      	mov	r0, r4
 8109b2a:	f000 fe3f 	bl	810a7ac <__any_on>
 8109b2e:	4682      	mov	sl, r0
 8109b30:	117b      	asrs	r3, r7, #5
 8109b32:	2101      	movs	r1, #1
 8109b34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8109b38:	f007 071f 	and.w	r7, r7, #31
 8109b3c:	fa01 f707 	lsl.w	r7, r1, r7
 8109b40:	421f      	tst	r7, r3
 8109b42:	4629      	mov	r1, r5
 8109b44:	4620      	mov	r0, r4
 8109b46:	bf18      	it	ne
 8109b48:	f04a 0a02 	orrne.w	sl, sl, #2
 8109b4c:	1b76      	subs	r6, r6, r5
 8109b4e:	f7ff fdee 	bl	810972e <rshift>
 8109b52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8109b56:	2702      	movs	r7, #2
 8109b58:	f1ba 0f00 	cmp.w	sl, #0
 8109b5c:	d048      	beq.n	8109bf0 <__gethex+0x3f4>
 8109b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109b62:	2b02      	cmp	r3, #2
 8109b64:	d015      	beq.n	8109b92 <__gethex+0x396>
 8109b66:	2b03      	cmp	r3, #3
 8109b68:	d017      	beq.n	8109b9a <__gethex+0x39e>
 8109b6a:	2b01      	cmp	r3, #1
 8109b6c:	d109      	bne.n	8109b82 <__gethex+0x386>
 8109b6e:	f01a 0f02 	tst.w	sl, #2
 8109b72:	d006      	beq.n	8109b82 <__gethex+0x386>
 8109b74:	f8d9 0000 	ldr.w	r0, [r9]
 8109b78:	ea4a 0a00 	orr.w	sl, sl, r0
 8109b7c:	f01a 0f01 	tst.w	sl, #1
 8109b80:	d10e      	bne.n	8109ba0 <__gethex+0x3a4>
 8109b82:	f047 0710 	orr.w	r7, r7, #16
 8109b86:	e033      	b.n	8109bf0 <__gethex+0x3f4>
 8109b88:	f04f 0a01 	mov.w	sl, #1
 8109b8c:	e7d0      	b.n	8109b30 <__gethex+0x334>
 8109b8e:	2701      	movs	r7, #1
 8109b90:	e7e2      	b.n	8109b58 <__gethex+0x35c>
 8109b92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109b94:	f1c3 0301 	rsb	r3, r3, #1
 8109b98:	9315      	str	r3, [sp, #84]	; 0x54
 8109b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109b9c:	2b00      	cmp	r3, #0
 8109b9e:	d0f0      	beq.n	8109b82 <__gethex+0x386>
 8109ba0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8109ba4:	f104 0314 	add.w	r3, r4, #20
 8109ba8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8109bac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8109bb0:	f04f 0c00 	mov.w	ip, #0
 8109bb4:	4618      	mov	r0, r3
 8109bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8109bba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8109bbe:	d01c      	beq.n	8109bfa <__gethex+0x3fe>
 8109bc0:	3201      	adds	r2, #1
 8109bc2:	6002      	str	r2, [r0, #0]
 8109bc4:	2f02      	cmp	r7, #2
 8109bc6:	f104 0314 	add.w	r3, r4, #20
 8109bca:	d13f      	bne.n	8109c4c <__gethex+0x450>
 8109bcc:	f8d8 2000 	ldr.w	r2, [r8]
 8109bd0:	3a01      	subs	r2, #1
 8109bd2:	42b2      	cmp	r2, r6
 8109bd4:	d10a      	bne.n	8109bec <__gethex+0x3f0>
 8109bd6:	1171      	asrs	r1, r6, #5
 8109bd8:	2201      	movs	r2, #1
 8109bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8109bde:	f006 061f 	and.w	r6, r6, #31
 8109be2:	fa02 f606 	lsl.w	r6, r2, r6
 8109be6:	421e      	tst	r6, r3
 8109be8:	bf18      	it	ne
 8109bea:	4617      	movne	r7, r2
 8109bec:	f047 0720 	orr.w	r7, r7, #32
 8109bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109bf2:	601c      	str	r4, [r3, #0]
 8109bf4:	9b04      	ldr	r3, [sp, #16]
 8109bf6:	601d      	str	r5, [r3, #0]
 8109bf8:	e695      	b.n	8109926 <__gethex+0x12a>
 8109bfa:	4299      	cmp	r1, r3
 8109bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8109c00:	d8d8      	bhi.n	8109bb4 <__gethex+0x3b8>
 8109c02:	68a3      	ldr	r3, [r4, #8]
 8109c04:	459b      	cmp	fp, r3
 8109c06:	db19      	blt.n	8109c3c <__gethex+0x440>
 8109c08:	6861      	ldr	r1, [r4, #4]
 8109c0a:	ee18 0a10 	vmov	r0, s16
 8109c0e:	3101      	adds	r1, #1
 8109c10:	f000 f92c 	bl	8109e6c <_Balloc>
 8109c14:	4681      	mov	r9, r0
 8109c16:	b918      	cbnz	r0, 8109c20 <__gethex+0x424>
 8109c18:	4b1a      	ldr	r3, [pc, #104]	; (8109c84 <__gethex+0x488>)
 8109c1a:	4602      	mov	r2, r0
 8109c1c:	2184      	movs	r1, #132	; 0x84
 8109c1e:	e6a8      	b.n	8109972 <__gethex+0x176>
 8109c20:	6922      	ldr	r2, [r4, #16]
 8109c22:	3202      	adds	r2, #2
 8109c24:	f104 010c 	add.w	r1, r4, #12
 8109c28:	0092      	lsls	r2, r2, #2
 8109c2a:	300c      	adds	r0, #12
 8109c2c:	f000 f910 	bl	8109e50 <memcpy>
 8109c30:	4621      	mov	r1, r4
 8109c32:	ee18 0a10 	vmov	r0, s16
 8109c36:	f000 f959 	bl	8109eec <_Bfree>
 8109c3a:	464c      	mov	r4, r9
 8109c3c:	6923      	ldr	r3, [r4, #16]
 8109c3e:	1c5a      	adds	r2, r3, #1
 8109c40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8109c44:	6122      	str	r2, [r4, #16]
 8109c46:	2201      	movs	r2, #1
 8109c48:	615a      	str	r2, [r3, #20]
 8109c4a:	e7bb      	b.n	8109bc4 <__gethex+0x3c8>
 8109c4c:	6922      	ldr	r2, [r4, #16]
 8109c4e:	455a      	cmp	r2, fp
 8109c50:	dd0b      	ble.n	8109c6a <__gethex+0x46e>
 8109c52:	2101      	movs	r1, #1
 8109c54:	4620      	mov	r0, r4
 8109c56:	f7ff fd6a 	bl	810972e <rshift>
 8109c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109c5e:	3501      	adds	r5, #1
 8109c60:	42ab      	cmp	r3, r5
 8109c62:	f6ff aed0 	blt.w	8109a06 <__gethex+0x20a>
 8109c66:	2701      	movs	r7, #1
 8109c68:	e7c0      	b.n	8109bec <__gethex+0x3f0>
 8109c6a:	f016 061f 	ands.w	r6, r6, #31
 8109c6e:	d0fa      	beq.n	8109c66 <__gethex+0x46a>
 8109c70:	4453      	add	r3, sl
 8109c72:	f1c6 0620 	rsb	r6, r6, #32
 8109c76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8109c7a:	f000 f9e9 	bl	810a050 <__hi0bits>
 8109c7e:	42b0      	cmp	r0, r6
 8109c80:	dbe7      	blt.n	8109c52 <__gethex+0x456>
 8109c82:	e7f0      	b.n	8109c66 <__gethex+0x46a>
 8109c84:	0810b908 	.word	0x0810b908

08109c88 <L_shift>:
 8109c88:	f1c2 0208 	rsb	r2, r2, #8
 8109c8c:	0092      	lsls	r2, r2, #2
 8109c8e:	b570      	push	{r4, r5, r6, lr}
 8109c90:	f1c2 0620 	rsb	r6, r2, #32
 8109c94:	6843      	ldr	r3, [r0, #4]
 8109c96:	6804      	ldr	r4, [r0, #0]
 8109c98:	fa03 f506 	lsl.w	r5, r3, r6
 8109c9c:	432c      	orrs	r4, r5
 8109c9e:	40d3      	lsrs	r3, r2
 8109ca0:	6004      	str	r4, [r0, #0]
 8109ca2:	f840 3f04 	str.w	r3, [r0, #4]!
 8109ca6:	4288      	cmp	r0, r1
 8109ca8:	d3f4      	bcc.n	8109c94 <L_shift+0xc>
 8109caa:	bd70      	pop	{r4, r5, r6, pc}

08109cac <__match>:
 8109cac:	b530      	push	{r4, r5, lr}
 8109cae:	6803      	ldr	r3, [r0, #0]
 8109cb0:	3301      	adds	r3, #1
 8109cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109cb6:	b914      	cbnz	r4, 8109cbe <__match+0x12>
 8109cb8:	6003      	str	r3, [r0, #0]
 8109cba:	2001      	movs	r0, #1
 8109cbc:	bd30      	pop	{r4, r5, pc}
 8109cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109cc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8109cc6:	2d19      	cmp	r5, #25
 8109cc8:	bf98      	it	ls
 8109cca:	3220      	addls	r2, #32
 8109ccc:	42a2      	cmp	r2, r4
 8109cce:	d0f0      	beq.n	8109cb2 <__match+0x6>
 8109cd0:	2000      	movs	r0, #0
 8109cd2:	e7f3      	b.n	8109cbc <__match+0x10>

08109cd4 <__hexnan>:
 8109cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109cd8:	680b      	ldr	r3, [r1, #0]
 8109cda:	115e      	asrs	r6, r3, #5
 8109cdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8109ce0:	f013 031f 	ands.w	r3, r3, #31
 8109ce4:	b087      	sub	sp, #28
 8109ce6:	bf18      	it	ne
 8109ce8:	3604      	addne	r6, #4
 8109cea:	2500      	movs	r5, #0
 8109cec:	1f37      	subs	r7, r6, #4
 8109cee:	4690      	mov	r8, r2
 8109cf0:	6802      	ldr	r2, [r0, #0]
 8109cf2:	9301      	str	r3, [sp, #4]
 8109cf4:	4682      	mov	sl, r0
 8109cf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8109cfa:	46b9      	mov	r9, r7
 8109cfc:	463c      	mov	r4, r7
 8109cfe:	9502      	str	r5, [sp, #8]
 8109d00:	46ab      	mov	fp, r5
 8109d02:	7851      	ldrb	r1, [r2, #1]
 8109d04:	1c53      	adds	r3, r2, #1
 8109d06:	9303      	str	r3, [sp, #12]
 8109d08:	b341      	cbz	r1, 8109d5c <__hexnan+0x88>
 8109d0a:	4608      	mov	r0, r1
 8109d0c:	9205      	str	r2, [sp, #20]
 8109d0e:	9104      	str	r1, [sp, #16]
 8109d10:	f7ff fd5f 	bl	81097d2 <__hexdig_fun>
 8109d14:	2800      	cmp	r0, #0
 8109d16:	d14f      	bne.n	8109db8 <__hexnan+0xe4>
 8109d18:	9904      	ldr	r1, [sp, #16]
 8109d1a:	9a05      	ldr	r2, [sp, #20]
 8109d1c:	2920      	cmp	r1, #32
 8109d1e:	d818      	bhi.n	8109d52 <__hexnan+0x7e>
 8109d20:	9b02      	ldr	r3, [sp, #8]
 8109d22:	459b      	cmp	fp, r3
 8109d24:	dd13      	ble.n	8109d4e <__hexnan+0x7a>
 8109d26:	454c      	cmp	r4, r9
 8109d28:	d206      	bcs.n	8109d38 <__hexnan+0x64>
 8109d2a:	2d07      	cmp	r5, #7
 8109d2c:	dc04      	bgt.n	8109d38 <__hexnan+0x64>
 8109d2e:	462a      	mov	r2, r5
 8109d30:	4649      	mov	r1, r9
 8109d32:	4620      	mov	r0, r4
 8109d34:	f7ff ffa8 	bl	8109c88 <L_shift>
 8109d38:	4544      	cmp	r4, r8
 8109d3a:	d950      	bls.n	8109dde <__hexnan+0x10a>
 8109d3c:	2300      	movs	r3, #0
 8109d3e:	f1a4 0904 	sub.w	r9, r4, #4
 8109d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8109d46:	f8cd b008 	str.w	fp, [sp, #8]
 8109d4a:	464c      	mov	r4, r9
 8109d4c:	461d      	mov	r5, r3
 8109d4e:	9a03      	ldr	r2, [sp, #12]
 8109d50:	e7d7      	b.n	8109d02 <__hexnan+0x2e>
 8109d52:	2929      	cmp	r1, #41	; 0x29
 8109d54:	d156      	bne.n	8109e04 <__hexnan+0x130>
 8109d56:	3202      	adds	r2, #2
 8109d58:	f8ca 2000 	str.w	r2, [sl]
 8109d5c:	f1bb 0f00 	cmp.w	fp, #0
 8109d60:	d050      	beq.n	8109e04 <__hexnan+0x130>
 8109d62:	454c      	cmp	r4, r9
 8109d64:	d206      	bcs.n	8109d74 <__hexnan+0xa0>
 8109d66:	2d07      	cmp	r5, #7
 8109d68:	dc04      	bgt.n	8109d74 <__hexnan+0xa0>
 8109d6a:	462a      	mov	r2, r5
 8109d6c:	4649      	mov	r1, r9
 8109d6e:	4620      	mov	r0, r4
 8109d70:	f7ff ff8a 	bl	8109c88 <L_shift>
 8109d74:	4544      	cmp	r4, r8
 8109d76:	d934      	bls.n	8109de2 <__hexnan+0x10e>
 8109d78:	f1a8 0204 	sub.w	r2, r8, #4
 8109d7c:	4623      	mov	r3, r4
 8109d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8109d82:	f842 1f04 	str.w	r1, [r2, #4]!
 8109d86:	429f      	cmp	r7, r3
 8109d88:	d2f9      	bcs.n	8109d7e <__hexnan+0xaa>
 8109d8a:	1b3b      	subs	r3, r7, r4
 8109d8c:	f023 0303 	bic.w	r3, r3, #3
 8109d90:	3304      	adds	r3, #4
 8109d92:	3401      	adds	r4, #1
 8109d94:	3e03      	subs	r6, #3
 8109d96:	42b4      	cmp	r4, r6
 8109d98:	bf88      	it	hi
 8109d9a:	2304      	movhi	r3, #4
 8109d9c:	4443      	add	r3, r8
 8109d9e:	2200      	movs	r2, #0
 8109da0:	f843 2b04 	str.w	r2, [r3], #4
 8109da4:	429f      	cmp	r7, r3
 8109da6:	d2fb      	bcs.n	8109da0 <__hexnan+0xcc>
 8109da8:	683b      	ldr	r3, [r7, #0]
 8109daa:	b91b      	cbnz	r3, 8109db4 <__hexnan+0xe0>
 8109dac:	4547      	cmp	r7, r8
 8109dae:	d127      	bne.n	8109e00 <__hexnan+0x12c>
 8109db0:	2301      	movs	r3, #1
 8109db2:	603b      	str	r3, [r7, #0]
 8109db4:	2005      	movs	r0, #5
 8109db6:	e026      	b.n	8109e06 <__hexnan+0x132>
 8109db8:	3501      	adds	r5, #1
 8109dba:	2d08      	cmp	r5, #8
 8109dbc:	f10b 0b01 	add.w	fp, fp, #1
 8109dc0:	dd06      	ble.n	8109dd0 <__hexnan+0xfc>
 8109dc2:	4544      	cmp	r4, r8
 8109dc4:	d9c3      	bls.n	8109d4e <__hexnan+0x7a>
 8109dc6:	2300      	movs	r3, #0
 8109dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8109dcc:	2501      	movs	r5, #1
 8109dce:	3c04      	subs	r4, #4
 8109dd0:	6822      	ldr	r2, [r4, #0]
 8109dd2:	f000 000f 	and.w	r0, r0, #15
 8109dd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8109dda:	6022      	str	r2, [r4, #0]
 8109ddc:	e7b7      	b.n	8109d4e <__hexnan+0x7a>
 8109dde:	2508      	movs	r5, #8
 8109de0:	e7b5      	b.n	8109d4e <__hexnan+0x7a>
 8109de2:	9b01      	ldr	r3, [sp, #4]
 8109de4:	2b00      	cmp	r3, #0
 8109de6:	d0df      	beq.n	8109da8 <__hexnan+0xd4>
 8109de8:	f04f 32ff 	mov.w	r2, #4294967295
 8109dec:	f1c3 0320 	rsb	r3, r3, #32
 8109df0:	fa22 f303 	lsr.w	r3, r2, r3
 8109df4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8109df8:	401a      	ands	r2, r3
 8109dfa:	f846 2c04 	str.w	r2, [r6, #-4]
 8109dfe:	e7d3      	b.n	8109da8 <__hexnan+0xd4>
 8109e00:	3f04      	subs	r7, #4
 8109e02:	e7d1      	b.n	8109da8 <__hexnan+0xd4>
 8109e04:	2004      	movs	r0, #4
 8109e06:	b007      	add	sp, #28
 8109e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08109e0c <_localeconv_r>:
 8109e0c:	4800      	ldr	r0, [pc, #0]	; (8109e10 <_localeconv_r+0x4>)
 8109e0e:	4770      	bx	lr
 8109e10:	10000180 	.word	0x10000180

08109e14 <__retarget_lock_init_recursive>:
 8109e14:	4770      	bx	lr

08109e16 <__retarget_lock_acquire_recursive>:
 8109e16:	4770      	bx	lr

08109e18 <__retarget_lock_release_recursive>:
 8109e18:	4770      	bx	lr
	...

08109e1c <malloc>:
 8109e1c:	4b02      	ldr	r3, [pc, #8]	; (8109e28 <malloc+0xc>)
 8109e1e:	4601      	mov	r1, r0
 8109e20:	6818      	ldr	r0, [r3, #0]
 8109e22:	f000 bd67 	b.w	810a8f4 <_malloc_r>
 8109e26:	bf00      	nop
 8109e28:	10000028 	.word	0x10000028

08109e2c <__ascii_mbtowc>:
 8109e2c:	b082      	sub	sp, #8
 8109e2e:	b901      	cbnz	r1, 8109e32 <__ascii_mbtowc+0x6>
 8109e30:	a901      	add	r1, sp, #4
 8109e32:	b142      	cbz	r2, 8109e46 <__ascii_mbtowc+0x1a>
 8109e34:	b14b      	cbz	r3, 8109e4a <__ascii_mbtowc+0x1e>
 8109e36:	7813      	ldrb	r3, [r2, #0]
 8109e38:	600b      	str	r3, [r1, #0]
 8109e3a:	7812      	ldrb	r2, [r2, #0]
 8109e3c:	1e10      	subs	r0, r2, #0
 8109e3e:	bf18      	it	ne
 8109e40:	2001      	movne	r0, #1
 8109e42:	b002      	add	sp, #8
 8109e44:	4770      	bx	lr
 8109e46:	4610      	mov	r0, r2
 8109e48:	e7fb      	b.n	8109e42 <__ascii_mbtowc+0x16>
 8109e4a:	f06f 0001 	mvn.w	r0, #1
 8109e4e:	e7f8      	b.n	8109e42 <__ascii_mbtowc+0x16>

08109e50 <memcpy>:
 8109e50:	440a      	add	r2, r1
 8109e52:	4291      	cmp	r1, r2
 8109e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8109e58:	d100      	bne.n	8109e5c <memcpy+0xc>
 8109e5a:	4770      	bx	lr
 8109e5c:	b510      	push	{r4, lr}
 8109e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109e66:	4291      	cmp	r1, r2
 8109e68:	d1f9      	bne.n	8109e5e <memcpy+0xe>
 8109e6a:	bd10      	pop	{r4, pc}

08109e6c <_Balloc>:
 8109e6c:	b570      	push	{r4, r5, r6, lr}
 8109e6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8109e70:	4604      	mov	r4, r0
 8109e72:	460d      	mov	r5, r1
 8109e74:	b976      	cbnz	r6, 8109e94 <_Balloc+0x28>
 8109e76:	2010      	movs	r0, #16
 8109e78:	f7ff ffd0 	bl	8109e1c <malloc>
 8109e7c:	4602      	mov	r2, r0
 8109e7e:	6260      	str	r0, [r4, #36]	; 0x24
 8109e80:	b920      	cbnz	r0, 8109e8c <_Balloc+0x20>
 8109e82:	4b18      	ldr	r3, [pc, #96]	; (8109ee4 <_Balloc+0x78>)
 8109e84:	4818      	ldr	r0, [pc, #96]	; (8109ee8 <_Balloc+0x7c>)
 8109e86:	2166      	movs	r1, #102	; 0x66
 8109e88:	f001 f9ae 	bl	810b1e8 <__assert_func>
 8109e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109e90:	6006      	str	r6, [r0, #0]
 8109e92:	60c6      	str	r6, [r0, #12]
 8109e94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8109e96:	68f3      	ldr	r3, [r6, #12]
 8109e98:	b183      	cbz	r3, 8109ebc <_Balloc+0x50>
 8109e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109e9c:	68db      	ldr	r3, [r3, #12]
 8109e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8109ea2:	b9b8      	cbnz	r0, 8109ed4 <_Balloc+0x68>
 8109ea4:	2101      	movs	r1, #1
 8109ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8109eaa:	1d72      	adds	r2, r6, #5
 8109eac:	0092      	lsls	r2, r2, #2
 8109eae:	4620      	mov	r0, r4
 8109eb0:	f000 fc9d 	bl	810a7ee <_calloc_r>
 8109eb4:	b160      	cbz	r0, 8109ed0 <_Balloc+0x64>
 8109eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8109eba:	e00e      	b.n	8109eda <_Balloc+0x6e>
 8109ebc:	2221      	movs	r2, #33	; 0x21
 8109ebe:	2104      	movs	r1, #4
 8109ec0:	4620      	mov	r0, r4
 8109ec2:	f000 fc94 	bl	810a7ee <_calloc_r>
 8109ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109ec8:	60f0      	str	r0, [r6, #12]
 8109eca:	68db      	ldr	r3, [r3, #12]
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d1e4      	bne.n	8109e9a <_Balloc+0x2e>
 8109ed0:	2000      	movs	r0, #0
 8109ed2:	bd70      	pop	{r4, r5, r6, pc}
 8109ed4:	6802      	ldr	r2, [r0, #0]
 8109ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8109eda:	2300      	movs	r3, #0
 8109edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8109ee0:	e7f7      	b.n	8109ed2 <_Balloc+0x66>
 8109ee2:	bf00      	nop
 8109ee4:	0810b896 	.word	0x0810b896
 8109ee8:	0810b9f8 	.word	0x0810b9f8

08109eec <_Bfree>:
 8109eec:	b570      	push	{r4, r5, r6, lr}
 8109eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8109ef0:	4605      	mov	r5, r0
 8109ef2:	460c      	mov	r4, r1
 8109ef4:	b976      	cbnz	r6, 8109f14 <_Bfree+0x28>
 8109ef6:	2010      	movs	r0, #16
 8109ef8:	f7ff ff90 	bl	8109e1c <malloc>
 8109efc:	4602      	mov	r2, r0
 8109efe:	6268      	str	r0, [r5, #36]	; 0x24
 8109f00:	b920      	cbnz	r0, 8109f0c <_Bfree+0x20>
 8109f02:	4b09      	ldr	r3, [pc, #36]	; (8109f28 <_Bfree+0x3c>)
 8109f04:	4809      	ldr	r0, [pc, #36]	; (8109f2c <_Bfree+0x40>)
 8109f06:	218a      	movs	r1, #138	; 0x8a
 8109f08:	f001 f96e 	bl	810b1e8 <__assert_func>
 8109f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109f10:	6006      	str	r6, [r0, #0]
 8109f12:	60c6      	str	r6, [r0, #12]
 8109f14:	b13c      	cbz	r4, 8109f26 <_Bfree+0x3a>
 8109f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8109f18:	6862      	ldr	r2, [r4, #4]
 8109f1a:	68db      	ldr	r3, [r3, #12]
 8109f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8109f20:	6021      	str	r1, [r4, #0]
 8109f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8109f26:	bd70      	pop	{r4, r5, r6, pc}
 8109f28:	0810b896 	.word	0x0810b896
 8109f2c:	0810b9f8 	.word	0x0810b9f8

08109f30 <__multadd>:
 8109f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109f34:	690d      	ldr	r5, [r1, #16]
 8109f36:	4607      	mov	r7, r0
 8109f38:	460c      	mov	r4, r1
 8109f3a:	461e      	mov	r6, r3
 8109f3c:	f101 0c14 	add.w	ip, r1, #20
 8109f40:	2000      	movs	r0, #0
 8109f42:	f8dc 3000 	ldr.w	r3, [ip]
 8109f46:	b299      	uxth	r1, r3
 8109f48:	fb02 6101 	mla	r1, r2, r1, r6
 8109f4c:	0c1e      	lsrs	r6, r3, #16
 8109f4e:	0c0b      	lsrs	r3, r1, #16
 8109f50:	fb02 3306 	mla	r3, r2, r6, r3
 8109f54:	b289      	uxth	r1, r1
 8109f56:	3001      	adds	r0, #1
 8109f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8109f5c:	4285      	cmp	r5, r0
 8109f5e:	f84c 1b04 	str.w	r1, [ip], #4
 8109f62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8109f66:	dcec      	bgt.n	8109f42 <__multadd+0x12>
 8109f68:	b30e      	cbz	r6, 8109fae <__multadd+0x7e>
 8109f6a:	68a3      	ldr	r3, [r4, #8]
 8109f6c:	42ab      	cmp	r3, r5
 8109f6e:	dc19      	bgt.n	8109fa4 <__multadd+0x74>
 8109f70:	6861      	ldr	r1, [r4, #4]
 8109f72:	4638      	mov	r0, r7
 8109f74:	3101      	adds	r1, #1
 8109f76:	f7ff ff79 	bl	8109e6c <_Balloc>
 8109f7a:	4680      	mov	r8, r0
 8109f7c:	b928      	cbnz	r0, 8109f8a <__multadd+0x5a>
 8109f7e:	4602      	mov	r2, r0
 8109f80:	4b0c      	ldr	r3, [pc, #48]	; (8109fb4 <__multadd+0x84>)
 8109f82:	480d      	ldr	r0, [pc, #52]	; (8109fb8 <__multadd+0x88>)
 8109f84:	21b5      	movs	r1, #181	; 0xb5
 8109f86:	f001 f92f 	bl	810b1e8 <__assert_func>
 8109f8a:	6922      	ldr	r2, [r4, #16]
 8109f8c:	3202      	adds	r2, #2
 8109f8e:	f104 010c 	add.w	r1, r4, #12
 8109f92:	0092      	lsls	r2, r2, #2
 8109f94:	300c      	adds	r0, #12
 8109f96:	f7ff ff5b 	bl	8109e50 <memcpy>
 8109f9a:	4621      	mov	r1, r4
 8109f9c:	4638      	mov	r0, r7
 8109f9e:	f7ff ffa5 	bl	8109eec <_Bfree>
 8109fa2:	4644      	mov	r4, r8
 8109fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8109fa8:	3501      	adds	r5, #1
 8109faa:	615e      	str	r6, [r3, #20]
 8109fac:	6125      	str	r5, [r4, #16]
 8109fae:	4620      	mov	r0, r4
 8109fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109fb4:	0810b908 	.word	0x0810b908
 8109fb8:	0810b9f8 	.word	0x0810b9f8

08109fbc <__s2b>:
 8109fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109fc0:	460c      	mov	r4, r1
 8109fc2:	4615      	mov	r5, r2
 8109fc4:	461f      	mov	r7, r3
 8109fc6:	2209      	movs	r2, #9
 8109fc8:	3308      	adds	r3, #8
 8109fca:	4606      	mov	r6, r0
 8109fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8109fd0:	2100      	movs	r1, #0
 8109fd2:	2201      	movs	r2, #1
 8109fd4:	429a      	cmp	r2, r3
 8109fd6:	db09      	blt.n	8109fec <__s2b+0x30>
 8109fd8:	4630      	mov	r0, r6
 8109fda:	f7ff ff47 	bl	8109e6c <_Balloc>
 8109fde:	b940      	cbnz	r0, 8109ff2 <__s2b+0x36>
 8109fe0:	4602      	mov	r2, r0
 8109fe2:	4b19      	ldr	r3, [pc, #100]	; (810a048 <__s2b+0x8c>)
 8109fe4:	4819      	ldr	r0, [pc, #100]	; (810a04c <__s2b+0x90>)
 8109fe6:	21ce      	movs	r1, #206	; 0xce
 8109fe8:	f001 f8fe 	bl	810b1e8 <__assert_func>
 8109fec:	0052      	lsls	r2, r2, #1
 8109fee:	3101      	adds	r1, #1
 8109ff0:	e7f0      	b.n	8109fd4 <__s2b+0x18>
 8109ff2:	9b08      	ldr	r3, [sp, #32]
 8109ff4:	6143      	str	r3, [r0, #20]
 8109ff6:	2d09      	cmp	r5, #9
 8109ff8:	f04f 0301 	mov.w	r3, #1
 8109ffc:	6103      	str	r3, [r0, #16]
 8109ffe:	dd16      	ble.n	810a02e <__s2b+0x72>
 810a000:	f104 0909 	add.w	r9, r4, #9
 810a004:	46c8      	mov	r8, r9
 810a006:	442c      	add	r4, r5
 810a008:	f818 3b01 	ldrb.w	r3, [r8], #1
 810a00c:	4601      	mov	r1, r0
 810a00e:	3b30      	subs	r3, #48	; 0x30
 810a010:	220a      	movs	r2, #10
 810a012:	4630      	mov	r0, r6
 810a014:	f7ff ff8c 	bl	8109f30 <__multadd>
 810a018:	45a0      	cmp	r8, r4
 810a01a:	d1f5      	bne.n	810a008 <__s2b+0x4c>
 810a01c:	f1a5 0408 	sub.w	r4, r5, #8
 810a020:	444c      	add	r4, r9
 810a022:	1b2d      	subs	r5, r5, r4
 810a024:	1963      	adds	r3, r4, r5
 810a026:	42bb      	cmp	r3, r7
 810a028:	db04      	blt.n	810a034 <__s2b+0x78>
 810a02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a02e:	340a      	adds	r4, #10
 810a030:	2509      	movs	r5, #9
 810a032:	e7f6      	b.n	810a022 <__s2b+0x66>
 810a034:	f814 3b01 	ldrb.w	r3, [r4], #1
 810a038:	4601      	mov	r1, r0
 810a03a:	3b30      	subs	r3, #48	; 0x30
 810a03c:	220a      	movs	r2, #10
 810a03e:	4630      	mov	r0, r6
 810a040:	f7ff ff76 	bl	8109f30 <__multadd>
 810a044:	e7ee      	b.n	810a024 <__s2b+0x68>
 810a046:	bf00      	nop
 810a048:	0810b908 	.word	0x0810b908
 810a04c:	0810b9f8 	.word	0x0810b9f8

0810a050 <__hi0bits>:
 810a050:	0c03      	lsrs	r3, r0, #16
 810a052:	041b      	lsls	r3, r3, #16
 810a054:	b9d3      	cbnz	r3, 810a08c <__hi0bits+0x3c>
 810a056:	0400      	lsls	r0, r0, #16
 810a058:	2310      	movs	r3, #16
 810a05a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810a05e:	bf04      	itt	eq
 810a060:	0200      	lsleq	r0, r0, #8
 810a062:	3308      	addeq	r3, #8
 810a064:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810a068:	bf04      	itt	eq
 810a06a:	0100      	lsleq	r0, r0, #4
 810a06c:	3304      	addeq	r3, #4
 810a06e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810a072:	bf04      	itt	eq
 810a074:	0080      	lsleq	r0, r0, #2
 810a076:	3302      	addeq	r3, #2
 810a078:	2800      	cmp	r0, #0
 810a07a:	db05      	blt.n	810a088 <__hi0bits+0x38>
 810a07c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810a080:	f103 0301 	add.w	r3, r3, #1
 810a084:	bf08      	it	eq
 810a086:	2320      	moveq	r3, #32
 810a088:	4618      	mov	r0, r3
 810a08a:	4770      	bx	lr
 810a08c:	2300      	movs	r3, #0
 810a08e:	e7e4      	b.n	810a05a <__hi0bits+0xa>

0810a090 <__lo0bits>:
 810a090:	6803      	ldr	r3, [r0, #0]
 810a092:	f013 0207 	ands.w	r2, r3, #7
 810a096:	4601      	mov	r1, r0
 810a098:	d00b      	beq.n	810a0b2 <__lo0bits+0x22>
 810a09a:	07da      	lsls	r2, r3, #31
 810a09c:	d423      	bmi.n	810a0e6 <__lo0bits+0x56>
 810a09e:	0798      	lsls	r0, r3, #30
 810a0a0:	bf49      	itett	mi
 810a0a2:	085b      	lsrmi	r3, r3, #1
 810a0a4:	089b      	lsrpl	r3, r3, #2
 810a0a6:	2001      	movmi	r0, #1
 810a0a8:	600b      	strmi	r3, [r1, #0]
 810a0aa:	bf5c      	itt	pl
 810a0ac:	600b      	strpl	r3, [r1, #0]
 810a0ae:	2002      	movpl	r0, #2
 810a0b0:	4770      	bx	lr
 810a0b2:	b298      	uxth	r0, r3
 810a0b4:	b9a8      	cbnz	r0, 810a0e2 <__lo0bits+0x52>
 810a0b6:	0c1b      	lsrs	r3, r3, #16
 810a0b8:	2010      	movs	r0, #16
 810a0ba:	b2da      	uxtb	r2, r3
 810a0bc:	b90a      	cbnz	r2, 810a0c2 <__lo0bits+0x32>
 810a0be:	3008      	adds	r0, #8
 810a0c0:	0a1b      	lsrs	r3, r3, #8
 810a0c2:	071a      	lsls	r2, r3, #28
 810a0c4:	bf04      	itt	eq
 810a0c6:	091b      	lsreq	r3, r3, #4
 810a0c8:	3004      	addeq	r0, #4
 810a0ca:	079a      	lsls	r2, r3, #30
 810a0cc:	bf04      	itt	eq
 810a0ce:	089b      	lsreq	r3, r3, #2
 810a0d0:	3002      	addeq	r0, #2
 810a0d2:	07da      	lsls	r2, r3, #31
 810a0d4:	d403      	bmi.n	810a0de <__lo0bits+0x4e>
 810a0d6:	085b      	lsrs	r3, r3, #1
 810a0d8:	f100 0001 	add.w	r0, r0, #1
 810a0dc:	d005      	beq.n	810a0ea <__lo0bits+0x5a>
 810a0de:	600b      	str	r3, [r1, #0]
 810a0e0:	4770      	bx	lr
 810a0e2:	4610      	mov	r0, r2
 810a0e4:	e7e9      	b.n	810a0ba <__lo0bits+0x2a>
 810a0e6:	2000      	movs	r0, #0
 810a0e8:	4770      	bx	lr
 810a0ea:	2020      	movs	r0, #32
 810a0ec:	4770      	bx	lr
	...

0810a0f0 <__i2b>:
 810a0f0:	b510      	push	{r4, lr}
 810a0f2:	460c      	mov	r4, r1
 810a0f4:	2101      	movs	r1, #1
 810a0f6:	f7ff feb9 	bl	8109e6c <_Balloc>
 810a0fa:	4602      	mov	r2, r0
 810a0fc:	b928      	cbnz	r0, 810a10a <__i2b+0x1a>
 810a0fe:	4b05      	ldr	r3, [pc, #20]	; (810a114 <__i2b+0x24>)
 810a100:	4805      	ldr	r0, [pc, #20]	; (810a118 <__i2b+0x28>)
 810a102:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810a106:	f001 f86f 	bl	810b1e8 <__assert_func>
 810a10a:	2301      	movs	r3, #1
 810a10c:	6144      	str	r4, [r0, #20]
 810a10e:	6103      	str	r3, [r0, #16]
 810a110:	bd10      	pop	{r4, pc}
 810a112:	bf00      	nop
 810a114:	0810b908 	.word	0x0810b908
 810a118:	0810b9f8 	.word	0x0810b9f8

0810a11c <__multiply>:
 810a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a120:	4691      	mov	r9, r2
 810a122:	690a      	ldr	r2, [r1, #16]
 810a124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810a128:	429a      	cmp	r2, r3
 810a12a:	bfb8      	it	lt
 810a12c:	460b      	movlt	r3, r1
 810a12e:	460c      	mov	r4, r1
 810a130:	bfbc      	itt	lt
 810a132:	464c      	movlt	r4, r9
 810a134:	4699      	movlt	r9, r3
 810a136:	6927      	ldr	r7, [r4, #16]
 810a138:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810a13c:	68a3      	ldr	r3, [r4, #8]
 810a13e:	6861      	ldr	r1, [r4, #4]
 810a140:	eb07 060a 	add.w	r6, r7, sl
 810a144:	42b3      	cmp	r3, r6
 810a146:	b085      	sub	sp, #20
 810a148:	bfb8      	it	lt
 810a14a:	3101      	addlt	r1, #1
 810a14c:	f7ff fe8e 	bl	8109e6c <_Balloc>
 810a150:	b930      	cbnz	r0, 810a160 <__multiply+0x44>
 810a152:	4602      	mov	r2, r0
 810a154:	4b44      	ldr	r3, [pc, #272]	; (810a268 <__multiply+0x14c>)
 810a156:	4845      	ldr	r0, [pc, #276]	; (810a26c <__multiply+0x150>)
 810a158:	f240 115d 	movw	r1, #349	; 0x15d
 810a15c:	f001 f844 	bl	810b1e8 <__assert_func>
 810a160:	f100 0514 	add.w	r5, r0, #20
 810a164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810a168:	462b      	mov	r3, r5
 810a16a:	2200      	movs	r2, #0
 810a16c:	4543      	cmp	r3, r8
 810a16e:	d321      	bcc.n	810a1b4 <__multiply+0x98>
 810a170:	f104 0314 	add.w	r3, r4, #20
 810a174:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810a178:	f109 0314 	add.w	r3, r9, #20
 810a17c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810a180:	9202      	str	r2, [sp, #8]
 810a182:	1b3a      	subs	r2, r7, r4
 810a184:	3a15      	subs	r2, #21
 810a186:	f022 0203 	bic.w	r2, r2, #3
 810a18a:	3204      	adds	r2, #4
 810a18c:	f104 0115 	add.w	r1, r4, #21
 810a190:	428f      	cmp	r7, r1
 810a192:	bf38      	it	cc
 810a194:	2204      	movcc	r2, #4
 810a196:	9201      	str	r2, [sp, #4]
 810a198:	9a02      	ldr	r2, [sp, #8]
 810a19a:	9303      	str	r3, [sp, #12]
 810a19c:	429a      	cmp	r2, r3
 810a19e:	d80c      	bhi.n	810a1ba <__multiply+0x9e>
 810a1a0:	2e00      	cmp	r6, #0
 810a1a2:	dd03      	ble.n	810a1ac <__multiply+0x90>
 810a1a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810a1a8:	2b00      	cmp	r3, #0
 810a1aa:	d05a      	beq.n	810a262 <__multiply+0x146>
 810a1ac:	6106      	str	r6, [r0, #16]
 810a1ae:	b005      	add	sp, #20
 810a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a1b4:	f843 2b04 	str.w	r2, [r3], #4
 810a1b8:	e7d8      	b.n	810a16c <__multiply+0x50>
 810a1ba:	f8b3 a000 	ldrh.w	sl, [r3]
 810a1be:	f1ba 0f00 	cmp.w	sl, #0
 810a1c2:	d024      	beq.n	810a20e <__multiply+0xf2>
 810a1c4:	f104 0e14 	add.w	lr, r4, #20
 810a1c8:	46a9      	mov	r9, r5
 810a1ca:	f04f 0c00 	mov.w	ip, #0
 810a1ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 810a1d2:	f8d9 1000 	ldr.w	r1, [r9]
 810a1d6:	fa1f fb82 	uxth.w	fp, r2
 810a1da:	b289      	uxth	r1, r1
 810a1dc:	fb0a 110b 	mla	r1, sl, fp, r1
 810a1e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810a1e4:	f8d9 2000 	ldr.w	r2, [r9]
 810a1e8:	4461      	add	r1, ip
 810a1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810a1ee:	fb0a c20b 	mla	r2, sl, fp, ip
 810a1f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810a1f6:	b289      	uxth	r1, r1
 810a1f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810a1fc:	4577      	cmp	r7, lr
 810a1fe:	f849 1b04 	str.w	r1, [r9], #4
 810a202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810a206:	d8e2      	bhi.n	810a1ce <__multiply+0xb2>
 810a208:	9a01      	ldr	r2, [sp, #4]
 810a20a:	f845 c002 	str.w	ip, [r5, r2]
 810a20e:	9a03      	ldr	r2, [sp, #12]
 810a210:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810a214:	3304      	adds	r3, #4
 810a216:	f1b9 0f00 	cmp.w	r9, #0
 810a21a:	d020      	beq.n	810a25e <__multiply+0x142>
 810a21c:	6829      	ldr	r1, [r5, #0]
 810a21e:	f104 0c14 	add.w	ip, r4, #20
 810a222:	46ae      	mov	lr, r5
 810a224:	f04f 0a00 	mov.w	sl, #0
 810a228:	f8bc b000 	ldrh.w	fp, [ip]
 810a22c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810a230:	fb09 220b 	mla	r2, r9, fp, r2
 810a234:	4492      	add	sl, r2
 810a236:	b289      	uxth	r1, r1
 810a238:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810a23c:	f84e 1b04 	str.w	r1, [lr], #4
 810a240:	f85c 2b04 	ldr.w	r2, [ip], #4
 810a244:	f8be 1000 	ldrh.w	r1, [lr]
 810a248:	0c12      	lsrs	r2, r2, #16
 810a24a:	fb09 1102 	mla	r1, r9, r2, r1
 810a24e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810a252:	4567      	cmp	r7, ip
 810a254:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810a258:	d8e6      	bhi.n	810a228 <__multiply+0x10c>
 810a25a:	9a01      	ldr	r2, [sp, #4]
 810a25c:	50a9      	str	r1, [r5, r2]
 810a25e:	3504      	adds	r5, #4
 810a260:	e79a      	b.n	810a198 <__multiply+0x7c>
 810a262:	3e01      	subs	r6, #1
 810a264:	e79c      	b.n	810a1a0 <__multiply+0x84>
 810a266:	bf00      	nop
 810a268:	0810b908 	.word	0x0810b908
 810a26c:	0810b9f8 	.word	0x0810b9f8

0810a270 <__pow5mult>:
 810a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a274:	4615      	mov	r5, r2
 810a276:	f012 0203 	ands.w	r2, r2, #3
 810a27a:	4606      	mov	r6, r0
 810a27c:	460f      	mov	r7, r1
 810a27e:	d007      	beq.n	810a290 <__pow5mult+0x20>
 810a280:	4c25      	ldr	r4, [pc, #148]	; (810a318 <__pow5mult+0xa8>)
 810a282:	3a01      	subs	r2, #1
 810a284:	2300      	movs	r3, #0
 810a286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810a28a:	f7ff fe51 	bl	8109f30 <__multadd>
 810a28e:	4607      	mov	r7, r0
 810a290:	10ad      	asrs	r5, r5, #2
 810a292:	d03d      	beq.n	810a310 <__pow5mult+0xa0>
 810a294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810a296:	b97c      	cbnz	r4, 810a2b8 <__pow5mult+0x48>
 810a298:	2010      	movs	r0, #16
 810a29a:	f7ff fdbf 	bl	8109e1c <malloc>
 810a29e:	4602      	mov	r2, r0
 810a2a0:	6270      	str	r0, [r6, #36]	; 0x24
 810a2a2:	b928      	cbnz	r0, 810a2b0 <__pow5mult+0x40>
 810a2a4:	4b1d      	ldr	r3, [pc, #116]	; (810a31c <__pow5mult+0xac>)
 810a2a6:	481e      	ldr	r0, [pc, #120]	; (810a320 <__pow5mult+0xb0>)
 810a2a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810a2ac:	f000 ff9c 	bl	810b1e8 <__assert_func>
 810a2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a2b4:	6004      	str	r4, [r0, #0]
 810a2b6:	60c4      	str	r4, [r0, #12]
 810a2b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810a2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810a2c0:	b94c      	cbnz	r4, 810a2d6 <__pow5mult+0x66>
 810a2c2:	f240 2171 	movw	r1, #625	; 0x271
 810a2c6:	4630      	mov	r0, r6
 810a2c8:	f7ff ff12 	bl	810a0f0 <__i2b>
 810a2cc:	2300      	movs	r3, #0
 810a2ce:	f8c8 0008 	str.w	r0, [r8, #8]
 810a2d2:	4604      	mov	r4, r0
 810a2d4:	6003      	str	r3, [r0, #0]
 810a2d6:	f04f 0900 	mov.w	r9, #0
 810a2da:	07eb      	lsls	r3, r5, #31
 810a2dc:	d50a      	bpl.n	810a2f4 <__pow5mult+0x84>
 810a2de:	4639      	mov	r1, r7
 810a2e0:	4622      	mov	r2, r4
 810a2e2:	4630      	mov	r0, r6
 810a2e4:	f7ff ff1a 	bl	810a11c <__multiply>
 810a2e8:	4639      	mov	r1, r7
 810a2ea:	4680      	mov	r8, r0
 810a2ec:	4630      	mov	r0, r6
 810a2ee:	f7ff fdfd 	bl	8109eec <_Bfree>
 810a2f2:	4647      	mov	r7, r8
 810a2f4:	106d      	asrs	r5, r5, #1
 810a2f6:	d00b      	beq.n	810a310 <__pow5mult+0xa0>
 810a2f8:	6820      	ldr	r0, [r4, #0]
 810a2fa:	b938      	cbnz	r0, 810a30c <__pow5mult+0x9c>
 810a2fc:	4622      	mov	r2, r4
 810a2fe:	4621      	mov	r1, r4
 810a300:	4630      	mov	r0, r6
 810a302:	f7ff ff0b 	bl	810a11c <__multiply>
 810a306:	6020      	str	r0, [r4, #0]
 810a308:	f8c0 9000 	str.w	r9, [r0]
 810a30c:	4604      	mov	r4, r0
 810a30e:	e7e4      	b.n	810a2da <__pow5mult+0x6a>
 810a310:	4638      	mov	r0, r7
 810a312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a316:	bf00      	nop
 810a318:	0810bb48 	.word	0x0810bb48
 810a31c:	0810b896 	.word	0x0810b896
 810a320:	0810b9f8 	.word	0x0810b9f8

0810a324 <__lshift>:
 810a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a328:	460c      	mov	r4, r1
 810a32a:	6849      	ldr	r1, [r1, #4]
 810a32c:	6923      	ldr	r3, [r4, #16]
 810a32e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810a332:	68a3      	ldr	r3, [r4, #8]
 810a334:	4607      	mov	r7, r0
 810a336:	4691      	mov	r9, r2
 810a338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a33c:	f108 0601 	add.w	r6, r8, #1
 810a340:	42b3      	cmp	r3, r6
 810a342:	db0b      	blt.n	810a35c <__lshift+0x38>
 810a344:	4638      	mov	r0, r7
 810a346:	f7ff fd91 	bl	8109e6c <_Balloc>
 810a34a:	4605      	mov	r5, r0
 810a34c:	b948      	cbnz	r0, 810a362 <__lshift+0x3e>
 810a34e:	4602      	mov	r2, r0
 810a350:	4b2a      	ldr	r3, [pc, #168]	; (810a3fc <__lshift+0xd8>)
 810a352:	482b      	ldr	r0, [pc, #172]	; (810a400 <__lshift+0xdc>)
 810a354:	f240 11d9 	movw	r1, #473	; 0x1d9
 810a358:	f000 ff46 	bl	810b1e8 <__assert_func>
 810a35c:	3101      	adds	r1, #1
 810a35e:	005b      	lsls	r3, r3, #1
 810a360:	e7ee      	b.n	810a340 <__lshift+0x1c>
 810a362:	2300      	movs	r3, #0
 810a364:	f100 0114 	add.w	r1, r0, #20
 810a368:	f100 0210 	add.w	r2, r0, #16
 810a36c:	4618      	mov	r0, r3
 810a36e:	4553      	cmp	r3, sl
 810a370:	db37      	blt.n	810a3e2 <__lshift+0xbe>
 810a372:	6920      	ldr	r0, [r4, #16]
 810a374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a378:	f104 0314 	add.w	r3, r4, #20
 810a37c:	f019 091f 	ands.w	r9, r9, #31
 810a380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810a388:	d02f      	beq.n	810a3ea <__lshift+0xc6>
 810a38a:	f1c9 0e20 	rsb	lr, r9, #32
 810a38e:	468a      	mov	sl, r1
 810a390:	f04f 0c00 	mov.w	ip, #0
 810a394:	681a      	ldr	r2, [r3, #0]
 810a396:	fa02 f209 	lsl.w	r2, r2, r9
 810a39a:	ea42 020c 	orr.w	r2, r2, ip
 810a39e:	f84a 2b04 	str.w	r2, [sl], #4
 810a3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 810a3a6:	4298      	cmp	r0, r3
 810a3a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 810a3ac:	d8f2      	bhi.n	810a394 <__lshift+0x70>
 810a3ae:	1b03      	subs	r3, r0, r4
 810a3b0:	3b15      	subs	r3, #21
 810a3b2:	f023 0303 	bic.w	r3, r3, #3
 810a3b6:	3304      	adds	r3, #4
 810a3b8:	f104 0215 	add.w	r2, r4, #21
 810a3bc:	4290      	cmp	r0, r2
 810a3be:	bf38      	it	cc
 810a3c0:	2304      	movcc	r3, #4
 810a3c2:	f841 c003 	str.w	ip, [r1, r3]
 810a3c6:	f1bc 0f00 	cmp.w	ip, #0
 810a3ca:	d001      	beq.n	810a3d0 <__lshift+0xac>
 810a3cc:	f108 0602 	add.w	r6, r8, #2
 810a3d0:	3e01      	subs	r6, #1
 810a3d2:	4638      	mov	r0, r7
 810a3d4:	612e      	str	r6, [r5, #16]
 810a3d6:	4621      	mov	r1, r4
 810a3d8:	f7ff fd88 	bl	8109eec <_Bfree>
 810a3dc:	4628      	mov	r0, r5
 810a3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a3e2:	f842 0f04 	str.w	r0, [r2, #4]!
 810a3e6:	3301      	adds	r3, #1
 810a3e8:	e7c1      	b.n	810a36e <__lshift+0x4a>
 810a3ea:	3904      	subs	r1, #4
 810a3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 810a3f0:	f841 2f04 	str.w	r2, [r1, #4]!
 810a3f4:	4298      	cmp	r0, r3
 810a3f6:	d8f9      	bhi.n	810a3ec <__lshift+0xc8>
 810a3f8:	e7ea      	b.n	810a3d0 <__lshift+0xac>
 810a3fa:	bf00      	nop
 810a3fc:	0810b908 	.word	0x0810b908
 810a400:	0810b9f8 	.word	0x0810b9f8

0810a404 <__mcmp>:
 810a404:	b530      	push	{r4, r5, lr}
 810a406:	6902      	ldr	r2, [r0, #16]
 810a408:	690c      	ldr	r4, [r1, #16]
 810a40a:	1b12      	subs	r2, r2, r4
 810a40c:	d10e      	bne.n	810a42c <__mcmp+0x28>
 810a40e:	f100 0314 	add.w	r3, r0, #20
 810a412:	3114      	adds	r1, #20
 810a414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810a418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810a41c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810a420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810a424:	42a5      	cmp	r5, r4
 810a426:	d003      	beq.n	810a430 <__mcmp+0x2c>
 810a428:	d305      	bcc.n	810a436 <__mcmp+0x32>
 810a42a:	2201      	movs	r2, #1
 810a42c:	4610      	mov	r0, r2
 810a42e:	bd30      	pop	{r4, r5, pc}
 810a430:	4283      	cmp	r3, r0
 810a432:	d3f3      	bcc.n	810a41c <__mcmp+0x18>
 810a434:	e7fa      	b.n	810a42c <__mcmp+0x28>
 810a436:	f04f 32ff 	mov.w	r2, #4294967295
 810a43a:	e7f7      	b.n	810a42c <__mcmp+0x28>

0810a43c <__mdiff>:
 810a43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a440:	460c      	mov	r4, r1
 810a442:	4606      	mov	r6, r0
 810a444:	4611      	mov	r1, r2
 810a446:	4620      	mov	r0, r4
 810a448:	4690      	mov	r8, r2
 810a44a:	f7ff ffdb 	bl	810a404 <__mcmp>
 810a44e:	1e05      	subs	r5, r0, #0
 810a450:	d110      	bne.n	810a474 <__mdiff+0x38>
 810a452:	4629      	mov	r1, r5
 810a454:	4630      	mov	r0, r6
 810a456:	f7ff fd09 	bl	8109e6c <_Balloc>
 810a45a:	b930      	cbnz	r0, 810a46a <__mdiff+0x2e>
 810a45c:	4b3a      	ldr	r3, [pc, #232]	; (810a548 <__mdiff+0x10c>)
 810a45e:	4602      	mov	r2, r0
 810a460:	f240 2132 	movw	r1, #562	; 0x232
 810a464:	4839      	ldr	r0, [pc, #228]	; (810a54c <__mdiff+0x110>)
 810a466:	f000 febf 	bl	810b1e8 <__assert_func>
 810a46a:	2301      	movs	r3, #1
 810a46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810a470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a474:	bfa4      	itt	ge
 810a476:	4643      	movge	r3, r8
 810a478:	46a0      	movge	r8, r4
 810a47a:	4630      	mov	r0, r6
 810a47c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810a480:	bfa6      	itte	ge
 810a482:	461c      	movge	r4, r3
 810a484:	2500      	movge	r5, #0
 810a486:	2501      	movlt	r5, #1
 810a488:	f7ff fcf0 	bl	8109e6c <_Balloc>
 810a48c:	b920      	cbnz	r0, 810a498 <__mdiff+0x5c>
 810a48e:	4b2e      	ldr	r3, [pc, #184]	; (810a548 <__mdiff+0x10c>)
 810a490:	4602      	mov	r2, r0
 810a492:	f44f 7110 	mov.w	r1, #576	; 0x240
 810a496:	e7e5      	b.n	810a464 <__mdiff+0x28>
 810a498:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810a49c:	6926      	ldr	r6, [r4, #16]
 810a49e:	60c5      	str	r5, [r0, #12]
 810a4a0:	f104 0914 	add.w	r9, r4, #20
 810a4a4:	f108 0514 	add.w	r5, r8, #20
 810a4a8:	f100 0e14 	add.w	lr, r0, #20
 810a4ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810a4b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810a4b4:	f108 0210 	add.w	r2, r8, #16
 810a4b8:	46f2      	mov	sl, lr
 810a4ba:	2100      	movs	r1, #0
 810a4bc:	f859 3b04 	ldr.w	r3, [r9], #4
 810a4c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810a4c4:	fa1f f883 	uxth.w	r8, r3
 810a4c8:	fa11 f18b 	uxtah	r1, r1, fp
 810a4cc:	0c1b      	lsrs	r3, r3, #16
 810a4ce:	eba1 0808 	sub.w	r8, r1, r8
 810a4d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810a4d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810a4da:	fa1f f888 	uxth.w	r8, r8
 810a4de:	1419      	asrs	r1, r3, #16
 810a4e0:	454e      	cmp	r6, r9
 810a4e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810a4e6:	f84a 3b04 	str.w	r3, [sl], #4
 810a4ea:	d8e7      	bhi.n	810a4bc <__mdiff+0x80>
 810a4ec:	1b33      	subs	r3, r6, r4
 810a4ee:	3b15      	subs	r3, #21
 810a4f0:	f023 0303 	bic.w	r3, r3, #3
 810a4f4:	3304      	adds	r3, #4
 810a4f6:	3415      	adds	r4, #21
 810a4f8:	42a6      	cmp	r6, r4
 810a4fa:	bf38      	it	cc
 810a4fc:	2304      	movcc	r3, #4
 810a4fe:	441d      	add	r5, r3
 810a500:	4473      	add	r3, lr
 810a502:	469e      	mov	lr, r3
 810a504:	462e      	mov	r6, r5
 810a506:	4566      	cmp	r6, ip
 810a508:	d30e      	bcc.n	810a528 <__mdiff+0xec>
 810a50a:	f10c 0203 	add.w	r2, ip, #3
 810a50e:	1b52      	subs	r2, r2, r5
 810a510:	f022 0203 	bic.w	r2, r2, #3
 810a514:	3d03      	subs	r5, #3
 810a516:	45ac      	cmp	ip, r5
 810a518:	bf38      	it	cc
 810a51a:	2200      	movcc	r2, #0
 810a51c:	441a      	add	r2, r3
 810a51e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810a522:	b17b      	cbz	r3, 810a544 <__mdiff+0x108>
 810a524:	6107      	str	r7, [r0, #16]
 810a526:	e7a3      	b.n	810a470 <__mdiff+0x34>
 810a528:	f856 8b04 	ldr.w	r8, [r6], #4
 810a52c:	fa11 f288 	uxtah	r2, r1, r8
 810a530:	1414      	asrs	r4, r2, #16
 810a532:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810a536:	b292      	uxth	r2, r2
 810a538:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810a53c:	f84e 2b04 	str.w	r2, [lr], #4
 810a540:	1421      	asrs	r1, r4, #16
 810a542:	e7e0      	b.n	810a506 <__mdiff+0xca>
 810a544:	3f01      	subs	r7, #1
 810a546:	e7ea      	b.n	810a51e <__mdiff+0xe2>
 810a548:	0810b908 	.word	0x0810b908
 810a54c:	0810b9f8 	.word	0x0810b9f8

0810a550 <__ulp>:
 810a550:	b082      	sub	sp, #8
 810a552:	ed8d 0b00 	vstr	d0, [sp]
 810a556:	9b01      	ldr	r3, [sp, #4]
 810a558:	4912      	ldr	r1, [pc, #72]	; (810a5a4 <__ulp+0x54>)
 810a55a:	4019      	ands	r1, r3
 810a55c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810a560:	2900      	cmp	r1, #0
 810a562:	dd05      	ble.n	810a570 <__ulp+0x20>
 810a564:	2200      	movs	r2, #0
 810a566:	460b      	mov	r3, r1
 810a568:	ec43 2b10 	vmov	d0, r2, r3
 810a56c:	b002      	add	sp, #8
 810a56e:	4770      	bx	lr
 810a570:	4249      	negs	r1, r1
 810a572:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810a576:	ea4f 5021 	mov.w	r0, r1, asr #20
 810a57a:	f04f 0200 	mov.w	r2, #0
 810a57e:	f04f 0300 	mov.w	r3, #0
 810a582:	da04      	bge.n	810a58e <__ulp+0x3e>
 810a584:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810a588:	fa41 f300 	asr.w	r3, r1, r0
 810a58c:	e7ec      	b.n	810a568 <__ulp+0x18>
 810a58e:	f1a0 0114 	sub.w	r1, r0, #20
 810a592:	291e      	cmp	r1, #30
 810a594:	bfda      	itte	le
 810a596:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810a59a:	fa20 f101 	lsrle.w	r1, r0, r1
 810a59e:	2101      	movgt	r1, #1
 810a5a0:	460a      	mov	r2, r1
 810a5a2:	e7e1      	b.n	810a568 <__ulp+0x18>
 810a5a4:	7ff00000 	.word	0x7ff00000

0810a5a8 <__b2d>:
 810a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a5aa:	6905      	ldr	r5, [r0, #16]
 810a5ac:	f100 0714 	add.w	r7, r0, #20
 810a5b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810a5b4:	1f2e      	subs	r6, r5, #4
 810a5b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810a5ba:	4620      	mov	r0, r4
 810a5bc:	f7ff fd48 	bl	810a050 <__hi0bits>
 810a5c0:	f1c0 0320 	rsb	r3, r0, #32
 810a5c4:	280a      	cmp	r0, #10
 810a5c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810a644 <__b2d+0x9c>
 810a5ca:	600b      	str	r3, [r1, #0]
 810a5cc:	dc14      	bgt.n	810a5f8 <__b2d+0x50>
 810a5ce:	f1c0 0e0b 	rsb	lr, r0, #11
 810a5d2:	fa24 f10e 	lsr.w	r1, r4, lr
 810a5d6:	42b7      	cmp	r7, r6
 810a5d8:	ea41 030c 	orr.w	r3, r1, ip
 810a5dc:	bf34      	ite	cc
 810a5de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810a5e2:	2100      	movcs	r1, #0
 810a5e4:	3015      	adds	r0, #21
 810a5e6:	fa04 f000 	lsl.w	r0, r4, r0
 810a5ea:	fa21 f10e 	lsr.w	r1, r1, lr
 810a5ee:	ea40 0201 	orr.w	r2, r0, r1
 810a5f2:	ec43 2b10 	vmov	d0, r2, r3
 810a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a5f8:	42b7      	cmp	r7, r6
 810a5fa:	bf3a      	itte	cc
 810a5fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810a600:	f1a5 0608 	subcc.w	r6, r5, #8
 810a604:	2100      	movcs	r1, #0
 810a606:	380b      	subs	r0, #11
 810a608:	d017      	beq.n	810a63a <__b2d+0x92>
 810a60a:	f1c0 0c20 	rsb	ip, r0, #32
 810a60e:	fa04 f500 	lsl.w	r5, r4, r0
 810a612:	42be      	cmp	r6, r7
 810a614:	fa21 f40c 	lsr.w	r4, r1, ip
 810a618:	ea45 0504 	orr.w	r5, r5, r4
 810a61c:	bf8c      	ite	hi
 810a61e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810a622:	2400      	movls	r4, #0
 810a624:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810a628:	fa01 f000 	lsl.w	r0, r1, r0
 810a62c:	fa24 f40c 	lsr.w	r4, r4, ip
 810a630:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810a634:	ea40 0204 	orr.w	r2, r0, r4
 810a638:	e7db      	b.n	810a5f2 <__b2d+0x4a>
 810a63a:	ea44 030c 	orr.w	r3, r4, ip
 810a63e:	460a      	mov	r2, r1
 810a640:	e7d7      	b.n	810a5f2 <__b2d+0x4a>
 810a642:	bf00      	nop
 810a644:	3ff00000 	.word	0x3ff00000

0810a648 <__d2b>:
 810a648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810a64c:	4689      	mov	r9, r1
 810a64e:	2101      	movs	r1, #1
 810a650:	ec57 6b10 	vmov	r6, r7, d0
 810a654:	4690      	mov	r8, r2
 810a656:	f7ff fc09 	bl	8109e6c <_Balloc>
 810a65a:	4604      	mov	r4, r0
 810a65c:	b930      	cbnz	r0, 810a66c <__d2b+0x24>
 810a65e:	4602      	mov	r2, r0
 810a660:	4b25      	ldr	r3, [pc, #148]	; (810a6f8 <__d2b+0xb0>)
 810a662:	4826      	ldr	r0, [pc, #152]	; (810a6fc <__d2b+0xb4>)
 810a664:	f240 310a 	movw	r1, #778	; 0x30a
 810a668:	f000 fdbe 	bl	810b1e8 <__assert_func>
 810a66c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810a670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810a674:	bb35      	cbnz	r5, 810a6c4 <__d2b+0x7c>
 810a676:	2e00      	cmp	r6, #0
 810a678:	9301      	str	r3, [sp, #4]
 810a67a:	d028      	beq.n	810a6ce <__d2b+0x86>
 810a67c:	4668      	mov	r0, sp
 810a67e:	9600      	str	r6, [sp, #0]
 810a680:	f7ff fd06 	bl	810a090 <__lo0bits>
 810a684:	9900      	ldr	r1, [sp, #0]
 810a686:	b300      	cbz	r0, 810a6ca <__d2b+0x82>
 810a688:	9a01      	ldr	r2, [sp, #4]
 810a68a:	f1c0 0320 	rsb	r3, r0, #32
 810a68e:	fa02 f303 	lsl.w	r3, r2, r3
 810a692:	430b      	orrs	r3, r1
 810a694:	40c2      	lsrs	r2, r0
 810a696:	6163      	str	r3, [r4, #20]
 810a698:	9201      	str	r2, [sp, #4]
 810a69a:	9b01      	ldr	r3, [sp, #4]
 810a69c:	61a3      	str	r3, [r4, #24]
 810a69e:	2b00      	cmp	r3, #0
 810a6a0:	bf14      	ite	ne
 810a6a2:	2202      	movne	r2, #2
 810a6a4:	2201      	moveq	r2, #1
 810a6a6:	6122      	str	r2, [r4, #16]
 810a6a8:	b1d5      	cbz	r5, 810a6e0 <__d2b+0x98>
 810a6aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810a6ae:	4405      	add	r5, r0
 810a6b0:	f8c9 5000 	str.w	r5, [r9]
 810a6b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810a6b8:	f8c8 0000 	str.w	r0, [r8]
 810a6bc:	4620      	mov	r0, r4
 810a6be:	b003      	add	sp, #12
 810a6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a6c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a6c8:	e7d5      	b.n	810a676 <__d2b+0x2e>
 810a6ca:	6161      	str	r1, [r4, #20]
 810a6cc:	e7e5      	b.n	810a69a <__d2b+0x52>
 810a6ce:	a801      	add	r0, sp, #4
 810a6d0:	f7ff fcde 	bl	810a090 <__lo0bits>
 810a6d4:	9b01      	ldr	r3, [sp, #4]
 810a6d6:	6163      	str	r3, [r4, #20]
 810a6d8:	2201      	movs	r2, #1
 810a6da:	6122      	str	r2, [r4, #16]
 810a6dc:	3020      	adds	r0, #32
 810a6de:	e7e3      	b.n	810a6a8 <__d2b+0x60>
 810a6e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810a6e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810a6e8:	f8c9 0000 	str.w	r0, [r9]
 810a6ec:	6918      	ldr	r0, [r3, #16]
 810a6ee:	f7ff fcaf 	bl	810a050 <__hi0bits>
 810a6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810a6f6:	e7df      	b.n	810a6b8 <__d2b+0x70>
 810a6f8:	0810b908 	.word	0x0810b908
 810a6fc:	0810b9f8 	.word	0x0810b9f8

0810a700 <__ratio>:
 810a700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a704:	4688      	mov	r8, r1
 810a706:	4669      	mov	r1, sp
 810a708:	4681      	mov	r9, r0
 810a70a:	f7ff ff4d 	bl	810a5a8 <__b2d>
 810a70e:	a901      	add	r1, sp, #4
 810a710:	4640      	mov	r0, r8
 810a712:	ec55 4b10 	vmov	r4, r5, d0
 810a716:	f7ff ff47 	bl	810a5a8 <__b2d>
 810a71a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810a71e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810a722:	eba3 0c02 	sub.w	ip, r3, r2
 810a726:	e9dd 3200 	ldrd	r3, r2, [sp]
 810a72a:	1a9b      	subs	r3, r3, r2
 810a72c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810a730:	ec51 0b10 	vmov	r0, r1, d0
 810a734:	2b00      	cmp	r3, #0
 810a736:	bfd6      	itet	le
 810a738:	460a      	movle	r2, r1
 810a73a:	462a      	movgt	r2, r5
 810a73c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810a740:	468b      	mov	fp, r1
 810a742:	462f      	mov	r7, r5
 810a744:	bfd4      	ite	le
 810a746:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810a74a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810a74e:	4620      	mov	r0, r4
 810a750:	ee10 2a10 	vmov	r2, s0
 810a754:	465b      	mov	r3, fp
 810a756:	4639      	mov	r1, r7
 810a758:	f7f6 f900 	bl	810095c <__aeabi_ddiv>
 810a75c:	ec41 0b10 	vmov	d0, r0, r1
 810a760:	b003      	add	sp, #12
 810a762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810a766 <__copybits>:
 810a766:	3901      	subs	r1, #1
 810a768:	b570      	push	{r4, r5, r6, lr}
 810a76a:	1149      	asrs	r1, r1, #5
 810a76c:	6914      	ldr	r4, [r2, #16]
 810a76e:	3101      	adds	r1, #1
 810a770:	f102 0314 	add.w	r3, r2, #20
 810a774:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810a778:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810a77c:	1f05      	subs	r5, r0, #4
 810a77e:	42a3      	cmp	r3, r4
 810a780:	d30c      	bcc.n	810a79c <__copybits+0x36>
 810a782:	1aa3      	subs	r3, r4, r2
 810a784:	3b11      	subs	r3, #17
 810a786:	f023 0303 	bic.w	r3, r3, #3
 810a78a:	3211      	adds	r2, #17
 810a78c:	42a2      	cmp	r2, r4
 810a78e:	bf88      	it	hi
 810a790:	2300      	movhi	r3, #0
 810a792:	4418      	add	r0, r3
 810a794:	2300      	movs	r3, #0
 810a796:	4288      	cmp	r0, r1
 810a798:	d305      	bcc.n	810a7a6 <__copybits+0x40>
 810a79a:	bd70      	pop	{r4, r5, r6, pc}
 810a79c:	f853 6b04 	ldr.w	r6, [r3], #4
 810a7a0:	f845 6f04 	str.w	r6, [r5, #4]!
 810a7a4:	e7eb      	b.n	810a77e <__copybits+0x18>
 810a7a6:	f840 3b04 	str.w	r3, [r0], #4
 810a7aa:	e7f4      	b.n	810a796 <__copybits+0x30>

0810a7ac <__any_on>:
 810a7ac:	f100 0214 	add.w	r2, r0, #20
 810a7b0:	6900      	ldr	r0, [r0, #16]
 810a7b2:	114b      	asrs	r3, r1, #5
 810a7b4:	4298      	cmp	r0, r3
 810a7b6:	b510      	push	{r4, lr}
 810a7b8:	db11      	blt.n	810a7de <__any_on+0x32>
 810a7ba:	dd0a      	ble.n	810a7d2 <__any_on+0x26>
 810a7bc:	f011 011f 	ands.w	r1, r1, #31
 810a7c0:	d007      	beq.n	810a7d2 <__any_on+0x26>
 810a7c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810a7c6:	fa24 f001 	lsr.w	r0, r4, r1
 810a7ca:	fa00 f101 	lsl.w	r1, r0, r1
 810a7ce:	428c      	cmp	r4, r1
 810a7d0:	d10b      	bne.n	810a7ea <__any_on+0x3e>
 810a7d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810a7d6:	4293      	cmp	r3, r2
 810a7d8:	d803      	bhi.n	810a7e2 <__any_on+0x36>
 810a7da:	2000      	movs	r0, #0
 810a7dc:	bd10      	pop	{r4, pc}
 810a7de:	4603      	mov	r3, r0
 810a7e0:	e7f7      	b.n	810a7d2 <__any_on+0x26>
 810a7e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810a7e6:	2900      	cmp	r1, #0
 810a7e8:	d0f5      	beq.n	810a7d6 <__any_on+0x2a>
 810a7ea:	2001      	movs	r0, #1
 810a7ec:	e7f6      	b.n	810a7dc <__any_on+0x30>

0810a7ee <_calloc_r>:
 810a7ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a7f0:	fba1 2402 	umull	r2, r4, r1, r2
 810a7f4:	b94c      	cbnz	r4, 810a80a <_calloc_r+0x1c>
 810a7f6:	4611      	mov	r1, r2
 810a7f8:	9201      	str	r2, [sp, #4]
 810a7fa:	f000 f87b 	bl	810a8f4 <_malloc_r>
 810a7fe:	9a01      	ldr	r2, [sp, #4]
 810a800:	4605      	mov	r5, r0
 810a802:	b930      	cbnz	r0, 810a812 <_calloc_r+0x24>
 810a804:	4628      	mov	r0, r5
 810a806:	b003      	add	sp, #12
 810a808:	bd30      	pop	{r4, r5, pc}
 810a80a:	220c      	movs	r2, #12
 810a80c:	6002      	str	r2, [r0, #0]
 810a80e:	2500      	movs	r5, #0
 810a810:	e7f8      	b.n	810a804 <_calloc_r+0x16>
 810a812:	4621      	mov	r1, r4
 810a814:	f7fc faae 	bl	8106d74 <memset>
 810a818:	e7f4      	b.n	810a804 <_calloc_r+0x16>
	...

0810a81c <_free_r>:
 810a81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a81e:	2900      	cmp	r1, #0
 810a820:	d044      	beq.n	810a8ac <_free_r+0x90>
 810a822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a826:	9001      	str	r0, [sp, #4]
 810a828:	2b00      	cmp	r3, #0
 810a82a:	f1a1 0404 	sub.w	r4, r1, #4
 810a82e:	bfb8      	it	lt
 810a830:	18e4      	addlt	r4, r4, r3
 810a832:	f000 fe6d 	bl	810b510 <__malloc_lock>
 810a836:	4a1e      	ldr	r2, [pc, #120]	; (810a8b0 <_free_r+0x94>)
 810a838:	9801      	ldr	r0, [sp, #4]
 810a83a:	6813      	ldr	r3, [r2, #0]
 810a83c:	b933      	cbnz	r3, 810a84c <_free_r+0x30>
 810a83e:	6063      	str	r3, [r4, #4]
 810a840:	6014      	str	r4, [r2, #0]
 810a842:	b003      	add	sp, #12
 810a844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810a848:	f000 be68 	b.w	810b51c <__malloc_unlock>
 810a84c:	42a3      	cmp	r3, r4
 810a84e:	d908      	bls.n	810a862 <_free_r+0x46>
 810a850:	6825      	ldr	r5, [r4, #0]
 810a852:	1961      	adds	r1, r4, r5
 810a854:	428b      	cmp	r3, r1
 810a856:	bf01      	itttt	eq
 810a858:	6819      	ldreq	r1, [r3, #0]
 810a85a:	685b      	ldreq	r3, [r3, #4]
 810a85c:	1949      	addeq	r1, r1, r5
 810a85e:	6021      	streq	r1, [r4, #0]
 810a860:	e7ed      	b.n	810a83e <_free_r+0x22>
 810a862:	461a      	mov	r2, r3
 810a864:	685b      	ldr	r3, [r3, #4]
 810a866:	b10b      	cbz	r3, 810a86c <_free_r+0x50>
 810a868:	42a3      	cmp	r3, r4
 810a86a:	d9fa      	bls.n	810a862 <_free_r+0x46>
 810a86c:	6811      	ldr	r1, [r2, #0]
 810a86e:	1855      	adds	r5, r2, r1
 810a870:	42a5      	cmp	r5, r4
 810a872:	d10b      	bne.n	810a88c <_free_r+0x70>
 810a874:	6824      	ldr	r4, [r4, #0]
 810a876:	4421      	add	r1, r4
 810a878:	1854      	adds	r4, r2, r1
 810a87a:	42a3      	cmp	r3, r4
 810a87c:	6011      	str	r1, [r2, #0]
 810a87e:	d1e0      	bne.n	810a842 <_free_r+0x26>
 810a880:	681c      	ldr	r4, [r3, #0]
 810a882:	685b      	ldr	r3, [r3, #4]
 810a884:	6053      	str	r3, [r2, #4]
 810a886:	4421      	add	r1, r4
 810a888:	6011      	str	r1, [r2, #0]
 810a88a:	e7da      	b.n	810a842 <_free_r+0x26>
 810a88c:	d902      	bls.n	810a894 <_free_r+0x78>
 810a88e:	230c      	movs	r3, #12
 810a890:	6003      	str	r3, [r0, #0]
 810a892:	e7d6      	b.n	810a842 <_free_r+0x26>
 810a894:	6825      	ldr	r5, [r4, #0]
 810a896:	1961      	adds	r1, r4, r5
 810a898:	428b      	cmp	r3, r1
 810a89a:	bf04      	itt	eq
 810a89c:	6819      	ldreq	r1, [r3, #0]
 810a89e:	685b      	ldreq	r3, [r3, #4]
 810a8a0:	6063      	str	r3, [r4, #4]
 810a8a2:	bf04      	itt	eq
 810a8a4:	1949      	addeq	r1, r1, r5
 810a8a6:	6021      	streq	r1, [r4, #0]
 810a8a8:	6054      	str	r4, [r2, #4]
 810a8aa:	e7ca      	b.n	810a842 <_free_r+0x26>
 810a8ac:	b003      	add	sp, #12
 810a8ae:	bd30      	pop	{r4, r5, pc}
 810a8b0:	100003f4 	.word	0x100003f4

0810a8b4 <sbrk_aligned>:
 810a8b4:	b570      	push	{r4, r5, r6, lr}
 810a8b6:	4e0e      	ldr	r6, [pc, #56]	; (810a8f0 <sbrk_aligned+0x3c>)
 810a8b8:	460c      	mov	r4, r1
 810a8ba:	6831      	ldr	r1, [r6, #0]
 810a8bc:	4605      	mov	r5, r0
 810a8be:	b911      	cbnz	r1, 810a8c6 <sbrk_aligned+0x12>
 810a8c0:	f000 fb4a 	bl	810af58 <_sbrk_r>
 810a8c4:	6030      	str	r0, [r6, #0]
 810a8c6:	4621      	mov	r1, r4
 810a8c8:	4628      	mov	r0, r5
 810a8ca:	f000 fb45 	bl	810af58 <_sbrk_r>
 810a8ce:	1c43      	adds	r3, r0, #1
 810a8d0:	d00a      	beq.n	810a8e8 <sbrk_aligned+0x34>
 810a8d2:	1cc4      	adds	r4, r0, #3
 810a8d4:	f024 0403 	bic.w	r4, r4, #3
 810a8d8:	42a0      	cmp	r0, r4
 810a8da:	d007      	beq.n	810a8ec <sbrk_aligned+0x38>
 810a8dc:	1a21      	subs	r1, r4, r0
 810a8de:	4628      	mov	r0, r5
 810a8e0:	f000 fb3a 	bl	810af58 <_sbrk_r>
 810a8e4:	3001      	adds	r0, #1
 810a8e6:	d101      	bne.n	810a8ec <sbrk_aligned+0x38>
 810a8e8:	f04f 34ff 	mov.w	r4, #4294967295
 810a8ec:	4620      	mov	r0, r4
 810a8ee:	bd70      	pop	{r4, r5, r6, pc}
 810a8f0:	100003f8 	.word	0x100003f8

0810a8f4 <_malloc_r>:
 810a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a8f8:	1ccd      	adds	r5, r1, #3
 810a8fa:	f025 0503 	bic.w	r5, r5, #3
 810a8fe:	3508      	adds	r5, #8
 810a900:	2d0c      	cmp	r5, #12
 810a902:	bf38      	it	cc
 810a904:	250c      	movcc	r5, #12
 810a906:	2d00      	cmp	r5, #0
 810a908:	4607      	mov	r7, r0
 810a90a:	db01      	blt.n	810a910 <_malloc_r+0x1c>
 810a90c:	42a9      	cmp	r1, r5
 810a90e:	d905      	bls.n	810a91c <_malloc_r+0x28>
 810a910:	230c      	movs	r3, #12
 810a912:	603b      	str	r3, [r7, #0]
 810a914:	2600      	movs	r6, #0
 810a916:	4630      	mov	r0, r6
 810a918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a91c:	4e2e      	ldr	r6, [pc, #184]	; (810a9d8 <_malloc_r+0xe4>)
 810a91e:	f000 fdf7 	bl	810b510 <__malloc_lock>
 810a922:	6833      	ldr	r3, [r6, #0]
 810a924:	461c      	mov	r4, r3
 810a926:	bb34      	cbnz	r4, 810a976 <_malloc_r+0x82>
 810a928:	4629      	mov	r1, r5
 810a92a:	4638      	mov	r0, r7
 810a92c:	f7ff ffc2 	bl	810a8b4 <sbrk_aligned>
 810a930:	1c43      	adds	r3, r0, #1
 810a932:	4604      	mov	r4, r0
 810a934:	d14d      	bne.n	810a9d2 <_malloc_r+0xde>
 810a936:	6834      	ldr	r4, [r6, #0]
 810a938:	4626      	mov	r6, r4
 810a93a:	2e00      	cmp	r6, #0
 810a93c:	d140      	bne.n	810a9c0 <_malloc_r+0xcc>
 810a93e:	6823      	ldr	r3, [r4, #0]
 810a940:	4631      	mov	r1, r6
 810a942:	4638      	mov	r0, r7
 810a944:	eb04 0803 	add.w	r8, r4, r3
 810a948:	f000 fb06 	bl	810af58 <_sbrk_r>
 810a94c:	4580      	cmp	r8, r0
 810a94e:	d13a      	bne.n	810a9c6 <_malloc_r+0xd2>
 810a950:	6821      	ldr	r1, [r4, #0]
 810a952:	3503      	adds	r5, #3
 810a954:	1a6d      	subs	r5, r5, r1
 810a956:	f025 0503 	bic.w	r5, r5, #3
 810a95a:	3508      	adds	r5, #8
 810a95c:	2d0c      	cmp	r5, #12
 810a95e:	bf38      	it	cc
 810a960:	250c      	movcc	r5, #12
 810a962:	4629      	mov	r1, r5
 810a964:	4638      	mov	r0, r7
 810a966:	f7ff ffa5 	bl	810a8b4 <sbrk_aligned>
 810a96a:	3001      	adds	r0, #1
 810a96c:	d02b      	beq.n	810a9c6 <_malloc_r+0xd2>
 810a96e:	6823      	ldr	r3, [r4, #0]
 810a970:	442b      	add	r3, r5
 810a972:	6023      	str	r3, [r4, #0]
 810a974:	e00e      	b.n	810a994 <_malloc_r+0xa0>
 810a976:	6822      	ldr	r2, [r4, #0]
 810a978:	1b52      	subs	r2, r2, r5
 810a97a:	d41e      	bmi.n	810a9ba <_malloc_r+0xc6>
 810a97c:	2a0b      	cmp	r2, #11
 810a97e:	d916      	bls.n	810a9ae <_malloc_r+0xba>
 810a980:	1961      	adds	r1, r4, r5
 810a982:	42a3      	cmp	r3, r4
 810a984:	6025      	str	r5, [r4, #0]
 810a986:	bf18      	it	ne
 810a988:	6059      	strne	r1, [r3, #4]
 810a98a:	6863      	ldr	r3, [r4, #4]
 810a98c:	bf08      	it	eq
 810a98e:	6031      	streq	r1, [r6, #0]
 810a990:	5162      	str	r2, [r4, r5]
 810a992:	604b      	str	r3, [r1, #4]
 810a994:	4638      	mov	r0, r7
 810a996:	f104 060b 	add.w	r6, r4, #11
 810a99a:	f000 fdbf 	bl	810b51c <__malloc_unlock>
 810a99e:	f026 0607 	bic.w	r6, r6, #7
 810a9a2:	1d23      	adds	r3, r4, #4
 810a9a4:	1af2      	subs	r2, r6, r3
 810a9a6:	d0b6      	beq.n	810a916 <_malloc_r+0x22>
 810a9a8:	1b9b      	subs	r3, r3, r6
 810a9aa:	50a3      	str	r3, [r4, r2]
 810a9ac:	e7b3      	b.n	810a916 <_malloc_r+0x22>
 810a9ae:	6862      	ldr	r2, [r4, #4]
 810a9b0:	42a3      	cmp	r3, r4
 810a9b2:	bf0c      	ite	eq
 810a9b4:	6032      	streq	r2, [r6, #0]
 810a9b6:	605a      	strne	r2, [r3, #4]
 810a9b8:	e7ec      	b.n	810a994 <_malloc_r+0xa0>
 810a9ba:	4623      	mov	r3, r4
 810a9bc:	6864      	ldr	r4, [r4, #4]
 810a9be:	e7b2      	b.n	810a926 <_malloc_r+0x32>
 810a9c0:	4634      	mov	r4, r6
 810a9c2:	6876      	ldr	r6, [r6, #4]
 810a9c4:	e7b9      	b.n	810a93a <_malloc_r+0x46>
 810a9c6:	230c      	movs	r3, #12
 810a9c8:	603b      	str	r3, [r7, #0]
 810a9ca:	4638      	mov	r0, r7
 810a9cc:	f000 fda6 	bl	810b51c <__malloc_unlock>
 810a9d0:	e7a1      	b.n	810a916 <_malloc_r+0x22>
 810a9d2:	6025      	str	r5, [r4, #0]
 810a9d4:	e7de      	b.n	810a994 <_malloc_r+0xa0>
 810a9d6:	bf00      	nop
 810a9d8:	100003f4 	.word	0x100003f4

0810a9dc <__ssputs_r>:
 810a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a9e0:	688e      	ldr	r6, [r1, #8]
 810a9e2:	429e      	cmp	r6, r3
 810a9e4:	4682      	mov	sl, r0
 810a9e6:	460c      	mov	r4, r1
 810a9e8:	4690      	mov	r8, r2
 810a9ea:	461f      	mov	r7, r3
 810a9ec:	d838      	bhi.n	810aa60 <__ssputs_r+0x84>
 810a9ee:	898a      	ldrh	r2, [r1, #12]
 810a9f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a9f4:	d032      	beq.n	810aa5c <__ssputs_r+0x80>
 810a9f6:	6825      	ldr	r5, [r4, #0]
 810a9f8:	6909      	ldr	r1, [r1, #16]
 810a9fa:	eba5 0901 	sub.w	r9, r5, r1
 810a9fe:	6965      	ldr	r5, [r4, #20]
 810aa00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810aa04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810aa08:	3301      	adds	r3, #1
 810aa0a:	444b      	add	r3, r9
 810aa0c:	106d      	asrs	r5, r5, #1
 810aa0e:	429d      	cmp	r5, r3
 810aa10:	bf38      	it	cc
 810aa12:	461d      	movcc	r5, r3
 810aa14:	0553      	lsls	r3, r2, #21
 810aa16:	d531      	bpl.n	810aa7c <__ssputs_r+0xa0>
 810aa18:	4629      	mov	r1, r5
 810aa1a:	f7ff ff6b 	bl	810a8f4 <_malloc_r>
 810aa1e:	4606      	mov	r6, r0
 810aa20:	b950      	cbnz	r0, 810aa38 <__ssputs_r+0x5c>
 810aa22:	230c      	movs	r3, #12
 810aa24:	f8ca 3000 	str.w	r3, [sl]
 810aa28:	89a3      	ldrh	r3, [r4, #12]
 810aa2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810aa2e:	81a3      	strh	r3, [r4, #12]
 810aa30:	f04f 30ff 	mov.w	r0, #4294967295
 810aa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aa38:	6921      	ldr	r1, [r4, #16]
 810aa3a:	464a      	mov	r2, r9
 810aa3c:	f7ff fa08 	bl	8109e50 <memcpy>
 810aa40:	89a3      	ldrh	r3, [r4, #12]
 810aa42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810aa46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810aa4a:	81a3      	strh	r3, [r4, #12]
 810aa4c:	6126      	str	r6, [r4, #16]
 810aa4e:	6165      	str	r5, [r4, #20]
 810aa50:	444e      	add	r6, r9
 810aa52:	eba5 0509 	sub.w	r5, r5, r9
 810aa56:	6026      	str	r6, [r4, #0]
 810aa58:	60a5      	str	r5, [r4, #8]
 810aa5a:	463e      	mov	r6, r7
 810aa5c:	42be      	cmp	r6, r7
 810aa5e:	d900      	bls.n	810aa62 <__ssputs_r+0x86>
 810aa60:	463e      	mov	r6, r7
 810aa62:	6820      	ldr	r0, [r4, #0]
 810aa64:	4632      	mov	r2, r6
 810aa66:	4641      	mov	r1, r8
 810aa68:	f000 fd38 	bl	810b4dc <memmove>
 810aa6c:	68a3      	ldr	r3, [r4, #8]
 810aa6e:	1b9b      	subs	r3, r3, r6
 810aa70:	60a3      	str	r3, [r4, #8]
 810aa72:	6823      	ldr	r3, [r4, #0]
 810aa74:	4433      	add	r3, r6
 810aa76:	6023      	str	r3, [r4, #0]
 810aa78:	2000      	movs	r0, #0
 810aa7a:	e7db      	b.n	810aa34 <__ssputs_r+0x58>
 810aa7c:	462a      	mov	r2, r5
 810aa7e:	f000 fd53 	bl	810b528 <_realloc_r>
 810aa82:	4606      	mov	r6, r0
 810aa84:	2800      	cmp	r0, #0
 810aa86:	d1e1      	bne.n	810aa4c <__ssputs_r+0x70>
 810aa88:	6921      	ldr	r1, [r4, #16]
 810aa8a:	4650      	mov	r0, sl
 810aa8c:	f7ff fec6 	bl	810a81c <_free_r>
 810aa90:	e7c7      	b.n	810aa22 <__ssputs_r+0x46>
	...

0810aa94 <_svfiprintf_r>:
 810aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa98:	4698      	mov	r8, r3
 810aa9a:	898b      	ldrh	r3, [r1, #12]
 810aa9c:	061b      	lsls	r3, r3, #24
 810aa9e:	b09d      	sub	sp, #116	; 0x74
 810aaa0:	4607      	mov	r7, r0
 810aaa2:	460d      	mov	r5, r1
 810aaa4:	4614      	mov	r4, r2
 810aaa6:	d50e      	bpl.n	810aac6 <_svfiprintf_r+0x32>
 810aaa8:	690b      	ldr	r3, [r1, #16]
 810aaaa:	b963      	cbnz	r3, 810aac6 <_svfiprintf_r+0x32>
 810aaac:	2140      	movs	r1, #64	; 0x40
 810aaae:	f7ff ff21 	bl	810a8f4 <_malloc_r>
 810aab2:	6028      	str	r0, [r5, #0]
 810aab4:	6128      	str	r0, [r5, #16]
 810aab6:	b920      	cbnz	r0, 810aac2 <_svfiprintf_r+0x2e>
 810aab8:	230c      	movs	r3, #12
 810aaba:	603b      	str	r3, [r7, #0]
 810aabc:	f04f 30ff 	mov.w	r0, #4294967295
 810aac0:	e0d1      	b.n	810ac66 <_svfiprintf_r+0x1d2>
 810aac2:	2340      	movs	r3, #64	; 0x40
 810aac4:	616b      	str	r3, [r5, #20]
 810aac6:	2300      	movs	r3, #0
 810aac8:	9309      	str	r3, [sp, #36]	; 0x24
 810aaca:	2320      	movs	r3, #32
 810aacc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810aad0:	f8cd 800c 	str.w	r8, [sp, #12]
 810aad4:	2330      	movs	r3, #48	; 0x30
 810aad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810ac80 <_svfiprintf_r+0x1ec>
 810aada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810aade:	f04f 0901 	mov.w	r9, #1
 810aae2:	4623      	mov	r3, r4
 810aae4:	469a      	mov	sl, r3
 810aae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 810aaea:	b10a      	cbz	r2, 810aaf0 <_svfiprintf_r+0x5c>
 810aaec:	2a25      	cmp	r2, #37	; 0x25
 810aaee:	d1f9      	bne.n	810aae4 <_svfiprintf_r+0x50>
 810aaf0:	ebba 0b04 	subs.w	fp, sl, r4
 810aaf4:	d00b      	beq.n	810ab0e <_svfiprintf_r+0x7a>
 810aaf6:	465b      	mov	r3, fp
 810aaf8:	4622      	mov	r2, r4
 810aafa:	4629      	mov	r1, r5
 810aafc:	4638      	mov	r0, r7
 810aafe:	f7ff ff6d 	bl	810a9dc <__ssputs_r>
 810ab02:	3001      	adds	r0, #1
 810ab04:	f000 80aa 	beq.w	810ac5c <_svfiprintf_r+0x1c8>
 810ab08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ab0a:	445a      	add	r2, fp
 810ab0c:	9209      	str	r2, [sp, #36]	; 0x24
 810ab0e:	f89a 3000 	ldrb.w	r3, [sl]
 810ab12:	2b00      	cmp	r3, #0
 810ab14:	f000 80a2 	beq.w	810ac5c <_svfiprintf_r+0x1c8>
 810ab18:	2300      	movs	r3, #0
 810ab1a:	f04f 32ff 	mov.w	r2, #4294967295
 810ab1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ab22:	f10a 0a01 	add.w	sl, sl, #1
 810ab26:	9304      	str	r3, [sp, #16]
 810ab28:	9307      	str	r3, [sp, #28]
 810ab2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ab2e:	931a      	str	r3, [sp, #104]	; 0x68
 810ab30:	4654      	mov	r4, sl
 810ab32:	2205      	movs	r2, #5
 810ab34:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ab38:	4851      	ldr	r0, [pc, #324]	; (810ac80 <_svfiprintf_r+0x1ec>)
 810ab3a:	f7f5 fbd9 	bl	81002f0 <memchr>
 810ab3e:	9a04      	ldr	r2, [sp, #16]
 810ab40:	b9d8      	cbnz	r0, 810ab7a <_svfiprintf_r+0xe6>
 810ab42:	06d0      	lsls	r0, r2, #27
 810ab44:	bf44      	itt	mi
 810ab46:	2320      	movmi	r3, #32
 810ab48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ab4c:	0711      	lsls	r1, r2, #28
 810ab4e:	bf44      	itt	mi
 810ab50:	232b      	movmi	r3, #43	; 0x2b
 810ab52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ab56:	f89a 3000 	ldrb.w	r3, [sl]
 810ab5a:	2b2a      	cmp	r3, #42	; 0x2a
 810ab5c:	d015      	beq.n	810ab8a <_svfiprintf_r+0xf6>
 810ab5e:	9a07      	ldr	r2, [sp, #28]
 810ab60:	4654      	mov	r4, sl
 810ab62:	2000      	movs	r0, #0
 810ab64:	f04f 0c0a 	mov.w	ip, #10
 810ab68:	4621      	mov	r1, r4
 810ab6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ab6e:	3b30      	subs	r3, #48	; 0x30
 810ab70:	2b09      	cmp	r3, #9
 810ab72:	d94e      	bls.n	810ac12 <_svfiprintf_r+0x17e>
 810ab74:	b1b0      	cbz	r0, 810aba4 <_svfiprintf_r+0x110>
 810ab76:	9207      	str	r2, [sp, #28]
 810ab78:	e014      	b.n	810aba4 <_svfiprintf_r+0x110>
 810ab7a:	eba0 0308 	sub.w	r3, r0, r8
 810ab7e:	fa09 f303 	lsl.w	r3, r9, r3
 810ab82:	4313      	orrs	r3, r2
 810ab84:	9304      	str	r3, [sp, #16]
 810ab86:	46a2      	mov	sl, r4
 810ab88:	e7d2      	b.n	810ab30 <_svfiprintf_r+0x9c>
 810ab8a:	9b03      	ldr	r3, [sp, #12]
 810ab8c:	1d19      	adds	r1, r3, #4
 810ab8e:	681b      	ldr	r3, [r3, #0]
 810ab90:	9103      	str	r1, [sp, #12]
 810ab92:	2b00      	cmp	r3, #0
 810ab94:	bfbb      	ittet	lt
 810ab96:	425b      	neglt	r3, r3
 810ab98:	f042 0202 	orrlt.w	r2, r2, #2
 810ab9c:	9307      	strge	r3, [sp, #28]
 810ab9e:	9307      	strlt	r3, [sp, #28]
 810aba0:	bfb8      	it	lt
 810aba2:	9204      	strlt	r2, [sp, #16]
 810aba4:	7823      	ldrb	r3, [r4, #0]
 810aba6:	2b2e      	cmp	r3, #46	; 0x2e
 810aba8:	d10c      	bne.n	810abc4 <_svfiprintf_r+0x130>
 810abaa:	7863      	ldrb	r3, [r4, #1]
 810abac:	2b2a      	cmp	r3, #42	; 0x2a
 810abae:	d135      	bne.n	810ac1c <_svfiprintf_r+0x188>
 810abb0:	9b03      	ldr	r3, [sp, #12]
 810abb2:	1d1a      	adds	r2, r3, #4
 810abb4:	681b      	ldr	r3, [r3, #0]
 810abb6:	9203      	str	r2, [sp, #12]
 810abb8:	2b00      	cmp	r3, #0
 810abba:	bfb8      	it	lt
 810abbc:	f04f 33ff 	movlt.w	r3, #4294967295
 810abc0:	3402      	adds	r4, #2
 810abc2:	9305      	str	r3, [sp, #20]
 810abc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810ac90 <_svfiprintf_r+0x1fc>
 810abc8:	7821      	ldrb	r1, [r4, #0]
 810abca:	2203      	movs	r2, #3
 810abcc:	4650      	mov	r0, sl
 810abce:	f7f5 fb8f 	bl	81002f0 <memchr>
 810abd2:	b140      	cbz	r0, 810abe6 <_svfiprintf_r+0x152>
 810abd4:	2340      	movs	r3, #64	; 0x40
 810abd6:	eba0 000a 	sub.w	r0, r0, sl
 810abda:	fa03 f000 	lsl.w	r0, r3, r0
 810abde:	9b04      	ldr	r3, [sp, #16]
 810abe0:	4303      	orrs	r3, r0
 810abe2:	3401      	adds	r4, #1
 810abe4:	9304      	str	r3, [sp, #16]
 810abe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810abea:	4826      	ldr	r0, [pc, #152]	; (810ac84 <_svfiprintf_r+0x1f0>)
 810abec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810abf0:	2206      	movs	r2, #6
 810abf2:	f7f5 fb7d 	bl	81002f0 <memchr>
 810abf6:	2800      	cmp	r0, #0
 810abf8:	d038      	beq.n	810ac6c <_svfiprintf_r+0x1d8>
 810abfa:	4b23      	ldr	r3, [pc, #140]	; (810ac88 <_svfiprintf_r+0x1f4>)
 810abfc:	bb1b      	cbnz	r3, 810ac46 <_svfiprintf_r+0x1b2>
 810abfe:	9b03      	ldr	r3, [sp, #12]
 810ac00:	3307      	adds	r3, #7
 810ac02:	f023 0307 	bic.w	r3, r3, #7
 810ac06:	3308      	adds	r3, #8
 810ac08:	9303      	str	r3, [sp, #12]
 810ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ac0c:	4433      	add	r3, r6
 810ac0e:	9309      	str	r3, [sp, #36]	; 0x24
 810ac10:	e767      	b.n	810aae2 <_svfiprintf_r+0x4e>
 810ac12:	fb0c 3202 	mla	r2, ip, r2, r3
 810ac16:	460c      	mov	r4, r1
 810ac18:	2001      	movs	r0, #1
 810ac1a:	e7a5      	b.n	810ab68 <_svfiprintf_r+0xd4>
 810ac1c:	2300      	movs	r3, #0
 810ac1e:	3401      	adds	r4, #1
 810ac20:	9305      	str	r3, [sp, #20]
 810ac22:	4619      	mov	r1, r3
 810ac24:	f04f 0c0a 	mov.w	ip, #10
 810ac28:	4620      	mov	r0, r4
 810ac2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ac2e:	3a30      	subs	r2, #48	; 0x30
 810ac30:	2a09      	cmp	r2, #9
 810ac32:	d903      	bls.n	810ac3c <_svfiprintf_r+0x1a8>
 810ac34:	2b00      	cmp	r3, #0
 810ac36:	d0c5      	beq.n	810abc4 <_svfiprintf_r+0x130>
 810ac38:	9105      	str	r1, [sp, #20]
 810ac3a:	e7c3      	b.n	810abc4 <_svfiprintf_r+0x130>
 810ac3c:	fb0c 2101 	mla	r1, ip, r1, r2
 810ac40:	4604      	mov	r4, r0
 810ac42:	2301      	movs	r3, #1
 810ac44:	e7f0      	b.n	810ac28 <_svfiprintf_r+0x194>
 810ac46:	ab03      	add	r3, sp, #12
 810ac48:	9300      	str	r3, [sp, #0]
 810ac4a:	462a      	mov	r2, r5
 810ac4c:	4b0f      	ldr	r3, [pc, #60]	; (810ac8c <_svfiprintf_r+0x1f8>)
 810ac4e:	a904      	add	r1, sp, #16
 810ac50:	4638      	mov	r0, r7
 810ac52:	f7fc f937 	bl	8106ec4 <_printf_float>
 810ac56:	1c42      	adds	r2, r0, #1
 810ac58:	4606      	mov	r6, r0
 810ac5a:	d1d6      	bne.n	810ac0a <_svfiprintf_r+0x176>
 810ac5c:	89ab      	ldrh	r3, [r5, #12]
 810ac5e:	065b      	lsls	r3, r3, #25
 810ac60:	f53f af2c 	bmi.w	810aabc <_svfiprintf_r+0x28>
 810ac64:	9809      	ldr	r0, [sp, #36]	; 0x24
 810ac66:	b01d      	add	sp, #116	; 0x74
 810ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ac6c:	ab03      	add	r3, sp, #12
 810ac6e:	9300      	str	r3, [sp, #0]
 810ac70:	462a      	mov	r2, r5
 810ac72:	4b06      	ldr	r3, [pc, #24]	; (810ac8c <_svfiprintf_r+0x1f8>)
 810ac74:	a904      	add	r1, sp, #16
 810ac76:	4638      	mov	r0, r7
 810ac78:	f7fc fbc8 	bl	810740c <_printf_i>
 810ac7c:	e7eb      	b.n	810ac56 <_svfiprintf_r+0x1c2>
 810ac7e:	bf00      	nop
 810ac80:	0810bb54 	.word	0x0810bb54
 810ac84:	0810bb5e 	.word	0x0810bb5e
 810ac88:	08106ec5 	.word	0x08106ec5
 810ac8c:	0810a9dd 	.word	0x0810a9dd
 810ac90:	0810bb5a 	.word	0x0810bb5a

0810ac94 <__sfputc_r>:
 810ac94:	6893      	ldr	r3, [r2, #8]
 810ac96:	3b01      	subs	r3, #1
 810ac98:	2b00      	cmp	r3, #0
 810ac9a:	b410      	push	{r4}
 810ac9c:	6093      	str	r3, [r2, #8]
 810ac9e:	da08      	bge.n	810acb2 <__sfputc_r+0x1e>
 810aca0:	6994      	ldr	r4, [r2, #24]
 810aca2:	42a3      	cmp	r3, r4
 810aca4:	db01      	blt.n	810acaa <__sfputc_r+0x16>
 810aca6:	290a      	cmp	r1, #10
 810aca8:	d103      	bne.n	810acb2 <__sfputc_r+0x1e>
 810acaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 810acae:	f000 b9bb 	b.w	810b028 <__swbuf_r>
 810acb2:	6813      	ldr	r3, [r2, #0]
 810acb4:	1c58      	adds	r0, r3, #1
 810acb6:	6010      	str	r0, [r2, #0]
 810acb8:	7019      	strb	r1, [r3, #0]
 810acba:	4608      	mov	r0, r1
 810acbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 810acc0:	4770      	bx	lr

0810acc2 <__sfputs_r>:
 810acc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810acc4:	4606      	mov	r6, r0
 810acc6:	460f      	mov	r7, r1
 810acc8:	4614      	mov	r4, r2
 810acca:	18d5      	adds	r5, r2, r3
 810accc:	42ac      	cmp	r4, r5
 810acce:	d101      	bne.n	810acd4 <__sfputs_r+0x12>
 810acd0:	2000      	movs	r0, #0
 810acd2:	e007      	b.n	810ace4 <__sfputs_r+0x22>
 810acd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810acd8:	463a      	mov	r2, r7
 810acda:	4630      	mov	r0, r6
 810acdc:	f7ff ffda 	bl	810ac94 <__sfputc_r>
 810ace0:	1c43      	adds	r3, r0, #1
 810ace2:	d1f3      	bne.n	810accc <__sfputs_r+0xa>
 810ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810ace8 <_vfiprintf_r>:
 810ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810acec:	460d      	mov	r5, r1
 810acee:	b09d      	sub	sp, #116	; 0x74
 810acf0:	4614      	mov	r4, r2
 810acf2:	4698      	mov	r8, r3
 810acf4:	4606      	mov	r6, r0
 810acf6:	b118      	cbz	r0, 810ad00 <_vfiprintf_r+0x18>
 810acf8:	6983      	ldr	r3, [r0, #24]
 810acfa:	b90b      	cbnz	r3, 810ad00 <_vfiprintf_r+0x18>
 810acfc:	f7fe fc7a 	bl	81095f4 <__sinit>
 810ad00:	4b89      	ldr	r3, [pc, #548]	; (810af28 <_vfiprintf_r+0x240>)
 810ad02:	429d      	cmp	r5, r3
 810ad04:	d11b      	bne.n	810ad3e <_vfiprintf_r+0x56>
 810ad06:	6875      	ldr	r5, [r6, #4]
 810ad08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810ad0a:	07d9      	lsls	r1, r3, #31
 810ad0c:	d405      	bmi.n	810ad1a <_vfiprintf_r+0x32>
 810ad0e:	89ab      	ldrh	r3, [r5, #12]
 810ad10:	059a      	lsls	r2, r3, #22
 810ad12:	d402      	bmi.n	810ad1a <_vfiprintf_r+0x32>
 810ad14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810ad16:	f7ff f87e 	bl	8109e16 <__retarget_lock_acquire_recursive>
 810ad1a:	89ab      	ldrh	r3, [r5, #12]
 810ad1c:	071b      	lsls	r3, r3, #28
 810ad1e:	d501      	bpl.n	810ad24 <_vfiprintf_r+0x3c>
 810ad20:	692b      	ldr	r3, [r5, #16]
 810ad22:	b9eb      	cbnz	r3, 810ad60 <_vfiprintf_r+0x78>
 810ad24:	4629      	mov	r1, r5
 810ad26:	4630      	mov	r0, r6
 810ad28:	f000 f9f0 	bl	810b10c <__swsetup_r>
 810ad2c:	b1c0      	cbz	r0, 810ad60 <_vfiprintf_r+0x78>
 810ad2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810ad30:	07dc      	lsls	r4, r3, #31
 810ad32:	d50e      	bpl.n	810ad52 <_vfiprintf_r+0x6a>
 810ad34:	f04f 30ff 	mov.w	r0, #4294967295
 810ad38:	b01d      	add	sp, #116	; 0x74
 810ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ad3e:	4b7b      	ldr	r3, [pc, #492]	; (810af2c <_vfiprintf_r+0x244>)
 810ad40:	429d      	cmp	r5, r3
 810ad42:	d101      	bne.n	810ad48 <_vfiprintf_r+0x60>
 810ad44:	68b5      	ldr	r5, [r6, #8]
 810ad46:	e7df      	b.n	810ad08 <_vfiprintf_r+0x20>
 810ad48:	4b79      	ldr	r3, [pc, #484]	; (810af30 <_vfiprintf_r+0x248>)
 810ad4a:	429d      	cmp	r5, r3
 810ad4c:	bf08      	it	eq
 810ad4e:	68f5      	ldreq	r5, [r6, #12]
 810ad50:	e7da      	b.n	810ad08 <_vfiprintf_r+0x20>
 810ad52:	89ab      	ldrh	r3, [r5, #12]
 810ad54:	0598      	lsls	r0, r3, #22
 810ad56:	d4ed      	bmi.n	810ad34 <_vfiprintf_r+0x4c>
 810ad58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810ad5a:	f7ff f85d 	bl	8109e18 <__retarget_lock_release_recursive>
 810ad5e:	e7e9      	b.n	810ad34 <_vfiprintf_r+0x4c>
 810ad60:	2300      	movs	r3, #0
 810ad62:	9309      	str	r3, [sp, #36]	; 0x24
 810ad64:	2320      	movs	r3, #32
 810ad66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810ad6a:	f8cd 800c 	str.w	r8, [sp, #12]
 810ad6e:	2330      	movs	r3, #48	; 0x30
 810ad70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810af34 <_vfiprintf_r+0x24c>
 810ad74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ad78:	f04f 0901 	mov.w	r9, #1
 810ad7c:	4623      	mov	r3, r4
 810ad7e:	469a      	mov	sl, r3
 810ad80:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ad84:	b10a      	cbz	r2, 810ad8a <_vfiprintf_r+0xa2>
 810ad86:	2a25      	cmp	r2, #37	; 0x25
 810ad88:	d1f9      	bne.n	810ad7e <_vfiprintf_r+0x96>
 810ad8a:	ebba 0b04 	subs.w	fp, sl, r4
 810ad8e:	d00b      	beq.n	810ada8 <_vfiprintf_r+0xc0>
 810ad90:	465b      	mov	r3, fp
 810ad92:	4622      	mov	r2, r4
 810ad94:	4629      	mov	r1, r5
 810ad96:	4630      	mov	r0, r6
 810ad98:	f7ff ff93 	bl	810acc2 <__sfputs_r>
 810ad9c:	3001      	adds	r0, #1
 810ad9e:	f000 80aa 	beq.w	810aef6 <_vfiprintf_r+0x20e>
 810ada2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ada4:	445a      	add	r2, fp
 810ada6:	9209      	str	r2, [sp, #36]	; 0x24
 810ada8:	f89a 3000 	ldrb.w	r3, [sl]
 810adac:	2b00      	cmp	r3, #0
 810adae:	f000 80a2 	beq.w	810aef6 <_vfiprintf_r+0x20e>
 810adb2:	2300      	movs	r3, #0
 810adb4:	f04f 32ff 	mov.w	r2, #4294967295
 810adb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810adbc:	f10a 0a01 	add.w	sl, sl, #1
 810adc0:	9304      	str	r3, [sp, #16]
 810adc2:	9307      	str	r3, [sp, #28]
 810adc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810adc8:	931a      	str	r3, [sp, #104]	; 0x68
 810adca:	4654      	mov	r4, sl
 810adcc:	2205      	movs	r2, #5
 810adce:	f814 1b01 	ldrb.w	r1, [r4], #1
 810add2:	4858      	ldr	r0, [pc, #352]	; (810af34 <_vfiprintf_r+0x24c>)
 810add4:	f7f5 fa8c 	bl	81002f0 <memchr>
 810add8:	9a04      	ldr	r2, [sp, #16]
 810adda:	b9d8      	cbnz	r0, 810ae14 <_vfiprintf_r+0x12c>
 810addc:	06d1      	lsls	r1, r2, #27
 810adde:	bf44      	itt	mi
 810ade0:	2320      	movmi	r3, #32
 810ade2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ade6:	0713      	lsls	r3, r2, #28
 810ade8:	bf44      	itt	mi
 810adea:	232b      	movmi	r3, #43	; 0x2b
 810adec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810adf0:	f89a 3000 	ldrb.w	r3, [sl]
 810adf4:	2b2a      	cmp	r3, #42	; 0x2a
 810adf6:	d015      	beq.n	810ae24 <_vfiprintf_r+0x13c>
 810adf8:	9a07      	ldr	r2, [sp, #28]
 810adfa:	4654      	mov	r4, sl
 810adfc:	2000      	movs	r0, #0
 810adfe:	f04f 0c0a 	mov.w	ip, #10
 810ae02:	4621      	mov	r1, r4
 810ae04:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ae08:	3b30      	subs	r3, #48	; 0x30
 810ae0a:	2b09      	cmp	r3, #9
 810ae0c:	d94e      	bls.n	810aeac <_vfiprintf_r+0x1c4>
 810ae0e:	b1b0      	cbz	r0, 810ae3e <_vfiprintf_r+0x156>
 810ae10:	9207      	str	r2, [sp, #28]
 810ae12:	e014      	b.n	810ae3e <_vfiprintf_r+0x156>
 810ae14:	eba0 0308 	sub.w	r3, r0, r8
 810ae18:	fa09 f303 	lsl.w	r3, r9, r3
 810ae1c:	4313      	orrs	r3, r2
 810ae1e:	9304      	str	r3, [sp, #16]
 810ae20:	46a2      	mov	sl, r4
 810ae22:	e7d2      	b.n	810adca <_vfiprintf_r+0xe2>
 810ae24:	9b03      	ldr	r3, [sp, #12]
 810ae26:	1d19      	adds	r1, r3, #4
 810ae28:	681b      	ldr	r3, [r3, #0]
 810ae2a:	9103      	str	r1, [sp, #12]
 810ae2c:	2b00      	cmp	r3, #0
 810ae2e:	bfbb      	ittet	lt
 810ae30:	425b      	neglt	r3, r3
 810ae32:	f042 0202 	orrlt.w	r2, r2, #2
 810ae36:	9307      	strge	r3, [sp, #28]
 810ae38:	9307      	strlt	r3, [sp, #28]
 810ae3a:	bfb8      	it	lt
 810ae3c:	9204      	strlt	r2, [sp, #16]
 810ae3e:	7823      	ldrb	r3, [r4, #0]
 810ae40:	2b2e      	cmp	r3, #46	; 0x2e
 810ae42:	d10c      	bne.n	810ae5e <_vfiprintf_r+0x176>
 810ae44:	7863      	ldrb	r3, [r4, #1]
 810ae46:	2b2a      	cmp	r3, #42	; 0x2a
 810ae48:	d135      	bne.n	810aeb6 <_vfiprintf_r+0x1ce>
 810ae4a:	9b03      	ldr	r3, [sp, #12]
 810ae4c:	1d1a      	adds	r2, r3, #4
 810ae4e:	681b      	ldr	r3, [r3, #0]
 810ae50:	9203      	str	r2, [sp, #12]
 810ae52:	2b00      	cmp	r3, #0
 810ae54:	bfb8      	it	lt
 810ae56:	f04f 33ff 	movlt.w	r3, #4294967295
 810ae5a:	3402      	adds	r4, #2
 810ae5c:	9305      	str	r3, [sp, #20]
 810ae5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810af44 <_vfiprintf_r+0x25c>
 810ae62:	7821      	ldrb	r1, [r4, #0]
 810ae64:	2203      	movs	r2, #3
 810ae66:	4650      	mov	r0, sl
 810ae68:	f7f5 fa42 	bl	81002f0 <memchr>
 810ae6c:	b140      	cbz	r0, 810ae80 <_vfiprintf_r+0x198>
 810ae6e:	2340      	movs	r3, #64	; 0x40
 810ae70:	eba0 000a 	sub.w	r0, r0, sl
 810ae74:	fa03 f000 	lsl.w	r0, r3, r0
 810ae78:	9b04      	ldr	r3, [sp, #16]
 810ae7a:	4303      	orrs	r3, r0
 810ae7c:	3401      	adds	r4, #1
 810ae7e:	9304      	str	r3, [sp, #16]
 810ae80:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ae84:	482c      	ldr	r0, [pc, #176]	; (810af38 <_vfiprintf_r+0x250>)
 810ae86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810ae8a:	2206      	movs	r2, #6
 810ae8c:	f7f5 fa30 	bl	81002f0 <memchr>
 810ae90:	2800      	cmp	r0, #0
 810ae92:	d03f      	beq.n	810af14 <_vfiprintf_r+0x22c>
 810ae94:	4b29      	ldr	r3, [pc, #164]	; (810af3c <_vfiprintf_r+0x254>)
 810ae96:	bb1b      	cbnz	r3, 810aee0 <_vfiprintf_r+0x1f8>
 810ae98:	9b03      	ldr	r3, [sp, #12]
 810ae9a:	3307      	adds	r3, #7
 810ae9c:	f023 0307 	bic.w	r3, r3, #7
 810aea0:	3308      	adds	r3, #8
 810aea2:	9303      	str	r3, [sp, #12]
 810aea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aea6:	443b      	add	r3, r7
 810aea8:	9309      	str	r3, [sp, #36]	; 0x24
 810aeaa:	e767      	b.n	810ad7c <_vfiprintf_r+0x94>
 810aeac:	fb0c 3202 	mla	r2, ip, r2, r3
 810aeb0:	460c      	mov	r4, r1
 810aeb2:	2001      	movs	r0, #1
 810aeb4:	e7a5      	b.n	810ae02 <_vfiprintf_r+0x11a>
 810aeb6:	2300      	movs	r3, #0
 810aeb8:	3401      	adds	r4, #1
 810aeba:	9305      	str	r3, [sp, #20]
 810aebc:	4619      	mov	r1, r3
 810aebe:	f04f 0c0a 	mov.w	ip, #10
 810aec2:	4620      	mov	r0, r4
 810aec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810aec8:	3a30      	subs	r2, #48	; 0x30
 810aeca:	2a09      	cmp	r2, #9
 810aecc:	d903      	bls.n	810aed6 <_vfiprintf_r+0x1ee>
 810aece:	2b00      	cmp	r3, #0
 810aed0:	d0c5      	beq.n	810ae5e <_vfiprintf_r+0x176>
 810aed2:	9105      	str	r1, [sp, #20]
 810aed4:	e7c3      	b.n	810ae5e <_vfiprintf_r+0x176>
 810aed6:	fb0c 2101 	mla	r1, ip, r1, r2
 810aeda:	4604      	mov	r4, r0
 810aedc:	2301      	movs	r3, #1
 810aede:	e7f0      	b.n	810aec2 <_vfiprintf_r+0x1da>
 810aee0:	ab03      	add	r3, sp, #12
 810aee2:	9300      	str	r3, [sp, #0]
 810aee4:	462a      	mov	r2, r5
 810aee6:	4b16      	ldr	r3, [pc, #88]	; (810af40 <_vfiprintf_r+0x258>)
 810aee8:	a904      	add	r1, sp, #16
 810aeea:	4630      	mov	r0, r6
 810aeec:	f7fb ffea 	bl	8106ec4 <_printf_float>
 810aef0:	4607      	mov	r7, r0
 810aef2:	1c78      	adds	r0, r7, #1
 810aef4:	d1d6      	bne.n	810aea4 <_vfiprintf_r+0x1bc>
 810aef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810aef8:	07d9      	lsls	r1, r3, #31
 810aefa:	d405      	bmi.n	810af08 <_vfiprintf_r+0x220>
 810aefc:	89ab      	ldrh	r3, [r5, #12]
 810aefe:	059a      	lsls	r2, r3, #22
 810af00:	d402      	bmi.n	810af08 <_vfiprintf_r+0x220>
 810af02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810af04:	f7fe ff88 	bl	8109e18 <__retarget_lock_release_recursive>
 810af08:	89ab      	ldrh	r3, [r5, #12]
 810af0a:	065b      	lsls	r3, r3, #25
 810af0c:	f53f af12 	bmi.w	810ad34 <_vfiprintf_r+0x4c>
 810af10:	9809      	ldr	r0, [sp, #36]	; 0x24
 810af12:	e711      	b.n	810ad38 <_vfiprintf_r+0x50>
 810af14:	ab03      	add	r3, sp, #12
 810af16:	9300      	str	r3, [sp, #0]
 810af18:	462a      	mov	r2, r5
 810af1a:	4b09      	ldr	r3, [pc, #36]	; (810af40 <_vfiprintf_r+0x258>)
 810af1c:	a904      	add	r1, sp, #16
 810af1e:	4630      	mov	r0, r6
 810af20:	f7fc fa74 	bl	810740c <_printf_i>
 810af24:	e7e4      	b.n	810aef0 <_vfiprintf_r+0x208>
 810af26:	bf00      	nop
 810af28:	0810b93c 	.word	0x0810b93c
 810af2c:	0810b95c 	.word	0x0810b95c
 810af30:	0810b91c 	.word	0x0810b91c
 810af34:	0810bb54 	.word	0x0810bb54
 810af38:	0810bb5e 	.word	0x0810bb5e
 810af3c:	08106ec5 	.word	0x08106ec5
 810af40:	0810acc3 	.word	0x0810acc3
 810af44:	0810bb5a 	.word	0x0810bb5a

0810af48 <nan>:
 810af48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810af50 <nan+0x8>
 810af4c:	4770      	bx	lr
 810af4e:	bf00      	nop
 810af50:	00000000 	.word	0x00000000
 810af54:	7ff80000 	.word	0x7ff80000

0810af58 <_sbrk_r>:
 810af58:	b538      	push	{r3, r4, r5, lr}
 810af5a:	4d06      	ldr	r5, [pc, #24]	; (810af74 <_sbrk_r+0x1c>)
 810af5c:	2300      	movs	r3, #0
 810af5e:	4604      	mov	r4, r0
 810af60:	4608      	mov	r0, r1
 810af62:	602b      	str	r3, [r5, #0]
 810af64:	f7f7 f816 	bl	8101f94 <_sbrk>
 810af68:	1c43      	adds	r3, r0, #1
 810af6a:	d102      	bne.n	810af72 <_sbrk_r+0x1a>
 810af6c:	682b      	ldr	r3, [r5, #0]
 810af6e:	b103      	cbz	r3, 810af72 <_sbrk_r+0x1a>
 810af70:	6023      	str	r3, [r4, #0]
 810af72:	bd38      	pop	{r3, r4, r5, pc}
 810af74:	100003fc 	.word	0x100003fc

0810af78 <__sread>:
 810af78:	b510      	push	{r4, lr}
 810af7a:	460c      	mov	r4, r1
 810af7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810af80:	f000 fb02 	bl	810b588 <_read_r>
 810af84:	2800      	cmp	r0, #0
 810af86:	bfab      	itete	ge
 810af88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810af8a:	89a3      	ldrhlt	r3, [r4, #12]
 810af8c:	181b      	addge	r3, r3, r0
 810af8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810af92:	bfac      	ite	ge
 810af94:	6563      	strge	r3, [r4, #84]	; 0x54
 810af96:	81a3      	strhlt	r3, [r4, #12]
 810af98:	bd10      	pop	{r4, pc}

0810af9a <__swrite>:
 810af9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810af9e:	461f      	mov	r7, r3
 810afa0:	898b      	ldrh	r3, [r1, #12]
 810afa2:	05db      	lsls	r3, r3, #23
 810afa4:	4605      	mov	r5, r0
 810afa6:	460c      	mov	r4, r1
 810afa8:	4616      	mov	r6, r2
 810afaa:	d505      	bpl.n	810afb8 <__swrite+0x1e>
 810afac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810afb0:	2302      	movs	r3, #2
 810afb2:	2200      	movs	r2, #0
 810afb4:	f000 fa1a 	bl	810b3ec <_lseek_r>
 810afb8:	89a3      	ldrh	r3, [r4, #12]
 810afba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810afbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810afc2:	81a3      	strh	r3, [r4, #12]
 810afc4:	4632      	mov	r2, r6
 810afc6:	463b      	mov	r3, r7
 810afc8:	4628      	mov	r0, r5
 810afca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810afce:	f000 b88b 	b.w	810b0e8 <_write_r>

0810afd2 <__sseek>:
 810afd2:	b510      	push	{r4, lr}
 810afd4:	460c      	mov	r4, r1
 810afd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810afda:	f000 fa07 	bl	810b3ec <_lseek_r>
 810afde:	1c43      	adds	r3, r0, #1
 810afe0:	89a3      	ldrh	r3, [r4, #12]
 810afe2:	bf15      	itete	ne
 810afe4:	6560      	strne	r0, [r4, #84]	; 0x54
 810afe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810afea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810afee:	81a3      	strheq	r3, [r4, #12]
 810aff0:	bf18      	it	ne
 810aff2:	81a3      	strhne	r3, [r4, #12]
 810aff4:	bd10      	pop	{r4, pc}

0810aff6 <__sclose>:
 810aff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810affa:	f000 b913 	b.w	810b224 <_close_r>

0810affe <strncmp>:
 810affe:	b510      	push	{r4, lr}
 810b000:	b17a      	cbz	r2, 810b022 <strncmp+0x24>
 810b002:	4603      	mov	r3, r0
 810b004:	3901      	subs	r1, #1
 810b006:	1884      	adds	r4, r0, r2
 810b008:	f813 0b01 	ldrb.w	r0, [r3], #1
 810b00c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b010:	4290      	cmp	r0, r2
 810b012:	d101      	bne.n	810b018 <strncmp+0x1a>
 810b014:	42a3      	cmp	r3, r4
 810b016:	d101      	bne.n	810b01c <strncmp+0x1e>
 810b018:	1a80      	subs	r0, r0, r2
 810b01a:	bd10      	pop	{r4, pc}
 810b01c:	2800      	cmp	r0, #0
 810b01e:	d1f3      	bne.n	810b008 <strncmp+0xa>
 810b020:	e7fa      	b.n	810b018 <strncmp+0x1a>
 810b022:	4610      	mov	r0, r2
 810b024:	e7f9      	b.n	810b01a <strncmp+0x1c>
	...

0810b028 <__swbuf_r>:
 810b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b02a:	460e      	mov	r6, r1
 810b02c:	4614      	mov	r4, r2
 810b02e:	4605      	mov	r5, r0
 810b030:	b118      	cbz	r0, 810b03a <__swbuf_r+0x12>
 810b032:	6983      	ldr	r3, [r0, #24]
 810b034:	b90b      	cbnz	r3, 810b03a <__swbuf_r+0x12>
 810b036:	f7fe fadd 	bl	81095f4 <__sinit>
 810b03a:	4b21      	ldr	r3, [pc, #132]	; (810b0c0 <__swbuf_r+0x98>)
 810b03c:	429c      	cmp	r4, r3
 810b03e:	d12b      	bne.n	810b098 <__swbuf_r+0x70>
 810b040:	686c      	ldr	r4, [r5, #4]
 810b042:	69a3      	ldr	r3, [r4, #24]
 810b044:	60a3      	str	r3, [r4, #8]
 810b046:	89a3      	ldrh	r3, [r4, #12]
 810b048:	071a      	lsls	r2, r3, #28
 810b04a:	d52f      	bpl.n	810b0ac <__swbuf_r+0x84>
 810b04c:	6923      	ldr	r3, [r4, #16]
 810b04e:	b36b      	cbz	r3, 810b0ac <__swbuf_r+0x84>
 810b050:	6923      	ldr	r3, [r4, #16]
 810b052:	6820      	ldr	r0, [r4, #0]
 810b054:	1ac0      	subs	r0, r0, r3
 810b056:	6963      	ldr	r3, [r4, #20]
 810b058:	b2f6      	uxtb	r6, r6
 810b05a:	4283      	cmp	r3, r0
 810b05c:	4637      	mov	r7, r6
 810b05e:	dc04      	bgt.n	810b06a <__swbuf_r+0x42>
 810b060:	4621      	mov	r1, r4
 810b062:	4628      	mov	r0, r5
 810b064:	f000 f974 	bl	810b350 <_fflush_r>
 810b068:	bb30      	cbnz	r0, 810b0b8 <__swbuf_r+0x90>
 810b06a:	68a3      	ldr	r3, [r4, #8]
 810b06c:	3b01      	subs	r3, #1
 810b06e:	60a3      	str	r3, [r4, #8]
 810b070:	6823      	ldr	r3, [r4, #0]
 810b072:	1c5a      	adds	r2, r3, #1
 810b074:	6022      	str	r2, [r4, #0]
 810b076:	701e      	strb	r6, [r3, #0]
 810b078:	6963      	ldr	r3, [r4, #20]
 810b07a:	3001      	adds	r0, #1
 810b07c:	4283      	cmp	r3, r0
 810b07e:	d004      	beq.n	810b08a <__swbuf_r+0x62>
 810b080:	89a3      	ldrh	r3, [r4, #12]
 810b082:	07db      	lsls	r3, r3, #31
 810b084:	d506      	bpl.n	810b094 <__swbuf_r+0x6c>
 810b086:	2e0a      	cmp	r6, #10
 810b088:	d104      	bne.n	810b094 <__swbuf_r+0x6c>
 810b08a:	4621      	mov	r1, r4
 810b08c:	4628      	mov	r0, r5
 810b08e:	f000 f95f 	bl	810b350 <_fflush_r>
 810b092:	b988      	cbnz	r0, 810b0b8 <__swbuf_r+0x90>
 810b094:	4638      	mov	r0, r7
 810b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b098:	4b0a      	ldr	r3, [pc, #40]	; (810b0c4 <__swbuf_r+0x9c>)
 810b09a:	429c      	cmp	r4, r3
 810b09c:	d101      	bne.n	810b0a2 <__swbuf_r+0x7a>
 810b09e:	68ac      	ldr	r4, [r5, #8]
 810b0a0:	e7cf      	b.n	810b042 <__swbuf_r+0x1a>
 810b0a2:	4b09      	ldr	r3, [pc, #36]	; (810b0c8 <__swbuf_r+0xa0>)
 810b0a4:	429c      	cmp	r4, r3
 810b0a6:	bf08      	it	eq
 810b0a8:	68ec      	ldreq	r4, [r5, #12]
 810b0aa:	e7ca      	b.n	810b042 <__swbuf_r+0x1a>
 810b0ac:	4621      	mov	r1, r4
 810b0ae:	4628      	mov	r0, r5
 810b0b0:	f000 f82c 	bl	810b10c <__swsetup_r>
 810b0b4:	2800      	cmp	r0, #0
 810b0b6:	d0cb      	beq.n	810b050 <__swbuf_r+0x28>
 810b0b8:	f04f 37ff 	mov.w	r7, #4294967295
 810b0bc:	e7ea      	b.n	810b094 <__swbuf_r+0x6c>
 810b0be:	bf00      	nop
 810b0c0:	0810b93c 	.word	0x0810b93c
 810b0c4:	0810b95c 	.word	0x0810b95c
 810b0c8:	0810b91c 	.word	0x0810b91c

0810b0cc <__ascii_wctomb>:
 810b0cc:	b149      	cbz	r1, 810b0e2 <__ascii_wctomb+0x16>
 810b0ce:	2aff      	cmp	r2, #255	; 0xff
 810b0d0:	bf85      	ittet	hi
 810b0d2:	238a      	movhi	r3, #138	; 0x8a
 810b0d4:	6003      	strhi	r3, [r0, #0]
 810b0d6:	700a      	strbls	r2, [r1, #0]
 810b0d8:	f04f 30ff 	movhi.w	r0, #4294967295
 810b0dc:	bf98      	it	ls
 810b0de:	2001      	movls	r0, #1
 810b0e0:	4770      	bx	lr
 810b0e2:	4608      	mov	r0, r1
 810b0e4:	4770      	bx	lr
	...

0810b0e8 <_write_r>:
 810b0e8:	b538      	push	{r3, r4, r5, lr}
 810b0ea:	4d07      	ldr	r5, [pc, #28]	; (810b108 <_write_r+0x20>)
 810b0ec:	4604      	mov	r4, r0
 810b0ee:	4608      	mov	r0, r1
 810b0f0:	4611      	mov	r1, r2
 810b0f2:	2200      	movs	r2, #0
 810b0f4:	602a      	str	r2, [r5, #0]
 810b0f6:	461a      	mov	r2, r3
 810b0f8:	f7f6 fefb 	bl	8101ef2 <_write>
 810b0fc:	1c43      	adds	r3, r0, #1
 810b0fe:	d102      	bne.n	810b106 <_write_r+0x1e>
 810b100:	682b      	ldr	r3, [r5, #0]
 810b102:	b103      	cbz	r3, 810b106 <_write_r+0x1e>
 810b104:	6023      	str	r3, [r4, #0]
 810b106:	bd38      	pop	{r3, r4, r5, pc}
 810b108:	100003fc 	.word	0x100003fc

0810b10c <__swsetup_r>:
 810b10c:	4b32      	ldr	r3, [pc, #200]	; (810b1d8 <__swsetup_r+0xcc>)
 810b10e:	b570      	push	{r4, r5, r6, lr}
 810b110:	681d      	ldr	r5, [r3, #0]
 810b112:	4606      	mov	r6, r0
 810b114:	460c      	mov	r4, r1
 810b116:	b125      	cbz	r5, 810b122 <__swsetup_r+0x16>
 810b118:	69ab      	ldr	r3, [r5, #24]
 810b11a:	b913      	cbnz	r3, 810b122 <__swsetup_r+0x16>
 810b11c:	4628      	mov	r0, r5
 810b11e:	f7fe fa69 	bl	81095f4 <__sinit>
 810b122:	4b2e      	ldr	r3, [pc, #184]	; (810b1dc <__swsetup_r+0xd0>)
 810b124:	429c      	cmp	r4, r3
 810b126:	d10f      	bne.n	810b148 <__swsetup_r+0x3c>
 810b128:	686c      	ldr	r4, [r5, #4]
 810b12a:	89a3      	ldrh	r3, [r4, #12]
 810b12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b130:	0719      	lsls	r1, r3, #28
 810b132:	d42c      	bmi.n	810b18e <__swsetup_r+0x82>
 810b134:	06dd      	lsls	r5, r3, #27
 810b136:	d411      	bmi.n	810b15c <__swsetup_r+0x50>
 810b138:	2309      	movs	r3, #9
 810b13a:	6033      	str	r3, [r6, #0]
 810b13c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b140:	81a3      	strh	r3, [r4, #12]
 810b142:	f04f 30ff 	mov.w	r0, #4294967295
 810b146:	e03e      	b.n	810b1c6 <__swsetup_r+0xba>
 810b148:	4b25      	ldr	r3, [pc, #148]	; (810b1e0 <__swsetup_r+0xd4>)
 810b14a:	429c      	cmp	r4, r3
 810b14c:	d101      	bne.n	810b152 <__swsetup_r+0x46>
 810b14e:	68ac      	ldr	r4, [r5, #8]
 810b150:	e7eb      	b.n	810b12a <__swsetup_r+0x1e>
 810b152:	4b24      	ldr	r3, [pc, #144]	; (810b1e4 <__swsetup_r+0xd8>)
 810b154:	429c      	cmp	r4, r3
 810b156:	bf08      	it	eq
 810b158:	68ec      	ldreq	r4, [r5, #12]
 810b15a:	e7e6      	b.n	810b12a <__swsetup_r+0x1e>
 810b15c:	0758      	lsls	r0, r3, #29
 810b15e:	d512      	bpl.n	810b186 <__swsetup_r+0x7a>
 810b160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b162:	b141      	cbz	r1, 810b176 <__swsetup_r+0x6a>
 810b164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b168:	4299      	cmp	r1, r3
 810b16a:	d002      	beq.n	810b172 <__swsetup_r+0x66>
 810b16c:	4630      	mov	r0, r6
 810b16e:	f7ff fb55 	bl	810a81c <_free_r>
 810b172:	2300      	movs	r3, #0
 810b174:	6363      	str	r3, [r4, #52]	; 0x34
 810b176:	89a3      	ldrh	r3, [r4, #12]
 810b178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b17c:	81a3      	strh	r3, [r4, #12]
 810b17e:	2300      	movs	r3, #0
 810b180:	6063      	str	r3, [r4, #4]
 810b182:	6923      	ldr	r3, [r4, #16]
 810b184:	6023      	str	r3, [r4, #0]
 810b186:	89a3      	ldrh	r3, [r4, #12]
 810b188:	f043 0308 	orr.w	r3, r3, #8
 810b18c:	81a3      	strh	r3, [r4, #12]
 810b18e:	6923      	ldr	r3, [r4, #16]
 810b190:	b94b      	cbnz	r3, 810b1a6 <__swsetup_r+0x9a>
 810b192:	89a3      	ldrh	r3, [r4, #12]
 810b194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b19c:	d003      	beq.n	810b1a6 <__swsetup_r+0x9a>
 810b19e:	4621      	mov	r1, r4
 810b1a0:	4630      	mov	r0, r6
 810b1a2:	f000 f95b 	bl	810b45c <__smakebuf_r>
 810b1a6:	89a0      	ldrh	r0, [r4, #12]
 810b1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b1ac:	f010 0301 	ands.w	r3, r0, #1
 810b1b0:	d00a      	beq.n	810b1c8 <__swsetup_r+0xbc>
 810b1b2:	2300      	movs	r3, #0
 810b1b4:	60a3      	str	r3, [r4, #8]
 810b1b6:	6963      	ldr	r3, [r4, #20]
 810b1b8:	425b      	negs	r3, r3
 810b1ba:	61a3      	str	r3, [r4, #24]
 810b1bc:	6923      	ldr	r3, [r4, #16]
 810b1be:	b943      	cbnz	r3, 810b1d2 <__swsetup_r+0xc6>
 810b1c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b1c4:	d1ba      	bne.n	810b13c <__swsetup_r+0x30>
 810b1c6:	bd70      	pop	{r4, r5, r6, pc}
 810b1c8:	0781      	lsls	r1, r0, #30
 810b1ca:	bf58      	it	pl
 810b1cc:	6963      	ldrpl	r3, [r4, #20]
 810b1ce:	60a3      	str	r3, [r4, #8]
 810b1d0:	e7f4      	b.n	810b1bc <__swsetup_r+0xb0>
 810b1d2:	2000      	movs	r0, #0
 810b1d4:	e7f7      	b.n	810b1c6 <__swsetup_r+0xba>
 810b1d6:	bf00      	nop
 810b1d8:	10000028 	.word	0x10000028
 810b1dc:	0810b93c 	.word	0x0810b93c
 810b1e0:	0810b95c 	.word	0x0810b95c
 810b1e4:	0810b91c 	.word	0x0810b91c

0810b1e8 <__assert_func>:
 810b1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b1ea:	4614      	mov	r4, r2
 810b1ec:	461a      	mov	r2, r3
 810b1ee:	4b09      	ldr	r3, [pc, #36]	; (810b214 <__assert_func+0x2c>)
 810b1f0:	681b      	ldr	r3, [r3, #0]
 810b1f2:	4605      	mov	r5, r0
 810b1f4:	68d8      	ldr	r0, [r3, #12]
 810b1f6:	b14c      	cbz	r4, 810b20c <__assert_func+0x24>
 810b1f8:	4b07      	ldr	r3, [pc, #28]	; (810b218 <__assert_func+0x30>)
 810b1fa:	9100      	str	r1, [sp, #0]
 810b1fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810b200:	4906      	ldr	r1, [pc, #24]	; (810b21c <__assert_func+0x34>)
 810b202:	462b      	mov	r3, r5
 810b204:	f000 f8e0 	bl	810b3c8 <fiprintf>
 810b208:	f000 f9d0 	bl	810b5ac <abort>
 810b20c:	4b04      	ldr	r3, [pc, #16]	; (810b220 <__assert_func+0x38>)
 810b20e:	461c      	mov	r4, r3
 810b210:	e7f3      	b.n	810b1fa <__assert_func+0x12>
 810b212:	bf00      	nop
 810b214:	10000028 	.word	0x10000028
 810b218:	0810bb65 	.word	0x0810bb65
 810b21c:	0810bb72 	.word	0x0810bb72
 810b220:	0810bba0 	.word	0x0810bba0

0810b224 <_close_r>:
 810b224:	b538      	push	{r3, r4, r5, lr}
 810b226:	4d06      	ldr	r5, [pc, #24]	; (810b240 <_close_r+0x1c>)
 810b228:	2300      	movs	r3, #0
 810b22a:	4604      	mov	r4, r0
 810b22c:	4608      	mov	r0, r1
 810b22e:	602b      	str	r3, [r5, #0]
 810b230:	f7f6 fe7b 	bl	8101f2a <_close>
 810b234:	1c43      	adds	r3, r0, #1
 810b236:	d102      	bne.n	810b23e <_close_r+0x1a>
 810b238:	682b      	ldr	r3, [r5, #0]
 810b23a:	b103      	cbz	r3, 810b23e <_close_r+0x1a>
 810b23c:	6023      	str	r3, [r4, #0]
 810b23e:	bd38      	pop	{r3, r4, r5, pc}
 810b240:	100003fc 	.word	0x100003fc

0810b244 <__sflush_r>:
 810b244:	898a      	ldrh	r2, [r1, #12]
 810b246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b24a:	4605      	mov	r5, r0
 810b24c:	0710      	lsls	r0, r2, #28
 810b24e:	460c      	mov	r4, r1
 810b250:	d458      	bmi.n	810b304 <__sflush_r+0xc0>
 810b252:	684b      	ldr	r3, [r1, #4]
 810b254:	2b00      	cmp	r3, #0
 810b256:	dc05      	bgt.n	810b264 <__sflush_r+0x20>
 810b258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810b25a:	2b00      	cmp	r3, #0
 810b25c:	dc02      	bgt.n	810b264 <__sflush_r+0x20>
 810b25e:	2000      	movs	r0, #0
 810b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810b266:	2e00      	cmp	r6, #0
 810b268:	d0f9      	beq.n	810b25e <__sflush_r+0x1a>
 810b26a:	2300      	movs	r3, #0
 810b26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810b270:	682f      	ldr	r7, [r5, #0]
 810b272:	602b      	str	r3, [r5, #0]
 810b274:	d032      	beq.n	810b2dc <__sflush_r+0x98>
 810b276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810b278:	89a3      	ldrh	r3, [r4, #12]
 810b27a:	075a      	lsls	r2, r3, #29
 810b27c:	d505      	bpl.n	810b28a <__sflush_r+0x46>
 810b27e:	6863      	ldr	r3, [r4, #4]
 810b280:	1ac0      	subs	r0, r0, r3
 810b282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810b284:	b10b      	cbz	r3, 810b28a <__sflush_r+0x46>
 810b286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810b288:	1ac0      	subs	r0, r0, r3
 810b28a:	2300      	movs	r3, #0
 810b28c:	4602      	mov	r2, r0
 810b28e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810b290:	6a21      	ldr	r1, [r4, #32]
 810b292:	4628      	mov	r0, r5
 810b294:	47b0      	blx	r6
 810b296:	1c43      	adds	r3, r0, #1
 810b298:	89a3      	ldrh	r3, [r4, #12]
 810b29a:	d106      	bne.n	810b2aa <__sflush_r+0x66>
 810b29c:	6829      	ldr	r1, [r5, #0]
 810b29e:	291d      	cmp	r1, #29
 810b2a0:	d82c      	bhi.n	810b2fc <__sflush_r+0xb8>
 810b2a2:	4a2a      	ldr	r2, [pc, #168]	; (810b34c <__sflush_r+0x108>)
 810b2a4:	40ca      	lsrs	r2, r1
 810b2a6:	07d6      	lsls	r6, r2, #31
 810b2a8:	d528      	bpl.n	810b2fc <__sflush_r+0xb8>
 810b2aa:	2200      	movs	r2, #0
 810b2ac:	6062      	str	r2, [r4, #4]
 810b2ae:	04d9      	lsls	r1, r3, #19
 810b2b0:	6922      	ldr	r2, [r4, #16]
 810b2b2:	6022      	str	r2, [r4, #0]
 810b2b4:	d504      	bpl.n	810b2c0 <__sflush_r+0x7c>
 810b2b6:	1c42      	adds	r2, r0, #1
 810b2b8:	d101      	bne.n	810b2be <__sflush_r+0x7a>
 810b2ba:	682b      	ldr	r3, [r5, #0]
 810b2bc:	b903      	cbnz	r3, 810b2c0 <__sflush_r+0x7c>
 810b2be:	6560      	str	r0, [r4, #84]	; 0x54
 810b2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b2c2:	602f      	str	r7, [r5, #0]
 810b2c4:	2900      	cmp	r1, #0
 810b2c6:	d0ca      	beq.n	810b25e <__sflush_r+0x1a>
 810b2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b2cc:	4299      	cmp	r1, r3
 810b2ce:	d002      	beq.n	810b2d6 <__sflush_r+0x92>
 810b2d0:	4628      	mov	r0, r5
 810b2d2:	f7ff faa3 	bl	810a81c <_free_r>
 810b2d6:	2000      	movs	r0, #0
 810b2d8:	6360      	str	r0, [r4, #52]	; 0x34
 810b2da:	e7c1      	b.n	810b260 <__sflush_r+0x1c>
 810b2dc:	6a21      	ldr	r1, [r4, #32]
 810b2de:	2301      	movs	r3, #1
 810b2e0:	4628      	mov	r0, r5
 810b2e2:	47b0      	blx	r6
 810b2e4:	1c41      	adds	r1, r0, #1
 810b2e6:	d1c7      	bne.n	810b278 <__sflush_r+0x34>
 810b2e8:	682b      	ldr	r3, [r5, #0]
 810b2ea:	2b00      	cmp	r3, #0
 810b2ec:	d0c4      	beq.n	810b278 <__sflush_r+0x34>
 810b2ee:	2b1d      	cmp	r3, #29
 810b2f0:	d001      	beq.n	810b2f6 <__sflush_r+0xb2>
 810b2f2:	2b16      	cmp	r3, #22
 810b2f4:	d101      	bne.n	810b2fa <__sflush_r+0xb6>
 810b2f6:	602f      	str	r7, [r5, #0]
 810b2f8:	e7b1      	b.n	810b25e <__sflush_r+0x1a>
 810b2fa:	89a3      	ldrh	r3, [r4, #12]
 810b2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b300:	81a3      	strh	r3, [r4, #12]
 810b302:	e7ad      	b.n	810b260 <__sflush_r+0x1c>
 810b304:	690f      	ldr	r7, [r1, #16]
 810b306:	2f00      	cmp	r7, #0
 810b308:	d0a9      	beq.n	810b25e <__sflush_r+0x1a>
 810b30a:	0793      	lsls	r3, r2, #30
 810b30c:	680e      	ldr	r6, [r1, #0]
 810b30e:	bf08      	it	eq
 810b310:	694b      	ldreq	r3, [r1, #20]
 810b312:	600f      	str	r7, [r1, #0]
 810b314:	bf18      	it	ne
 810b316:	2300      	movne	r3, #0
 810b318:	eba6 0807 	sub.w	r8, r6, r7
 810b31c:	608b      	str	r3, [r1, #8]
 810b31e:	f1b8 0f00 	cmp.w	r8, #0
 810b322:	dd9c      	ble.n	810b25e <__sflush_r+0x1a>
 810b324:	6a21      	ldr	r1, [r4, #32]
 810b326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810b328:	4643      	mov	r3, r8
 810b32a:	463a      	mov	r2, r7
 810b32c:	4628      	mov	r0, r5
 810b32e:	47b0      	blx	r6
 810b330:	2800      	cmp	r0, #0
 810b332:	dc06      	bgt.n	810b342 <__sflush_r+0xfe>
 810b334:	89a3      	ldrh	r3, [r4, #12]
 810b336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b33a:	81a3      	strh	r3, [r4, #12]
 810b33c:	f04f 30ff 	mov.w	r0, #4294967295
 810b340:	e78e      	b.n	810b260 <__sflush_r+0x1c>
 810b342:	4407      	add	r7, r0
 810b344:	eba8 0800 	sub.w	r8, r8, r0
 810b348:	e7e9      	b.n	810b31e <__sflush_r+0xda>
 810b34a:	bf00      	nop
 810b34c:	20400001 	.word	0x20400001

0810b350 <_fflush_r>:
 810b350:	b538      	push	{r3, r4, r5, lr}
 810b352:	690b      	ldr	r3, [r1, #16]
 810b354:	4605      	mov	r5, r0
 810b356:	460c      	mov	r4, r1
 810b358:	b913      	cbnz	r3, 810b360 <_fflush_r+0x10>
 810b35a:	2500      	movs	r5, #0
 810b35c:	4628      	mov	r0, r5
 810b35e:	bd38      	pop	{r3, r4, r5, pc}
 810b360:	b118      	cbz	r0, 810b36a <_fflush_r+0x1a>
 810b362:	6983      	ldr	r3, [r0, #24]
 810b364:	b90b      	cbnz	r3, 810b36a <_fflush_r+0x1a>
 810b366:	f7fe f945 	bl	81095f4 <__sinit>
 810b36a:	4b14      	ldr	r3, [pc, #80]	; (810b3bc <_fflush_r+0x6c>)
 810b36c:	429c      	cmp	r4, r3
 810b36e:	d11b      	bne.n	810b3a8 <_fflush_r+0x58>
 810b370:	686c      	ldr	r4, [r5, #4]
 810b372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b376:	2b00      	cmp	r3, #0
 810b378:	d0ef      	beq.n	810b35a <_fflush_r+0xa>
 810b37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810b37c:	07d0      	lsls	r0, r2, #31
 810b37e:	d404      	bmi.n	810b38a <_fflush_r+0x3a>
 810b380:	0599      	lsls	r1, r3, #22
 810b382:	d402      	bmi.n	810b38a <_fflush_r+0x3a>
 810b384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b386:	f7fe fd46 	bl	8109e16 <__retarget_lock_acquire_recursive>
 810b38a:	4628      	mov	r0, r5
 810b38c:	4621      	mov	r1, r4
 810b38e:	f7ff ff59 	bl	810b244 <__sflush_r>
 810b392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b394:	07da      	lsls	r2, r3, #31
 810b396:	4605      	mov	r5, r0
 810b398:	d4e0      	bmi.n	810b35c <_fflush_r+0xc>
 810b39a:	89a3      	ldrh	r3, [r4, #12]
 810b39c:	059b      	lsls	r3, r3, #22
 810b39e:	d4dd      	bmi.n	810b35c <_fflush_r+0xc>
 810b3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b3a2:	f7fe fd39 	bl	8109e18 <__retarget_lock_release_recursive>
 810b3a6:	e7d9      	b.n	810b35c <_fflush_r+0xc>
 810b3a8:	4b05      	ldr	r3, [pc, #20]	; (810b3c0 <_fflush_r+0x70>)
 810b3aa:	429c      	cmp	r4, r3
 810b3ac:	d101      	bne.n	810b3b2 <_fflush_r+0x62>
 810b3ae:	68ac      	ldr	r4, [r5, #8]
 810b3b0:	e7df      	b.n	810b372 <_fflush_r+0x22>
 810b3b2:	4b04      	ldr	r3, [pc, #16]	; (810b3c4 <_fflush_r+0x74>)
 810b3b4:	429c      	cmp	r4, r3
 810b3b6:	bf08      	it	eq
 810b3b8:	68ec      	ldreq	r4, [r5, #12]
 810b3ba:	e7da      	b.n	810b372 <_fflush_r+0x22>
 810b3bc:	0810b93c 	.word	0x0810b93c
 810b3c0:	0810b95c 	.word	0x0810b95c
 810b3c4:	0810b91c 	.word	0x0810b91c

0810b3c8 <fiprintf>:
 810b3c8:	b40e      	push	{r1, r2, r3}
 810b3ca:	b503      	push	{r0, r1, lr}
 810b3cc:	4601      	mov	r1, r0
 810b3ce:	ab03      	add	r3, sp, #12
 810b3d0:	4805      	ldr	r0, [pc, #20]	; (810b3e8 <fiprintf+0x20>)
 810b3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 810b3d6:	6800      	ldr	r0, [r0, #0]
 810b3d8:	9301      	str	r3, [sp, #4]
 810b3da:	f7ff fc85 	bl	810ace8 <_vfiprintf_r>
 810b3de:	b002      	add	sp, #8
 810b3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 810b3e4:	b003      	add	sp, #12
 810b3e6:	4770      	bx	lr
 810b3e8:	10000028 	.word	0x10000028

0810b3ec <_lseek_r>:
 810b3ec:	b538      	push	{r3, r4, r5, lr}
 810b3ee:	4d07      	ldr	r5, [pc, #28]	; (810b40c <_lseek_r+0x20>)
 810b3f0:	4604      	mov	r4, r0
 810b3f2:	4608      	mov	r0, r1
 810b3f4:	4611      	mov	r1, r2
 810b3f6:	2200      	movs	r2, #0
 810b3f8:	602a      	str	r2, [r5, #0]
 810b3fa:	461a      	mov	r2, r3
 810b3fc:	f7f6 fdbc 	bl	8101f78 <_lseek>
 810b400:	1c43      	adds	r3, r0, #1
 810b402:	d102      	bne.n	810b40a <_lseek_r+0x1e>
 810b404:	682b      	ldr	r3, [r5, #0]
 810b406:	b103      	cbz	r3, 810b40a <_lseek_r+0x1e>
 810b408:	6023      	str	r3, [r4, #0]
 810b40a:	bd38      	pop	{r3, r4, r5, pc}
 810b40c:	100003fc 	.word	0x100003fc

0810b410 <__swhatbuf_r>:
 810b410:	b570      	push	{r4, r5, r6, lr}
 810b412:	460e      	mov	r6, r1
 810b414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b418:	2900      	cmp	r1, #0
 810b41a:	b096      	sub	sp, #88	; 0x58
 810b41c:	4614      	mov	r4, r2
 810b41e:	461d      	mov	r5, r3
 810b420:	da08      	bge.n	810b434 <__swhatbuf_r+0x24>
 810b422:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810b426:	2200      	movs	r2, #0
 810b428:	602a      	str	r2, [r5, #0]
 810b42a:	061a      	lsls	r2, r3, #24
 810b42c:	d410      	bmi.n	810b450 <__swhatbuf_r+0x40>
 810b42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810b432:	e00e      	b.n	810b452 <__swhatbuf_r+0x42>
 810b434:	466a      	mov	r2, sp
 810b436:	f000 f8c1 	bl	810b5bc <_fstat_r>
 810b43a:	2800      	cmp	r0, #0
 810b43c:	dbf1      	blt.n	810b422 <__swhatbuf_r+0x12>
 810b43e:	9a01      	ldr	r2, [sp, #4]
 810b440:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810b444:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810b448:	425a      	negs	r2, r3
 810b44a:	415a      	adcs	r2, r3
 810b44c:	602a      	str	r2, [r5, #0]
 810b44e:	e7ee      	b.n	810b42e <__swhatbuf_r+0x1e>
 810b450:	2340      	movs	r3, #64	; 0x40
 810b452:	2000      	movs	r0, #0
 810b454:	6023      	str	r3, [r4, #0]
 810b456:	b016      	add	sp, #88	; 0x58
 810b458:	bd70      	pop	{r4, r5, r6, pc}
	...

0810b45c <__smakebuf_r>:
 810b45c:	898b      	ldrh	r3, [r1, #12]
 810b45e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b460:	079d      	lsls	r5, r3, #30
 810b462:	4606      	mov	r6, r0
 810b464:	460c      	mov	r4, r1
 810b466:	d507      	bpl.n	810b478 <__smakebuf_r+0x1c>
 810b468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810b46c:	6023      	str	r3, [r4, #0]
 810b46e:	6123      	str	r3, [r4, #16]
 810b470:	2301      	movs	r3, #1
 810b472:	6163      	str	r3, [r4, #20]
 810b474:	b002      	add	sp, #8
 810b476:	bd70      	pop	{r4, r5, r6, pc}
 810b478:	ab01      	add	r3, sp, #4
 810b47a:	466a      	mov	r2, sp
 810b47c:	f7ff ffc8 	bl	810b410 <__swhatbuf_r>
 810b480:	9900      	ldr	r1, [sp, #0]
 810b482:	4605      	mov	r5, r0
 810b484:	4630      	mov	r0, r6
 810b486:	f7ff fa35 	bl	810a8f4 <_malloc_r>
 810b48a:	b948      	cbnz	r0, 810b4a0 <__smakebuf_r+0x44>
 810b48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b490:	059a      	lsls	r2, r3, #22
 810b492:	d4ef      	bmi.n	810b474 <__smakebuf_r+0x18>
 810b494:	f023 0303 	bic.w	r3, r3, #3
 810b498:	f043 0302 	orr.w	r3, r3, #2
 810b49c:	81a3      	strh	r3, [r4, #12]
 810b49e:	e7e3      	b.n	810b468 <__smakebuf_r+0xc>
 810b4a0:	4b0d      	ldr	r3, [pc, #52]	; (810b4d8 <__smakebuf_r+0x7c>)
 810b4a2:	62b3      	str	r3, [r6, #40]	; 0x28
 810b4a4:	89a3      	ldrh	r3, [r4, #12]
 810b4a6:	6020      	str	r0, [r4, #0]
 810b4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b4ac:	81a3      	strh	r3, [r4, #12]
 810b4ae:	9b00      	ldr	r3, [sp, #0]
 810b4b0:	6163      	str	r3, [r4, #20]
 810b4b2:	9b01      	ldr	r3, [sp, #4]
 810b4b4:	6120      	str	r0, [r4, #16]
 810b4b6:	b15b      	cbz	r3, 810b4d0 <__smakebuf_r+0x74>
 810b4b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b4bc:	4630      	mov	r0, r6
 810b4be:	f000 f88f 	bl	810b5e0 <_isatty_r>
 810b4c2:	b128      	cbz	r0, 810b4d0 <__smakebuf_r+0x74>
 810b4c4:	89a3      	ldrh	r3, [r4, #12]
 810b4c6:	f023 0303 	bic.w	r3, r3, #3
 810b4ca:	f043 0301 	orr.w	r3, r3, #1
 810b4ce:	81a3      	strh	r3, [r4, #12]
 810b4d0:	89a0      	ldrh	r0, [r4, #12]
 810b4d2:	4305      	orrs	r5, r0
 810b4d4:	81a5      	strh	r5, [r4, #12]
 810b4d6:	e7cd      	b.n	810b474 <__smakebuf_r+0x18>
 810b4d8:	0810958d 	.word	0x0810958d

0810b4dc <memmove>:
 810b4dc:	4288      	cmp	r0, r1
 810b4de:	b510      	push	{r4, lr}
 810b4e0:	eb01 0402 	add.w	r4, r1, r2
 810b4e4:	d902      	bls.n	810b4ec <memmove+0x10>
 810b4e6:	4284      	cmp	r4, r0
 810b4e8:	4623      	mov	r3, r4
 810b4ea:	d807      	bhi.n	810b4fc <memmove+0x20>
 810b4ec:	1e43      	subs	r3, r0, #1
 810b4ee:	42a1      	cmp	r1, r4
 810b4f0:	d008      	beq.n	810b504 <memmove+0x28>
 810b4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b4f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810b4fa:	e7f8      	b.n	810b4ee <memmove+0x12>
 810b4fc:	4402      	add	r2, r0
 810b4fe:	4601      	mov	r1, r0
 810b500:	428a      	cmp	r2, r1
 810b502:	d100      	bne.n	810b506 <memmove+0x2a>
 810b504:	bd10      	pop	{r4, pc}
 810b506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810b50a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810b50e:	e7f7      	b.n	810b500 <memmove+0x24>

0810b510 <__malloc_lock>:
 810b510:	4801      	ldr	r0, [pc, #4]	; (810b518 <__malloc_lock+0x8>)
 810b512:	f7fe bc80 	b.w	8109e16 <__retarget_lock_acquire_recursive>
 810b516:	bf00      	nop
 810b518:	100003f0 	.word	0x100003f0

0810b51c <__malloc_unlock>:
 810b51c:	4801      	ldr	r0, [pc, #4]	; (810b524 <__malloc_unlock+0x8>)
 810b51e:	f7fe bc7b 	b.w	8109e18 <__retarget_lock_release_recursive>
 810b522:	bf00      	nop
 810b524:	100003f0 	.word	0x100003f0

0810b528 <_realloc_r>:
 810b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b52c:	4680      	mov	r8, r0
 810b52e:	4614      	mov	r4, r2
 810b530:	460e      	mov	r6, r1
 810b532:	b921      	cbnz	r1, 810b53e <_realloc_r+0x16>
 810b534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b538:	4611      	mov	r1, r2
 810b53a:	f7ff b9db 	b.w	810a8f4 <_malloc_r>
 810b53e:	b92a      	cbnz	r2, 810b54c <_realloc_r+0x24>
 810b540:	f7ff f96c 	bl	810a81c <_free_r>
 810b544:	4625      	mov	r5, r4
 810b546:	4628      	mov	r0, r5
 810b548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b54c:	f000 f858 	bl	810b600 <_malloc_usable_size_r>
 810b550:	4284      	cmp	r4, r0
 810b552:	4607      	mov	r7, r0
 810b554:	d802      	bhi.n	810b55c <_realloc_r+0x34>
 810b556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810b55a:	d812      	bhi.n	810b582 <_realloc_r+0x5a>
 810b55c:	4621      	mov	r1, r4
 810b55e:	4640      	mov	r0, r8
 810b560:	f7ff f9c8 	bl	810a8f4 <_malloc_r>
 810b564:	4605      	mov	r5, r0
 810b566:	2800      	cmp	r0, #0
 810b568:	d0ed      	beq.n	810b546 <_realloc_r+0x1e>
 810b56a:	42bc      	cmp	r4, r7
 810b56c:	4622      	mov	r2, r4
 810b56e:	4631      	mov	r1, r6
 810b570:	bf28      	it	cs
 810b572:	463a      	movcs	r2, r7
 810b574:	f7fe fc6c 	bl	8109e50 <memcpy>
 810b578:	4631      	mov	r1, r6
 810b57a:	4640      	mov	r0, r8
 810b57c:	f7ff f94e 	bl	810a81c <_free_r>
 810b580:	e7e1      	b.n	810b546 <_realloc_r+0x1e>
 810b582:	4635      	mov	r5, r6
 810b584:	e7df      	b.n	810b546 <_realloc_r+0x1e>
	...

0810b588 <_read_r>:
 810b588:	b538      	push	{r3, r4, r5, lr}
 810b58a:	4d07      	ldr	r5, [pc, #28]	; (810b5a8 <_read_r+0x20>)
 810b58c:	4604      	mov	r4, r0
 810b58e:	4608      	mov	r0, r1
 810b590:	4611      	mov	r1, r2
 810b592:	2200      	movs	r2, #0
 810b594:	602a      	str	r2, [r5, #0]
 810b596:	461a      	mov	r2, r3
 810b598:	f7f6 fc8c 	bl	8101eb4 <_read>
 810b59c:	1c43      	adds	r3, r0, #1
 810b59e:	d102      	bne.n	810b5a6 <_read_r+0x1e>
 810b5a0:	682b      	ldr	r3, [r5, #0]
 810b5a2:	b103      	cbz	r3, 810b5a6 <_read_r+0x1e>
 810b5a4:	6023      	str	r3, [r4, #0]
 810b5a6:	bd38      	pop	{r3, r4, r5, pc}
 810b5a8:	100003fc 	.word	0x100003fc

0810b5ac <abort>:
 810b5ac:	b508      	push	{r3, lr}
 810b5ae:	2006      	movs	r0, #6
 810b5b0:	f000 f856 	bl	810b660 <raise>
 810b5b4:	2001      	movs	r0, #1
 810b5b6:	f7f6 fc73 	bl	8101ea0 <_exit>
	...

0810b5bc <_fstat_r>:
 810b5bc:	b538      	push	{r3, r4, r5, lr}
 810b5be:	4d07      	ldr	r5, [pc, #28]	; (810b5dc <_fstat_r+0x20>)
 810b5c0:	2300      	movs	r3, #0
 810b5c2:	4604      	mov	r4, r0
 810b5c4:	4608      	mov	r0, r1
 810b5c6:	4611      	mov	r1, r2
 810b5c8:	602b      	str	r3, [r5, #0]
 810b5ca:	f7f6 fcba 	bl	8101f42 <_fstat>
 810b5ce:	1c43      	adds	r3, r0, #1
 810b5d0:	d102      	bne.n	810b5d8 <_fstat_r+0x1c>
 810b5d2:	682b      	ldr	r3, [r5, #0]
 810b5d4:	b103      	cbz	r3, 810b5d8 <_fstat_r+0x1c>
 810b5d6:	6023      	str	r3, [r4, #0]
 810b5d8:	bd38      	pop	{r3, r4, r5, pc}
 810b5da:	bf00      	nop
 810b5dc:	100003fc 	.word	0x100003fc

0810b5e0 <_isatty_r>:
 810b5e0:	b538      	push	{r3, r4, r5, lr}
 810b5e2:	4d06      	ldr	r5, [pc, #24]	; (810b5fc <_isatty_r+0x1c>)
 810b5e4:	2300      	movs	r3, #0
 810b5e6:	4604      	mov	r4, r0
 810b5e8:	4608      	mov	r0, r1
 810b5ea:	602b      	str	r3, [r5, #0]
 810b5ec:	f7f6 fcb9 	bl	8101f62 <_isatty>
 810b5f0:	1c43      	adds	r3, r0, #1
 810b5f2:	d102      	bne.n	810b5fa <_isatty_r+0x1a>
 810b5f4:	682b      	ldr	r3, [r5, #0]
 810b5f6:	b103      	cbz	r3, 810b5fa <_isatty_r+0x1a>
 810b5f8:	6023      	str	r3, [r4, #0]
 810b5fa:	bd38      	pop	{r3, r4, r5, pc}
 810b5fc:	100003fc 	.word	0x100003fc

0810b600 <_malloc_usable_size_r>:
 810b600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b604:	1f18      	subs	r0, r3, #4
 810b606:	2b00      	cmp	r3, #0
 810b608:	bfbc      	itt	lt
 810b60a:	580b      	ldrlt	r3, [r1, r0]
 810b60c:	18c0      	addlt	r0, r0, r3
 810b60e:	4770      	bx	lr

0810b610 <_raise_r>:
 810b610:	291f      	cmp	r1, #31
 810b612:	b538      	push	{r3, r4, r5, lr}
 810b614:	4604      	mov	r4, r0
 810b616:	460d      	mov	r5, r1
 810b618:	d904      	bls.n	810b624 <_raise_r+0x14>
 810b61a:	2316      	movs	r3, #22
 810b61c:	6003      	str	r3, [r0, #0]
 810b61e:	f04f 30ff 	mov.w	r0, #4294967295
 810b622:	bd38      	pop	{r3, r4, r5, pc}
 810b624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b626:	b112      	cbz	r2, 810b62e <_raise_r+0x1e>
 810b628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b62c:	b94b      	cbnz	r3, 810b642 <_raise_r+0x32>
 810b62e:	4620      	mov	r0, r4
 810b630:	f000 f830 	bl	810b694 <_getpid_r>
 810b634:	462a      	mov	r2, r5
 810b636:	4601      	mov	r1, r0
 810b638:	4620      	mov	r0, r4
 810b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b63e:	f000 b817 	b.w	810b670 <_kill_r>
 810b642:	2b01      	cmp	r3, #1
 810b644:	d00a      	beq.n	810b65c <_raise_r+0x4c>
 810b646:	1c59      	adds	r1, r3, #1
 810b648:	d103      	bne.n	810b652 <_raise_r+0x42>
 810b64a:	2316      	movs	r3, #22
 810b64c:	6003      	str	r3, [r0, #0]
 810b64e:	2001      	movs	r0, #1
 810b650:	e7e7      	b.n	810b622 <_raise_r+0x12>
 810b652:	2400      	movs	r4, #0
 810b654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b658:	4628      	mov	r0, r5
 810b65a:	4798      	blx	r3
 810b65c:	2000      	movs	r0, #0
 810b65e:	e7e0      	b.n	810b622 <_raise_r+0x12>

0810b660 <raise>:
 810b660:	4b02      	ldr	r3, [pc, #8]	; (810b66c <raise+0xc>)
 810b662:	4601      	mov	r1, r0
 810b664:	6818      	ldr	r0, [r3, #0]
 810b666:	f7ff bfd3 	b.w	810b610 <_raise_r>
 810b66a:	bf00      	nop
 810b66c:	10000028 	.word	0x10000028

0810b670 <_kill_r>:
 810b670:	b538      	push	{r3, r4, r5, lr}
 810b672:	4d07      	ldr	r5, [pc, #28]	; (810b690 <_kill_r+0x20>)
 810b674:	2300      	movs	r3, #0
 810b676:	4604      	mov	r4, r0
 810b678:	4608      	mov	r0, r1
 810b67a:	4611      	mov	r1, r2
 810b67c:	602b      	str	r3, [r5, #0]
 810b67e:	f7f6 fbff 	bl	8101e80 <_kill>
 810b682:	1c43      	adds	r3, r0, #1
 810b684:	d102      	bne.n	810b68c <_kill_r+0x1c>
 810b686:	682b      	ldr	r3, [r5, #0]
 810b688:	b103      	cbz	r3, 810b68c <_kill_r+0x1c>
 810b68a:	6023      	str	r3, [r4, #0]
 810b68c:	bd38      	pop	{r3, r4, r5, pc}
 810b68e:	bf00      	nop
 810b690:	100003fc 	.word	0x100003fc

0810b694 <_getpid_r>:
 810b694:	f7f6 bbec 	b.w	8101e70 <_getpid>

0810b698 <_init>:
 810b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b69a:	bf00      	nop
 810b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b69e:	bc08      	pop	{r3}
 810b6a0:	469e      	mov	lr, r3
 810b6a2:	4770      	bx	lr

0810b6a4 <_fini>:
 810b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b6a6:	bf00      	nop
 810b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b6aa:	bc08      	pop	{r3}
 810b6ac:	469e      	mov	lr, r3
 810b6ae:	4770      	bx	lr
